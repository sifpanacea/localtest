<?php
if (! defined ( 'BASEPATH' ))
	exit ( 'No direct script access allowed' );
class Healthsupervisor_app_model extends CI_Model {

	function __construct() {
		parent::__construct ();
		
		$this->load->config ( 'ion_auth', TRUE );
		$this->load->config ( 'mongodb', TRUE );
		
		// Initialize MongoDB collection names
		$this->collections = $this->config->item ( 'collections', 'ion_auth' );
		$this->_configvalue = $this->config->item ( 'default' );
		$this->common_db = $this->config->item ( 'default' );
		
		$this->store_salt = $this->config->item ( 'store_salt', 'ion_auth' );
		$this->salt_length = $this->config->item ( 'salt_length', 'ion_auth' );
		
		// Initialize hash method directives (Bcrypt) 
		$this->hash_method = $this->config->item ( 'hash_method', 'ion_auth' );

		$this->absent_app_col = "healthcare201651317373988";
		$this->sanitation_app_col_v2 = "healthcare2016111212310531_version_2";

		$this->screening_app_col = "Medical_Evalution_Syn_collection";
		
		// $this->common_db = $this->config->item('default');
		$this->screening_app_col_sw = "healthcare2016226112942701";
		$this->screening_app_col_tm = "healthcare201672020159570";
		$this->screening_app_col_tt = "healthcare201671115519757";
		$this->screening_app_col_bc = "healthcare201812217594045";

		// For 2020-2021 academic year collections
		$this->screening_app_col_sw_2020_2021 = "tswreis_screening_report_col_2020-2021";
		$this->screening_app_col_tt_2020_2021 = "ttwreis_screening_report_col_2020-2021";
		$this->screening_app_col_bc_2020_2021 = "bcwelfare_screening_report_col_2020-2021";

		// For 2021-2022 academic year collections
		$this->screening_app_col_sw_2021_2022 = "tswreis_screening_report_col_2021-2022";
		$this->screening_app_col_tt_2021_2022 = "ttwreis_screening_report_col_2021-2022";
		$this->screening_app_col_bc_2021_2022 = "bcwelfare_screening_report_col_2021-2022";

		$this->sanitaion_report_ts  = 'healthcare2016111212310531';
		$this->health_request_col_panacea_hs = 'healthcare2016531124515424_static_html';		
		$this->health_request_col_ttwreis_hs = 'healthcare2016108181933756_static_html';		
		$this->health_request_col_tmreis_hs = 'healthcare201610114435690_static_html';		
		$this->health_request_col_bcwelfare_hs = 'healthcare2018122191146894_static_html';

		//Old format requests

		$this->health_request_col_panacea_hs_old_format = 'healthcare2016531124515424';		
		$this->health_request_col_ttwreis_hs_old_format = 'healthcare2016108181933756';		
		$this->health_request_col_tmreis_hs_old_format = 'healthcare201610114435690';		
		$this->health_request_col_bcwelfare_hs_old_format = 'healthcare2018122191146894';

		// Field officer or rhso followups

		$this->fo_or_rhso_follwup = 'field_officer_report';

		$this->hb_app_col_sw = "himglobin_report_col";
		$this->hb_app_col_tt = "ttwreis_himglobin_report_col";
		$this->hb_app_col_tm = "tmreis_himglobin_report_col";
		$this->hb_app_col_bc = "bc_welfare_himglobin_report_col";

		$this->bmi_app_col_sw = "healthcare2017617145744625";
		$this->bmi_app_col_tt = "healthcare2017619153715384";
		$this->bmi_app_col_tm = "healthcare201761916814158";
		$this->bmi_app_col_bc = "healthcare2018213172422286";

		$this->health_request_col_panacea_hs_shadow = 'healthcare2016531124515424_static_html_shadow';
		$this->health_request_col_ttwreis_hs_shadow = 'healthcare2016108181933756_static_html_shadow';
		$this->health_request_col_tmreis_hs_shadow = 'healthcare201610114435690_static_html_shadow';
		$this->health_request_col_bcwelfare_hs_shadow = 'healthcare2018122191146894_static_html_shadow';

		// Power Of Ten 

		$this->poweroften_registration_col = 'poweroften_registrations';
		$this->poweroften_registration_col_shadow = 'poweroften_registrations_shadow';
		
		$this->today_date = date ( 'Y-m-d' );
	}

	/**
	 * Generates a random salt value.
	 */
	public function salt() {
		return substr ( md5 ( uniqid ( rand (), true ) ), 0, $this->salt_length );
	}

	/**
	 * Hashes the password to be stored in the database.
	 */
	public function hash_password($password, $salt = FALSE, $use_sha1_override = FALSE) {
		if (empty ( $password )) {
			return FALSE;
		}
		
		// Bcrypt
		if ($use_sha1_override === FALSE && $this->hash_method == 'bcrypt') {
			return $this->bcrypt->hash ( $password );
		}
		
		if ($this->store_salt && $salt) {
			return sha1 ( $password . $salt );
		} else {
			$salt = $this->salt ();
			return $salt . substr ( sha1 ( $salt . $password ), 0, - $this->salt_length );
		}
	}


	/*Power Of Ten Starts*/

	public function register_for_subscription($doc_data, $doc_properties, $history, $check_email, $check_mobile1, $passwords)
	{
		$this->load->config ( 'ion_auth', TRUE );

		if(!empty($check_email) && !empty($check_mobile1))
		{
			$check = $this->mongo_db->where(array('email'=>$check_email))->count($this->poweroften_registration_col);

			$check1 = $this->mongo_db->where(array('mobile_no'=>$check_mobile1))->count($this->poweroften_registration_col);

			if($check == 0 && $check1 == 0)
			{
				$details = array("doc_data"=>$doc_data, "doc_properties"=>$doc_properties, "history"=>$history);

				$query = $this->mongo_db->insert($this->poweroften_registration_col, $details);
				$query_shadow = $this->mongo_db->insert($this->poweroften_registration_col_shadow, $details);

				//for login details purpose
				$salt = $this->store_salt ? $this->salt () : FALSE;
				$password = $this->hash_password ( $passwords, $salt );

				
				$login_data = array(
						'username'=> $doc_data['name'],
						'phone_no'=> $check_mobile1,
						'email'=> trim($check_email),
						'password' => $password,
						'last_login'=>"",
						'doc_properties_id'=>$doc_properties['doc_id'],
						'active' => 1,
						"company" => "healthcare",
						'status' =>'offline',
						'registered_on'=>date('Y-m-d H:i:s'),
						'payment_status' => 0
					);

				
				$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
				$login_query = $this->mongo_db->insert ( 'power_of_ten_users', $login_data );

				$login_query_shadow = $this->mongo_db->insert ( 'power_of_ten_users_shadow', $login_data );
				$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

				if($query)
				{
					return TRUE;
				}else{
					return FALSE;
				}
			}
			else{
				return "user_already_exists";
			}
		}
		else
		{
			return "Email_mobile_empty";
		}
		
	}

	public function check_registration_status($email_id, $mobile, $doc_properties_id)
	{


		if(!empty($email_id) && !empty($mobile))
		{
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$query = $this->mongo_db->where(array('payment_status'=>1))->get('power_of_ten_users');

			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			
			if(!empty($query))
			{
				return "payment_success";
			}else{
				return "failure";
			}
		}
	}

	public function power_of_ten_payment_details($email_id, $mobile, $doc_properties_id, $data)
	{

		if(!empty($doc_properties_id))
		{
			/*
				here inserting success and failed details alos for refernce.
			*/

			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );

			$query = $this->mongo_db->select(array('payment_details'))->where(array('email'=>$email_id, 'phone_no'=>$mobile))->get( 'power_of_ten_users' );

			if(isset($query[0]['payment_details']))
			{
				$query = $this->mongo_db->where(array('email'=>$email_id, 'phone_no'=>$mobile, 'doc_properties_id'=>$doc_properties_id))->push(array('payment_details'=> $data))->update('power_of_ten_users');

				$query_shadow = $this->mongo_db->where(array('email'=>$email_id, 'phone_no'=>$mobile, 'doc_properties_id'=>$doc_properties_id))->push(array('payment_details'=> $data))->update('power_of_ten_users_shadow');
			}else{
				$payment_datas = array();
				array_push($payment_datas, $data);
				$query = $this->mongo_db->where(array('email'=>$email_id, 'phone_no'=>$mobile, 'doc_properties_id'=>$doc_properties_id))->set(array('payment_details'=>$payment_datas))->update( 'power_of_ten_users' );

				$query_shadow = $this->mongo_db->where(array('email'=>$email_id, 'phone_no'=>$mobile, 'doc_properties_id'=>$doc_properties_id))->set(array('payment_details'=>$payment_datas))->update( 'power_of_ten_users_shadow' );
			}
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

			/*
				This is for is status is success the registaion collection registraion status should be active.
				to userstand registered user payment done or not.
			*/
			if($data['payment_status'] == "success"){

				$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );

				$update = $this->mongo_db->where('doc_properties_id', $doc_properties_id)->set(array('payment_status'=>1))->update('power_of_ten_users');
				//update in shadow collection
				$update = $this->mongo_db->where('doc_properties_id', $doc_properties_id)->set(array('payment_status'=>1))->update('power_of_ten_users_shadow');

				$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
				
			}

			if($query){
				return "Data inserted";
			}else{
				return "Data not inserted";
			}
		}
	}

	public function change_user_password($email_id, $mobile, $change_password)
	{
		$this->load->config ( 'ion_auth', TRUE );

		$salt = $this->store_salt ? $this->salt () : FALSE;
		$password = $this->hash_password ( $change_password, $salt );

		if(!empty($email_id) && !empty($mobile))
		{
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$query = $this->mongo_db->where(array('email'=>$email_id, 'phone_no'=>$mobile))->set(array('password'=>$password))->update( 'power_of_ten_users' );
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

			if($query){
				return TRUE;
			}else{
				return FALSE;
			}
		}else
		{
			return "Email and phone No empty";
		}
	}

	public function send_request_to_command_center($email_id, $mobile, $doc_properties_id, $request_type, $request_description)
	{
		$data = array(
			'email_id'=>$email_id,
			'mobile' => $mobile,
			'doc_properties_id' => $doc_properties_id,
			'request_type' => $request_type,
			'request_description' => $request_description,
			'submitte_time' => date('Y-m-d H:i:s'),
			'answered_or_not' => 0
		);
		if(!empty($doc_properties_id)){
			$insert = $this->mongo_db->insert('power_of_ten_requests', $data);
			$insert_shadow = $this->mongo_db->insert('power_of_ten_requests_shadow', $data);

			if($insert){
				return "submitted_successfully";
			}else{
				return "not_submitted";
			}
		}else{
			return "doc_id_not_found";
		}
	}

	public function show_requests_send_to_cc($email_id, $mobile, $doc_properties_id)
	{
		if(!empty($doc_properties_id)){

			$query = $this->mongo_db->where('doc_properties_id', $doc_properties_id)->get('power_of_ten_requests');

			return $query;
		}
	}

	public function show_questions_send_to_cc($email_id, $mobile, $doc_properties_id)
	{
		if(!empty($doc_properties_id)){

			$query = $this->mongo_db->where('doc_properties_id', $doc_properties_id)->get('power_of_ten_questions');

			return $query;
		}
	}

	public function ask_questions_to_command_center($email_id, $mobile, $doc_properties_id, $question_type, $question_description)
	{
		$data = array(
			'email_id'=>$email_id,
			'mobile' => $mobile,
			'doc_properties_id' => $doc_properties_id,
			'request_type' => $question_type,
			'request_description' => $question_description,
			'submitte_time' => date('Y-m-d H:i:s'),
			'answered_or_not' => 0
		);
		if(!empty($doc_properties_id)){
			$insert = $this->mongo_db->insert('power_of_ten_questions', $data);
			$insert_shadow = $this->mongo_db->insert('power_of_ten_questions_shadow', $data);

			if($insert){
				return "submitted_successfully";
			}else{
				return "not_submitted";
			}
		}else{
			return "doc_id_not_found";
		}


	}

	public function emergency_button_calling($email_id, $mobile, $doc_properties_id, $calling_time, $reason_for_call, $audio, $latandlng, $current_district, $location_info)
	{
		$data = array(
			'email_id'=>$email_id,
			'mobile' => $mobile,
			'current_district' =>$current_district,
			'doc_properties_id' => $doc_properties_id,
			'reason_for_call' => $reason_for_call,
			'calling_time' => $calling_time,
			'location_coordinates' => $latandlng,
			'location_info' => $location_info,
			'reason_audio' => $audio,
			'submitted_time' => date('Y-m-d H:i:s'),
			'help_acceptance' => 0
		);
		if(!empty($doc_properties_id)){
			$insert = $this->mongo_db->insert('power_of_ten_emergency_calling', $data);
			$insert_shadow = $this->mongo_db->insert('power_of_ten_emergency_calling_shadow', $data);

			if($insert){
				return "submitted_successfully";
			}else{
				return "not_submitted";
			}
		}else{
			return "doc_id_not_found";
		}
	}

	public function news_feed_data_showing()
	{
		$query = $this->mongo_db->where('status', 1)->get('power_of_ten_news_feed');

		return $query;
	}

	public function get_list_for_district_level_verification($district, $fetch_count)
	{
		$and_merged_array = array();
		$dist_match = array("doc_data.district"=>$district, "doc_properties.district_level_verification"=>array('$exists'=>FALSE) );

		//array_push($and_merged_array, $scl_match);
		array_push($and_merged_array, $dist_match);

			$pipeline = [ 
						array (
								'$project' => array ( 
										"doc_data" => true,
										"doc_properties" => true
									   
								) 
						),
						array(
							'$match' => array(
								'$and' => $and_merged_array
							)
						),
						array (
								'$skip' => intval($fetch_count)
						),
						array(
							'$sort' => array('history.time' => -1)
						),
						array (
								'$limit' => 10
						)
						
				];
				$response = $this->mongo_db->command ( array (
						'aggregate' => $this->poweroften_registration_col,
						'pipeline' => $pipeline 
				) );

							
		return $response;
	}

	



	/* Power Of Ten Ends*/

	public function attendanceReportSubmitFromDeviceModel($doc_data, $doc_properties, $history,$user_type)
		{
			if($user_type == "PANACEA_HS" || preg_match("/TSWREIS/i", $user_type)){

				$app_properties = array(
			"app_name" => "Attendance app",
			"app_id"   => "healthcare201651317373988"
			);

			$final_values = array("doc_data"=>array("widget_data"=>$doc_data),"doc_properties"=>$doc_properties, "app_properties"=>$app_properties, "history"=>$history);
			$query = $this->mongo_db->insert('healthcare201651317373988',$final_values);

	        }else if($user_type == "TTWREIS_HS" || preg_match("/TTWREIS/i", $user_type))
	        {
	        	$app_properties = array(
			"app_name" => "Attendance app",
			"app_id"   => "healthcare20161015173311279"
			);

			$final_values = array("doc_data"=>array("widget_data"=>$doc_data),"doc_properties"=>$doc_properties, "app_properties"=>$app_properties, "history"=>$history);
			$query = $this->mongo_db->insert('healthcare20161015173311279',$final_values);
	        }else if($user_type == "TMREIS_HS" || preg_match("/TMREIS/i", $user_type))
	        {
	            $app_properties = array(
			"app_name" => "Attendance app",
			"app_id"   => "healthcare2017120192713965"
			);

			$final_values = array("doc_data"=>array("widget_data"=>$doc_data),"doc_properties"=>$doc_properties, "app_properties"=>$app_properties, "history"=>$history);
			$query = $this->mongo_db->insert('healthcare2017120192713965',$final_values);
	        }else if($user_type == "BCWELFARE_HS" || preg_match("/BCWELFARE/i", $user_type))
	        {
	            $app_properties = array(
			"app_name" => "Attendance app",
			"app_id"   => "healthcare2018130121531948"
			);

			$final_values = array("doc_data"=>array("widget_data"=>$doc_data),"doc_properties"=>$doc_properties, "app_properties"=>$app_properties, "history"=>$history);			
			$query = $this->mongo_db->insert('healthcare2018130121531948',$final_values);
	        }

			if($query)
			  return TRUE;
			else
			  return FALSE;
		}
	public function initiate_request_model($doc_data,$doc_properties,$array_history,$user_type)
	{
		ini_set ( 'memory_limit', '10G' );		
		if($user_type == "PANACEA_HS" || preg_match("/TSWREIS/i", $user_type))
		{
			$app_properties = array(
								'app_name' => "Health Requests App",
								'app_id' => "healthcare2016531124515424",
								'status' => "new"
							);

			$doc_data = array('doc_data' => $doc_data,"doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $array_history);

			//log_message('error','doc_data====================47'.print_r($doc_data,true));
			$res = $this->mongo_db->insert($this->health_request_col_panacea_hs,$doc_data);
			
			$this->mongo_db->insert($this->health_request_col_panacea_hs_shadow,$doc_data);
			if($res)
			{
				return $res;
			}
			else
			{
				return false;
			}
		}else if($user_type == "TTWREIS_HS" || preg_match("/TTWREIS/i", $user_type))
		{
			$app_properties = array(
								'app_name' => "Health Requests App",
								'app_id' => "healthcare2016108181933756",
								'status' => "new"
							);
			$doc_data = array('doc_data' => $doc_data,"doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $array_history);
			//log_message('error','doc_data====================47'.print_r($doc_data,true));
			$res = $this->mongo_db->insert($this->health_request_col_ttwreis_hs,$doc_data);
			$this->mongo_db->insert($this->health_request_col_ttwreis_hs_shadow,$doc_data);
			if($res)
			{
				return $res;
			}
			else
			{
				return false;
			}
		}
		else if($user_type == "TMREIS_HS" || preg_match("/TMREIS/i", $user_type))
		{
			$app_properties = array(
								'app_name' => "Health Requests App",
								'app_id' => "healthcare201610114435690",
								'status' => "new"
							);
			$doc_data = array('doc_data' => $doc_data,"doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $array_history);
			//log_message('error','doc_data====================47'.print_r($doc_data,true));
			$res = $this->mongo_db->insert($this->health_request_col_tmreis_hs,$doc_data);
			$this->mongo_db->insert($this->health_request_col_tmreis_hs_shadow,$doc_data);
			if($res)
			{
				return $res;
			}
			else
			{
				return false;
			}
		}
		else if($user_type == "BCWELFARE_HS" || preg_match("/BCWELFARE/i", $user_type))
		{
			$app_properties = array(
								'app_name' => "Health Requests App",
								'app_id' => "healthcare2018122191146894",
								'status' => "new"
							);
			$doc_data = array('doc_data' => $doc_data,"doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $array_history);
			//log_message('error','doc_data====================47'.print_r($doc_data,true));
			$res = $this->mongo_db->insert($this->health_request_col_bcwelfare_hs,$doc_data);
			$this->mongo_db->insert($this->health_request_col_bcwelfare_hs_shadow,$doc_data);
			if($res)
			{
				return $res;
			}
			else
			{
				return false;
			}
		}
		
		
	}

	public function get_doc_id_from_doc_properties($submitted_data_hs,$user_type)
	{
		if($user_type == "PANACEA_HS") {
        
		foreach ($submitted_data_hs as $value) 
		{
		$query = $this->mongo_db->select(array('doc_properties.doc_id'))->where(array('_id' => new MongoId($value) ))->get('healthcare2016531124515424_static_html');
		}
		return $query;
		
		}else if($user_type == "TTWREIS_HS") {

		foreach ($submitted_data_hs as $value) 
		{
		$query = $this->mongo_db->select(array('doc_properties.doc_id'))->where(array('_id' => new MongoId($value) ))->get('healthcare2016108181933756_static_html');
		}
		return $query;
		}else{

		foreach ($submitted_data_hs as $value) 
		{
		$query = $this->mongo_db->select(array('doc_properties.doc_id'))->where(array('_id' => new MongoId($value) ))->get('healthcare2018122191146894_static_html');
		}
		return $query;
		}
	}

	public function get_update_docs_normal($request_type,$user_type,$limit = false,$type = false)
	{
		$full_doc = array();
		$documents = array();
		$total_req = 0;
		if($user_type == "PANACEA_DOCTOR")
		{
				/*$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->select(array('doc_data.widget_data','doc_properties','app_properties','doc_data.attachment_exists','history'))->where($query)->get($this->health_request_col_panacea_hs);*/
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured"));
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_properties.doc_id','doc_data.attachment_exists','history'))->where($query)->limit(4000)->get($this->health_request_col_panacea_hs);

			if(isset($limit) && !empty($limit))
			{	
				if($type == "request")
					{
						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{
						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
						
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}
			else
			{
				$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured")))->limit(4000)->get($this->health_request_col_panacea_hs);
				return $query;
			}
			
        }else if($user_type == "TTWREIS_DOCTOR")
        {
        	$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured"));
	$this->mongo_db->orderBy(array('history.time' => -1));
	
	$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_properties.doc_id','doc_data.attachment_exists','history'))->where($query)->limit(4000)->get($this->health_request_col_ttwreis_hs);

        	if(isset($limit) && !empty($limit))
			{	
				if($type == "request")
					{
						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{	
						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
						
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}
			else
			{
				$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured")))->limit(4000)->get($this->health_request_col_ttwreis_hs);
				return $query;
			}
        }else if($user_type == "TMREIS_DOCTOR")
        {
        	$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured"));
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_properties.doc_id','doc_data.attachment_exists','history'))->where($query)->get($this->health_request_col_tmreis_hs);

            if(isset($limit) && !empty($limit))
			{	
				
				if($type == "request")
					{
						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{
						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}
			else
			{
				$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured")))->limit(200)->get($this->health_request_col_tmreis_hs);
				return $query;
			}
        }else if($user_type == "BCWELFARE_DOCTOR")
        {
        	$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured"));
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_properties.doc_id','doc_data.attachment_exists','history'))->where($query)->limit(6000)->get($this->health_request_col_bcwelfare_hs);
            if(isset($limit) && !empty($limit))
			{	
				if($type == "request")
					{
						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{
						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
						
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}
			else
			{
				$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured")))->limit(6000)->get($this->health_request_col_bcwelfare_hs);
				return $query;
			}
        }
	}

	public function get_update_docs_emergency($request_type,$user_type,$limit = false,$type = false)
	{
		$full_doc = array();
		$documents = array();
		$total_req = 0;
		if($user_type == "PANACEA_DOCTOR")
		{
			$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured"));
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_properties.doc_id','doc_data.attachment_exists','history'))->where($query)->limit(4000)->get($this->health_request_col_panacea_hs);

			if(isset($limit) && !empty($limit))
			{	
				if($type == "request")
					{
						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{
						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
						
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}
			else
			{
				$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured")))->limit(4000)->get($this->health_request_col_panacea_hs);
				return $query;
			}
			
        }else if($user_type == "TTWREIS_DOCTOR")
        {
        	$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured"));
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_properties.doc_id','doc_data.attachment_exists','history'))->where($query)->limit(4000)->get($this->health_request_col_ttwreis_hs);

        	if(isset($limit) && !empty($limit))
			{	
				if($type == "request")
					{
						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{	
						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
						
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}else
			{
				$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured")))->limit(4000)->get($this->health_request_col_ttwreis_hs);
				return $query;
			}
        }else if($user_type == "TMREIS_DOCTOR")
        {
        	$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured"));
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_properties.doc_id','doc_data.attachment_exists','history'))->where($query)->get($this->health_request_col_tmreis_hs);

            if(isset($limit) && !empty($limit))
			{	
				
				if($type == "request")
					{
						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{
						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}else
			{
				$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured")))->limit(200)->get($this->health_request_col_tmreis_hs);
				return $query;
			}
        }else if($user_type == "BCWELFARE_DOCTOR")
        {
        	$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured"));
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_properties.doc_id','doc_data.attachment_exists','history'))->where($query)->limit(6000)->get($this->health_request_col_bcwelfare_hs);
            if(isset($limit) && !empty($limit))
			{	
				if($type == "request")
					{
						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{
						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
						
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}else
			{
				$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured")))->limit(6000)->get($this->health_request_col_bcwelfare_hs);
				return $query;
			}
        }  		
	}
	public function get_update_docs_chronic($request_type,$user_type,$limit = false,$type = false)
	{
		$full_doc = array();
		$documents = array();
		$total_req = 0;
		if($user_type == "PANACEA_DOCTOR")
		{
			$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured"));
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_properties.doc_id','doc_data.attachment_exists','history'))->where($query)->limit(6000)->get($this->health_request_col_panacea_hs);

			if(isset($limit) && !empty($limit))
			{	
				if($type == "request")
					{
						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{
						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
						
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}else
			{
				$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured")))->limit(6000)->get($this->health_request_col_panacea_hs);
				return $query;
			}
			
        }else if($user_type == "TTWREIS_DOCTOR")
        {
        	$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured"));
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_properties.doc_id','doc_data.attachment_exists','history'))->where($query)->limit(4000)->get($this->health_request_col_ttwreis_hs);

        	if(isset($limit) && !empty($limit))
			{	
				if($type == "request")
					{
						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{	
						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
						
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}else
			{
				$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured")))->limit(4000)->get($this->health_request_col_ttwreis_hs);
				return $query;
			}
        }else if($user_type == "TMREIS_DOCTOR")
        {
        	$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured"));
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_properties.doc_id','doc_data.attachment_exists','history'))->where($query)->get($this->health_request_col_tmreis_hs);

            if(isset($limit) && !empty($limit))
			{	
				
				if($type == "request")
					{
						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{
						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}else
			{
				$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured")))->limit(200)->get($this->health_request_col_tmreis_hs);
				return $query;
			}
        }else if($user_type == "BCWELFARE_DOCTOR")
        {
        	$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured"));
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_properties.doc_id','doc_data.attachment_exists','history'))->where($query)->limit(4000)->get($this->health_request_col_bcwelfare_hs);
            if(isset($limit) && !empty($limit))
			{	
				if($type == "request")
					{
						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{
						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
						
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}else
			{
				$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured")))->limit(4000)->get($this->health_request_col_bcwelfare_hs);
				return $query;
			}
        }
	}

	public function get_full_doc_normal($user_type,$doc_id,$doc_flow,$access_by)
	{
		if(preg_match('/PANACEA/i', $user_type) || preg_match('/TSWREIS/i', $user_type))
		{
			$time = time();
			$get_document = $this->mongo_db->select(array())->where(array('doc_properties.doc_id' => $doc_id))->limit(1)->get($this->health_request_col_panacea_hs);
			
			foreach ($get_document as $document) 
			{
				if($doc_flow != $document['doc_properties']['doc_access'])
				{
					$final_doc = $document;
					$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time))->update($this->health_request_col_panacea_hs);
				}else 
				{					
					$server_time = $get_document[0]['doc_properties']['doc_access_time'];
					
					$result_time = round(($time - $server_time)/ 60);	
					
					if($result_time >= 5)
					{			
						$final_doc = $document;
						$time_2 = time();
						$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time_2))->update($this->health_request_col_panacea_hs);
					}
					else
					{
						$final_doc = $document['doc_properties'];		
										
					}					

				}
			}
			if(!empty($final_doc))
			{
				return $final_doc;
			}
			else
			{
				return FALSE;
			}
		}else if(preg_match('/TTWREIS/i', $user_type))
		{
			$time = time();
			$get_document = $this->mongo_db->select(array())->where(array('doc_properties.doc_id' => $doc_id))->limit(1)->get($this->health_request_col_ttwreis_hs);
			
			foreach ($get_document as $document) 
			{
				if($doc_flow != $document['doc_properties']['doc_access'])
				{
					$final_doc = $document;
					$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time))->update($this->health_request_col_ttwreis_hs);
				}else 
				{					
					$server_time = $get_document[0]['doc_properties']['doc_access_time'];
					
					$result_time = round(($time - $server_time)/ 60);	
					
					if($result_time >= 5)
					{			
						$final_doc = $document;
						$time_2 = time();
						$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time_2))->update($this->health_request_col_ttwreis_hs);
					}
					else
					{
						$final_doc = $document['doc_properties'];		
										
					}					

				}
			}
			if(!empty($final_doc))
			{
				return $final_doc;
			}
			else
			{
				return FALSE;
			}
		}else if(preg_match('/TMREIS/i', $user_type))
		{
			$time = time();
			$get_document = $this->mongo_db->select(array())->where(array('doc_properties.doc_id' => $doc_id))->limit(1)->get($this->health_request_col_tmreis_hs);
			
			foreach ($get_document as $document) 
			{
				if($doc_flow != $document['doc_properties']['doc_access'])
				{
					$final_doc = $document;
					$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time))->update($this->health_request_col_tmreis_hs);
				}else 
				{					
					$server_time = $get_document[0]['doc_properties']['doc_access_time'];
					
					$result_time = round(($time - $server_time)/ 60);	
					
					if($result_time >= 5)
					{			
						$final_doc = $document;
						$time_2 = time();
						$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time_2))->update($this->health_request_col_tmreis_hs);
					}
					else
					{
						$final_doc = $document['doc_properties'];		
										
					}					

				}
			}
			if(!empty($final_doc))
			{
				return $final_doc;
			}
			else
			{
				return FALSE;
			}
		}else if(preg_match('/BCWELFARE/i', $user_type))
		{
			$time = time();
			$get_document = $this->mongo_db->select(array())->where(array('doc_properties.doc_id' => $doc_id))->limit(1)->get($this->health_request_col_bcwelfare_hs);
			
			foreach ($get_document as $document) 
			{
				if($doc_flow != $document['doc_properties']['doc_access'])
				{
					$final_doc = $document;
					$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time))->update($this->health_request_col_bcwelfare_hs);
				}else 
				{					
					$server_time = $get_document[0]['doc_properties']['doc_access_time'];
					
					$result_time = round(($time - $server_time)/ 60);	
					
					if($result_time >= 5)
					{			
						$final_doc = $document;
						$time_2 = time();
						$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time_2))->update($this->health_request_col_bcwelfare_hs);
					}
					else
					{
						$final_doc = $document['doc_properties'];		
										
					}					

				}
			}
			if(!empty($final_doc))
			{
				return $final_doc;
			}
			else
			{
				return FALSE;
			}
		}
		
	}

	public function get_full_doc_emergency($user_type,$doc_id,$doc_flow,$access_by)
	{
		if(preg_match('/PANACEA/i', $user_type) || preg_match('/TSWREIS/i', $user_type))
		{
			$time = time();
			$get_document = $this->mongo_db->select(array())->where(array('doc_properties.doc_id' => $doc_id))->limit(1)->get($this->health_request_col_panacea_hs);
			
			foreach ($get_document as $document) 
			{
				if($doc_flow != $document['doc_properties']['doc_access'])
				{
					$final_doc = $document;
					$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time))->update($this->health_request_col_panacea_hs);
				}else 
				{					
					$server_time = $get_document[0]['doc_properties']['doc_access_time'];
					
					$result_time = round(($time - $server_time)/ 60);	
					
					if($result_time >= 5)
					{			
						$final_doc = $document;
						$time_2 = time();
						$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time_2))->update($this->health_request_col_panacea_hs);
					}
					else
					{
						$final_doc = $document['doc_properties'];		
										
					}					

				}
			}
			if(!empty($final_doc))
			{
				return $final_doc;
			}
			else
			{
				return FALSE;
			}
		}else if(preg_match('/TTWREIS/i', $user_type))
		{
			$time = time();
			$get_document = $this->mongo_db->select(array())->where(array('doc_properties.doc_id' => $doc_id))->limit(1)->get($this->health_request_col_ttwreis_hs);
			
			foreach ($get_document as $document) 
			{
				if($doc_flow != $document['doc_properties']['doc_access'])
				{
					$final_doc = $document;
					$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time))->update($this->health_request_col_ttwreis_hs);
				}else 
				{					
					$server_time = $get_document[0]['doc_properties']['doc_access_time'];
					
					$result_time = round(($time - $server_time)/ 60);	
					
					if($result_time >= 5)
					{			
						$final_doc = $document;
						$time_2 = time();
						$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time_2))->update($this->health_request_col_ttwreis_hs);
					}
					else
					{
						$final_doc = $document['doc_properties'];		
										
					}					

				}
			}
			if(!empty($final_doc))
			{
				return $final_doc;
			}
			else
			{
				return FALSE;
			}
		}else if(preg_match('/TMREIS/i', $user_type))
		{
			$time = time();
			$get_document = $this->mongo_db->select(array())->where(array('doc_properties.doc_id' => $doc_id))->limit(1)->get($this->health_request_col_tmreis_hs);
			
			foreach ($get_document as $document) 
			{
				if($doc_flow != $document['doc_properties']['doc_access'])
				{
					$final_doc = $document;
					$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time))->update($this->health_request_col_tmreis_hs);
				}else 
				{					
					$server_time = $get_document[0]['doc_properties']['doc_access_time'];
					
					$result_time = round(($time - $server_time)/ 60);	
					
					if($result_time >= 5)
					{			
						$final_doc = $document;
						$time_2 = time();
						$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time_2))->update($this->health_request_col_tmreis_hs);
					}
					else
					{
						$final_doc = $document['doc_properties'];		
										
					}					

				}
			}
			if(!empty($final_doc))
			{
				return $final_doc;
			}
			else
			{
				return FALSE;
			}
		}else if(preg_match('/BCWELFARE/i', $user_type))
		{
			$time = time();
			$get_document = $this->mongo_db->select(array())->where(array('doc_properties.doc_id' => $doc_id))->limit(1)->get($this->health_request_col_bcwelfare_hs);
			
			foreach ($get_document as $document) 
			{
				if($doc_flow != $document['doc_properties']['doc_access'])
				{
					$final_doc = $document;
					$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time))->update($this->health_request_col_bcwelfare_hs);
				}else 
				{					
					$server_time = $get_document[0]['doc_properties']['doc_access_time'];
					
					$result_time = round(($time - $server_time)/ 60);	
					
					if($result_time >= 5)
					{			
						$final_doc = $document;
						$time_2 = time();
						$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time_2))->update($this->health_request_col_bcwelfare_hs);
					}
					else
					{
						$final_doc = $document['doc_properties'];		
										
					}					

				}
			}
			if(!empty($final_doc))
			{
				return $final_doc;
			}
			else
			{
				return FALSE;
			}
		}
		
	}

	public function get_full_doc_chronic($user_type,$doc_id,$doc_flow,$access_by)
	{
		if(preg_match('/PANACEA/i', $user_type) || preg_match('/TSWREIS/i', $user_type))
		{
			$time = time();
			$get_document = $this->mongo_db->select(array())->where(array('doc_properties.doc_id' => $doc_id))->limit(1)->get($this->health_request_col_panacea_hs);
			
			foreach ($get_document as $document) 
			{
				if($doc_flow != $document['doc_properties']['doc_access'])
				{
					$final_doc = $document;
					$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time))->update($this->health_request_col_panacea_hs);
				}else 
				{					
					$server_time = $get_document[0]['doc_properties']['doc_access_time'];
					
					$result_time = round(($time - $server_time)/ 60);	
					
					if($result_time >= 5)
					{			
						$final_doc = $document;
						$time_2 = time();
						$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time_2))->update($this->health_request_col_panacea_hs);
					}
					else
					{
						$final_doc = $document['doc_properties'];		
										
					}					

				}
			}
			if(!empty($final_doc))
			{
				return $final_doc;
			}
			else
			{
				return FALSE;
			}
		}else if(preg_match('/TTWREIS/i', $user_type))
		{
			$time = time();
			$get_document = $this->mongo_db->select(array())->where(array('doc_properties.doc_id' => $doc_id))->limit(1)->get($this->health_request_col_ttwreis_hs);
			
			foreach ($get_document as $document) 
			{
				if($doc_flow != $document['doc_properties']['doc_access'])
				{
					$final_doc = $document;
					$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time))->update($this->health_request_col_ttwreis_hs);
				}else 
				{					
					$server_time = $get_document[0]['doc_properties']['doc_access_time'];
					
					$result_time = round(($time - $server_time)/ 60);	
					
					if($result_time >= 5)
					{			
						$final_doc = $document;
						$time_2 = time();
						$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time_2))->update($this->health_request_col_ttwreis_hs);
					}
					else
					{
						$final_doc = $document['doc_properties'];		
										
					}					

				}
			}
			if(!empty($final_doc))
			{
				return $final_doc;
			}
			else
			{
				return FALSE;
			}
		}else if(preg_match('/TMREIS/i', $user_type))
		{
			$time = time();
			$get_document = $this->mongo_db->select(array())->where(array('doc_properties.doc_id' => $doc_id))->limit(1)->get($this->health_request_col_tmreis_hs);
			
			foreach ($get_document as $document) 
			{
				if($doc_flow != $document['doc_properties']['doc_access'])
				{
					$final_doc = $document;
					$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time))->update($this->health_request_col_tmreis_hs);
				}else 
				{					
					$server_time = $get_document[0]['doc_properties']['doc_access_time'];
					
					$result_time = round(($time - $server_time)/ 60);	
					
					if($result_time >= 5)
					{			
						$final_doc = $document;
						$time_2 = time();
						$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time_2))->update($this->health_request_col_tmreis_hs);
					}
					else
					{
						$final_doc = $document['doc_properties'];		
										
					}					

				}
			}
			if(!empty($final_doc))
			{
				return $final_doc;
			}
			else
			{
				return FALSE;
			}
		}else if(preg_match('/BCWELFARE/i', $user_type))
		{
			$time = time();
			$get_document = $this->mongo_db->select(array())->where(array('doc_properties.doc_id' => $doc_id))->limit(1)->get($this->health_request_col_bcwelfare_hs);
			
			foreach ($get_document as $document) 
			{
				if($doc_flow != $document['doc_properties']['doc_access'])
				{
					$final_doc = $document;
					$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time))->update($this->health_request_col_bcwelfare_hs);
				}else 
				{					
					$server_time = $get_document[0]['doc_properties']['doc_access_time'];
					
					$result_time = round(($time - $server_time)/ 60);	
					
					if($result_time >= 5)
					{			
						$final_doc = $document;
						$time_2 = time();
						$update = $this->mongo_db->where(array('doc_properties.doc_id' => $doc_id))->set(array('doc_properties.doc_access' => $doc_flow,'doc_properties.access_by' => $access_by,'doc_properties.doc_access_time' => $time_2))->update($this->health_request_col_bcwelfare_hs);
					}
					else
					{
						$final_doc = $document['doc_properties'];		
										
					}					

				}
			}
			if(!empty($final_doc))
			{
				return $final_doc;
			}
			else
			{
				return FALSE;
			}
		}
		
	}

	/*public function get_update_docs_normal($request_type,$user_type,$limit = false,$type = false)
	{
		$full_doc = array();
		$documents = array();
		$total_req = 0;
		if($user_type == "PANACEA_DOCTOR"){
			if(isset($limit) && !empty($limit))
			{	
				if($type == "request")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_panacea_hs);

						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_panacea_hs);

						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}
			else
			{
				$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type))->limit(200)->get($this->health_request_col_panacea_hs);
			}
			
        }else if($user_type == "TTWREIS_DOCTOR")
        {
        	if(isset($limit) && !empty($limit))
			{	
				if($type == "request")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_ttwreis_hs);

						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_ttwreis_hs);

						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}
			$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type))->get($this->health_request_col_ttwreis_hs);
        }else if($user_type == "TMREIS_DOCTOR")
        {
           if(isset($limit) && !empty($limit))
			{	
				if($type == "request")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_tmreis_hs);

						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_tmreis_hs);

						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}
			$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type))->get($this->health_request_col_tmreis_hs);
        }else if($user_type == "BCWELFARE_DOCTOR")
        {
            if(isset($limit) && !empty($limit))
			{	
				if($type == "request")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_bcwelfare_hs);

						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_bcwelfare_hs);

						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}
			$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type))->get($this->health_request_col_bcwelfare_hs);
        }
		if($query)
		{
			return $query;
		}
		else
		{
			return false;
		}
	}

	public function get_update_docs_emergency($request_type,$user_type,$limit = false, $type = false)
	{
		$full_doc = array();
		$documents = array();
		$total_req = 0;
		if($user_type == "PANACEA_DOCTOR"){
			if(isset($limit) && !empty($limit))
			{	
				if($type == "request")
				{
					$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
					$this->mongo_db->orderBy(array('history.time' => -1));
					$query = $this->mongo_db->where($query)->get($this->health_request_col_panacea_hs);

					foreach ($query as $history)
					{						
						$end_array = end($history['history']);
						if(preg_match('/HS/i', $end_array['current_stage']))
						{
							array_push($full_doc, $history);
							$total_req = count($full_doc);
						}
						if($limit == $total_req)
						{
							$documents = $full_doc;
							break;
						}					
					}
					if($limit >= $total_req)
					{
						$documents = $full_doc;
					}					
				}
				else if($type == "response")
				{
					$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
					$this->mongo_db->orderBy(array('history.time' => -1));
					$query = $this->mongo_db->where($query)->get($this->health_request_col_panacea_hs);

					foreach ($query as $history) 
					{						
						$end_array = end($history['history']);
						if(preg_match('/Doctor/i', $end_array['current_stage']))
						{
							array_push($full_doc, $history);	
							$total_req = count($full_doc);						
						}
						if($limit == $total_req)
						{
							$documents = $full_doc;
							break;
						}					
					}
					if($limit >= $total_req)
					{
						$documents = $full_doc;
					}
				}
				if($documents)
				{
					return $documents;
				}
				else
				{
					return false;
				}				
			}
			else
			{
				$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type))->limit(200)->get($this->health_request_col_panacea_hs);
			}
			
        }else if($user_type == "TTWREIS_DOCTOR")
        {
        	if(isset($limit) && !empty($limit))
			{	
				if($type == "request")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_ttwreis_hs);

						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_ttwreis_hs);

						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}
			$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type))->get($this->health_request_col_ttwreis_hs);
        }else if($user_type == "TMREIS_DOCTOR")
        {
           if(isset($limit) && !empty($limit))
			{	
				if($type == "request")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_tmreis_hs);

						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_tmreis_hs);

						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}
			$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type))->get($this->health_request_col_tmreis_hs);
        }else if($user_type == "BCWELFARE_DOCTOR")
        {
            if(isset($limit) && !empty($limit))
			{	
				if($type == "request")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_bcwelfare_hs);

						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_bcwelfare_hs);

						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}
			$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type))->get($this->health_request_col_bcwelfare_hs);
        }
		if($query)
		{
			return $query;
		}
		else
		{
			return false;
		} 		
	}
	public function get_update_docs_chronic($request_type,$user_type,$limit = false,$type = false)
	{
		$full_doc = array();
		$documents = array();
		$total_req = 0;
		if($user_type == "PANACEA_DOCTOR"){
			if(isset($limit) && !empty($limit))
			{	
				if($type == "request")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_panacea_hs);
						
						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_panacea_hs);

						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}
			else
			{
				$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type))->limit(200)->get($this->health_request_col_panacea_hs);
			}
			
        }else if($user_type == "TTWREIS_DOCTOR")
        {
        	if(isset($limit) && !empty($limit))
			{	
				if($type == "request")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_ttwreis_hs);

						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_ttwreis_hs);

						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}
			$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type))->get($this->health_request_col_ttwreis_hs);
        }else if($user_type == "TMREIS_DOCTOR")
        {
           if(isset($limit) && !empty($limit))
			{	
				if($type == "request")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_tmreis_hs);

						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_tmreis_hs);

						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}
			$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type))->get($this->health_request_col_tmreis_hs);
        }else if($user_type == "BCWELFARE_DOCTOR")
        {
            if(isset($limit) && !empty($limit))
			{	
				if($type == "request")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_bcwelfare_hs);

						foreach ($query as $history)
						{						
							$end_array = end($history['history']);
							if(preg_match('/HS/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);
								$total_req = count($full_doc);
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}					
					}
					else if($type == "response")
					{
						$query = array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
						$this->mongo_db->orderBy(array('history.time' => -1));
						$query = $this->mongo_db->where($query)->get($this->health_request_col_bcwelfare_hs);

						foreach ($query as $history) 
						{						
							$end_array = end($history['history']);
							if(preg_match('/Doctor/i', $end_array['current_stage']))
							{
								array_push($full_doc, $history);	
								$total_req = count($full_doc);						
							}
							if($limit == $total_req)
							{
								$documents = $full_doc;
								break;
							}					
						}
						if($limit >= $total_req)
						{
							$documents = $full_doc;
						}
					}
					if($documents)
					{
						return $documents;
					}
					else
					{
						return false;
					}				
			}
			$this->mongo_db->orderBy(array('history.time' => -1));
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type))->get($this->health_request_col_bcwelfare_hs);
        }
		if($query)
		{
			return $query;
		}
		else
		{
			return false;
		}
	}*/

	 public function get_history($unique_id,$doc_id,$user_type)
    { 
    	if(preg_match("/PANACEA/i", $user_type))
    	{
    		$query = $this->mongo_db->select(array(),array('_id'))->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id,'doc_properties.doc_id' => $doc_id))->get($this->health_request_col_panacea_hs);
    		 return $query;
    	}else if(preg_match("/TTWREIS/i", $user_type)){
    		$query = $this->mongo_db->select(array(),array('_id'))->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id,'doc_properties.doc_id' => $doc_id))->get($this->health_request_col_ttwreis_hs);
    		 return $query;
    	}
    	else if(preg_match("/TMREIS/i", $user_type)){
    		$query = $this->mongo_db->select(array(),array('_id'))->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id,'doc_properties.doc_id' => $doc_id))->get($this->health_request_col_tmreis_hs);
    		 return $query;
    	}
    	else if(preg_match("/BCWELFARE/i", $user_type)){
    		$query = $this->mongo_db->select(array(),array('_id'))->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id,'doc_properties.doc_id' => $doc_id))->get($this->health_request_col_bcwelfare_hs);
    		 return $query;
    	}else{
    		 return FALSE;
    	}
       	
		
    }

     public function request_docs_update_doctor_model($doc_data,$doc_properties,$history_array,$unique_id,$doc_id,$user_type,$doc_data_external_attachments,$followups)
    {
    	 	if($user_type == "PANACEA_DOCTOR"){
    	 		if(!empty($doc_data_external_attachments) && isset($doc_data_external_attachments))
    	 		{
	 				if($followups == FALSE){
	 					$update_query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->set(array('doc_data.widget_data' =>$doc_data,'doc_data.external_attachments' => $doc_data_external_attachments,'doc_properties.doc_access' => $doc_properties['doc_access'],'doc_properties.access_by' => $doc_properties['access_by'],'doc_properties.doc_access_time' => $doc_properties['doc_access_time'],'history'=>$history_array))->update($this->health_request_col_panacea_hs);
	 				}else{
	 					$update_query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->set(array('doc_data.widget_data' =>$doc_data,'doc_data.external_attachments' => $doc_data_external_attachments,'doc_properties.doc_access' => $doc_properties['doc_access'],'doc_properties.access_by' => $doc_properties['access_by'],'doc_properties.doc_access_time' => $doc_properties['doc_access_time'],'history'=>$history_array, 'regular_follow_up'=>$followups))->update($this->health_request_col_panacea_hs);
	 				}
    	 		

	 			$app_properties = array(
							'app_name' => "Health Requests App",
							'app_id' => "healthcare2016531124515424",
							'status' => "new"
						);
	    		 $doc_data_info['widget_data'] = $doc_data;
	    		$doc_data_attach['external_attachments'] = $doc_data_external_attachments;
	    		if($followups == FALSE){
	    			$doc_data_shadow = array('doc_data' => $doc_data_info,'doc_data' => $doc_data_attach, "doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $history_array);
	    		}else{
	    			$doc_data_shadow = array('doc_data' => $doc_data_info,'doc_data' => $doc_data_attach, "doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $history_array, 'regular_follow_up'=>$followups);
	    		}
				
				$this->mongo_db->insert($this->health_request_col_panacea_hs_shadow,$doc_data_shadow);

    	 		}
    	 		else
    	 		{
    	 			
	 				if ($followups == FALSE) {
	 					$update_query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->set(array('doc_data.widget_data' =>$doc_data,'doc_properties.doc_access' => $doc_properties['doc_access'],'doc_properties.access_by' => $doc_properties['access_by'],'doc_properties.doc_access_time' => $doc_properties['doc_access_time'],'history'=>$history_array))->update($this->health_request_col_panacea_hs);
	 				}else{
	 					$update_query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->set(array('doc_data.widget_data' =>$doc_data,'doc_properties.doc_access' => $doc_properties['doc_access'],'doc_properties.access_by' => $doc_properties['access_by'],'doc_properties.doc_access_time' => $doc_properties['doc_access_time'],'history'=>$history_array, 'regular_follow_up'=>$followups))->update($this->health_request_col_panacea_hs);
	 				}
	 				

	 				$app_properties = array(
							'app_name' => "Health Requests App",
							'app_id' => "healthcare2016531124515424",
							'status' => "new"
						);
	    		 	$doc_data_info['widget_data'] = $doc_data;
	    		 	if($followups == FALSE){
	    		 		$doc_data_shadow = array('doc_data' => $doc_data_info, "doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $history_array);
	    		 	}else{
	    		 		$doc_data_shadow = array('doc_data' => $doc_data_info, "doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $history_array, 'regular_follow_up'=>$followups);
	    		 	}	    		 
					
					$this->mongo_db->insert($this->health_request_col_panacea_hs_shadow,$doc_data_shadow);
    	 		}
			
			return $update_query;
        }else if($user_type == "TTWREIS_DOCTOR")
        {
        	 if(!empty($doc_data_external_attachments) && isset($doc_data_external_attachments))
    	 		{
	 			
	 			$update_query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->set(array('doc_data.widget_data' =>$doc_data,'doc_data.external_attachments' => $doc_data_external_attachments, 'doc_properties.doc_access' => $doc_properties['doc_access'],'doc_properties.access_by' => $doc_properties['access_by'],'doc_properties.doc_access_time' => $doc_properties['doc_access_time'],'history'=>$history_array))->update($this->health_request_col_ttwreis_hs);

	 			$app_properties = array(
							'app_name' => "Health Requests App",
							'app_id' => "healthcare2016108181933756",
							'status' => "new"
						);
	    		 $doc_data_info['widget_data'] = $doc_data;
	    		$doc_data_attach['external_attachments'] = $doc_data_external_attachments;
				$doc_data_shadow = array('doc_data' => $doc_data_info,'doc_data' => $doc_data_attach, "doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $history_array);
				$this->mongo_db->insert($this->health_request_col_ttwreis_hs_shadow,$doc_data_shadow);

    	 		}
    	 		else
    	 		{
	 				
	 				$update_query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->set(array('doc_data.widget_data' =>$doc_data,'doc_properties.doc_access' => $doc_properties['doc_access'],'doc_properties.access_by' => $doc_properties['access_by'],'doc_properties.doc_access_time' => $doc_properties['doc_access_time'],'history'=>$history_array))->update($this->health_request_col_ttwreis_hs);

	 				$app_properties = array(
							'app_name' => "Health Requests App",
							'app_id' => "healthcare2016108181933756",
							'status' => "new"
						);
	    		 	$doc_data_info['widget_data'] = $doc_data;		    		 
					$doc_data_shadow = array('doc_data' => $doc_data_info, "doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $history_array);
					$this->mongo_db->insert($this->health_request_col_ttwreis_hs_shadow,$doc_data_shadow);
    	 		}
			return $update_query;
        }else if($user_type == "TMREIS_DOCTOR")
        {
             if(!empty($doc_data_external_attachments) && isset($doc_data_external_attachments))
    	 		{
	 			
	 			$update_query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->set(array('doc_data.widget_data' =>$doc_data,'doc_data.external_attachments' => $doc_data_external_attachments,'doc_properties.doc_access' => $doc_properties['doc_access'],'doc_properties.access_by' => $doc_properties['access_by'],'doc_properties.doc_access_time' => $doc_properties['doc_access_time'],'history'=>$history_array))->update($this->health_request_col_tmreis_hs);

	 			$app_properties = array(
							'app_name' => "Health Requests App",
							'app_id' => "healthcare201610114435690",
							'status' => "new"
						);
	    		 $doc_data_info['widget_data'] = $doc_data;
	    		$doc_data_attach['external_attachments'] = $doc_data_external_attachments;
				$doc_data_shadow = array('doc_data' => $doc_data_info,'doc_data' => $doc_data_attach, "doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $history_array);
				$this->mongo_db->insert($this->health_request_col_tmreis_hs_shadow,$doc_data_shadow);

    	 		}
    	 		else
    	 		{
	 				
	 				$update_query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->set(array('doc_data.widget_data' =>$doc_data,'doc_properties.doc_access' => $doc_properties['doc_access'],'doc_properties.access_by' => $doc_properties['access_by'],'doc_properties.doc_access_time' => $doc_properties['doc_access_time'],'history'=>$history_array))->update($this->health_request_col_tmreis_hs);

	 				$app_properties = array(
							'app_name' => "Health Requests App",
							'app_id' => "healthcare201610114435690",
							'status' => "new"
						);
	    		 	$doc_data_info['widget_data'] = $doc_data;		    		 
					$doc_data_shadow = array('doc_data' => $doc_data_info, "doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $history_array);
					$this->mongo_db->insert($this->health_request_col_tmreis_hs_shadow,$doc_data_shadow);
    	 		}

			return $update_query;
        }else if($user_type == "BCWELFARE_DOCTOR")
        {
            if(!empty($doc_data_external_attachments) && isset($doc_data_external_attachments))
    	 		{
	 			
	 			$update_query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->set(array('doc_data.widget_data' =>$doc_data,'doc_data.external_attachments' => $doc_data_external_attachments,'doc_properties.doc_access' => $doc_properties['doc_access'],'doc_properties.access_by' => $doc_properties['access_by'],'doc_properties.doc_access_time' => $doc_properties['doc_access_time'],'history'=>$history_array))->update($this->health_request_col_bcwelfare_hs);

	 			$app_properties = array(
							'app_name' => "Health Requests App",
							'app_id' => "healthcare2018122191146894",
							'status' => "new"
						);
	    		 $doc_data_info['widget_data'] = $doc_data;
	    		$doc_data_attach['external_attachments'] = $doc_data_external_attachments;
				$doc_data_shadow = array('doc_data' => $doc_data_info,'doc_data' => $doc_data_attach, "doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $history_array);
				$this->mongo_db->insert($this->health_request_col_bcwelfare_hs_shadow,$doc_data_shadow);

    	 		}
    	 		else
    	 		{
	 				
	 				$update_query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->set(array('doc_data.widget_data' =>$doc_data, 'doc_properties.doc_access' => $doc_properties['doc_access'],'doc_properties.access_by' => $doc_properties['access_by'],'doc_properties.doc_access_time' => $doc_properties['doc_access_time'],'history'=>$history_array))->update($this->health_request_col_bcwelfare_hs);

	 				$app_properties = array(
							'app_name' => "Health Requests App",
							'app_id' => "healthcare2018122191146894",
							'status' => "new"
						);
	    		 	$doc_data_info['widget_data'] = $doc_data;		    		 
					$doc_data_shadow = array('doc_data' => $doc_data_info, "doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $history_array);
					$this->mongo_db->insert($this->health_request_col_bcwelfare_hs_shadow,$doc_data_shadow);
    	 		}

			return $update_query;
        }      

        
    }
	
	public function get_districts_list_model($user_type,$dist_id)
	 {
	 	 if(preg_match("/PANACEA/i", $user_type)){
	 	 	if($dist_id == "PANACEA"){
		 	 	$query = $this->mongo_db->orderBy ( array (
						'dt_name' => 1 
				) )->get ( 'panacea_district' );
	 	 	}else{
	 	 		$query = $this->mongo_db->orderBy ( array (
						'dt_name' => 1 
				) )->where('dt_code',$dist_id)->get ( 'panacea_district' );
	 	 	}
			if($query){
				return $query;
			}else{
				return FALSE;
			}
        }else if(preg_match("/TTWREIS/i", $user_type)){
        	if($dist_id == "TTWREIS"){
		 	 	$query = $this->mongo_db->orderBy ( array (
						'dt_name' => 1 
				) )->get ( 'ttwreis_district' );
	 	 	}else{
 		 	 	$query = $this->mongo_db->orderBy ( array (
 						'dt_name' => 1 
 				) )->where('dt_code',$dist_id)->get ( 'ttwreis_district' );
	 	 	}
			if($query){
				return $query;
			}else{
				return FALSE;
			}
        }else if(preg_match("/TMREIS/i", $user_type)){
        	if($dist_id == "TMREIS"){
		 	 	$query = $this->mongo_db->orderBy ( array (
						'dt_name' => 1 
				) )->get ( 'tmreis_district' );
		 	}else{
		 		$query = $this->mongo_db->orderBy ( array (
						'dt_name' => 1 
				) )->where('dt_code',$dist_id)->get ( 'tmreis_district' );
		 	}
			if($query){
				return $query;
			}else{
				return FALSE;
			}
        }else if(preg_match("/BCWELFARE/i", $user_type)){
        	if($dist_id == "BCWELFARE"){
		 	 	$query = $this->mongo_db->orderBy ( array (
						'dt_name' => 1 
				) )->get ( 'bc_welfare_district' );
		 	 }else{
		 	 	$query = $this->mongo_db->orderBy ( array (
						'dt_name' => 1 
				) )->where('dt_code',$dist_id)->get ( 'bc_welfare_district' );
		 	 }
			if($query){
				return $query;
			}else{
				return FALSE;
			}
        }
		
	}

	public function get_schools_by_district_id($dist_id,$user_type,$dist_code_id) {

		if((preg_match("/PANACEA/i", $user_type)))
		{
			 if($user_type == "PANACEA_HS"){
			 	$school_code = explode(".", $dist_code_id);
			 	$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
				$query = $this->mongo_db->select ( array (
						'school_name'
				) )->orderBy ( array (
						'school_name' => 1 
				) )->where(array('district_name' => $dist_id , "school_code"=>intval($school_code[1])))->get ( 'panacea_schools_bkp_copy' );
				$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
				
				return $query;
	        }else
	        {
	        	$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
				$query = $this->mongo_db->select ( array (
						'school_name'
				) )->orderBy ( array (
						'school_name' => 1 
				) )->where ( 'district_name', $dist_id )->get ( 'panacea_schools_bkp_copy' );
				$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
				return $query;
	        }
   		}
   		if((preg_match("/TTWREIS/i", $user_type)))
		{
	         if($user_type == "TTWREIS_HS"){
			 	$school_code = explode(".", $dist_code_id);
			 	$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
				$query = $this->mongo_db->select ( array (
						'school_name'
				) )->orderBy ( array (
						'school_name' => 1 
				) )->where(array('district_name' => $dist_id , "school_code"=>intval($school_code[1])))->get ( 'ttwreis_schools_list' );
				$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
				
				return $query;
	        }else
	        {
	        	$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
				$query = $this->mongo_db->select ( array (
						'school_name'
				) )->orderBy ( array (
						'school_name' => 1 
				) )->where ( 'district_name', $dist_id )->get ( 'ttwreis_schools_list' );
				$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
				return $query;
	        }
   		}

         if((preg_match("/TMREIS/i", $user_type)))
			{
				log_message('error','user_type================2599====2525'.print_r($user_type,true));
         	if($user_type == "TMREIS_HS")
         	{
         		$school_code = explode(".", $dist_code_id);
			 	$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
				$query = $this->mongo_db->select ( array (
						'school_name'
				) )->orderBy ( array (
						'school_name' => 1 
				) )->where(array('dt_name' => $dist_id , "school_code"=>intval($school_code[1])))->get ( $this->collections ['tmreis_schools'] );
				$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			
				return $query;
         	}else
	        {
	        	$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
				$query = $this->mongo_db->select ( array (
						'school_name'
				) )->orderBy ( array (
						'school_name' => 1 
				) )->where ( 'dt_name', $dist_id )->get ( $this->collections ['tmreis_schools'] );
				$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
				return $query;
	        }
		 	
        }
        if((preg_match("/BCWELFARE/i", $user_type)))
		{
	         if($user_type == "BCWELFARE_HS"){
			 	$school_code = explode(".", $dist_code_id);
			 	$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
				$query = $this->mongo_db->select ( array (
						'school_name'
				) )->orderBy ( array (
						'school_name' => 1 
				) )->where(array('district_name' => $dist_id , "school_code"=>intval($school_code[1])))->get ( 'bc_welfare_schools_districts' );
				$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
				
				return $query;
	        }else
	        {
	        	$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
				$query = $this->mongo_db->select ( array (
						'school_name'
				) )->orderBy ( array (
						'school_name' => 1 
				) )->where ( 'district_name', $dist_id )->get ( 'bc_welfare_schools_districts' );
				$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
				return $query;
	        }
  		}
        	 
		
	}


	
	public function screening_to_students_load_ehr_doc($post,$user_type) {
		
		/*if(($post['type'] == "tswreis") || ($post['type'] == "healthcare2016531124515424") || (preg_match("/PANACEA/", $user_type))){*/
			if((preg_match("/PANACEA/i", $user_type)) || (preg_match('/TSWREIS/i', $user_type)))
			{			
				$query = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $post['uniqueID'] )->get ( "tswreis_screening_report_col_2021-2022" );
				$query_second = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $post['uniqueID'] )->get ( "healthcare2016226112942701" );
				if ($query) {				
					$query_request = $this->mongo_db->where ( "doc_data.widget_data.page1.Student Info.Unique ID", $post['uniqueID'] )->get ( $this->health_request_col_panacea_hs );
					$query_bmi = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.BMI_latest'))->where('doc_data.widget_data.page1.Student Details.Hospital Unique ID', $post['uniqueID'])->get($this->bmi_app_col_sw);
					$query_hb = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.HB_latest'))->where('doc_data.widget_data.page1.Student Details.Hospital Unique ID', $post['uniqueID'])->get($this->hb_app_col_sw);
					$result ['screening'] = $query;
					$result ['request'] = (!empty($query_request)) ? $query_request : false;
					$result ['bmi'] = (isset($query_bmi) && !empty($query_bmi)) ? $query_bmi : false;
					$result ['hb'] = (isset($query_hb) && !empty($query_hb)) ? $query_hb : false;
					$result ['screening_2020_2021'] = $query_second;
					return $result;
				} else {
					$result ['screening'] = false;
					$result ['request'] = false;
					$result ['bmi'] = false;
					$result ['hb'] = false;
					$result ['screening_2020_2021'] = false;
					return $result;
				}
			}
		/*if(($post['type'] == "ttwreis") || ($post['type'] == "healthcare2016108181933756") || (preg_match("/TTWREIS/", $user_type))){*/
			if((preg_match("/TTWREIS/i", $user_type)))
			{
				$query = $this->mongo_db->select ( array (
					'doc_data.widget_data',
					'doc_data.chart_data',
					'doc_data.external_attachments',
					'history',
					'doctors_medical_reports'
				) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $post['uniqueID'] )->get ($this->screening_app_col_tt_2021_2022  );
				$query_second = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $post['uniqueID'] )->get ( "ttwreis_screening_report_col_2020-2021" );
				if ($query) {
					$query_request = $this->mongo_db->where ( "doc_data.widget_data.page1.Student Info.Unique ID", $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'] )->get ( $this->health_request_col_ttwreis_hs );
					$query_bmi = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.BMI_latest'))->where('doc_data.widget_data.page1.Student Details.Hospital Unique ID', $post['uniqueID'])->get($this->bmi_app_col_tt);
					$query_hb = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.HB_latest'))->where('doc_data.widget_data.page1.Student Details.Hospital Unique ID', $post['uniqueID'])->get($this->hb_app_col_tt);
					$result ['screening'] = $query;
					$result ['request'] = (!empty($query_request)) ? $query_request : false;
					$result ['bmi'] = (isset($query_bmi) && !empty($query_bmi)) ? $query_bmi : false;
					$result ['hb'] = (isset($query_hb) && !empty($query_hb)) ? $query_hb : false;
					$result ['screening_2020_2021'] = (isset($query_second) && !empty($query_second)) ? $query_second : false;
					return $result;
				} else {
					$result ['screening'] = false;
					$result ['request'] = false;
					$result ['bmi'] = false;
					$result ['hb'] = false;
					$result ['screening_2020_2021'] = false;
					return $result;
				}			
			}
		/*if(($post['type'] == "tmreis") || ($post['type'] == "healthcare201610114435690") || (preg_match("/TMREIS/", $user_type))){*/
			if((preg_match("/TMREIS/i", $user_type)))
			{
				$query = $this->mongo_db->select ( array (
					'doc_data.widget_data',
					'doc_data.chart_data',
					'doc_data.external_attachments',
					'history',
					'doctors_medical_reports'
				) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $post['uniqueID'] )->orderBy(array("history.0.time"=>-1))->get ( "healthcare201672020159570" );
				if ($query) {
					$query_request = $this->mongo_db->where ( "doc_data.widget_data.page1.Student Info.Unique ID", $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'] )->get ( $this->health_request_col_tmreis_hs );
					$query_bmi = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.BMI_latest'))->where('doc_data.widget_data.page1.Student Details.Hospital Unique ID', $post['uniqueID'])->get($this->bmi_app_col_tm);
					$query_hb = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.HB_latest'))->where('doc_data.widget_data.page1.Student Details.Hospital Unique ID', $post['uniqueID'])->get($this->hb_app_col_tm);
					$result ['screening'] = $query;
					$result ['request'] = (!empty($query_request)) ? $query_request : false;
					$result ['bmi'] = (isset($query_bmi) && !empty($query_bmi)) ? $query_bmi : false;
					$result ['hb'] = (isset($query_hb) && !empty($query_hb)) ? $query_hb : false;
					$result ['screening_2020_2021'] = (isset($query_second) && !empty($query_second)) ? $query_second : false;
					return $result;
				} else {
					$result ['screening'] = false;
					$result ['request']   = false;
					$result ['bmi'] = false;
					$result ['hb'] = false;
					$result ['screening_2020_2021'] = false;
					return $result;
				}
			}
		
		/*if(($post['type'] == "bcwelfare") || ($post['type'] == "healthcare2018122191146894") || (preg_match("/BCWELFARE/", $user_type))){*/
			if((preg_match("/BCWELFARE/i", $user_type)))
			{
				$query = $this->mongo_db->select ( array (
					'doc_data.widget_data',
					'doc_data.chart_data',
					'doc_data.external_attachments',
					'history',
					'doctors_medical_reports'
				) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $post['uniqueID'] )->get ( "healthcare201812217594045" );
				$query_second = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $post['uniqueID'] )->get ( $this->screening_app_col_bc_2020_2021 );
				if ($query) {
					$query_request = $this->mongo_db->where ( "doc_data.widget_data.page1.Student Info.Unique ID", $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'] )->get ($this->health_request_col_bcwelfare_hs);
					$query_bmi = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.BMI_latest'))->where('doc_data.widget_data.page1.Student Details.Hospital Unique ID', $post['uniqueID'])->get($this->bmi_app_col_bc);
					$query_hb = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.HB_latest'))->where('doc_data.widget_data.page1.Student Details.Hospital Unique ID', $post['uniqueID'])->get($this->hb_app_col_bc);
					$result ['screening'] = $query;
					$result ['request'] = (!empty($query_request)) ? $query_request : false;
					$result ['bmi'] = (isset($query_bmi) && !empty($query_bmi)) ? $query_bmi : false;
					$result ['hb'] = (isset($query_hb) && !empty($query_hb)) ? $query_hb : false;
					return $result;
				} else {
					$result ['screening'] = false;
					$result ['request'] = false;
					$result ['bmi'] = false;
					$result ['hb'] = false;
					return $result;
				}
			}
		}
	
	/*Student EHR with full data */
	public function screening_to_students_load_ehr_doc_with_all_data($post,$user_type) {
		
		/*if(($post['type'] == "tswreis") || ($post['type'] == "healthcare2016531124515424") || (preg_match("/PANACEA/", $user_type))){*/
			if(preg_match("/PANACEA/i", $user_type) || preg_match("/TSWREIS/i", $user_type))
			{	

				$query = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $post['uniqueID'] )->get ( "healthcare2016226112942701" );

				$query_second = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $post['uniqueID'] )->get ( $this->screening_app_col_sw_2020_2021 );

				$query_2021_2022 = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $post['uniqueID'] )->get ( $this->screening_app_col_sw_2021_2022 );

				if ($query_2021_2022 != false || $query_second != false || $query!= false) {
					$query_request_old = $this->mongo_db->where ( "doc_data.widget_data.page1.Student Info.Unique ID", $post['uniqueID'] )->get ( $this->health_request_col_panacea_hs_old_format );
					$query_request_new = $this->mongo_db->where ( "doc_data.widget_data.page1.Student Info.Unique ID", $post['uniqueID'] )->get ( $this->health_request_col_panacea_hs );

					if(count($query_request_new) > 0){
						foreach($query_request_new as $req_ind => $req){
							unset($query_request_new[$req_ind]['doc_data']["notes_data"]);
							$notes_data = $this->mongo_db->whereLike ("req_doc_id", new MongoId($req['_id']))->get ( $this->collections['panacea_req_notes'] );
							
							
							if(count($notes_data) > 0){
								//$query_request_new[$req_ind]['doc_data']['notes_data'] = $notes_data[0]['notes_data'];
								$query_request_new[$req_ind]['doc_data']['notes_data'] = $notes_data;
							}
							else
							{
								$query_request_new[$req_ind]['doc_data']['notes_data'] = [];
							}

						//for Field Officer data
							$followups_data = $this->mongo_db->whereLike("follow_up_request_doc_id", $req['doc_properties']['doc_id'])->get($this->fo_or_rhso_follwup);

							if(count($followups_data) > 0){
								foreach ($followups_data as $follow) {
									$get_user = $follow['history']['last_stage']['submitted_by'];
									if(!empty($get_user))
									{
										if(preg_match("/cc/i", $get_user))
										{
											$query_request_new[$req_ind]['doc_data']['field_officer_followup'] = $follow;
										}
										else
										{
											$query_request_new[$req_ind]['doc_data']['rhso_followup'] = $follow;
										}
									}
									
								}
							}
							else
							{
								$query_request_new[$req_ind]['doc_data']['field_officer_followup'] = [];

								$query_request_new[$req_ind]['doc_data']['rhso_followup'] = [];
							}
						}
						
					}

					$query_bmi = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.BMI_latest'))->where('doc_data.widget_data.page1.Student Details.Hospital Unique ID', $post['uniqueID'])->get($this->bmi_app_col_sw);

					$query_hb = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.HB_latest'))->where('doc_data.widget_data.page1.Student Details.Hospital Unique ID', $post['uniqueID'])->get($this->hb_app_col_sw);

					$doc_visitings = $this->mongo_db->where('doc_data.widget_data.Student Details.Hospital Unique ID', $post['uniqueID'])->get('doctor_visiting_reports');

					$result ['screening'] = $query;
					$result ['request'] = $query_request_new;
					$result ['request_old'] = isset($query_request_old) ? $query_request_old : false ;
					$result ['bmi'] = $query_bmi;
					$result ['hb'] = $query_hb;
					$result ['screening_2020_2021'] = $query_second;
					$result ['screening_2021_2022'] = $query_2021_2022;
					$result ['doctor_visiting_report'] = $doc_visitings;
					return $result;
				} else {
					$result ['screening'] = false;
					$result ['request'] = false;
					$result ['bmi'] = false;
					$result ['hb'] = false;
					$result ['screening_2020_2021'] = false;
					$result ['screening_2021_2022'] = false;
					$result ['doctor_visiting_report'] = false;
					return $result;
				}
			}
		/*if(($post['type'] == "ttwreis") || ($post['type'] == "healthcare2016108181933756") || (preg_match("/TTWREIS/", $user_type))){*/
			if((preg_match("/TTWREIS/i", $user_type)))
			{
				$query = $this->mongo_db->select ( array (
					'doc_data.widget_data',
					'doc_data.chart_data',
					'doc_data.external_attachments',
					'history',
					'doctors_medical_reports'
				) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $post['uniqueID'] )->get ( "healthcare201671115519757" );
				$query_second = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $post['uniqueID'] )->get ( $this->screening_app_col_tt_2020_2021 );
				$query_2021_2022 = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $post['uniqueID'] )->get ( $this->screening_app_col_tt_2021_2022 );

				if ($query) {
					$query_request_old = $this->mongo_db->where ( "doc_data.widget_data.page1.Student Info.Unique ID", $post['uniqueID'] )->get ( $this->health_request_col_ttwreis_hs_old_format );
					$query_request_new = $this->mongo_db->where ( "doc_data.widget_data.page1.Student Info.Unique ID", $post['uniqueID'] )->get ( $this->health_request_col_ttwreis_hs );

					$query_bmi = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.BMI_latest'))->where('doc_data.widget_data.page1.Student Details.Hospital Unique ID', $post['uniqueID'])->get($this->bmi_app_col_tt);
					$query_hb = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.HB_latest'))->where('doc_data.widget_data.page1.Student Details.Hospital Unique ID', $post['uniqueID'])->get($this->hb_app_col_tt);
					$result ['screening'] = $query;
					$result ['request'] = $query_request_new;
					$result ['request_old'] = $query_request_old;
					$result ['bmi'] = $query_bmi;
					$result ['hb'] = $query_hb;
					$result ['screening_2020_2021'] = $query_second;
					$result ['screening_2021_2022'] = $query_2021_2022;
					return $result;
				} else {
					$result ['screening'] = false;
					$result ['request'] = false;
					$result ['request_old'] = false;
					$result ['bmi'] = false;
					$result ['hb'] = false;
					$result ['screening_2020_2021'] = false;
					$result ['screening_2021_2022'] = false;
					return $result;
				}			
			}
		/*if(($post['type'] == "tmreis") || ($post['type'] == "healthcare201610114435690") || (preg_match("/TMREIS/", $user_type))){*/
			if((preg_match("/TMREIS/i", $user_type)))
			{
				$query = $this->mongo_db->select ( array (
					'doc_data.widget_data',
					'doc_data.chart_data',
					'doc_data.external_attachments',
					'history',
					'doctors_medical_reports'
				) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $post['uniqueID'] )->orderBy(array("history.0.time"=>-1))->get ( "healthcare201672020159570" );
				if ($query) {
					$query_request = $this->mongo_db->where ( "doc_data.widget_data.page1.Student Info.Unique ID", $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'] )->get ( $this->health_request_col_tmreis_hs );
					$query_bmi = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.BMI_latest'))->where('doc_data.widget_data.page1.Student Details.Hospital Unique ID', $post['uniqueID'])->get($this->bmi_app_col_tm);
					$query_hb = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.HB_latest'))->where('doc_data.widget_data.page1.Student Details.Hospital Unique ID', $post['uniqueID'])->get($this->hb_app_col_tm);
					$result ['screening'] = $query;
					$result ['request'] = (!empty($query_request)) ? $query_request : false;
					$result ['bmi'] = (isset($query_bmi) && !empty($query_bmi)) ? $query_bmi : false;
					$result ['hb'] = (isset($query_hb) && !empty($query_hb)) ? $query_hb : false;
					$result ['screening_2020_2021'] = (isset($query_second) && !empty($query_second)) ? $query_second : false;
					return $result;
				} else {
					$result ['screening'] = false;
					$result ['request']   = false;
					$result ['bmi'] = false;
					$result ['hb'] = false;
					$result ['screening_2020_2021'] = false;
					return $result;
				}
			}
		
		/*if(($post['type'] == "bcwelfare") || ($post['type'] == "healthcare2018122191146894") || (preg_match("/BCWELFARE/", $user_type))){*/
			if((preg_match("/BCWELFARE/i", $user_type)))
			{
				$query = $this->mongo_db->select ( array (
					'doc_data.widget_data',
					'doc_data.chart_data',
					'doc_data.external_attachments',
					'history',
					'doctors_medical_reports'
				) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $post['uniqueID'] )->get ( "healthcare201812217594045" );
				$query_second = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $post['uniqueID'] )->get ( $this->screening_app_col_bc_2020_2021 );
				if ($query) {
					$query_request_old = $this->mongo_db->where ( "doc_data.widget_data.page1.Student Info.Unique ID", $post['uniqueID'] )->get ( $this->health_request_col_bcwelfare_hs_old_format );
					$query_request_new = $this->mongo_db->where ( "doc_data.widget_data.page1.Student Info.Unique ID", $post['uniqueID'] )->get ( $this->health_request_col_bcwelfare_hs );

					$query_bmi = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.BMI_latest'))->where('doc_data.widget_data.page1.Student Details.Hospital Unique ID', $post['uniqueID'])->get($this->bmi_app_col_bc);
					$query_hb = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.HB_latest'))->where('doc_data.widget_data.page1.Student Details.Hospital Unique ID', $post['uniqueID'])->get($this->hb_app_col_bc);
					$result ['screening'] = $query;
					$result ['request'] = $query_request_new;
					$result ['request_old'] = $query_request_old;
					$result ['bmi'] = $query_bmi;
					$result ['hb'] = $query_hb;
					$result ['screening_2020_2021'] = $query_second;
					return $result;
				} else {
					$result ['screening'] = false;
					$result ['request'] = false;
					$result ['request_old'] = false;
					$result ['bmi'] = false;
					$result ['hb'] = false;
					$result ['screening_2020_2021'] = false;
					return $result;
				}
			}
		}
	 public function get_students_list_device($school,$user_type)
    {
    	if(preg_match("/PANACEA/i", $user_type) || preg_match("/TSWREIS/i", $user_type)){
    			$this->mongo_db->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1));
    		 $query = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information', 'doc_data.widget_data.page2.Personal Information.Class'))->where(array('doc_data.widget_data.page2.Personal Information.School Name' => $school))->get($this->screening_app_col_sw_2021_2022);
	        $lists = [];
	        foreach ($query as $doc) {
	            $class    = $doc['doc_data']['widget_data']['page2']['Personal Information']['Class'];
	            $healthid_unique = $doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
	            $name = $doc['doc_data']['widget_data']['page1']['Personal Information']['Name'];
	            $healthid = $name." , ".$healthid_unique;
	            if (isset($lists[$class])) {
	                array_push($lists[$class], $healthid);
	                //array_push($lists[$class], $name);
	            } else {
	                $lists[$class] = [];
	                array_push($lists[$class], $healthid);
	               // array_push($lists[$class], $name);
	            }

	        }

        	return $lists;
        }else if(preg_match("/TTWREIS/i", $user_type))
        {
        	$this->mongo_db->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1));
        	 $query = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information', 'doc_data.widget_data.page2.Personal Information.Class'))->where(array('doc_data.widget_data.page2.Personal Information.School Name' => $school))->get($this->screening_app_col_tt_2021_2022);
	        $lists = [];
	        foreach ($query as $doc) {
	            $class    = $doc['doc_data']['widget_data']['page2']['Personal Information']['Class'];
	            $healthid_unique = $doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
	            $name = $doc['doc_data']['widget_data']['page1']['Personal Information']['Name'];
	            $healthid = $name." , ".$healthid_unique;
	            if (isset($lists[$class])) {
	                array_push($lists[$class], $healthid);
	                //array_push($lists[$class], $name);
	            } else {
	                $lists[$class] = [];
	                array_push($lists[$class], $healthid);
	               // array_push($lists[$class], $name);
	            }

	        }

        	return $lists;
        }else if(preg_match("/TMREIS/i", $user_type))
        {
        	$this->mongo_db->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1));
             $query = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information', 'doc_data.widget_data.page2.Personal Information.Class'))->where(array('doc_data.widget_data.page2.Personal Information.School Name' => $school))->get('healthcare201672020159570');
	        $lists = [];
	        foreach ($query as $doc) {
	            $class    = $doc['doc_data']['widget_data']['page2']['Personal Information']['Class'];
	            $healthid_unique = $doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
	            $name = $doc['doc_data']['widget_data']['page1']['Personal Information']['Name'];
	            $healthid = $name." , ".$healthid_unique;
	            if (isset($lists[$class])) {
	                array_push($lists[$class], $healthid);
	                //array_push($lists[$class], $name);
	            } else {
	                $lists[$class] = [];
	                array_push($lists[$class], $healthid);
	               // array_push($lists[$class], $name);
	            }

	        }

       	 return $lists;
        }else if(preg_match("/BCWELFARE/i", $user_type))
        {
        	$this->mongo_db->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1));
             $query = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information', 'doc_data.widget_data.page2.Personal Information.Class'))->where(array('doc_data.widget_data.page2.Personal Information.School Name' => $school))->get($this->screening_app_col_bc_2020_2021);
             log_message('error','healthcare201812217594045============='.print_r($query, true));
             log_message('error','schoollllllllllllll=========bccccccccccccc'.print_r($school, true));
	        $lists = [];
	        foreach ($query as $doc) {
	            $class    = $doc['doc_data']['widget_data']['page2']['Personal Information']['Class'];
	            $healthid_unique = $doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
	            $name = $doc['doc_data']['widget_data']['page1']['Personal Information']['Name'];
	            $healthid = $name." , ".$healthid_unique;
	            if (isset($lists[$class])) {
	                array_push($lists[$class], $healthid);
	                //array_push($lists[$class], $name);
	            } else {
	                $lists[$class] = [];
	                array_push($lists[$class], $healthid);
	               // array_push($lists[$class], $name);
	            }

	        }

       	 return $lists;
        }
    }



    /*Fetch student data academic year wise*/
    	 public function get_students_list_device_academic_year_wise($school,$user_type, $academic)
        {
        	$collection = $this->get_academic_year_wise_collection($academic, $user_type);

        	if(preg_match("/PANACEA/i", $user_type)){
        			$this->mongo_db->orderBy(array('doc_data.widget_data.page2.Personal Information.Class' => 1));
        		 $query = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information', 'doc_data.widget_data.page2.Personal Information.Class'))->where(array('doc_data.widget_data.page2.Personal Information.School Name' => $school))->get($collection);
    	        $lists = [];
    	        foreach ($query as $doc) {
    	            $class    = $doc['doc_data']['widget_data']['page2']['Personal Information']['Class'];
    	            $healthid_unique = $doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
    	            $name = $doc['doc_data']['widget_data']['page1']['Personal Information']['Name'];
    	            $healthid = $name." , ".$healthid_unique;
    	            if (isset($lists[$class])) {
    	                array_push($lists[$class], $healthid);
    	                //array_push($lists[$class], $name);
    	            } else {
    	                $lists[$class] = [];
    	                array_push($lists[$class], $healthid);
    	               // array_push($lists[$class], $name);
    	            }

    	        }

            	return $lists;
            }else if(preg_match("/TTWREIS/i", $user_type))
            {
            	$this->mongo_db->orderBy(array('doc_data.widget_data.page2.Personal Information.Class' => 1));
            	 $query = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information', 'doc_data.widget_data.page2.Personal Information.Class'))->where(array('doc_data.widget_data.page2.Personal Information.School Name' => $school))->get($collection);
    	        $lists = [];
    	        foreach ($query as $doc) {
    	            $class    = $doc['doc_data']['widget_data']['page2']['Personal Information']['Class'];
    	            $healthid_unique = $doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
    	            $name = $doc['doc_data']['widget_data']['page1']['Personal Information']['Name'];
    	            $healthid = $name." , ".$healthid_unique;
    	            if (isset($lists[$class])) {
    	                array_push($lists[$class], $healthid);
    	                //array_push($lists[$class], $name);
    	            } else {
    	                $lists[$class] = [];
    	                array_push($lists[$class], $healthid);
    	               // array_push($lists[$class], $name);
    	            }

    	        }

            	return $lists;
            }else if(preg_match("/TMREIS/i", $user_type))
            {
            	$this->mongo_db->orderBy(array('doc_data.widget_data.page2.Personal Information.Class' => 1));
                 $query = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information', 'doc_data.widget_data.page2.Personal Information.Class'))->where(array('doc_data.widget_data.page2.Personal Information.School Name' => $school))->get($collection);
    	        $lists = [];
    	        foreach ($query as $doc) {
    	            $class    = $doc['doc_data']['widget_data']['page2']['Personal Information']['Class'];
    	            $healthid_unique = $doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
    	            $name = $doc['doc_data']['widget_data']['page1']['Personal Information']['Name'];
    	            $healthid = $name." , ".$healthid_unique;
    	            if (isset($lists[$class])) {
    	                array_push($lists[$class], $healthid);
    	                //array_push($lists[$class], $name);
    	            } else {
    	                $lists[$class] = [];
    	                array_push($lists[$class], $healthid);
    	               // array_push($lists[$class], $name);
    	            }

    	        }

           	 return $lists;
            }else if(preg_match("/BCWELFARE/i", $user_type))
            {
            	$this->mongo_db->orderBy(array('doc_data.widget_data.page2.Personal Information.Class' => 1));
                 $query = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information', 'doc_data.widget_data.page2.Personal Information.Class'))->where(array('doc_data.widget_data.page2.Personal Information.School Name' => $school))->get($collection);
                 //log_message('error','healthcare201812217594045============='.print_r($query, true));
                 //log_message('error','schoollllllllllllll=========bccccccccccccc'.print_r($school, true));
    	        $lists = [];
    	        foreach ($query as $doc) {
    	            $class    = $doc['doc_data']['widget_data']['page2']['Personal Information']['Class'];
    	            $healthid_unique = $doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
    	            $name = $doc['doc_data']['widget_data']['page1']['Personal Information']['Name'];
    	            $healthid = $name." , ".$healthid_unique;
    	            if (isset($lists[$class])) {
    	                array_push($lists[$class], $healthid);
    	                //array_push($lists[$class], $name);
    	            } else {
    	                $lists[$class] = [];
    	                array_push($lists[$class], $healthid);
    	               // array_push($lists[$class], $name);
    	            }

    	        }

           	 return $lists;
            }
        }

    public function upload_attachment_device_sync($doc_data)
    {
    	//log_message('error',"upload_attachment_device_sync".print_r($doc_data));
    }

/**
	 * Helper: get approval history from document collection
	 *
	 * @return array
	 *  
	 * @author Naresh 
	 */

    function get_approval_history($doc_id,$user_type)
    {
    	
    	if($user_type == "PANACEA_DOCTOR"){
    		$query = $this->mongo_db->select(array('history'))->where(array('doc_properties.doc_id'=> $doc_id))->get($this->health_request_col_panacea_hs);
    	return $query[0]['history'];
    	}else if($user_type == "TTWREIS_DOCTOR")
    	{
    		$query = $this->mongo_db->select(array('history'))->where(array('doc_properties.doc_id'=> $doc_id))->get($this->health_request_col_ttwreis_hs);
    	return $query[0]['history'];
    	}else if($user_type == "TMREIS_DOCTOR")
    	{
    		$query = $this->mongo_db->select(array('history'))->where(array('doc_properties.doc_id'=> $doc_id))->get($this->health_request_col_tmreis_hs);
    	return $query[0]['history'];
    	}else if($user_type == "BCWELFARE_DOCTOR")
    	{
    		$query = $this->mongo_db->select(array('history'))->where(array('doc_properties.doc_id'=> $doc_id))->get($this->health_request_col_bcwelfare_hs);

    	return $query[0]['history'];
    	}else if($user_type == "PANACEA_HS")
    	{
    		$query = $this->mongo_db->select(array('history'))->where(array('doc_properties.doc_id'=> $doc_id))->get($this->health_request_col_panacea_hs);

    	return $query[0]['history'];
    	}else if($user_type == "TTWREIS_HS")
    	{
    		$query = $this->mongo_db->select(array('history'))->where(array('doc_properties.doc_id'=> $doc_id))->get($this->health_request_col_ttwreis_hs);

    	return $query[0]['history'];
    	}else if($user_type == "TMREIS_HS")
    	{
    		$query = $this->mongo_db->select(array('history'))->where(array('doc_properties.doc_id'=> $doc_id))->get($this->health_request_col_tmreis_hs);

    	return $query[0]['history'];
    	}else if($user_type == "BCWELFARE_HS")
    	{
    		$query = $this->mongo_db->select(array('history'))->where(array('doc_properties.doc_id'=> $doc_id))->get($this->health_request_col_bcwelfare_hs);

    	return $query[0]['history'];
    	}
    	
    }

    /**
	 * Helper: Updating the existing request doc
	 *
	 *  author Naresh
	 */

	public function update_request_submit_model($doc_data,$doc_properties,$history_array,$unique_id,$doc_id, $doc_data_external_attachments,$user_type)
	{	
		if($user_type == "PANACEA_HS" || preg_match("/TSWREIS/i", $user_type))
		{
			if(!empty($doc_data_external_attachments) && isset($doc_data_external_attachments))
    	 		{
	 			$update_query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->set(array('doc_data.widget_data' =>$doc_data,'doc_data.external_attachments' => $doc_data_external_attachments, 'doc_properties.doc_access' => $doc_properties['doc_access'],'doc_properties.access_by' => $doc_properties['access_by'],'doc_properties.doc_access_time' => $doc_properties['doc_access_time'],'history'=>$history_array))->update($this->health_request_col_panacea_hs);

	 			$app_properties = array(
							'app_name' => "Health Requests App",
							'app_id' => "healthcare2016531124515424",
							'status' => "new"
						);
	    		 $doc_data_info['widget_data'] = $doc_data;
	    		$doc_data_attach['external_attachments'] = $doc_data_external_attachments;
				$doc_data_shadow = array('doc_data' => $doc_data_info,'doc_data' => $doc_data_attach, "doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $history_array);
				$this->mongo_db->insert($this->health_request_col_panacea_hs_shadow,$doc_data_shadow);

    	 		}
    	 		else
    	 		{
	 				$update_query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->set(array('doc_data.widget_data' =>$doc_data,'doc_properties.doc_access' => $doc_properties['doc_access'],'doc_properties.access_by' => $doc_properties['access_by'],'doc_properties.doc_access_time' => $doc_properties['doc_access_time'], 'history'=>$history_array))->update($this->health_request_col_panacea_hs);

	 				$app_properties = array(
							'app_name' => "Health Requests App",
							'app_id' => "healthcare2016531124515424",
							'status' => "new"
						);
	    		 	$doc_data_info['widget_data'] = $doc_data;		    		 
					$doc_data_shadow = array('doc_data' => $doc_data_info, "doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $history_array);
					$this->mongo_db->insert($this->health_request_col_panacea_hs_shadow,$doc_data_shadow);
    	 		}
			
			return $update_query;

		

		}else if($user_type == "TTWREIS_HS")
		{
			if(!empty($doc_data_external_attachments) && isset($doc_data_external_attachments))
    	 		{
	 			
	 			$update_query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->set(array('doc_data.widget_data' =>$doc_data,'doc_data.external_attachments' => $doc_data_external_attachments, 'doc_properties.doc_access' => $doc_properties['doc_access'],'doc_properties.access_by' => $doc_properties['access_by'],'doc_properties.doc_access_time' => $doc_properties['doc_access_time'], 'history'=>$history_array))->update($this->health_request_col_ttwreis_hs);

	 			$app_properties = array(
							'app_name' => "Health Requests App",
							'app_id' => "healthcare2016108181933756",
							'status' => "new"
						);
	    		 $doc_data_info['widget_data'] = $doc_data;
	    		$doc_data_attach['external_attachments'] = $doc_data_external_attachments;
				$doc_data_shadow = array('doc_data' => $doc_data_info,'doc_data' => $doc_data_attach, "doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $history_array);
				$this->mongo_db->insert($this->health_request_col_ttwreis_hs_shadow,$doc_data_shadow);

    	 		}
    	 		else
    	 		{
	 				
	 				$update_query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->set(array('doc_data.widget_data' =>$doc_data,'doc_properties.doc_access' => $doc_properties['doc_access'],'doc_properties.access_by' => $doc_properties['access_by'],'doc_properties.doc_access_time' => $doc_properties['doc_access_time'],'history'=>$history_array))->update($this->health_request_col_ttwreis_hs);

	 				$app_properties = array(
							'app_name' => "Health Requests App",
							'app_id' => "healthcare2016108181933756",
							'status' => "new"
						);
	    		 	$doc_data_info['widget_data'] = $doc_data;		    		 
					$doc_data_shadow = array('doc_data' => $doc_data_info, "doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $history_array);
					$this->mongo_db->insert($this->health_request_col_ttwreis_hs_shadow,$doc_data_shadow);
    	 		}
			
			return $update_query;
		}else if($user_type == "TMREIS_HS")
		{
			if(!empty($doc_data_external_attachments) && isset($doc_data_external_attachments))
    	 		{
	 			
	 			$update_query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->set(array('doc_data.widget_data' =>$doc_data,'doc_data.external_attachments' => $doc_data_external_attachments,'doc_properties.doc_access' => $doc_properties['doc_access'],'doc_properties.access_by' => $doc_properties['access_by'],'doc_properties.doc_access_time' => $doc_properties['doc_access_time'],'history'=>$history_array))->update($this->health_request_col_tmreis_hs);

	 			$app_properties = array(
							'app_name' => "Health Requests App",
							'app_id' => "healthcare201610114435690",
							'status' => "new"
						);
	    		 $doc_data_info['widget_data'] = $doc_data;
	    		$doc_data_attach['external_attachments'] = $doc_data_external_attachments;
				$doc_data_shadow = array('doc_data' => $doc_data_info,'doc_data' => $doc_data_attach, "doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $history_array);
				$this->mongo_db->insert($this->health_request_col_tmreis_hs_shadow,$doc_data_shadow);

    	 		}
    	 		else
    	 		{
	 				
	 				$update_query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->set(array('doc_data.widget_data' =>$doc_data,'doc_properties.doc_access' => $doc_properties['doc_access'],'doc_properties.access_by' => $doc_properties['access_by'],'doc_properties.doc_access_time' => $doc_properties['doc_access_time'],'history'=>$history_array))->update($this->health_request_col_tmreis_hs);

	 				$app_properties = array(
							'app_name' => "Health Requests App",
							'app_id' => "healthcare201610114435690",
							'status' => "new"
						);
	    		 	$doc_data_info['widget_data'] = $doc_data;		    		 
					$doc_data_shadow = array('doc_data' => $doc_data_info, "doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $history_array);
					$this->mongo_db->insert($this->health_request_col_tmreis_hs_shadow,$doc_data_shadow);
    	 		}
			
			return $update_query;
		}
		else if($user_type == "BCWELFARE_HS")
		{
			if(!empty($doc_data_external_attachments) && isset($doc_data_external_attachments))
    	 		{
	 			
	 			$update_query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->set(array('doc_data.widget_data' =>$doc_data,'doc_data.external_attachments' => $doc_data_external_attachments, 'doc_properties.doc_access' => $doc_properties['doc_access'],'doc_properties.access_by' => $doc_properties['access_by'],'doc_properties.doc_access_time' => $doc_properties['doc_access_time'],'history'=>$history_array))->update($this->health_request_col_bcwelfare_hs);

	 			$app_properties = array(
							'app_name' => "Health Requests App",
							'app_id' => "healthcare2018122191146894",
							'status' => "new"
						);
	    		 $doc_data_info['widget_data'] = $doc_data;
	    		$doc_data_attach['external_attachments'] = $doc_data_external_attachments;
				$doc_data_shadow = array('doc_data' => $doc_data_info,'doc_data' => $doc_data_attach, "doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $history_array);
				$this->mongo_db->insert($this->health_request_col_bcwelfare_hs_shadow,$doc_data_shadow);

    	 		}
    	 		else
    	 		{
	 				
	 				$update_query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->set(array('doc_data.widget_data' =>$doc_data,'doc_properties.doc_access' => $doc_properties['doc_access'],'doc_properties.access_by' => $doc_properties['access_by'],'doc_properties.doc_access_time' => $doc_properties['doc_access_time'],'history'=>$history_array))->update($this->health_request_col_bcwelfare_hs);

	 				$app_properties = array(
							'app_name' => "Health Requests App",
							'app_id' => "healthcare2018122191146894",
							'status' => "new"
						);
	    		 	$doc_data_info['widget_data'] = $doc_data;		    		 
					$doc_data_shadow = array('doc_data' => $doc_data_info, "doc_properties"=>$doc_properties,'app_properties' => $app_properties,'history' => $history_array);
					$this->mongo_db->insert($this->health_request_col_bcwelfare_hs_shadow,$doc_data_shadow);
    	 		}
			
			return $update_query;
		}
		
		
	}

	public function get_already_present_doc_id($doc_id)
	{
		$query = $this->mongo_db->where('doc_id', $doc_id)->get('ts_hospitalised_students_col');
		 if(!empty($query)){
            return $query;
        }else{
            return 'No Doc Found';
        }
	}

	 public function insert_hospitalised_students_data($doc_data,$array_history,$unique_id,$doc_id,$doc_properties, $user_type)
    {
    	if($user_type == 'PANACEA_HS'){
    	
        $app_properties = array(
                        'app_name' => "Health Requests App",
                        'app_id'   => "healthcare2016531124515424_static_html",
                        'time' => date('Y-m-d H:i:s'),
                        'status'   => "new"
                              );

        $doc_datas = array('doc_data' => $doc_data,"doc_id"=>$doc_id,'app_properties' => $app_properties,'history' => $array_history);  
     
      	$insert = $this->mongo_db->insert('ts_hospitalised_students_col', $doc_datas);       	

      	}elseif ($user_type == 'TTWREIS_HS') {

      	 $app_properties = array(
                        'app_name' => "Health Requests App",
                        'app_id'   => "healthcare2016108181933756_static_html",
                        'time' => date('Y-m-d H:i:s'),
                        'status'   => "new"
                              );

        $doc_data = array('doc_data' => $doc_data,'app_properties' => $app_properties,'history' => $array_history);       

       $insert = $this->mongo_db->insert('tt_hospitalised_students_col',$doc_data);        

        }else{

        $app_properties = array(
                        'app_name' => "Health Requests App",
                        'app_id'   => "healthcare2018122191146894_static_html",
                        'time' => date('Y-m-d H:i:s'),
                        'status'   => "new"
                              );

        $doc_data = array('doc_data' => $doc_data,'app_properties' => $app_properties,'history' => $array_history);       

     $insert = $this->mongo_db->insert('bc_hospitalised_students_col',$doc_data);
       
    }
     return $insert;
    }

        public function update_hospitalised_students_data($doc_data,$approval_history,$unique_id,$doc_id,$doc_properties, $user_type)
       {
       	if($user_type == 'PANACEA_HS'){

           $app_properties = array(
                           'app_name' => "Health Requests App",
                           'app_id'   => "healthcare2016531124515424_static_html",
                           'time' => date('Y-m-d H:i:s'),
                           'status'   => "new"
                                 );
    		$doc_data_info['widget_data'] = $doc_data;

           $doc_datas = array('doc_data' => $doc_data_info, "doc_id"=>$doc_id, 'doc_properties'=>$doc_properties, 'app_properties' =>  $app_properties,'history' => $approval_history);    

         $ubdate =	$this->mongo_db->insert('ts_hospitalised_students_col', $doc_datas);

         }elseif ($user_type == 'TTWREIS_HS') {

         	 $app_properties = array(
                        'app_name' => "Health Requests App",
                        'app_id'   => "healthcare2016108181933756_static_html",
                        'time' => date('Y-m-d H:i:s'),
                        'status'   => "new"
                              );
    		$doc_data_info['widget_data'] = $doc_data;

           $doc_datas = array('doc_data' => $doc_data_info, "doc_id"=>$doc_id, 'doc_properties'=>$doc_properties, 'app_properties' =>  $app_properties,'history' => $approval_history);    

         $ubdate =	$this->mongo_db->insert('tt_hospitalised_students_col', $doc_datas);

          }else{

          	$app_properties = array(
          	                        'app_name' => "Health Requests App",
          	                        'app_id'   => "healthcare2018122191146894_static_html",
          	                        'time' => date('Y-m-d H:i:s'),
          	                        'status'   => "new"
          	                              );

    		$doc_data_info['widget_data'] = $doc_data;

           $doc_datas = array('doc_data' => $doc_data_info, "doc_id"=>$doc_id, 'doc_properties'=>$doc_properties, 'app_properties' =>  $app_properties,'history' => $approval_history);    

         $ubdate =	$this->mongo_db->insert('bc_hospitalised_students_col', $doc_datas);

     	}
     	return $ubdate;

       }


       public function check_doc_id_of_request($doc_id, $user_type)
    {
    	if($user_type == 'PANACEA_HS'){

    		$collection = 'ts_hospitalised_students_col';

    	}elseif ($user_type == 'TTWREIS_HS') {

    		$collection = 'tt_hospitalised_students_col';

    	}else{

    		$collection = 'bc_hospitalised_students_col';
    	}

        $query = $this->mongo_db->where('doc_id', $doc_id)->get($collection);

        if(!empty($query)){

            return $query;

        }else{

            return 'No Doc Found';
        }

    }


     // ---------------------------------------------------------------------------------------

	/**
	 * Helper: upload audio attachments
	 *
	 * @param string $app_id  	 Application Id
	 * @param string $doc_id  	 Document Id
	 * @param string $file_data  Audio file related data
	 *
	 * @return bool
	 *
	 * @author Selva 
	 */

	public function upload_call_audio_file_model($app_id,$doc_id,$file_data)
	{
		
		if($app_id == "healthcare2016531124515424")
		{
			$collection = $this->collections['panacea_req_audio'];
		}
		else if($app_id == "healthcare201610114435690")
		{
			$collection = $this->collections['tmreis_req_audio'];
		}
		else if($app_id == "healthcare2016108181933756")
		{
			$collection = $this->collections['ttwreis_req_audio'];
		}else if($app_id == "healthcare2018122191146894")
		{
			$collection = 'bc_welfare_req_audio';
		}
		
		$query_request = $this->mongo_db->where("req_doc_id",$doc_id)->get ($collection);
		
		
		$attach = array(
			'attachment_id' 	=> get_unique_id(),
			'audio_attachments'	=> $file_data,
			'datetime'			=> date('Y-m-d H:i:s')
		);
		
		if(isset($query_request[0]['attachment'])){
			array_push($query_request[0]['attachment'],$attach);
		}
		else{
			$query_request[0]['attachment'] = [];
			array_push($query_request[0]['attachment'],$attach);
			$query_request[0]["req_doc_id"] = $doc_id;
		}
		
		$is_audio = $this->mongo_db->where("req_doc_id",$doc_id)->count($collection);
		
		if($is_audio > 0)
		{
			$token = $this->mongo_db->where("req_doc_id",$doc_id)->set($query_request[0])->update($collection);
		}
		else
		{
			$token = $this->mongo_db->insert($collection, $query_request[0]);
		}

		return $token;
	}

	public function get_call_audio_file_model($doc_id,$app_id)
	{
		if($app_id == "healthcare2016531124515424")
		{
			$query_request = $this->mongo_db->where ( "req_doc_id", $doc_id )->get ( $this->collections['panacea_req_audio'] );
		}
		else if($app_id == "healthcare201610114435690")
		{
			$query_request = $this->mongo_db->where ( "req_doc_id", $doc_id )->get ( $this->collections['tmreis_req_audio'] );
		}
		else if($app_id == "healthcare2016108181933756")
		{
			$query_request = $this->mongo_db->where ( "req_doc_id", $doc_id )->get ( $this->collections['ttwreis_req_audio'] );
		}
		else if($app_id == "healthcare2018122191146894")
		{
			$query_request = $this->mongo_db->where ( "req_doc_id", $doc_id )->get ( 'bc_welfare_req_audio' );
		}
		
        if(isset($query_request[0]['attachment']) && !empty($query_request[0]['attachment']))
        {
			return $query_request[0]['attachment'];
	    }
	    else
	    {
	    	return FALSE;
	    }
	}

	/*public function get_fcm_token($fcm_token)
	{
		$query = $this->mongo_db->select(array('fcm_token'))->where('fcm_token',$fcm_token)->get('panacea_doctor_notifications');
		
		if($query)
		{
			return $query;
		}else{
			return false;
		}

	}*/

	/*
	*Insert FCM Token into database
	*
	*/
	public function insert_fcm_token($token,$email,$user_type)
	{

		if(preg_match('/PANACEA/i', $user_type))
		{
			$token_exists = $this->mongo_db->where(array("fcm_token" => $token,'email' => $email))->get('panacea_doctor_notifications');
			$data = array(
				'fcm_token' => $token,
				'email' => $email,
				'user_type' => $user_type
			);
			//log_message('error',"token_exists====================408".print_r($token_exists,true));
			if($token_exists){
			$query = $this->mongo_db->where("fcm_token",$token)->set($data)->get('panacea_doctor_notifications');
			}else{
				$query = $this->mongo_db->insert('panacea_doctor_notifications',$data);
			}
			return $query;
		}elseif(preg_match('/TTWREIS/i', $user_type))
		{
			$token_exists = $this->mongo_db->where(array("fcm_token" => $token,'email' => $email))->get('ttwreis_doctor_notifications');
			$data = array(
				'fcm_token' => $token,
				'email' => $email,
				'user_type' => $user_type
			);
			//log_message('error',"token_exists====================408".print_r($token_exists,true));
			if($token_exists){
			$query = $this->mongo_db->where("fcm_token",$token)->set($data)->get('ttwreis_doctor_notifications');
			}else{
				$query = $this->mongo_db->insert('ttwreis_doctor_notifications',$data);
			}
			return $query;

		}elseif(preg_match('/TMREIS/i', $user_type))
		{
			$token_exists = $this->mongo_db->where(array("fcm_token" => $token,'email' => $email))->get('tmreis_doctor_notifications');
			$data = array(
				'fcm_token' => $token,
				'email' => $email,
				'user_type' => $user_type
			);
			//log_message('error',"token_exists====================408".print_r($token_exists,true));
			if($token_exists){
			$query = $this->mongo_db->where("fcm_token",$token)->set($data)->get('tmreis_doctor_notifications');
			}else{
				$query = $this->mongo_db->insert('tmreis_doctor_notifications',$data);
			}
			return $query;
		}elseif(preg_match('/BCWELFARE/i', $user_type))
		{
			$token_exists = $this->mongo_db->where(array("fcm_token" => $token,'email' => $email))->get('bcwelfare_doctor_notifications');
			$data = array(
				'fcm_token' => $token,
				'email' => $email,
				'user_type' => $user_type
			);
			//log_message('error',"token_exists====================408".print_r($token_exists,true));
			if($token_exists){
			$query = $this->mongo_db->where("fcm_token",$token)->set($data)->get('bcwelfare_doctor_notifications');
			}else{
				$query = $this->mongo_db->insert('bcwelfare_doctor_notifications',$data);
			}
			return $query;
		}
		
	}


	public function insert_fcm_token_for_chart_app($token,$email,$user_type)
	{

		if(preg_match('/PANACEA/i', $user_type))
		{
			$dist_code = explode(".", $email);

			$data = array(
				'fcm_token' => $token,
				'email' 	=> $email,
				'user_type' => $user_type,
				'dist_code' => strtoupper($dist_code[0])
			);

			$token_exists = $this->mongo_db->where(array("fcm_token" => $token,'email' => $email))->get('panacea_chart_app_users_notifications');
			//log_message('error',"token_exists====================408".print_r($token_exists,true));
			if($token_exists)
			{
				$query = $this->mongo_db->where("fcm_token",$token)->set($data)->get('panacea_chart_app_users_notifications');
			}else{
				$query = $this->mongo_db->insert('panacea_chart_app_users_notifications',$data);
			}
			return $query;
		}elseif(preg_match('/TTWREIS/i', $user_type))
		{
			$dist_code = explode(".", $email);
			$dist_code_str = substr($dist_code[0], 1);
			$data = array(
				'fcm_token' => $token,
				'email' => $email,
				'user_type' => $user_type,
				'dist_code' => strtoupper($dist_code_str)
			);
			$token_exists = $this->mongo_db->where(array("fcm_token" => $token,'email' => $email))->get('ttwreis_doctor_notifications');
			if($token_exists){
			$query = $this->mongo_db->where("fcm_token",$token)->set($data)->get('ttwreis_doctor_notifications');
			}else{
				$query = $this->mongo_db->insert('ttwreis_doctor_notifications',$data);
			}
			return $query;

		}elseif(preg_match('/TMREIS/i', $user_type))
		{			
			$dist_code = explode(".", $email);
			$dist_code_str = substr($dist_code[0], 1);
			$data = array(
				'fcm_token' => $token,
				'email' => $email,
				'user_type' => $user_type,
				'dist_code' => strtoupper($dist_code_str)
			);
			//log_message('error',"token_exists====================408".print_r($token_exists,true));
			$token_exists = $this->mongo_db->where(array("fcm_token" => $token,'email' => $email))->get('tmreis_doctor_notifications');
			if($token_exists){
			$query = $this->mongo_db->where("fcm_token",$token)->set($data)->get('tmreis_doctor_notifications');
			}else{
				$query = $this->mongo_db->insert('tmreis_doctor_notifications',$data);
			}
			return $query;
		}elseif(preg_match('/BCWELFARE/i', $user_type))
		{			
			$dist_code = explode(".", $email);
			$dist_code_str = substr($dist_code[0], 1);
			$data = array(
				'fcm_token' => $token,
				'email' => $email,
				'user_type' => $user_type,
				'dist_code' => strtoupper($dist_code_str)
			);
			$token_exists = $this->mongo_db->where(array("fcm_token" => $token,'email' => $email))->get('bcwelfare_doctor_notifications');
			if($token_exists){
			$query = $this->mongo_db->where("fcm_token",$token)->set($data)->get('bcwelfare_doctor_notifications');
			}else{
				$query = $this->mongo_db->insert('bcwelfare_doctor_notifications',$data);
			}
			return $query;
		}
		
	}

	/**
	 * Helper: Get health supervisor details for school code
	 *
	 * @return array
	 *  
	 * @author Naresh 
	 */
	public function get_school_information_for_school_code($school_code,$user_type)
	{
		if(preg_match("/PANACEA/i", $user_type))
		{
			$this->mongo_db->switchDatabase($this->_configvalue['common_db']);
			$school_data = $this->mongo_db->where(array('school_code'=>$school_code))->select(array('school_name','dt_name','contact_person_name','school_mob'),array())->get('panacea_schools_list');
			$this->mongo_db->switchDatabase($this->_configvalue['dsn']);
			foreach ( $school_data as $schools => $school ) 
			{
				$dt_name = $this->mongo_db->where ( '_id', new MongoId ( $school ['dt_name'] ) )->get ( 'panacea_district' );
				if (isset ( $school ['dt_name'] )) {
					$school_data [$schools] ['dt_name'] = $dt_name [0] ['dt_name'];
				} else {
					$school_data [$schools] ['dt_name'] = "No district selected";
				}
			}
			return $school_data[0];
		}else if(preg_match("/TTWREIS/i", $user_type))
		{
			$this->mongo_db->switchDatabase($this->_configvalue['common_db']);
			$school_data = $this->mongo_db->where(array('school_code'=>$school_code))->select(array('school_name','dt_name','contact_person_name','school_mob'),array())->get('ttwreis_schools_list');
			$this->mongo_db->switchDatabase($this->_configvalue['dsn']);
			foreach ( $school_data as $schools => $school ) 
			{
				$dt_name = $this->mongo_db->where ( '_id', new MongoId ( $school ['dt_name'] ) )->get ( 'ttwreis_district' );
				if (isset ( $school ['dt_name'] )) {
					$school_data [$schools] ['dt_name'] = $dt_name [0] ['dt_name'];
				} else {
					$school_data [$schools] ['dt_name'] = "No district selected";
				}
			}
			return $school_data[0];
		}
		else if(preg_match("/TMREIS/i", $user_type))
		{
			$this->mongo_db->switchDatabase($this->_configvalue['common_db']);
			$school_data = $this->mongo_db->where(array('school_code'=>$school_code))->select(array('school_name','dt_name','contact_person_name','school_mob'),array())->get('tmreis_schools');
			$this->mongo_db->switchDatabase($this->_configvalue['dsn']);
			foreach ( $school_data as $schools => $school ) 
			{
				$dt_name = $this->mongo_db->where ( '_id', new MongoId ( $school ['dt_name'] ) )->get ( 'tmreis_district' );
				if (isset ( $school ['dt_name'] )) {
					$school_data [$schools] ['dt_name'] = $dt_name [0] ['dt_name'];
				} else {
					$school_data [$schools] ['dt_name'] = "No district selected";
				}
			}
			return $school_data[0];
		}
		else if(preg_match("/BCWELFARE/i", $user_type))
		{
			$this->mongo_db->switchDatabase($this->_configvalue['common_db']);
			$school_data = $this->mongo_db->where(array('school_code'=>$school_code))->select(array('school_name','dt_name','contact_person_name','school_mob'),array())->get('bc_welfare_schools_districts');
			$this->mongo_db->switchDatabase($this->_configvalue['dsn']);
			foreach ( $school_data as $schools => $school ) 
			{
				$dt_name = $this->mongo_db->where ( '_id', new MongoId ( $school ['dt_name'] ) )->get ( 'bc_welfare_district' );
				if (isset ( $school ['dt_name'] )) {
					$school_data [$schools] ['dt_name'] = $dt_name [0] ['dt_name'];
				} else {
					$school_data [$schools] ['dt_name'] = "No district selected";
				}
			}
			return $school_data[0];
		}
		
	}

	/**
	 * Helper: Get health supervisor details for school code
	 *
	 * @return array
	 *  
	 * @author Naresh 
	 */

	public function get_health_supervisor_details($schoolCode,$user_type)
	{
		if(preg_match("/PANACEA/i", $user_type))
		{
			$this->mongo_db->switchDatabase($this->_configvalue['common_db']);
			$query = $this->mongo_db->where(array('school_code'=>$schoolCode))->get($this->collections['panacea_health_supervisors']);
			$this->mongo_db->switchDatabase($this->_configvalue['dsn']);
			return $query[0];
		}else if(preg_match("/TTWREIS/i", $user_type))
		{
			$this->mongo_db->switchDatabase($this->_configvalue['common_db']);
			$query = $this->mongo_db->where(array('school_code'=>$schoolCode))->get($this->collections['ttwreis_health_supervisors']);
			$this->mongo_db->switchDatabase($this->_configvalue['dsn']);
			return $query[0];
		}
		else if(preg_match("/TMREIS/i", $user_type))
		{
			$this->mongo_db->switchDatabase($this->_configvalue['common_db']);
			$query = $this->mongo_db->where(array('school_code'=>$schoolCode))->get($this->collections['tmreis_health_supervisors']);
			$this->mongo_db->switchDatabase($this->_configvalue['dsn']);
			return $query[0];
		}
		else if(preg_match("/BCWELFARE/i", $user_type))
		{
			$this->mongo_db->switchDatabase($this->_configvalue['common_db']);
			$query = $this->mongo_db->where(array('school_code'=>$schoolCode))->get($this->collections['bc_welfare_health_supervisors']);
			$this->mongo_db->switchDatabase($this->_configvalue['dsn']);
			return $query[0];
		}
		
	}

	/*
	 * Helper: Get Student Personal Information details by using Unique Id
	 *
	 * @return array
	 *  
	 * @author Naresh 
	 */
	/*public function get_schoolName_details($schoolCode,$user_type)
	{
		if($user_type == "PANACEA_HS")
		{
			$this->mongo_db->switchDatabase($this->_configvalue['common_db']);
			$query = $this->mongo_db->select(array('school_name'))->where('school_code',$schoolCode)->
			get($this->collections['panacea_schools']);
			$this->mongo_db->switchDatabase($this->_configvalue['dsn']);
		}else if($user_type == "TTWREIS_HS")
		{
			$this->mongo_db->switchDatabase($this->_configvalue['common_db']);
			$query = $this->mongo_db->select(array('school_name'))->where('school_code',$schoolCode)->
			get($this->collections['ttwreis_schools']);
			$this->mongo_db->switchDatabase($this->_configvalue['dsn']);
		}else if($user_type == "TMREIS_HS")
		{
			$this->mongo_db->switchDatabase($this->_configvalue['common_db']);
			$query = $this->mongo_db->select(array('school_name'))->where('school_code',$schoolCode)->
			get($this->collections['tmreis_schools']);
			$this->mongo_db->switchDatabase($this->_configvalue['dsn']);
		}else if($user_type == "BCWELFARE_HS")
		{
			$this->mongo_db->switchDatabase($this->_configvalue['common_db']);
			$query = $this->mongo_db->select(array('school_name'))->where('school_code',$schoolCode)->
			get($this->collections['bc_welfare_schools']);
			$this->mongo_db->switchDatabase($this->_configvalue['dsn']);
		}
		
		if($query)
		{
			return $query;
		}
		else{
			return FALSE;
		}
	}*/

	/*
	 * Helper: Get Student Personal Information details by using Unique Id
	 *
	 * @return array
	 *  
	 * @author Naresh */
	 
	public function get_student_details($unique_id,$user_type)
	{
		/*if(preg_match('/PANACEA/i', $user_type))
		{
		$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_data.widget_data.page2'))->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id))->get('healthcare2016226112942701');
		}else if(preg_match('/TTWREIS/', $user_type)){
			$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_data.widget_data.page2'))->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id))->get('healthcare201671115519757');
		}else if(preg_match('/TMREIS/', $user_type)){
			$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_data.widget_data.page2'))->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id))->get('healthcare201672020159570');
		}else if(preg_match('/BCWELFARE/i', $user_type)){
			$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_data.widget_data.page2'))->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id))->get('healthcare201812217594045');
		}*/

		if(preg_match('/PANACEA/i', $user_type) || preg_match('/TSWREIS/i', $user_type))
		{

			$query_main = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_data.widget_data.page2','doc_properties.doc_id'))->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id))->orderBy(array('history.last_stage.time' => -1))->get('tswreis_screening_report_col_2021-2022');
			if(isset($query_main) && !empty($query_main)){
				if($query_main)
				{
					return $query_main;
				}
				else{
					return FALSE;
				}
			}else{
				$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_data.widget_data.page2','doc_properties.doc_id'))->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id))->orderBy(array('history.last_stage.time' => -1))->get('healthcare2016226112942701');

				if($query)
				{
					return $query;
				}
				else{
					return FALSE;
				}
			}
			
			

		}else if(preg_match('/TTWREIS/', $user_type) || $user_type == "TTWREIS_FO"){
			$query_main = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_data.widget_data.page2','doc_properties.doc_id'))->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id))->orderBy(array('history.last_stage.time' => -1))->get('ttwreis_screening_report_col_2021-2022');
			if(isset($query_main) && !empty($query_main)){
				if($query_main)
				{
					return $query_main;
				}
				else{
					return FALSE;
				}
			}else{
				$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_data.widget_data.page2','doc_properties.doc_id'))->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id))->orderBy(array('history.last_stage.time' => -1))->get('ttwreis_screening_report_col_2020-2021');

				if($query)
				{
					return $query;
				}
				else{
					return FALSE;
				}
			}
		
		}else if(preg_match('/TMREIS/', $user_type) || $user_type == "TMREIS_FO"){
			$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_data.widget_data.page2','doc_properties.doc_id'))->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id))->get('healthcare201672020159570');
			if($query)
		{
			return $query;
		}
		else{
			return FALSE;
		}
		}else if(preg_match('/BCWELFARE/i', $user_type) || $user_type == "BCWELFARE_FO"){
			$query_main = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_data.widget_data.page2','doc_properties.doc_id'))->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id))->orderBy(array('history.last_stage.time' => -1))->get('bcwelfare_screening_report_col_2020-2021');
			if(isset($query_main) && !empty($query_main)){
				if($query_main)
				{
					return $query_main;
				}
				else{
					return FALSE;
				}
			}else{
				$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_data.widget_data.page2','doc_properties.doc_id'))->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id))->orderBy(array('history.last_stage.time' => -1))->get('healthcare201812217594045');

				if($query)
				{
					return $query;
				}
				else{
					return FALSE;
				}
			}
		}
		

		
	}

	public function get_normal_docs_device($uniqueID,$user_type,$limit = false)
	{
		if($user_type == "PANACEA_HS")
		{
			$documents = [];
			$search_query = array('doc_data.widget_data.page1.Student Info.Unique ID' => array(
				'$regex' => $uniqueID),'doc_data.widget_data.page2.Review Info.Request Type' => "Normal");
			$not_equal_to = array ("doc_data.widget_data.page2.Review Info.Status" => array ('$ne' => "Cured"));
			
			$this->mongo_db->orderBy(array('history.time' => -1));
			$get_documents = $this->mongo_db->select(array(),array('_id'))->where($search_query)->where($not_equal_to)->limit($limit)->get($this->health_request_col_panacea_hs);
			foreach ($get_documents as $data) {

				$parent_no = $this->mongo_db->select(array("doc_data.widget_data"))->where("doc_data.widget_data.page1.Personal Information.Hospital Unique ID", $data['doc_data']['widget_data']['page1']['Student Info']['Unique ID'])->get($this->screening_app_col_sw_2021_2022);
				
				if(isset($parent_no[0]["doc_data"]["widget_data"]["page1"]["Personal Information"]["Mobile"]["mob_num"])){
					$phone_numbers["Father_name"] = $parent_no[0]["doc_data"]["widget_data"]["page2"]["Personal Information"]["Father Name"];
					$phone_numbers["father_mobile_no"] = $parent_no[0]["doc_data"]["widget_data"]["page1"]["Personal Information"]["Mobile"]["mob_num"];
				}

				$split_id = explode("_", $data['doc_data']['widget_data']['page1']['Student Info']['Unique ID']);
				$school_code = intval($split_id[1]);

				$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
				$hs_details = $this->mongo_db->select(array("school_code","hs_mob", "hs_ph", "username"))->where("school_code", $school_code)->get("panacea_health_supervisors");

				if(!empty($hs_details)){
					$phone_numbers["hs_name"] = $hs_details[0]["username"];
					$phone_numbers["hs_mob1"] = $hs_details[0]["hs_mob"];
					$phone_numbers["hs_mob2"] = $hs_details[0]["hs_ph"];
				}
				$get_principal_no = $this->mongo_db->select(array("contact_person_name","school_ph","school_mob"))->where("school_code", $school_code)->get("panacea_schools_list");

				if(!empty($get_principal_no)){
					$phone_numbers["principal_name"] = $get_principal_no[0]["contact_person_name"];
					$phone_numbers["principal_mob1"] = $get_principal_no[0]["school_ph"];
					$phone_numbers["principal_mob2"] = $get_principal_no[0]["school_mob"];
				}
				array_push($data['doc_data']['widget_data']['page1']['Student Info'], $phone_numbers);

				$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

				$exp = $data['doc_data']['widget_data']['page2']['Review Info']['Status'];
				if($exp != "Expired"){
					array_push($documents, $data);
				}
			}
			
		}else if($user_type == "TTWREIS_HS")
		{
			$search_query = array('doc_data.widget_data.page1.Student Info.Unique ID' => array(
				'$regex' => $uniqueID),'doc_data.widget_data.page2.Review Info.Request Type' => "Normal", 'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured"));
			$this->mongo_db->orderBy(array('history.time' => -1));
			$documents = $this->mongo_db->select(array(),array('_id'))->where($search_query)->limit($limit)->get($this->health_request_col_ttwreis_hs);
			
		}else if($user_type == "TMREIS_HS")
		{
			$search_query = array('doc_data.widget_data.page1.Student Info.Unique ID' => array(
				'$regex' => $uniqueID),'doc_data.widget_data.page2.Review Info.Request Type' => "Normal", 'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured"));
			$this->mongo_db->orderBy(array('history.time' => -1));
			$documents = $this->mongo_db->select(array(),array('_id'))->where($search_query)->limit($limit)->get($this->health_request_col_tmreis_hs);
			
		}else if($user_type == "BCWELFARE_HS")
		{
			$search_query = array('doc_data.widget_data.page1.Student Info.Unique ID' => array(
				'$regex' => $uniqueID),'doc_data.widget_data.page2.Review Info.Request Type' => "Normal", 'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured"));
			$this->mongo_db->orderBy(array('history.time' => -1));
			$documents = $this->mongo_db->select(array(),array('_id'))->where($search_query)->limit($limit)->get($this->health_request_col_bcwelfare_hs);
		}
			return $documents;

		
	}

	public function get_emergency_docs_device($uniqueID,$user_type,$limit = false)
	{
		if($user_type == "PANACEA_HS")
		{
			$documents = [];
			$search_query = array('doc_data.widget_data.page1.Student Info.Unique ID' => array(
				'$regex' => $uniqueID),'doc_data.widget_data.page2.Review Info.Request Type' => "Emergency");
			$not_equal_to = array ("doc_data.widget_data.page2.Review Info.Status" => array ('$ne' => "Cured"));
			
			$this->mongo_db->orderBy(array('history.time' => -1));
			$get_documents = $this->mongo_db->select(array(),array('_id'))->where($search_query)->where($not_equal_to)->limit($limit)->get($this->health_request_col_panacea_hs);
			foreach ($get_documents as $data) {
				$exp = $data['doc_data']['widget_data']['page2']['Review Info']['Status'];
				if($exp != "Expired"){
					array_push($documents, $data);
				}
			}
		}else if($user_type == "TTWREIS_HS")
		{
			$search_query = array('doc_data.widget_data.page1.Student Info.Unique ID' => array(
				'$regex' => $uniqueID),'doc_data.widget_data.page2.Review Info.Request Type' => "Emergency", 'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured"));
			$this->mongo_db->orderBy(array('history.time' => -1));
			$documents = $this->mongo_db->select(array(),array('_id'))->where($search_query)->limit($limit)->get($this->health_request_col_ttwreis_hs);
		}else if($user_type == "TMREIS_HS")
		{
			$search_query = array('doc_data.widget_data.page1.Student Info.Unique ID' => array(
				'$regex' => $uniqueID),'doc_data.widget_data.page2.Review Info.Request Type' => "Emergency", 'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured"));
			$this->mongo_db->orderBy(array('history.time' => -1));
			$documents = $this->mongo_db->select(array(),array('_id'))->where($search_query)->limit($limit)->get($this->health_request_col_tmreis_hs);
		}else if($user_type == "BCWELFARE_HS")
		{
			$search_query = array('doc_data.widget_data.page1.Student Info.Unique ID' => array(
				'$regex' => $uniqueID),'doc_data.widget_data.page2.Review Info.Request Type' => "Emergency", 'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured"));
			$this->mongo_db->orderBy(array('history.time' => -1));
			$documents = $this->mongo_db->select(array(),array('_id'))->where($search_query)->limit($limit)->get($this->health_request_col_bcwelfare_hs);
		}
		return $documents;
	}

	public function get_chronic_docs_device($uniqueID,$user_type,$limit = false)
	{
		if($user_type == "PANACEA_HS")
		{
			$documents = [];
			$search_query = array('doc_data.widget_data.page1.Student Info.Unique ID' => array(
				'$regex' => $uniqueID),'doc_data.widget_data.page2.Review Info.Request Type' => "Chronic");
			$not_equal_to = array ("doc_data.widget_data.page2.Review Info.Status" => array ('$ne' => "Cured"));
			
			$this->mongo_db->orderBy(array('history.time' => -1));
			$get_documents = $this->mongo_db->select(array(),array('_id'))->where($search_query)->where($not_equal_to)->limit($limit)->get($this->health_request_col_panacea_hs);
			foreach ($get_documents as $data) {
				$exp = $data['doc_data']['widget_data']['page2']['Review Info']['Status'];
				if($exp != "Expired"){
					array_push($documents, $data);
				}
			}
		}else if($user_type == "TTWREIS_HS")
		{
			$search_query = array('doc_data.widget_data.page1.Student Info.Unique ID' => array(
				'$regex' => $uniqueID),'doc_data.widget_data.page2.Review Info.Request Type' => "Chronic", 'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured"));
			$this->mongo_db->orderBy(array('history.time' => -1));
			$documents = $this->mongo_db->select(array(),array('_id'))->where($search_query)->limit($limit)->get($this->health_request_col_ttwreis_hs);
		}else if($user_type == "TMREIS_HS")
		{
			$search_query = array('doc_data.widget_data.page1.Student Info.Unique ID' => array(
				'$regex' => $uniqueID),'doc_data.widget_data.page2.Review Info.Request Type' => "Chronic", 'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured"));
			$this->mongo_db->orderBy(array('history.time' => -1));
			$documents = $this->mongo_db->select(array(),array('_id'))->where($search_query)->limit($limit)->get($this->health_request_col_tmreis_hs);
		}else if($user_type == "BCWELFARE_HS")
		{
			$search_query = array('doc_data.widget_data.page1.Student Info.Unique ID' => array(
				'$regex' => $uniqueID),'doc_data.widget_data.page2.Review Info.Request Type' => "Chronic", 'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured"));
			$this->mongo_db->orderBy(array('history.time' => -1));
			$documents = $this->mongo_db->select(array(),array('_id'))->where($search_query)->limit($limit)->get($this->health_request_col_bcwelfare_hs);
		}
		return $documents;
	}

	public function get_cured_docs_device($unique_id,$user_type,$request_type,$limit = false)
	{

		if($user_type == "PANACEA_HS")
		{
			$search_query = array('doc_data.widget_data.page1.Student Info.Unique ID' => array(
				'$regex' => $unique_id), 'doc_data.widget_data.page2.Review Info.Status' =>  "Cured");
			$this->mongo_db->orderBy(array('history.time' => -1));
			$documents = $this->mongo_db->select(array(),array('_id'))->where("doc_data.widget_data.page2.Review Info.Request Type" , $request_type)->where($search_query)->limit($limit)->get($this->health_request_col_panacea_hs);
		}else if($user_type == "TTWREIS_HS")
		{
			$search_query = array('doc_data.widget_data.page1.Student Info.Unique ID' => array(
				'$regex' => $unique_id), 'doc_data.widget_data.page2.Review Info.Status' => "Cured");
			$this->mongo_db->orderBy(array('history.time' => -1));
			$documents = $this->mongo_db->select(array(),array('_id'))->where("doc_data.widget_data.page2.Review Info.Request Type" , $request_type)->where($search_query)->limit($limit)->get($this->health_request_col_ttwreis_hs);
		}else if($user_type == "TMREIS_HS")
		{
			$search_query = array('doc_data.widget_data.page1.Student Info.Unique ID' => array(
				'$regex' => $unique_id), 'doc_data.widget_data.page2.Review Info.Status' => "Cured");
			$this->mongo_db->orderBy(array('history.time' => -1));
			$documents = $this->mongo_db->select(array(),array('_id'))->where("doc_data.widget_data.page2.Review Info.Request Type" , $request_type)->where($search_query)->limit($limit)->get($this->health_request_col_tmreis_hs);
		}else if($user_type == "BCWELFARE_HS")
		{
			$search_query = array('doc_data.widget_data.page1.Student Info.Unique ID' => array(
				'$regex' => $unique_id), 'doc_data.widget_data.page2.Review Info.Status' => "Cured");
			$this->mongo_db->orderBy(array('history.time' => -1));
			$documents = $this->mongo_db->select(array(),array('_id'))->where("doc_data.widget_data.page2.Review Info.Request Type" , $request_type)->where($search_query)->limit($limit)->get($this->health_request_col_bcwelfare_hs);
		}
		return $documents;
	}

	public function get_cured_docs_requests_wise($unique_id,$user_type)
	{
		if($user_type == "PANACEA_HS")
		{
			$search_query = array('doc_data.widget_data.page1.Student Info.Unique ID' => array(
				'$regex' => $unique_id), 'doc_data.widget_data.page2.Review Info.Status' =>  "Cured");
			
			$data['Normal'] = $this->mongo_db->where("doc_data.widget_data.page2.Review Info.Request Type" , "Normal")->where($search_query)->count($this->health_request_col_panacea_hs);
			$data['Emergency'] = $this->mongo_db->where("doc_data.widget_data.page2.Review Info.Request Type" , "Emergency")->where($search_query)->count($this->health_request_col_panacea_hs);
			$data['Chronic'] = $this->mongo_db->where("doc_data.widget_data.page2.Review Info.Request Type" , "Chronic")->where($search_query)->count($this->health_request_col_panacea_hs);
		}else if($user_type == "TTWREIS_HS")
		{
			$search_query = array('doc_data.widget_data.page1.Student Info.Unique ID' => array(
				'$regex' => $unique_id), 'doc_data.widget_data.page2.Review Info.Status' => "Cured");
			$data['Normal'] = $this->mongo_db->where("doc_data.widget_data.page2.Review Info.Request Type" , "Normal")->where($search_query)->count($this->health_request_col_ttwreis_hs);
			$data['Emergency'] = $this->mongo_db->where("doc_data.widget_data.page2.Review Info.Request Type" , "Emergency")->where($search_query)->count($this->health_request_col_ttwreis_hs);
			$data['Chronic'] = $this->mongo_db->where("doc_data.widget_data.page2.Review Info.Request Type" , "Chronic")->where($search_query)->count($this->health_request_col_ttwreis_hs);
		}else if($user_type == "TMREIS_HS")
		{
			$search_query = array('doc_data.widget_data.page1.Student Info.Unique ID' => array(
				'$regex' => $unique_id), 'doc_data.widget_data.page2.Review Info.Status' => "Cured");
			$data['Normal'] = $this->mongo_db->where("doc_data.widget_data.page2.Review Info.Request Type" , "Normal")->where($search_query)->count($this->health_request_col_tmreis_hs);
			$data['Emergency'] = $this->mongo_db->where("doc_data.widget_data.page2.Review Info.Request Type" , "Emergency")->where($search_query)->count($this->health_request_col_tmreis_hs);
			$data['Chronic'] = $this->mongo_db->where("doc_data.widget_data.page2.Review Info.Request Type" , "Chronic")->where($search_query)->count($this->health_request_col_tmreis_hs);
		}else if($user_type == "BCWELFARE_HS")
		{
			$search_query = array('doc_data.widget_data.page1.Student Info.Unique ID' => array(
				'$regex' => $unique_id), 'doc_data.widget_data.page2.Review Info.Status' => "Cured");
			$data['Normal'] = $this->mongo_db->where("doc_data.widget_data.page2.Review Info.Request Type" , "Normal")->where($search_query)->count($this->health_request_col_bcwelfare_hs);
			$data['Emergency'] = $this->mongo_db->where("doc_data.widget_data.page2.Review Info.Request Type" , "Emergency")->where($search_query)->count($this->health_request_col_bcwelfare_hs);
			$data['Chronic'] = $this->mongo_db->where("doc_data.widget_data.page2.Review Info.Request Type" , "Chronic")->where($search_query)->count($this->health_request_col_bcwelfare_hs);
		}

		return $data;
	}
	/**
	 * Helper: Fetch school details using the school code
	 *
	 * @param  int $school_code  School code
	 *
	 * @return array
	 */
	 
	public function get_school_info($school_code,$user_type)
	{
		if($user_type == "PANACEA_HS")
		{
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$res = $this->mongo_db->where(array('school_code' => intval($school_code)))->get($this->collections['panacea_schools']);
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			return $res;
		}else if($user_type == "TTWREIS_HS")
		{
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$res = $this->mongo_db->where(array('school_code' => $school_code))->get($this->collections['ttwreis_schools']);
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			return $res;
		}
		else if($user_type == "TMREIS_HS")
		{
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$res = $this->mongo_db->where(array('school_code' => $school_code))->get($this->collections['tmreis_schools']);
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			return $res;
		}
		else if($user_type == "BCWELFARE_HS")
		{
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$res = $this->mongo_db->where(array('school_code' => $school_code))->get($this->collections['bc_welfare_schools']);
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			return $res;
		}
		
	}

	public function get_school_info_for_screening($school_code,$user_type)
	{
		if($user_type == "tswreis")
		{
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$res = $this->mongo_db->where(array('school_code' => intval($school_code)))->get($this->collections['panacea_schools']);
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			return $res;
		}else if($user_type == "ttwreis")
		{
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$res = $this->mongo_db->where(array('school_code' => intval($school_code)))->get($this->collections['ttwreis_schools']);
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			return $res;
		}
		else if($user_type == "tmreis")
		{
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$res = $this->mongo_db->where(array('school_code' => intval($school_code)))->get($this->collections['tmreis_schools']);
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			return $res;
		}
		else if($user_type == "bcwelfare")
		{
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$res = $this->mongo_db->where(array('school_code' => intval($school_code)))->get($this->collections['bc_welfare_schools']);
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			return $res;
		}
		
	}
	
	public function create_sanitation_report_model($doc_data, $doc_properties, $history,$user_type)
		{
			if($user_type == "PANACEA_HS")
			{
				
				$submitted = $history['last_stage']['submitted_by'];
				$time = $history['last_stage']['time'];
				$get_time = explode(" ", $time);
				$get_count = $this->mongo_db->where(array('history.last_stage.submitted_by' => $submitted,'doc_data.widget_data.page4.Declaration Information.Date:' => $get_time[0]))->count('healthcare2016111212310531_version_2');

				if($get_count == 0)
				{
					$app_properties['app_name'] = "Sanitation app";
					$app_properties['app_id'] = "healthcare2016111212310531";

				 	$final_values = array("doc_data"=>array("widget_data"=>$doc_data),"doc_properties"=>$doc_properties, "history"=>$history, "app_properties"=>$app_properties);
			  		$query = $this->mongo_db->insert('healthcare2016111212310531_version_2',$final_values);
				}else
				{
					$update = array('doc_data.widget_data' => $doc_data, "history"=>$history);				
					$query = $this->mongo_db->where(array('history.last_stage.submitted_by' => $submitted,'doc_data.widget_data.page4.Declaration Information.Date:' => $get_time[0]))->set($update)->update('healthcare2016111212310531_version_2');
				}
				
				/*$app_properties['app_name'] = "Sanitation app";
					$app_properties['app_id'] = "healthcare2016111212310531";

				 	$final_values = array("doc_data"=>array("widget_data"=>$doc_data),"doc_properties"=>$doc_properties, "history"=>$history, "app_properties"=>$app_properties);
			  		$query = $this->mongo_db->insert('healthcare2016111212310531_version_2',$final_values);*/
			  		
			}else if($user_type == "TTWREIS_HS")
			{
				$submitted = $history['last_stage']['submitted_by'];
				$time = $history['last_stage']['time'];
				$get_time = explode(" ", $time);
				$get_count = $this->mongo_db->where(array('history.last_stage.submitted_by' => $submitted,'doc_data.widget_data.page4.Declaration Information.Date:' => $get_time[0]))->count('healthcare20171211809800_version_2');

				if($get_count == 0)
				{
					$app_properties['app_name'] = "Sanitation app";
					$app_properties['app_id'] = "healthcare20171211809800";

				 	$final_values = array("doc_data"=>array("widget_data"=>$doc_data),"doc_properties"=>$doc_properties, "history"=>$history, "app_properties"=>$app_properties);
			  		$query = $this->mongo_db->insert('healthcare20171211809800_version_2',$final_values);
				}else
				{
					$update = array('doc_data.widget_data' => $doc_data, "history"=>$history);				
					$query = $this->mongo_db->where(array('history.last_stage.submitted_by' => $submitted,'doc_data.widget_data.page4.Declaration Information.Date:' => $get_time[0]))->set($update)->update('healthcare20171211809800_version_2');
				}
			}else if($user_type == "TMREIS_HS")
			{
				$submitted = $history['last_stage']['submitted_by'];
				$time = $history['last_stage']['time'];
				$get_time = explode(" ", $time);
				$get_count = $this->mongo_db->where(array('history.last_stage.submitted_by' => $submitted,'doc_data.widget_data.page4.Declaration Information.Date:' => $get_time[0]))->count('healthcare2017121175645993_version_2');

				if($get_count == 0)
				{
					$app_properties['app_name'] = "Sanitation app";
					$app_properties['app_id'] = "healthcare2017121175645993";

				 	$final_values = array("doc_data"=>array("widget_data"=>$doc_data),"doc_properties"=>$doc_properties, "history"=>$history, "app_properties"=>$app_properties);
			  		$query = $this->mongo_db->insert('healthcare2017121175645993_version_2',$final_values);
				}else
				{
					$update = array('doc_data.widget_data' => $doc_data, "history"=>$history);				
					$query = $this->mongo_db->where(array('history.last_stage.submitted_by' => $submitted,'doc_data.widget_data.page4.Declaration Information.Date:' => $get_time[0]))->set($update)->update('healthcare2017121175645993_version_2');
				}
			}else if($user_type == "BCWELFARE_HS")
			{
				$submitted = $history['last_stage']['submitted_by'];
				$time = $history['last_stage']['time'];
				$get_time = explode(" ", $time);
				$get_count = $this->mongo_db->where(array('history.last_stage.submitted_by' => $submitted,'doc_data.widget_data.page4.Declaration Information.Date:' => $get_time[0]))->count('healthcare201822113134483_version_2');

				if($get_count == 0)
				{
					$app_properties['app_name'] = "Sanitation app";
					$app_properties['app_id'] = "healthcare201822113134483";

				 	$final_values = array("doc_data"=>array("widget_data"=>$doc_data),"doc_properties"=>$doc_properties, "history"=>$history, "app_properties"=>$app_properties);
			  		$query = $this->mongo_db->insert('healthcare201822113134483_version_2',$final_values);
				}else
				{
					$update = array('doc_data.widget_data' => $doc_data, "history"=>$history);				
					$query = $this->mongo_db->where(array('history.last_stage.submitted_by' => $submitted,'doc_data.widget_data.page4.Declaration Information.Date:' => $get_time[0]))->set($update)->update('healthcare201822113134483_version_2');
				}
			}			 

			  if($query)
				  return TRUE;
			  else
				  return FALSE;
		}

	function get_sanitation_report_daily($today_date,$email)
	{
		$search_query = array('history.last_stage.time' => array('$regex' => $today_date),
			'doc_properties._version' => 2,'history.last_stage.submitted_by' => $email);	

		$school_email = str_replace("#", "@", $email);
		$this->mongo_db->switchDatabase($this->common_db['common_db']);
			$query = $this->mongo_db->select(array())->where(array('email' => $school_email))->get($this->collections['panacea_health_supervisors']);
			$this->mongo_db->switchDatabase($this->common_db['dsn']);

		if(!empty($query))
		{
			$this->mongo_db->orderBy(array('history.last_stage.time' => 1));
			$get_sanitation_report_daily = $this->mongo_db->select(array(),array('_id'))->where($search_query)->get('healthcare2016111212310531_version_2');
			return $get_sanitation_report_daily;
		}

			$this->mongo_db->switchDatabase($this->common_db['common_db']);
			$query_bc = $this->mongo_db->select(array())->where(array('email' => $school_email))->get($this->collections['bc_welfare_health_supervisors']);
			$this->mongo_db->switchDatabase($this->common_db['dsn']);
		if(!empty($query_bc))
		{
			$this->mongo_db->orderBy(array('history.last_stage.time' => 1));
			$get_sanitation_report_daily = $this->mongo_db->select(array(),array('_id'))->where($search_query)->get('healthcare201822113134483_version_2');
			return $get_sanitation_report_daily;
		}

		$this->mongo_db->switchDatabase($this->common_db['common_db']);
			$query_tt = $this->mongo_db->select(array())->where(array('email' => $school_email))->get($this->collections['ttwreis_health_supervisors']);
			$this->mongo_db->switchDatabase($this->common_db['dsn']);
		if(!empty($query_tt))
		{
			$this->mongo_db->orderBy(array('history.last_stage.time' => 1));
			$get_sanitation_report_daily = $this->mongo_db->select(array(),array('_id'))->where($search_query)->get('healthcare20171211809800_version_2');
			return $get_sanitation_report_daily;
		}

		$this->mongo_db->switchDatabase($this->common_db['common_db']);
			$query_tm = $this->mongo_db->select(array())->where(array('email' => $school_email))->get($this->collections['tmreis_health_supervisors']);
			$this->mongo_db->switchDatabase($this->common_db['dsn']);
		if(!empty($query_tm))
		{
			$this->mongo_db->orderBy(array('history.last_stage.time' => 1));
			$get_sanitation_report_daily = $this->mongo_db->select(array(),array('_id'))->where($search_query)->get('healthcare201822113134483_version_2');
			return $get_sanitation_report_daily;
		}

		
	}

	function get_sanitation_report_weekly($today_date,$email)
	{
			$query = array('history.last_stage.time' => array('$regex' => $today_date),
			'doc_data.widget_data.weekly.Water Supply Condition' =>array('$exists' => TRUE),'doc_properties._version' => 2,'history.last_stage.submitted_by' => $email);
		$this->mongo_db->orderBy(array('history.last_stage.time' => 1));
		$get_sanitation_report_daily = $this->mongo_db->select(array(),array('_id'))->where($query)->get($this->sanitaion_report_ts);
		return $get_sanitation_report_daily;
	}
	
	public function get_initaite_requests_count_today_date($today_date,$user_type)
	{
		//$document = $this->mongo_db->select(array('history'))->whereLike("history.0.time" , $today_date)->get($this->request_app_col);
		if(preg_match("/PANACEA/i", $user_type))
		{
			$document = $this->mongo_db->select(array('history'))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_panacea_hs);
			//log_message('error','document--------------------19480'.print_r($document,true));
			if(count($document)>0){
				return $document;
			}
		}else if(preg_match("/TTWREIS/i", $user_type))
		{
			$document = $this->mongo_db->select(array('history'))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_ttwreis_hs);
			//log_message('error','document--------------------19480'.print_r($document,true));
			if(count($document)>0){
				return $document;
			}
		}else if(preg_match("/TMREIS/i", $user_type))
		{
			$document = $this->mongo_db->select(array('history'))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_tmreis_hs);
			//log_message('error','document--------------------19480'.print_r($document,true));
			if(count($document)>0){
				return $document;
			}
		}else if(preg_match("/BCWELFARE/i", $user_type))
		{
			$document = $this->mongo_db->select(array('history'))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_bcwelfare_hs);
			//log_message('error','document--------------------19480'.print_r($document,true));
			if(count($document)>0){
				return $document;
			}
		}
		else
		{
			return FALSE;
		}
	}

	public function get_normal_requests_count_today_date($today_date,$user_type)
	{
		//$document = $this->mongo_db->select(array('history'))->whereLike("history.0.time" , $today_date)->get($this->request_app_col);
		if(preg_match("/PANACEA/i", $user_type))
		{
			$document = $this->mongo_db->select(array('history'))->
			where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_panacea_hs);
			
		}else if(preg_match("/TTWREIS/i", $user_type))
		{
			$document = $this->mongo_db->select(array('history'))->
			where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_ttwreis_hs);
			
		}else if(preg_match("/TMREIS/i", $user_type))
		{
			$document = $this->mongo_db->select(array('history'))->
			where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_tmreis_hs);
			
		}else if(preg_match("/BCWELFARE/i", $user_type))
		{
			$document = $this->mongo_db->select(array('history'))->
			where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_bcwelfare_hs);
			
		}

		if(count($document)>0)
			{
				return $document;
			}
			else
			{
				return FALSE;
			}
	}
	public function get_emergency_requests_count_today_date($today_date,$user_type)
	{
		//$document = $this->mongo_db->select(array('history'))->whereLike("history.0.time" , $today_date)->get($this->request_app_col);
		if(preg_match("/PANACEA/i", $user_type))
		{
			$document = $this->mongo_db->select(array('history'))->
			where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_panacea_hs);
			
		}else if(preg_match("/TTWREIS/i", $user_type))
		{
			$document = $this->mongo_db->select(array('history'))->
			where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_ttwreis_hs);
		}
		else if(preg_match("/TMREIS/i", $user_type))
		{
			$document = $this->mongo_db->select(array('history'))->
			where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_tmreis_hs);
		}
		else if(preg_match("/BCWELFARE/i", $user_type))
		{
			$document = $this->mongo_db->select(array('history'))->
			where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_bcwelfare_hs);			
		}

		if(count($document)>0){
				return $document;
			}
		else
		{
			return FALSE;
		}
	}
	public function get_chronic_requests_count_today_date($today_date,$user_type)
	{
		//$document = $this->mongo_db->select(array('history'))->whereLike("history.0.time" , $today_date)->get($this->request_app_col);
		if(preg_match("/PANACEA/i", $user_type))
		{
			$document = $this->mongo_db->select(array('history'))->
			where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_panacea_hs);
		}else if(preg_match("/TTWREIS/i", $user_type))
		{
			$document = $this->mongo_db->select(array('history'))->
			where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_ttwreis_hs);
		}
		else if(preg_match("/TMREIS/i", $user_type))
		{
			$document = $this->mongo_db->select(array('history'))->
			where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_tmreis_hs);
		}
		else if(preg_match("/BCWELFARE/i", $user_type))
		{
			$document = $this->mongo_db->select(array('history'))->
			where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_bcwelfare_hs);
			
			
		}

		if(count($document)>0)
		{
			return $document;
		}
		else
		{
			return FALSE;
		}
	}
	public function get_doctors_response_count_today_date($today_date,$user_type)
	{
		//$document = $this->mongo_db->select(array('history'))->whereLike("history.1.time" , $today_date)->get($this->request_app_col);
		if(preg_match("/PANACEA/i", $user_type))
		{
			$document = $this->mongo_db->select(array('history'))->whereLike("history.1.time" , $today_date)->count($this->health_request_col_panacea_hs);
			
		}else if(preg_match("/TTWREIS/i", $user_type))
		{
			$document = $this->mongo_db->select(array('history'))->whereLike("history.1.time" , $today_date)->count($this->health_request_col_ttwreis_hs);
		}
		else if(preg_match("/TMREIS/i", $user_type))
		{
			$document = $this->mongo_db->select(array('history'))->whereLike("history.1.time" , $today_date)->count($this->health_request_col_tmreis_hs);
		}
		else if(preg_match("/BCWELFARE/i", $user_type))
		{
			$document = $this->mongo_db->select(array('history'))->whereLike("history.1.time" , $today_date)->count($this->health_request_col_bcwelfare_hs);
		}else
		{
			return FALSE;
		}

		if(count($document)>0)
		{
			return $document;
		}
		else
		{
			return FALSE;
		}
	}
	public function get_initaite_requests_count($today_date,$dt_name = "All",$school_name = "All",$user_type)
	{
		if(preg_match("/PANACEA/i", $user_type))
		{
			if($school_name == "All" && $dt_name == "All")
			{
				$document = $this->mongo_db->select(array('history'))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_panacea_hs);
				if(count($document)>0){
				return $document;
				}
			}else if($school_name == "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_panacea_hs);
					
					if(count($document)>0){
						return $document;
					}
				}
				else if($school_name != "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
						'doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_panacea_hs);
					if(count($document)>0){
						return $document;
					}
				}
				else
				{
					return FALSE;
				}
			
		}else if(preg_match("/TTWREIS/i", $user_type))
		{
			if($school_name == "All" && $dt_name == "All")
			{
				$document = $this->mongo_db->select(array('history'))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_ttwreis_hs);
				if(count($document)>0){
						return $document;
					}
			}else if($school_name == "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_ttwreis_hs);
					if(count($document)>0){
						return $document;
					}
				}
				else if($school_name != "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
						'doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_ttwreis_hs);
					if(count($document)>0){
						return $document;
					}
				}
				else
				{
					return FALSE;
				}
		}
		else if(preg_match("/TMREIS/i", $user_type))
		{
			if($school_name == "All" && $dt_name == "All")
			{
				$document = $this->mongo_db->select(array('history'))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_tmreis_hs);
				if(count($document)>0){
						return $document;
					}
			}else if($school_name == "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_tmreis_hs);
					if(count($document)>0){
						return $document;
					}
				}
				else if($school_name != "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
						'doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_tmreis_hs);
					if(count($document)>0){
						return $document;
					}
				}
				else
				{
					return FALSE;
				}
		}
		else if(preg_match("/BCWELFARE/i", $user_type))
		{
			if($school_name == "All" && $dt_name == "All")
			{
				$document = $this->mongo_db->select(array('history'))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_bcwelfare_hs);
				if(count($document)>0){
						return $document;
					}
			}else if($school_name == "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_bcwelfare_hs);
					if(count($document)>0){
						return $document;
					}
				}
				else if($school_name != "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
						'doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_bcwelfare_hs);
					if(count($document)>0){
						return $document;
					}
				}
				else
				{
					return FALSE;
				}
		}
		
	}

	public function get_normal_requests_count($today_date,$dt_name = "All",$school_name = "All",$user_type)
	{
		//$document = $this->mongo_db->select(array('history'))->whereLike("history.0.time" , $today_date)->get($this->request_app_col);
		if(preg_match("/PANACEA/i", $user_type))
		{
			if($school_name == "All" && $dt_name == "All")
			{
				$document = $this->mongo_db->select(array('history'))->
				where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_panacea_hs);
				if(count($document)>0){
					return $document;
				}
			}
			else if($school_name == "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_panacea_hs);
					if(count($document)>0){
						return $document;
					}
				}
				else if($school_name != "All" && $dt_name != "All")
					{
						$document = $this->mongo_db->select(array('history'))->
						where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
							'doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->
						whereLike("history.0.time" , $today_date)->count($this->health_request_col_panacea_hs);
						if(count($document)>0){
							return $document;
						}
					} 
				
		}else if(preg_match("/TTWREIS/i", $user_type))
		{
			if($school_name == "All" && $dt_name == "All")
			{
				$document = $this->mongo_db->select(array('history'))->
				where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_ttwreis_hs);
				if(count($document)>0){
				return $document;
				}
			}
			else if($school_name == "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_ttwreis_hs);
					if(count($document)>0){
					return $document;
					}
				}
				else if($school_name != "All" && $dt_name != "All")
					{
						$document = $this->mongo_db->select(array('history'))->
						where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
							'doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->
						whereLike("history.0.time" , $today_date)->count($this->health_request_col_ttwreis_hs);
						if(count($document)>0){
						return $document;
						}
					}
		}else if(preg_match("/TMREIS/i", $user_type))
		{
			if($school_name == "All" && $dt_name == "All")
			{
				$document = $this->mongo_db->select(array('history'))->
				where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_tmreis_hs);
				if(count($document)>0){
				return $document;
				}
			}
			else if($school_name == "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_tmreis_hs);
					if(count($document)>0){
					return $document;
					}
				}
				else if($school_name != "All" && $dt_name != "All")
					{
						$document = $this->mongo_db->select(array('history'))->
						where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
							'doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->
						whereLike("history.0.time" , $today_date)->count($this->health_request_col_tmreis_hs);
						if(count($document)>0){
						return $document;
						}
					}
		}else if(preg_match("/BCWELFARE/i", $user_type))
		{
			if($school_name == "All" && $dt_name == "All")
			{
				$document = $this->mongo_db->select(array('history'))->
				where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_bcwelfare_hs);
				if(count($document)>0){
				return $document;
				}
			}
			else if($school_name == "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_bcwelfare_hs);
					if(count($document)>0){
					return $document;
					}
				}
				else if($school_name != "All" && $dt_name != "All")
					{
						$document = $this->mongo_db->select(array('history'))->
						where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
							'doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->
						whereLike("history.0.time" , $today_date)->count($this->health_request_col_bcwelfare_hs);
						if(count($document)>0){
						return $document;
						}
					}
		}
		
	}
	public function get_emergency_requests_count($today_date,$dt_name = "All",$school_name = "All",$user_type)
	{
		//$document = $this->mongo_db->select(array('history'))->whereLike("history.0.time" , $today_date)->get($this->request_app_col);
		if(preg_match("/PANACEA/i", $user_type))
		{
			if($school_name == "All" && $dt_name == "All")
			{
				$document = $this->mongo_db->select(array('history'))->
				where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_panacea_hs);
				if(count($document)>0){
					return $document;
				}
			}else if($school_name == "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
				where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->
				whereLike("history.0.time" , $today_date)->count($this->health_request_col_panacea_hs);
					if(count($document)>0){
						return $document;
					}
				}
				else if($school_name != "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
						'doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_panacea_hs);
					if(count($document)>0){
						return $document;
					}
				}
			
		}else if(preg_match("/TTWREIS/i", $user_type))
		{
			if($school_name == "All" && $dt_name == "All")
			{
				$document = $this->mongo_db->select(array('history'))->
				where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_ttwreis_hs);
				if(count($document)>0){
					return $document;
				}
			}else if($school_name == "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
				where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->
				whereLike("history.0.time" , $today_date)->count($this->health_request_col_ttwreis_hs);
					if(count($document)>0){
						return $document;
					}
				}
				else if($school_name != "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
						'doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_ttwreis_hs);
					if(count($document)>0){
						return $document;
					}
				}
			
		}else if(preg_match("/TMREIS/i", $user_type))
		{
			if($school_name == "All" && $dt_name == "All")
			{
				$document = $this->mongo_db->select(array('history'))->
				where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_tmreis_hs);
				if(count($document)>0){
					return $document;
				}
			}else if($school_name == "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
				where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->
				whereLike("history.0.time" , $today_date)->count($this->health_request_col_tmreis_hs);
					if(count($document)>0){
						return $document;
					}
				}
				else if($school_name != "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
						'doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_tmreis_hs);
					if(count($document)>0){
						return $document;
					}
				}
			
		}else if(preg_match("/BCWELFARE/i", $user_type))
		{
			if($school_name == "All" && $dt_name == "All")
			{
				$document = $this->mongo_db->select(array('history'))->
				where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_bcwelfare_hs);
				if(count($document)>0){
					return $document;
				}
			}else if($school_name == "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
				where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->
				whereLike("history.0.time" , $today_date)->count($this->health_request_col_bcwelfare_hs);
					if(count($document)>0){
						return $document;
					}
				}
				else if($school_name != "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
						'doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_bcwelfare_hs);
					if(count($document)>0){
						return $document;
					}
				}
			
		}
	}
	public function get_chronic_requests_count($today_date,$dt_name = "All",$school_name = "All",$user_type)
	{
		//$document = $this->mongo_db->select(array('history'))->whereLike("history.0.time" , $today_date)->get($this->request_app_col);
		if(preg_match("/PANACEA/i", $user_type))
		{
			if($school_name == "All" && $dt_name == "All")
			{
				$document = $this->mongo_db->select(array('history'))->
			where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_panacea_hs);
			}else if($school_name == "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_panacea_hs);
				}else if($school_name != "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
						'doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_panacea_hs);
				}
			
			if(count($document)>0){
				return $document;
			}else{
				return FALSE;
			}
		}
		else if(preg_match("/TTWREIS/i", $user_type))
		{
			if($school_name == "All" && $dt_name == "All")
			{
				$document = $this->mongo_db->select(array('history'))->
			where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_ttwreis_hs);
			}else if($school_name == "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_ttwreis_hs);
				}else if($school_name != "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
						'doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_ttwreis_hs);
				}

			if(count($document)>0){
				return $document;
			}else{
				return FALSE;
			}
		}
		else if(preg_match("/TMREIS/i", $user_type))
		{
			if($school_name == "All" && $dt_name == "All")
			{
				$document = $this->mongo_db->select(array('history'))->
			where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_tmreis_hs);
			}else if($school_name == "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_tmreis_hs);
				}else if($school_name != "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
						'doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_tmreis_hs);
				}

			if(count($document)>0){
				return $document;
			}else{
				return FALSE;
			}
		}
		else if(preg_match("/BCWELFARE/i", $user_type))
		{
			if($school_name == "All" && $dt_name == "All")
			{
				$document = $this->mongo_db->select(array('history'))->
			where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->whereLike("history.0.time" , $today_date)->count($this->health_request_col_bcwelfare_hs);
			}else if($school_name == "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_bcwelfare_hs);
				}else if($school_name != "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
						'doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->
					whereLike("history.0.time" , $today_date)->count($this->health_request_col_bcwelfare_hs);
				}

			if(count($document)>0){
				return $document;
			}else{
				return FALSE;
			}
		}
	}
	public function get_doctors_response_count($today_date,$dt_name,$school_name,$user_type)
	{
		//$document = $this->mongo_db->select(array('history'))->whereLike("history.1.time" , $today_date)->get($this->request_app_col);
		if(preg_match("/PANACEA/i", $user_type))
		{
			if($school_name == "All" && $dt_name == "All")
			{
			$document = $this->mongo_db->select(array('history'))->whereLike('history.1.time',$today_date)->count($this->health_request_col_panacea_hs);		
			}
			else if($school_name == "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name))->
					whereLike("history.1.time" , $today_date)->count($this->health_request_col_panacea_hs);
				}
				else if($school_name != "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
						'doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name))->
					whereLike("history.1.time" , $today_date)->count($this->health_request_col_panacea_hs);
				}
			

			if(count($document)>0){
				return $document;
			}else{
				return FALSE;
			}
		}else if(preg_match("/TTWREIS/i", $user_type))
		{
			if($school_name == "All" && $dt_name == "All")
			{
			$document = $this->mongo_db->select(array('history'))->whereLike('history.1.time',$today_date)->count($this->health_request_col_ttwreis_hs);		
			}
			else if($school_name == "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name))->
					whereLike("history.1.time" , $today_date)->count($this->health_request_col_ttwreis_hs);
				}else if($school_name != "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
						'doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name))->
					whereLike("history.1.time" , $today_date)->count($this->health_request_col_ttwreis_hs);
				}
			

			if(count($document)>0){
				return $document;
			}else{
				return FALSE;
			}
		}
		else if(preg_match("/TMREIS/i", $user_type))
		{
			if($school_name == "All" && $dt_name == "All")
			{
			$document = $this->mongo_db->select(array('history'))->whereLike('history.1.time',$today_date)->count($this->health_request_col_tmreis_hs);		
			}
			else if($school_name == "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name))->
					whereLike("history.1.time" , $today_date)->count($this->health_request_col_tmreis_hs);
				}else if($school_name != "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
						'doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name))->
					whereLike("history.1.time" , $today_date)->count($this->health_request_col_tmreis_hs);
				}
			

			if(count($document)>0){
				return $document;
			}else{
				return FALSE;
			}
		}
		else if(preg_match("/BCWELFARE/i", $user_type))
		{
			if($school_name == "All" && $dt_name == "All")
			{
			$document = $this->mongo_db->select(array('history'))->whereLike('history.1.time',$today_date)->count($this->health_request_col_bcwelfare_hs);		
			}
			else if($school_name == "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name))->
					whereLike("history.1.time" , $today_date)->count($this->health_request_col_bcwelfare_hs);
				}else if($school_name != "All" && $dt_name != "All")
				{
					$document = $this->mongo_db->select(array('history'))->
					where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
						'doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name))->
					whereLike("history.1.time" , $today_date)->count($this->health_request_col_bcwelfare_hs);
				}
			

			if(count($document)>0){
				return $document;
			}else{
				return FALSE;
			}
		}
						
	}
	
	public function get_drilling_to_identifiers($today_date,$request_type_span,$user_type)
	{
		if(preg_match("/PANACEA/i", $user_type))
		{
			$dist_list = array();
			$dist_count = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Info.District.field_ref'))->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type_span))->whereLike('history.0.time',$today_date)->get($this->health_request_col_panacea_hs);

			if(count($dist_count)>0)
			{
				foreach ($dist_count as $district) 
				{
					$district_name = $district['doc_data']['widget_data']['page1']['Student Info']['District']['field_ref'];
					/*$data['label'] = $district_name;
					$data['count'] = count($district_name);
					array_push($district_array, $data);*/
					if (isset ( $dist_list [$district_name] )) {
						$dist_list [$district_name] ++;
					} else {
						$dist_list [$district_name] = 1;
					}
				}
				$final_values = [ ];
			foreach ( $dist_list as $dicsts => $count ) {
				$result ['label'] = $dicsts;
				$result ['value'] = $count;
				array_push ( $final_values, $result );
			}
				return $final_values;
			}else{
				return FALSE;
			}
		}
		else if(preg_match("/TTWREIS/i", $user_type))
		{
			$dist_list = array();
			$dist_count = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Info.District.field_ref'))->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type_span))->whereLike('history.0.time',$today_date)->get($this->health_request_col_ttwreis_hs);

			if(count($dist_count)>0)
			{
				foreach ($dist_count as $district) 
				{
					$district_name = $district['doc_data']['widget_data']['page1']['Student Info']['District']['field_ref'];
					/*$data['label'] = $district_name;
					$data['count'] = count($district_name);
					array_push($district_array, $data);*/
					if (isset ( $dist_list [$district_name] )) {
						$dist_list [$district_name] ++;
					} else {
						$dist_list [$district_name] = 1;
					}
				}
				$final_values = [ ];
			foreach ( $dist_list as $dicsts => $count ) {
				$result ['label'] = $dicsts;
				$result ['value'] = $count;
				array_push ( $final_values, $result );
			}
				return $final_values;
			}else{
				return FALSE;
			}
		}
		else if(preg_match("/TMREIS/i", $user_type))
		{
			$dist_list = array();
			$dist_count = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Info.District.field_ref'))->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type_span))->whereLike('history.0.time',$today_date)->get($this->health_request_col_tmreis_hs);

			if(count($dist_count)>0)
			{
				foreach ($dist_count as $district) 
				{
					$district_name = $district['doc_data']['widget_data']['page1']['Student Info']['District']['field_ref'];
					/*$data['label'] = $district_name;
					$data['count'] = count($district_name);
					array_push($district_array, $data);*/
					if (isset ( $dist_list [$district_name] )) {
						$dist_list [$district_name] ++;
					} else {
						$dist_list [$district_name] = 1;
					}
				}
				$final_values = [ ];
			foreach ( $dist_list as $dicsts => $count ) {
				$result ['label'] = $dicsts;
				$result ['value'] = $count;
				array_push ( $final_values, $result );
			}
				return $final_values;
			}else{
				return FALSE;
			}
		}
		else if(preg_match("/BCWELFARE/i", $user_type))
		{
			$dist_list = array();
			$dist_count = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Info.District.field_ref'))->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type_span))->whereLike('history.0.time',$today_date)->get($this->health_request_col_bcwelfare_hs);

			if(count($dist_count)>0)
			{
				foreach ($dist_count as $district) 
				{
					$district_name = $district['doc_data']['widget_data']['page1']['Student Info']['District']['field_ref'];
					/*$data['label'] = $district_name;
					$data['count'] = count($district_name);
					array_push($district_array, $data);*/
					if (isset ( $dist_list [$district_name] )) {
						$dist_list [$district_name] ++;
					} else {
						$dist_list [$district_name] = 1;
					}
				}
				$final_values = [ ];
			foreach ( $dist_list as $dicsts => $count ) {
				$result ['label'] = $dicsts;
				$result ['value'] = $count;
				array_push ( $final_values, $result );
			}
				return $final_values;
			}else{
				return FALSE;
			}
		}
	}
	public function drilldown_barchat_identifiers_to_districts($today_date,$request_type_span,$dt_name,$user_type)
	{
		if(preg_match("/PANACEA/i", $user_type))
		{
			$school_list = array();
			$school_count = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Info.School Name.field_ref'))->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type_span,'doc_data.widget_data.page1.Student Info.District.field_ref'=>$dt_name))->whereLike('history.0.time',$today_date)->get($this->health_request_col_panacea_hs);
			if(count($school_count)>0)
			{
				foreach ($school_count as $school) 
				{
					$school_name = $school['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref'];
					if (isset ( $school_list [$school_name] )) {
						$school_list [$school_name] ++;
					} else {
						$school_list [$school_name] = 1;
					}
				}
				$final_values = [ ];
			foreach ( $school_list as $dicsts => $count ) {
				$result ['label'] = $dicsts;
				$result ['value'] = $count;
				array_push ( $final_values, $result );
			}
				return $final_values;
			}else{
				return FALSE;
			}
		}
		else if(preg_match("/TTWREIS/i", $user_type))
		{
			$school_list = array();
			$school_count = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Info.School Name.field_ref'))->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type_span,'doc_data.widget_data.page1.Student Info.District.field_ref'=>$dt_name))->whereLike('history.0.time',$today_date)->get($this->health_request_col_ttwreis_hs);
			if(count($school_count)>0)
			{
				foreach ($school_count as $school) 
				{
					$school_name = $school['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref'];
					if (isset ( $school_list [$school_name] )) {
						$school_list [$school_name] ++;
					} else {
						$school_list [$school_name] = 1;
					}
				}
				$final_values = [ ];
			foreach ( $school_list as $dicsts => $count ) {
				$result ['label'] = $dicsts;
				$result ['value'] = $count;
				array_push ( $final_values, $result );
			}
				return $final_values;
			}else{
				return FALSE;
			}
		}
		else if(preg_match("/TMREIS/i", $user_type))
		{
			$school_list = array();
			$school_count = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Info.School Name.field_ref'))->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type_span,'doc_data.widget_data.page1.Student Info.District.field_ref'=>$dt_name))->whereLike('history.0.time',$today_date)->get($this->health_request_col_tmreis_hs);
			if(count($school_count)>0)
			{
				foreach ($school_count as $school) 
				{
					$school_name = $school['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref'];
					if (isset ( $school_list [$school_name] )) {
						$school_list [$school_name] ++;
					} else {
						$school_list [$school_name] = 1;
					}
				}
				$final_values = [ ];
			foreach ( $school_list as $dicsts => $count ) {
				$result ['label'] = $dicsts;
				$result ['value'] = $count;
				array_push ( $final_values, $result );
			}
				return $final_values;
			}else{
				return FALSE;
			}
		}
		else if(preg_match("/BCWELFARE/i", $user_type))
		{
			$school_list = array();
			$school_count = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Info.School Name.field_ref'))->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type_span,'doc_data.widget_data.page1.Student Info.District.field_ref'=>$dt_name))->whereLike('history.0.time',$today_date)->get($this->health_request_col_bcwelfare_hs);
			if(count($school_count)>0)
			{
				foreach ($school_count as $school) 
				{
					$school_name = $school['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref'];
					if (isset ( $school_list [$school_name] )) {
						$school_list [$school_name] ++;
					} else {
						$school_list [$school_name] = 1;
					}
				}
				$final_values = [ ];
			foreach ( $school_list as $dicsts => $count ) {
				$result ['label'] = $dicsts;
				$result ['value'] = $count;
				array_push ( $final_values, $result );
			}
				return $final_values;
			}else{
				return FALSE;
			}
		}
	}

	public function drilldown_barchat_identifiers_to_school_name($today_date,$request_type_span,$dt_name,$school_name,$user_type)
	{
		if(preg_match("/PANACEA/i", $user_type))
		{
			$students_list = array();
			$students_count = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Info.Unique ID','doc_data.widget_data.page1.Student Info.Name.field_ref'),array('_id'))->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type_span,
				'doc_data.widget_data.page1.Student Info.District.field_ref'=>$dt_name,'doc_data.widget_data.page1.Student Info.School Name.field_ref'=>$school_name))->whereLike('history.0.time',$today_date)->get($this->health_request_col_panacea_hs);
			if(count($students_count)>0)
			{
				return $students_count;
			}else{
				return FALSE;
			}
		}
		else if(preg_match("/TTWREIS/i", $user_type))
		{
			$students_list = array();
			$students_count = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Info.Unique ID','doc_data.widget_data.page1.Student Info.Name.field_ref'),array('_id'))->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type_span,
				'doc_data.widget_data.page1.Student Info.District.field_ref'=>$dt_name,'doc_data.widget_data.page1.Student Info.School Name.field_ref'=>$school_name))->whereLike('history.0.time',$today_date)->get($this->health_request_col_ttwreis_hs);
			if(count($students_count)>0)
			{
				return $students_count;
			}else{
				return FALSE;
			}
		}
		else if(preg_match("/TMREIS/i", $user_type))
		{
			$students_list = array();
			$students_count = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Info.Unique ID','doc_data.widget_data.page1.Student Info.Name.field_ref'),array('_id'))->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type_span,
				'doc_data.widget_data.page1.Student Info.District.field_ref'=>$dt_name,'doc_data.widget_data.page1.Student Info.School Name.field_ref'=>$school_name))->whereLike('history.0.time',$today_date)->get($this->health_request_col_tmreis_hs);
			if(count($students_count)>0)
			{
				return $students_count;
			}else{
				return FALSE;
			}
		}
		else if(preg_match("/BCWELFARE/i", $user_type))
		{
			$students_list = array();
			$students_count = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Info.Unique ID','doc_data.widget_data.page1.Student Info.Name.field_ref'),array('_id'))->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type_span,
				'doc_data.widget_data.page1.Student Info.District.field_ref'=>$dt_name,'doc_data.widget_data.page1.Student Info.School Name.field_ref'=>$school_name))->whereLike('history.0.time',$today_date)->get($this->health_request_col_bcwelfare_hs);
			if(count($students_count)>0)
			{
				return $students_count;
			}else{
				return FALSE;
			}
		}
		
	}
	public function get_unique_id_for_chat($unique_id,$user_type)
	{
		if(preg_match("/PANACEA/i", $user_type))
		{
			$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_properties.doc_id'),array('_id'))->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id))->get($this->health_request_col_panacea_hs);
			//$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_properties.doc_id'),array('_id'))->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id))->orderBy(array('history.time'=>-1))->limit(1)->get($this->health_request_col_panacea_hs);
			if(count($query)>0){
				return $query;
			}
			else{
				return FALSE;
			}
		}else if(preg_match("/TTWREIS/i", $user_type))
		{
			//$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_properties.doc_id'),array('_id'))->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id))->orderBy(array('history.time'=>-1))->limit(1)->get($this->health_request_col_ttwreis_hs);
			$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_properties.doc_id'),array('_id'))->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id))->get($this->health_request_col_ttwreis_hs);
			if(count($query)>0){
				return $query;
			}
			else{
				return FALSE;
			}
		} else if(preg_match("/TMREIS/i", $user_type))
		{
			//$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_properties.doc_id'),array('_id'))->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id))->orderBy(array('history.time'=>-1))->limit(1)->get($this->health_request_col_tmreis_hs);
			$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_properties.doc_id'),array('_id'))->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id))->get($this->health_request_col_tmreis_hs);
			if(count($query)>0){
				return $query;
			}else{
				return FALSE;
			}
		}else if(preg_match("/BCWELFARE/i", $user_type))
		{
			//$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_properties.doc_id'),array('_id'))->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id))->orderBy(array('history.time'=>-1))->limit(1)->get($this->health_request_col_bcwelfare_hs);
			$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_properties.doc_id'),array('_id'))->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id))->get($this->health_request_col_bcwelfare_hs);
			if(count($query)>0){
				return $query;
			}else{
				return FALSE;
			}
		}
		else
		{
			return false;
		}
		
		
	}
	
	public function insert_unique_id_with_attachment($unique_id,$doc_id,$external_attachments,$user_type)
	{
		if(preg_match("/PANACEA/i", $user_type))
		{
			$update = array('doc_data.external_attachments' => $external_attachments);
			$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id,'doc_properties.doc_id' => $doc_id))->set($update)->update($this->health_request_col_panacea_hs);
			return $query;
		}
		else if(preg_match("/TTWREIS/i", $user_type))
		{
			$update = array('doc_data.external_attachments' => $external_attachments);
			$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id,'doc_properties.doc_id' => $doc_id))->set($update)->update($this->health_request_col_ttwreis_hs);
			return $query;
		}
		else if(preg_match("/TMREIS/i", $user_type))
		{
			$update = array('doc_data.external_attachments' => $external_attachments);
			$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id,'doc_properties.doc_id' => $doc_id))->set($update)->update($this->health_request_col_tmreis_hs);
			return $query;
		}
		else if(preg_match("/BCWELFARE/i", $user_type))
		{
			$update = array('doc_data.external_attachments' => $external_attachments);
			$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id,'doc_properties.doc_id' => $doc_id))->set($update)->update($this->health_request_col_bcwelfare_hs);
			return $query;
		}
		
			
	}

	/**
	 * Helper: Get accessible chat rooms ( for the loggedin user )
	 * 
	 * @param  array  $user_email  Loggedin user email
	 *
	 * @return array
	 * 
	 * @author Naresh 
	 */
	 
	public function get_accessible_groups($user_type) {

		$accessible_chat_rooms = array();
		if(preg_match("/PANACEA/i", $user_type))
		{
			
			$query = $this->mongo_db->get ( 'panacea_chat_groups' );
		
			foreach($query as $data)
			{
				
				$group_name = $data['group_name'];
				$where_array = array('group_name'=>$group_name,'list_of_users'=>array('$in'=>array($user_email)));
				
				$grps = $this->mongo_db->where($where_array)->get ( 'panacea_chat_groups_users' );
				
				if(isset($grps) && !empty($grps))
				{
					array_push($accessible_chat_rooms,$query);
				}
				
			}
			return $accessible_chat_rooms;
		}
		
		else if(preg_match("/TTWREIS/i", $user_type))
		{
			$query = $this->mongo_db->get ( 'ttwreis_chat_groups' );
		
			foreach($query as $data)
			{
				$group_name = $data['group_name'];
				$where_array = array('group_name'=>$group_name,'list_of_users'=>array('$in'=>array($user_email)));
				
				$grps = $this->mongo_db->where($where_array)->get ( 'ttwreis_chat_groups_users' );
				
				if(isset($grps) && !empty($grps))
				{
					array_push($accessible_chat_rooms,$query);
				}
				
			}
			return $accessible_chat_rooms;
		}

		else if(preg_match("/TMREIS/i", $user_type))
		{
			$query = $this->mongo_db->get ( 'tmreis_chat_groups' );
		
			foreach($query as $data)
			{
				$group_name = $data['group_name'];
				$where_array = array('group_name'=>$group_name,'list_of_users'=>array('$in'=>array($user_email)));
				
				$grps = $this->mongo_db->where($where_array)->get ( 'tmreis_chat_groups_users' );
				
				if(isset($grps) && !empty($grps))
				{
					array_push($accessible_chat_rooms,$query);
				}
				
			}
			return $accessible_chat_rooms;
		}

		else if(preg_match("/BCWELFARE/i", $user_type))
		{
			$query = $this->mongo_db->get ( 'bc_welfare_chat_groups' );
			
			foreach($query as $data)
			{
				$group_name = $data['group_name'];
				$where_array = array('group_name'=>$group_name,'list_of_users'=>array('$in'=>array($user_email)));
				
				$grps = $this->mongo_db->where($where_array)->get ( 'bc_welfare_chat_groups_users' );
				
				if(isset($grps) && !empty($grps))
				{
					array_push($accessible_chat_rooms,$query);
				}
				
			}
			return $accessible_chat_rooms;
		}
	}

	public function get_all_groups($user_type,$email = false) 
	{
		if(preg_match("/PANACEA/i", $user_type))
		{
			if(!empty($email) && isset($email))
			{
				$dist_code = explode(".",$email);
				
				if(preg_match('/dr/i', $dist_code[1]) || preg_match('/PANACEA/i', $dist_code[0]))
				{
					$query = $this->mongo_db->get ( 'panacea_chat_groups' );
					return $query;
				}else
				{
					$final_array = array();
					$result['hs_group'] = $this->mongo_db->whereLike('group_name',strtoupper($dist_code[0]))->get ( 'panacea_chat_groups' );
					$result['tech_group'] = $this->mongo_db->where(array('group_name' => "Technical_Group"))->get ( 'panacea_chat_groups' );
					array_push($final_array, $result['hs_group'][0]);
					array_push($final_array, $result['tech_group'][0]);
					

					return $final_array;
				}				
				
			}
			else
			{
				$query = $this->mongo_db->get ( 'panacea_chat_groups' );
				return $query;
			}			
			
		}
		else if(preg_match("/TTWREIS/i", $user_type))
		{
			if(!empty($email) && isset($email))
			{
				$dist_code = explode(".",$email);
				
				if(preg_match('/dr/i', $dist_code[1]) || preg_match('/TTWREIS/i', $dist_code[0]))
				{
					$query = $this->mongo_db->get ( 'ttwreis_chat_groups' );
					return $query;
				}else
				{
					$final_array = array();
					$result['hs_group'] = $this->mongo_db->whereLike('group_name',strtoupper($dist_code[0]))->get ( 'ttwreis_chat_groups' );
					$result['tech_group'] = $this->mongo_db->where(array('group_name' => "Technical_Group"))->get ( 'ttwreis_chat_groups' );
					array_push($final_array, $result['hs_group'][0]);
					array_push($final_array, $result['tech_group'][0]);
					

					return $final_array;
				}				
				
			}else
			{
				$query = $this->mongo_db->get ( 'ttwreis_chat_groups' );
				return $query;
			}
			
		}
		else if(preg_match("/TMREIS/i", $user_type))
		{
			if(!empty($email) && isset($email))
			{
				$dist_code = explode(".",$email);
				if(preg_match('/dr/i', $dist_code[1]) || preg_match('/TMREIS/', $dist_code[0]))
				{
					$query = $this->mongo_db->get ( 'tmreis_chat_groups' );
					return $query;
				}else
				{
					$final_array = array();
					$result['hs_group'] = $this->mongo_db->whereLike('group_name',strtoupper($dist_code[0]))->get ( 'tmreis_chat_groups' );
					$result['tech_group'] = $this->mongo_db->where(array('group_name' => "Technical_Group"))->get ( 'tmreis_chat_groups' );
					array_push($final_array, $result['hs_group'][0]);
					array_push($final_array, $result['tech_group'][0]);
					

					return $final_array;
				}				
				
			}else
			{
				$query = $this->mongo_db->get ( 'tmreis_chat_groups' );
				return $query;
			}
		}
		else if(preg_match("/BCWELFARE/i", $user_type))
		{
			if(!empty($email) && isset($email))
			{
				$dist_code = explode(".",$email);
				//if(preg_match('/dr/i', $dist_code[1]) || preg_match('/BCWELFARE/', $dist_code[0]))
				if(preg_match('/dr/i', $dist_code[1]) || preg_match('/BCWELFARE/i', $email))
				{
					$query = $this->mongo_db->get ( 'bc_welfare_chat_groups' );
					return $query;
				}else
				{
					$final_array = array();
					$result['hs_group'] = $this->mongo_db->whereLike('group_name',strtoupper($dist_code[0]))->get ( 'bc_welfare_chat_groups' );
					$result['tech_group'] = $this->mongo_db->where(array('group_name' => "Technical_Group"))->get ( 'bc_welfare_chat_groups' );
					array_push($final_array, $result['hs_group'][0]);
					array_push($final_array, $result['tech_group'][0]);
					

					return $final_array;
				}				
				
			}else
			{
				$query = $this->mongo_db->get ( 'bc_welfare_chat_groups' );
				return $query;
			}
		}
		
	}

	public function get_messages($msg_id,$limit_count,$user_type)
	{
		ini_set ( 'memory_limit', '10G' );
		//log_message('error','limit==result===============16849'.print_r($limit,TRUE));
		if(preg_match("/PANACEA/i", $user_type))
		{
			$limit = intval($limit_count);
			$count = $this->mongo_db->where('chat_room_id',$msg_id)->count ( $this->collections['panacea_messages'] );

			//log_message('error');
			//array('chat_room_id' => array('$in' $msg_id);
			$and_merged_array = array();
			$chat_room_id = array (
					"chat_room_id" => array (
							'$eq' => $msg_id
					) 
			);
			$chat_room_id_exists = array (
					"chat_room_id" => array (
							'$exists' => TRUE 
					) 
			);
			array_push($and_merged_array, $chat_room_id);
			array_push($and_merged_array, $chat_room_id_exists);

			
			
			if(!empty($msg_id) && $limit >= $count )
			{
				$result = [ ];
				$pipeline = [ 
							array (
									'$project' => array ( 
											"message_id" => true,
										    "user_id" => true,
										    "chat_room_id" => true,
										    "user_name"  => true,
										    "user_email"  => true,
										    "message"    => true,
										    "created_at" => true,
										    "replay_id"  => true,
										    "replay_by"  => true, 
										    "replay_msg" => true,
										    "external_attachments" => true,
										    "forward_msg" => true,
										    "forwarding_msg" => true

									) 
							),
							array(
								'$match' => array(
									'$and' => $and_merged_array
								)
							),
							array(
								'$sort' => array('created_at' => 1)
							)
					];
					$response = $this->mongo_db->command ( array (
							'aggregate' => $this->collections['panacea_messages'],
							'pipeline' => $pipeline 
					) );				
					$result = array_merge ( $result, $response ['result'] );				
				return $result;

			}
			else{
			$skip = $count - $limit;
			$result = [ ];
				$pipeline = [ 
							array (
									'$project' => array ( 
											"message_id" => true,
										    "user_id" => true,
										    "chat_room_id" => true,
										    "user_name" => true,
										    "user_email"  => true,
										    "message" => true,
										    "created_at"=> true,
										    "replay_id"  => true,
										    "replay_by"  => true, 
										    "replay_msg" => true,
										    "external_attachments" => true,
										    "forward_msg" => true,
										    "forwarding_msg" => true
									) 
							),
							array(
								'$match' => array(
									'$and' => $and_merged_array
								)
							),
							array (
									'$skip' => $skip
							),
							array (
									'$limit' => $limit 
							),
							array(
								'$sort' => array('created_at' => 1)
							)
					];
					$response = $this->mongo_db->command ( array (
							'aggregate' => $this->collections['panacea_messages'],
							'pipeline' => $pipeline 
					) );				
					$result = array_merge ( $result, $response ['result'] );				
			return $result;
			}
		}
		else if(preg_match("/TTWREIS/i", $user_type))
		{
			$limit = intval($limit_count);
			$count = $this->mongo_db->where('chat_room_id',$msg_id)->count ( $this->collections['ttwreis_messages'] );

			//log_message('error');
			//array('chat_room_id' => array('$in' $msg_id);
			$and_merged_array = array();
			$chat_room_id = array (
					"chat_room_id" => array (
							'$eq' => $msg_id
					) 
			);
			$chat_room_id_exists = array (
					"chat_room_id" => array (
							'$exists' => TRUE 
					) 
			);
			array_push($and_merged_array, $chat_room_id);
			array_push($and_merged_array, $chat_room_id_exists);

			
			
			if(!empty($msg_id) && $limit >= $count )
			{
				$result = [ ];
				$pipeline = [ 
							array (
									'$project' => array ( 
											"message_id" => true,
										    "user_id" => true,
										    "chat_room_id" => true,
										    "user_name" => true,
										    "user_email"  => true,
										    "message" => true,
										    "created_at"=> true,
										    "replay_id"  => true,
										    "replay_by"  => true, 
										    "replay_msg" => true,
										    "external_attachments" => true,
										    "forward_msg" => true,
										    "forwarding_msg" => true
									) 
							),
							array(
								'$match' => array(
									'$and' => $and_merged_array
								)
							),
							array(
								'$sort' => array('created_at' => 1)
							)
					];
					$response = $this->mongo_db->command ( array (
							'aggregate' => $this->collections['ttwreis_messages'],
							'pipeline' => $pipeline 
					) );				
					$result = array_merge ( $result, $response ['result'] );				
				return $result;

			}
			else{
			$skip = $count - $limit;
			$result = [ ];
				$pipeline = [ 
							array (
									'$project' => array ( 
											"message_id" => true,
										    "user_id" => true,
										    "chat_room_id" => true,
										    "user_name" => true,
										    "user_email"  => true,
										    "message" => true,
										    "created_at"=> true,
										    "replay_id"  => true,
										    "replay_by"  => true, 
										    "replay_msg" => true,
										    "external_attachments" => true,
										    "forward_msg" => true,
										    "forwarding_msg" => true
									) 
							),
							array(
								'$match' => array(
									'$and' => $and_merged_array
								)
							),
							array (
									'$skip' => $skip
							),
							array (
									'$limit' => $limit 
							),
							array(
								'$sort' => array('created_at' => 1)
							)
					];
					$response = $this->mongo_db->command ( array (
							'aggregate' => $this->collections['ttwreis_messages'],
							'pipeline' => $pipeline 
					) );				
					$result = array_merge ( $result, $response ['result'] );				
			return $result;
			}
		}
		else if(preg_match("/TMREIS/i", $user_type))
		{
			$limit = intval($limit_count);
			$count = $this->mongo_db->where('chat_room_id',$msg_id)->count ( $this->collections['tmreis_messages'] );

			//log_message('error');
			//array('chat_room_id' => array('$in' $msg_id);
			$and_merged_array = array();
			$chat_room_id = array (
					"chat_room_id" => array (
							'$eq' => $msg_id
					) 
			);
			$chat_room_id_exists = array (
					"chat_room_id" => array (
							'$exists' => TRUE 
					) 
			);
			array_push($and_merged_array, $chat_room_id);
			array_push($and_merged_array, $chat_room_id_exists);

			
			
			if(!empty($msg_id) && $limit >= $count )
			{
				$result = [ ];
				$pipeline = [ 
							array (
									'$project' => array ( 
											"message_id" => true,
										    "user_id" => true,
										    "chat_room_id" => true,
										    "user_name" => true,
										    "user_email"  => true,
										    "message" => true,
										    "created_at"=> true,
										    "replay_id"  => true,
										    "replay_by"  => true, 
										    "replay_msg" => true,
										    "external_attachments" => true,
										    "forward_msg" => true,
										    "forwarding_msg" => true
									) 
							),
							array(
								'$match' => array(
									'$and' => $and_merged_array
								)
							),
							array(
								'$sort' => array('created_at' => 1)
							)
					];
					$response = $this->mongo_db->command ( array (
							'aggregate' => $this->collections['tmreis_messages'],
							'pipeline' => $pipeline 
					) );				
					$result = array_merge ( $result, $response ['result'] );				
				return $result;

			}
			else{
			$skip = $count - $limit;
			$result = [ ];
				$pipeline = [ 
							array (
									'$project' => array ( 
											"message_id" => true,
										    "user_id" => true,
										    "chat_room_id" => true,
										    "user_name" => true,
										    "user_email"  => true,
										    "message" => true,
										    "created_at"=> true,
										    "replay_id"  => true,
										    "replay_by"  => true, 
										    "replay_msg" => true,
										    "external_attachments" => true,
										    "forward_msg" => true,
										    "forwarding_msg" => true
									) 
							),
							array(
								'$match' => array(
									'$and' => $and_merged_array
								)
							),
							array (
									'$skip' => $skip
							),
							array (
									'$limit' => $limit 
							),
							array(
								'$sort' => array('created_at' => 1)
							)
					];
					$response = $this->mongo_db->command ( array (
							'aggregate' => $this->collections['tmreis_messages'],
							'pipeline' => $pipeline 
					) );				
					$result = array_merge ( $result, $response ['result'] );				
			return $result;
			}
		}
		else if(preg_match("/BCWELFARE/i", $user_type))
		{
			$limit = intval($limit_count);
			$count = $this->mongo_db->where('chat_room_id',$msg_id)->count ( $this->collections['bc_welfare_messages'] );

			//log_message('error');
			//array('chat_room_id' => array('$in' $msg_id);
			$and_merged_array = array();
			$chat_room_id = array (
					"chat_room_id" => array (
							'$eq' => $msg_id
					) 
			);
			$chat_room_id_exists = array (
					"chat_room_id" => array (
							'$exists' => TRUE 
					) 
			);
			array_push($and_merged_array, $chat_room_id);
			array_push($and_merged_array, $chat_room_id_exists);

			
			
			if(!empty($msg_id) && $limit >= $count )
			{
				$result = [ ];
				$pipeline = [ 
							array (
									'$project' => array ( 
											"message_id" => true,
										    "user_id" => true,
										    "chat_room_id" => true,
										    "user_name" => true,
										    "user_email"  => true,
										    "message" => true,
										    "created_at"=> true,
										    "replay_id"  => true,
										    "replay_by"  => true, 
										    "replay_msg" => true,
										    "external_attachments" => true,
										    "forward_msg" => true,
										    "forwarding_msg" => true
									) 
							),
							array(
								'$match' => array(
									'$and' => $and_merged_array
								)
							),
							array(
								'$sort' => array('created_at' => 1)
							)
					];
					$response = $this->mongo_db->command ( array (
							'aggregate' => $this->collections['bc_welfare_messages'],
							'pipeline' => $pipeline 
					) );				
					$result = array_merge ( $result, $response ['result'] );				
				return $result;

			}
			else{
			$skip = $count - $limit;
			$result = [ ];
				$pipeline = [ 
							array (
									'$project' => array ( 
											"message_id" => true,
										    "user_id" => true,
										    "chat_room_id" => true,
										    "user_name" => true,
										    "user_email"  => true,
										    "message" => true,
										    "created_at"=> true,
										    "replay_id"  => true,
										    "replay_by"  => true, 
										    "replay_msg" => true,
										    "external_attachments" => true,
										    "forward_msg" => true,
										    "forwarding_msg" => true
									) 
							),
							array(
								'$match' => array(
									'$and' => $and_merged_array
								)
							),
							array (
									'$skip' => $skip
							),
							array (
									'$limit' => $limit 
							),
							array(
								'$sort' => array('created_at' => 1)
							)
					];
					$response = $this->mongo_db->command ( array (
							'aggregate' => $this->collections['bc_welfare_messages'],
							'pipeline' => $pipeline 
					) );				
					$result = array_merge ( $result, $response ['result'] );				
			return $result;
			}
		}
		
	}

	/**
	 * Helper: Add message
	 * 
	 * @param  array  $post          $_POST data
	 * @param  array  $chat_room_id  chat Room ID
	 *
	 * @return array
	 * 
	 * @author Naresh 
	 */
	 
	public function add_message($data,$user_type)
	{
		if(preg_match("/PANACEA/i", $user_type))
		{
			$query = $this->mongo_db->insert($this->collections['panacea_messages'],$data);

			if($query){
				$response['error'] = false;			
				$response['message'] = $data;
			}else{
				$response['error'] = true;
				$response['message'] = 'Failed send message ' . $stmt->error;
			}
			
			return $response;
		}
		else if(preg_match("/TTWREIS/i", $user_type))
		{
			$query = $this->mongo_db->insert($this->collections['ttwreis_messages'],$data);
			
			if($query){
				$response['error'] = false;			
				$response['message'] = $data;
			}else{
				$response['error'] = true;
				$response['message'] = 'Failed send message ' . $stmt->error;
			}
			
			return $response;
		}
		else if(preg_match("/TMREIS/i", $user_type))
		{
			$query = $this->mongo_db->insert($this->collections['tmreis_messages'],$data);
			
			if($query){
				$response['error'] = false;			
				$response['message'] = $data;
			}else{
				$response['error'] = true;
				$response['message'] = 'Failed send message ' . $stmt->error;
			}
			
			return $response;
		}
		else if(preg_match("/BCWELFARE/i", $user_type))
		{
			$query = $this->mongo_db->insert($this->collections['bc_welfare_messages'],$data);
			
			if($query){
				$response['error'] = false;			
				$response['message'] = $data;
			}else{
				$response['error'] = true;
				$response['message'] = 'Failed send message ' . $stmt->error;
			}
			
			return $response;
		}
		
	}

	function get_hs_mob($user_email,$user_type)
	{
		if(preg_match('/PANACEA/i', $user_type))
		{
			$this->mongo_db->switchDatabase($this->common_db['common_db']);
			$query = $this->mongo_db->select(array('hs_mob'))->where('email' , $user_email)->get($this->collections['panacea_health_supervisors']);
			$this->mongo_db->switchDatabase($this->common_db['dsn']);
			
			return $query;
		}
	}


	function get_info_details()
	{
		$query = $this->mongo_db->select(array())->get('roja_collections');

		return $query;
	}
	
	public function update_student_ehr_model($unique_id,$doc_data,$user_type,$doc_id)
	{
		
		if($user_type == "PANACEA_HS")
		{
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id, "doc_properties.doc_id" => $doc_id))->set($doc_data)->update($this->screening_app_col_sw);
			 $query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id, "doc_properties.doc_id" => $doc_id))->set($doc_data)->update($this->screening_app_col_sw_2021_2022);
			 //log_message('error', 'after update students model'.print_r($query, true));
		}else if($user_type == "TTWREIS_HS")
		{
			$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id, "doc_properties.doc_id" => $doc_id))->set($doc_data)->update($this->screening_app_col_tt_2021_2022);
		}else if($user_type == "TMREIS_HS")
		{
			$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id, "doc_properties.doc_id" => $doc_id))->set($doc_data)->update($this->screening_app_col_tm);
		}else if($user_type == "BCWELFARE_HS")
		{
			$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id, "doc_properties.doc_id" => $doc_id))->set($doc_data)->update($this->screening_app_col_bc_2020_2021);
		}
		/*if(isset($unique_id) && !empty($unique_id))
		{
		 $query = $this->mongo_db->where('doc_data.widget_data.page1.Personal Information.Hospital Unique ID',$unique_id)->set($doc_data)->update($this->screening_app_col_sw);
		}*/
	 
	  if(!empty($query))
		  return TRUE;
	  else
		  return FALSE;
	}

	public function create_new_student($doc_data,$user_type,$doc_properties,$history)
	{
		if($user_type == "PANACEA_HS")
		{
			$full_doc = array('doc_data' =>array('widget_data' => $doc_data),"doc_properties" => $doc_properties,'history' => $history);
			//log_message('error','full_doc=================5376'.print_r($full_doc,TRUE));
			//$insert_done = $this->mongo_db->insert($this->screening_app_col_sw,$full_doc);
			$insert_done = $this->mongo_db->insert('tswreis_screening_report_col_2021-2022',$full_doc);
		}
		else if($user_type == "TTWREIS_HS")
		{
			$full_doc = array('doc_data' =>array('widget_data' => $doc_data),"doc_properties" => $doc_properties,'history' => $history);
			//log_message('error','full_doc=================5376'.print_r($full_doc,TRUE));
			//$insert_done = $this->mongo_db->insert($this->screening_app_col_tt,$full_doc);
			$insert_done = $this->mongo_db->insert('ttwreis_screening_report_col_2021-2022',$full_doc);
		}else if($user_type == "TMREIS_HS")
		{
			$full_doc = array('doc_data' =>array('widget_data' => $doc_data),"doc_properties" => $doc_properties,'history' => $history);
			//log_message('error','full_doc=================5376'.print_r($full_doc,TRUE));
			$insert_done = $this->mongo_db->insert($this->screening_app_col_tm,$full_doc);
		}else if($user_type == "BCWELFARE_HS")
		{
			$full_doc = array('doc_data' =>array('widget_data' => $doc_data),"doc_properties" => $doc_properties,'history' => $history);
			//log_message('error','full_doc=================5376'.print_r($full_doc,TRUE));
			//$insert_done = $this->mongo_db->insert($this->screening_app_col_bc,$full_doc);
			$insert_done = $this->mongo_db->insert('bcwelfare_screening_report_col_2020-2021',$full_doc);
		}
		if(!empty($insert_done))
		return TRUE;
		else
			return FALSE;
	}

	public function check_school_code($school_code)
	{
		$this->mongo_db->switchDatabase($this->common_db['common_db']);
		$query = $this->mongo_db->select(array('school_code'))->where('school_code',$school_code)->get($this->collections['panacea_health_supervisors']);
		$this->mongo_db->switchDatabase($this->common_db['dsn']);
		//log_message('error','query======='.print_r($query[0]['school_code'],TRUE));
		if(!empty($query))
		{
			return $query;
		}else{
			return FALSE;
		}
	}

	public function check_unique_exists($unique_id,$user_type,$doc_id)
	{
		if($user_type == "PANACEA_HS")
		{
			//$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->get($this->screening_app_col_sw);
			$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->get($this->screening_app_col_sw_2021_2022);
			if(count($query) > 0)
			  return $query;
		  else
			  return FALSE;
		}elseif($user_type == "TTWREIS_HS")
		{
			$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->get($this->screening_app_col_tt_2021_2022);
			if(count($query) > 0)
			  return $query;
		  else
			  return FALSE;
		}elseif($user_type == "TMREIS_HS")
		{
			$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->get($this->screening_app_col_tm);
			if(count($query) > 0)
			  return $query;
		  else
			  return FALSE;
		}elseif($user_type == "BCWELFARE_HS")
		{
			$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->get($this->screening_app_col_bc_2020_2021);
			if(count($query) > 0)
			  return $query;
		  else
			  return FALSE;
		}

		
	}
	public function insert_hb_values($unique_id,$hb_info,$hb_values,$doc_properties,$history,$user_type)
	{
		if(preg_match('/PANACEA/i', $user_type))
		{
			$exists = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => $unique_id))->get($this->hb_app_col_sw);
			
			if(!empty($exists) && isset($exists))
			{

				
				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => $unique_id))->push('doc_data.widget_data.page1.Student Details.HB_values',$hb_values)->update($this->hb_app_col_sw);

				$after_update = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id))->set(array('doc_data.widget_data.page1.Student Details.HB_latest'=> array('hb' => $hb_values['hb'],                                                            
                              'month' => $hb_values['month'])))->update($this->hb_app_col_sw);
					
			}else
			{
				$app_properties['app_name'] = "TSWREIS HB App";
				$app_properties['app_id'] = "himglobin_report_col";
				$final_values = array("doc_data"=>array("widget_data"=>$hb_info),"doc_properties"=>$doc_properties, "app_properties"=>$app_properties, "history"=>$history);
				$query = $this->mongo_db->insert($this->hb_app_col_sw,$final_values);

		    $after_update = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id))->set(array('doc_data.widget_data.page1.Student Details.HB_latest'=> array('hb' => $hb_values['hb'],'month' => $hb_values['month'])))->update($this->hb_app_col_sw);

			}
		}elseif(preg_match('/TTWREIS/', $user_type)){
			$exists = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => $unique_id))->get($this->hb_app_col_tt);
			if(!empty($exists) && isset($exists))
			{
					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => $unique_id))->push('doc_data.widget_data.page1.Student Details.HB_values',$hb_values)->update($this->hb_app_col_tt);
					$after_update = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id))->set(array('doc_data.widget_data.page1.Student Details.HB_latest'=> array('hb' => $hb_values['hb'],                                                            
                              'month' => $hb_values['month'])))->update($this->hb_app_col_tt);
			}else
			{
				$app_properties['app_name'] = "TTWREIS HB App";
				$app_properties['app_id'] = "ttwreis_himglobin_report_col";
				$final_values = array("doc_data"=>array("widget_data"=>$hb_info),"doc_properties"=>$doc_properties, "app_properties"=>$app_properties, "history"=>$history);
				$query = $this->mongo_db->insert($this->hb_app_col_tt,$final_values);

			$after_update = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id))->set(array('doc_data.widget_data.page1.Student Details.HB_latest'=> array('hb' => $hb_values['hb'],'month' => $hb_values['month'])))->update($this->hb_app_col_tt);
			}
		}elseif(preg_match('/TMREIS/', $user_type)){
			$exists = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => $unique_id))->get($this->hb_app_col_tm);
			if(!empty($exists) && isset($exists))
			{
					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => $unique_id))->push('doc_data.widget_data.page1.Student Details.HB_values',$hb_values)->update($this->hb_app_col_tm);
					$after_update = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id))->set(array('doc_data.widget_data.page1.Student Details.HB_latest'=> array('hb' => $hb_values['hb'],                                                            
                              'month' => $hb_values['month'])))->update($this->hb_app_col_tm);
			}else
			{
				$app_properties['app_name'] = "TMREIS HB App";
				$app_properties['app_id'] = "tmreis_himglobin_report_col";
				$final_values = array("doc_data"=>array("widget_data"=>$hb_info),"doc_properties"=>$doc_properties, "app_properties"=>$app_properties, "history"=>$history);
				$query = $this->mongo_db->insert($this->hb_app_col_tm,$final_values);
			$after_update = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id))->set(array('doc_data.widget_data.page1.Student Details.HB_latest'=> array('hb' => $hb_values['hb'],'month' => $hb_values['month'])))->update($this->hb_app_col_tm);
			}
		}elseif(preg_match('/BCWELFARE/', $user_type)){
			$exists = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => $unique_id))->get($this->hb_app_col_bc);
			if(!empty($exists) && isset($exists))
			{
					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => $unique_id))->push('doc_data.widget_data.page1.Student Details.HB_values',$hb_values)->update($this->hb_app_col_bc);
					$after_update = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id))->set(array('doc_data.widget_data.page1.Student Details.HB_latest'=> array('hb' => $hb_values['hb'],                                                            
                              'month' => $hb_values['month'])))->update($this->hb_app_col_bc);
			}else
			{
				$app_properties['app_name'] = "BCWELFARE HB App";
				$app_properties['app_id'] = "bc_welfare_himglobin_report_col";
				$final_values = array("doc_data"=>array("widget_data"=>$hb_info),"doc_properties"=>$doc_properties, "app_properties"=>$app_properties, "history"=>$history);
				$query = $this->mongo_db->insert($this->hb_app_col_bc,$final_values);
				
			$after_update = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id))->set(array('doc_data.widget_data.page1.Student Details.HB_latest'=> array('hb' => $hb_values['hb'],'month' => $hb_values['month'])))->update($this->hb_app_col_bc);
			}
		}
		
		if($query)
		  return TRUE;
	  else
		  return FALSE;
	}
	public function insert_bmi_values($unique_id,$bmi_info,$bmi_values,$doc_properties,$history,$user_type)
	{
		if($user_type == "PANACEA_HS")
		{
			$exists = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => $unique_id))->get($this->bmi_app_col_sw);
			if(!empty($exists) && isset($exists))
			{
					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => $unique_id))->push('doc_data.widget_data.page1.Student Details.BMI_values',$bmi_values)->update($this->bmi_app_col_sw);

					$after_update = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id))->set(array('doc_data.widget_data.page1.Student Details.BMI_latest'=> array('height' => $bmi_values['height'],
							   'weight' => $bmi_values['weight'],
							   'bmi' => $bmi_values['bmi'],
							    'month' => $bmi_values['month'])))->update($this->bmi_app_col_sw);
					
			}else
			{
				$app_properties['app_name'] = "TSWREIS BMI App";
				$app_properties['app_id'] = "healthcare2017617145744625";
				$final_values = array("doc_data"=>array("widget_data"=>$bmi_info),"doc_properties"=>$doc_properties, "app_properties"=>$app_properties, "history"=>$history);
				$query = $this->mongo_db->insert($this->bmi_app_col_sw,$final_values);
			}
		}elseif($user_type == "TTWREIS_HS")
		{
			$exists = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => $unique_id))->get($this->bmi_app_col_tt);
			if(!empty($exists) && isset($exists))
			{
					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => $unique_id))->push('doc_data.widget_data.page1.Student Details.BMI_values',$bmi_values)->update($this->bmi_app_col_tt);

			$after_update = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id))->set(array('doc_data.widget_data.page1.Student Details.BMI_latest'=> array('height' => $bmi_values['height'],
							   'weight' => $bmi_values['weight'],
							   'bmi' => $bmi_values['bmi'],
							    'month' => $bmi_values['month'])))->update($this->bmi_app_col_tt);
			}else
			{
				$app_properties['app_name'] = "TTWREIS BMI App";
				$app_properties['app_id'] = "healthcare2017619153715384";
				$final_values = array("doc_data"=>array("widget_data"=>$bmi_info),"doc_properties"=>$doc_properties, "app_properties"=>$app_properties, "history"=>$history);
				$query = $this->mongo_db->insert($this->bmi_app_col_tt,$final_values);
			}
		}
		elseif($user_type == "TMREIS_HS")
		{
			$exists = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => $unique_id))->get($this->bmi_app_col_tm);
			if(!empty($exists) && isset($exists))
			{
					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => $unique_id))->push('doc_data.widget_data.page1.Student Details.BMI_values',$bmi_values)->update($this->bmi_app_col_tm);
					$after_update = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id))->set(array('doc_data.widget_data.page1.Student Details.BMI_latest'=> array('height' => $bmi_values['height'],
							   'weight' => $bmi_values['weight'],
							   'bmi' => $bmi_values['bmi'],
							    'month' => $bmi_values['month'])))->update($this->bmi_app_col_tm);
			}else
			{
				$app_properties['app_name'] = "TMREIS BMI App";
				$app_properties['app_id'] = "healthcare201761916814158";
				$final_values = array("doc_data"=>array("widget_data"=>$bmi_info),"doc_properties"=>$doc_properties, "app_properties"=>$app_properties, "history"=>$history);
				$query = $this->mongo_db->insert($this->bmi_app_col_tm,$final_values);
			}
		}
		elseif($user_type == "BCWELFARE_HS")
		{
			$exists = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => $unique_id))->get($this->bmi_app_col_bc);
			if(!empty($exists) && isset($exists))
			{
					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => $unique_id))->push('doc_data.widget_data.page1.Student Details.BMI_values',$bmi_values)->update($this->bmi_app_col_bc);
					$after_update = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id))->set(array('doc_data.widget_data.page1.Student Details.BMI_latest'=> array('height' => $bmi_values['height'],
							   'weight' => $bmi_values['weight'],
							   'bmi' => $bmi_values['bmi'],
							    'month' => $bmi_values['month'])))->update($this->bmi_app_col_bc);
			}else
			{
				$app_properties['app_name'] = "BCWELFARE BMI App";
				$app_properties['app_id'] = "healthcare2018213172422286";

				$final_values = array("doc_data"=>array("widget_data"=>$bmi_info),"doc_properties"=>$doc_properties, "app_properties"=>$app_properties, "history"=>$history);
				$query = $this->mongo_db->insert($this->bmi_app_col_bc,$final_values);
			}
		}
		
		if($query)
		  return TRUE;
	  else
		  return FALSE;
	}
	function get_submitted_hb_values($email,$date,$user_type)
	{
		$check_query = array('history.last_stage.submitted_by' => str_replace("@", "#", $email));
		$total_month = substr($date, 0,-3);
		$unique_ids = array();
		$submitted_students = array();
		
		if($user_type == "PANACEA_HS")
		{
		 	//$query = $this->mongo_db->where($check_query)->whereGte('doc_data.widget_data.page1.Student Details.HB_values.month',$total_month)->get($this->hb_app_col_sw);
		 	$query_info = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details'))->where($check_query)->get($this->hb_app_col_sw);	

		 	foreach ($query_info as $student_info) 
		 	{
		 	 	$end_array = end($student_info['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
		 	 	if(preg_match("/$total_month/i", $end_array['month']))
		 	 	{
		 	 		$unique_id = $student_info['doc_data']['widget_data']['page1']['Student Details']['Hospital Unique ID'];
		 	 		array_push($submitted_students, $student_info);
		 	 		array_push($unique_ids, $unique_id);
		 	 	}
		 	 	
		 	}

		 	/* $dist_code = strtoupper(str_ireplace(".", "_",substr($email,0,strpos($email,"@")-2)));
		 	 $unique_list = $this->mongo_db->command(array('distinct' => $this->screening_app_col_sw ,'key' => "doc_data.widget_data.page1.Personal Information.Hospital Unique ID",'query'=>array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => array('$regex' => $dist_code."*"))));
		 	 $arra_diff_ids = array_values(array_diff($unique_list['values'], $unique_ids)); 
			 $not_in_unique = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information'))->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => array('$in' => $arra_diff_ids)))->get($this->screening_app_col_sw );*/
		 	
		 	 $search_query = array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => array(
					 '$nin' => $unique_ids ), 'history.last_stage.submitted_by' => str_replace("@", "#", $email)
		 	);
		 	 
		 	 $not_in_unique = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details'))->where($search_query)->get($this->hb_app_col_sw);		 	 
		 	 $query['submitted_students'] = $submitted_students;
		 	 $query['not_submitted_students'] = $not_in_unique;
		 	
		 	return $query;
		 	
		}elseif($user_type == "TTWREIS_HS")
		{
		 	 //$query = $this->mongo_db->where($check_query)->whereGte('doc_data.widget_data.page1.Student Details.HB_values.month',$total_month)->get($this->hb_app_col_tt);
			$query_info = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details'))->where($check_query)->get($this->hb_app_col_tt);	

		 	foreach ($query_info as $student_info) 
		 	 {
		 	 	$end_array = end($student_info['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
		 	 	if(preg_match("/$total_month/i", $end_array['month']))
		 	 	{
		 	 		$unique_id = $student_info['doc_data']['widget_data']['page1']['Student Details']['Hospital Unique ID'];
		 	 		array_push($submitted_students, $student_info);
		 	 		array_push($unique_ids, $unique_id);
		 	 	}		 	 	
		 	 }
		 	 /* $dist_code = strtoupper(str_ireplace(".", "_",substr($email,0,strpos($email,"@")-2)));
		 	 $unique_list = $this->mongo_db->command(array('distinct' => $this->screening_app_col_tt ,'key' => "doc_data.widget_data.page1.Personal Information.Hospital Unique ID",'query'=>array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => array('$regex' => $dist_code."*"))));
		 	 $arra_diff_ids = array_values(array_diff($unique_list['values'], $unique_ids)); 
			 $not_in_unique = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information'))->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => array('$in' => $arra_diff_ids)))->get($this->screening_app_col_tt );*/            
		 	 $search_query = array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => array(
					 '$nin' => $unique_ids ), 'history.last_stage.submitted_by' => str_replace("@", "#", $email)
					 
		 	);
		 	 $not_in_unique = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details'))->where($search_query)->get($this->hb_app_col_tt);
		 	 $query['submitted_students'] = $submitted_students;
		 	 $query['not_submitted_students'] = $not_in_unique;
		 	//log_message('error','not_submitted_students=========='.print_r($query,true));
		 	return $query;
		 
		}elseif($user_type == "TMREIS_HS")
		{
			//$query = $this->mongo_db->where($check_query)->whereGte('doc_data.widget_data.page1.Student Details.HB_values.month',$total_month)->get($this->hb_app_col_tm);
			$query_info = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details'))->where($check_query)->get($this->hb_app_col_tm);	

		 	foreach ($query_info as $student_info) 
		 	 {
		 	 	$end_array = end($student_info['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
		 	 	if(preg_match("/$total_month/i", $end_array['month']))
		 	 	{
		 	 		$unique_id = $student_info['doc_data']['widget_data']['page1']['Student Details']['Hospital Unique ID'];
		 	 		array_push($submitted_students, $student_info);
		 	 		array_push($unique_ids, $unique_id);
		 	 	}
		 	 	
		 	 }
		 	 /* $dist_code = strtoupper(str_ireplace(".", "_",substr($email,0,strpos($email,"@")-2)));
		 	 $unique_list = $this->mongo_db->command(array('distinct' => $this->screening_app_col_tm ,'key' => "doc_data.widget_data.page1.Personal Information.Hospital Unique ID",'query'=>array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => array('$regex' => $dist_code."*"))));
		 	 $arra_diff_ids = array_values(array_diff($unique_list['values'], $unique_ids)); 
			 $not_in_unique = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information'))->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => array('$in' => $arra_diff_ids)))->get($this->screening_app_col_tm );*/
		 	 $search_query = array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => array(
					 '$nin' =>  $unique_ids ), 'history.last_stage.submitted_by' => str_replace("@", "#", $email)
					 
		 	);
		 	 $not_in_unique = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details'))->where($search_query)->get($this->hb_app_col_tm);
		 	 $query['submitted_students'] = $submitted_students;
		 	 $query['not_submitted_students'] = $not_in_unique;
		 	//log_message('error','not_submitted_students=========='.print_r($query,true));
		 	return $query;
		}elseif(preg_match('/BCWELFARE/', $user_type))
		{
		 	// $query = $this->mongo_db->where($check_query)->whereGte('doc_data.widget_data.page1.Student Details.HB_values.month',$total_month)->get($this->hb_app_col_bc);
		 	$query_info = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details'))->where($check_query)->get($this->hb_app_col_bc);	

		 	foreach ($query_info as $student_info) 
		 	 {
		 	 	$end_array = end($student_info['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
		 	 	if(preg_match("/$total_month/i", $end_array['month']))
		 	 	{
		 	 		$unique_id = $student_info['doc_data']['widget_data']['page1']['Student Details']['Hospital Unique ID'];
		 	 		array_push($submitted_students, $student_info);
		 	 		array_push($unique_ids, $unique_id);
		 	 	}
		 	 	
		 	 }
		 	 /* $dist_code = strtoupper(str_ireplace(".", "_",substr($email,0,strpos($email,"@")-2)));
		 	 $unique_list = $this->mongo_db->command(array('distinct' => $this->screening_app_col_bc ,'key' => "doc_data.widget_data.page1.Personal Information.Hospital Unique ID",'query'=>array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => array('$regex' => $dist_code."*"))));
		 	 $arra_diff_ids = array_values(array_diff($unique_list['values'], $unique_ids)); 
			 $not_in_unique = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information'))->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => array('$in' => $arra_diff_ids)))->get($this->screening_app_col_bc );*/

		 	 $search_query = array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => array(
                     '$nin' =>  $unique_ids ), 'history.last_stage.submitted_by' => str_replace("@", "#", $email)
                     
            );
		 	 $not_in_unique = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details'))->where($search_query)->get($this->hb_app_col_bc);
		 	 $query['submitted_students'] = $submitted_students;
		 	 $query['not_submitted_students'] = $not_in_unique;
		 	//log_message('error','not_submitted_students=========='.print_r($query,true));
		 	return $query;
		}
		
		if(!empty($query))
		{
			return $query;
		}else
		{
			return FALSE;
		}
	}

	function get_submitted_bmi_values($email,$month,$user_type)
	{
		$total_month = substr($month, 0,-3);
		$check_query = array('history.last_stage.submitted_by' => str_replace("@", "#", $email));
		$unique_ids = array();
		$arra_diff_ids = array();
		$submitted_students = array();

		if($user_type == "PANACEA_HS")
		{
		 	 $query_info = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details'))->where($check_query)->get($this->bmi_app_col_sw);	

		 	foreach ($query_info as $student_info) 
		 	 {
		 	 	$end_array = end($student_info['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
		 	 	if(preg_match("/$total_month/i", $end_array['month']))
		 	 	{
		 	 		$unique_id = $student_info['doc_data']['widget_data']['page1']['Student Details']['Hospital Unique ID'];
		 	 		array_push($submitted_students, $student_info);
		 	 		array_push($unique_ids, $unique_id);
		 	 	}
		 	 	
		 	 }	 	  

		 	  
		 	 
		 	/* $dist_code = strtoupper(str_ireplace(".", "_",substr($email,0,strpos($email,"@")-2)));
		 	 $unique_list = $this->mongo_db->command(array('distinct' => $this->screening_app_col_sw ,'key' => "doc_data.widget_data.page1.Personal Information.Hospital Unique ID",'query'=>array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => array('$regex' => $dist_code."*"))));
		 	 $arra_diff_ids = array_values(array_diff($unique_list['values'], $unique_ids)); 
			 $not_in_unique = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information'))->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => array('$in' => $arra_diff_ids)))->get($this->screening_app_col_sw);*/
				
			$search_query = array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => array(
                     '$nin' =>  $unique_ids ), 'history.last_stage.submitted_by' => str_replace("@", "#", $email)                     
            );
		 	 $not_in_unique = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details'))->where($search_query)->get($this->bmi_app_col_sw);
		 	 
		 	 $query['submitted_students'] = $submitted_students;
		 	 $query['not_submitted_students'] = $not_in_unique;
		 	
		 	return $query;
		 	//$query = $this->mongo_db->where($check_query)->whereLike('doc_data.widget_data.page1.Student Details.BMI_values.month',$total_month)->get($this->bmi_app_col_sw);
		 	
		}elseif($user_type == "TTWREIS_HS")
		{
			//$query = $this->mongo_db->where($check_query)->whereLike('doc_data.widget_data.page1.Student Details.BMI_values.month',$total_month)->get($this->bmi_app_col_tt);
			 $query_info = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details'))->where($check_query)->get($this->bmi_app_col_tt);	

		 	foreach ($query_info as $student_info) 
		 	 {
		 	 	$end_array = end($student_info['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
		 	 	if(preg_match("/$total_month/i", $end_array['month']))
		 	 	{
		 	 		$unique_id = $student_info['doc_data']['widget_data']['page1']['Student Details']['Hospital Unique ID'];
		 	 		array_push($submitted_students, $student_info);
		 	 		array_push($unique_ids, $unique_id);
		 	 	}
		 	 	
		 	 }

		 	 /* $dist_code = strtoupper(str_ireplace(".", "_",substr($email,0,strpos($email,"@")-2)));
		 	 $unique_list = $this->mongo_db->command(array('distinct' => $this->screening_app_col_tt ,'key' => "doc_data.widget_data.page1.Personal Information.Hospital Unique ID",'query'=>array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => array('$regex' => $dist_code."*"))));
		 	 $arra_diff_ids = array_values(array_diff($unique_list['values'], $unique_ids)); 
			 $not_in_unique = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information'))->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => array('$in' => $arra_diff_ids)))->get($this->screening_app_col_tt );*/

		 	 $search_query = array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => array(
                     '$nin' =>  $unique_ids ), 'history.last_stage.submitted_by' => str_replace("@", "#", $email)                     
            );
		 	 $not_in_unique = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details'))->where($search_query)->get($this->bmi_app_col_tt);
		 	 $query['submitted_students'] = $submitted_students;
		 	 $query['not_submitted_students'] = $not_in_unique;
		 	
		 	return $query;
		 	
		}elseif($user_type == "TMREIS_HS")
		{
			//$query = $this->mongo_db->where($check_query)->whereLike('doc_data.widget_data.page1.Student Details.BMI_values.month',$total_month)->get($this->bmi_app_col_tm);
			$query_info = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details'))->where($check_query)->get($this->bmi_app_col_tm);	

		 	foreach ($query_info as $student_info) 
		 	 {
		 	 	$end_array = end($student_info['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
		 	 	if(preg_match("/$total_month/i", $end_array['month']))
		 	 	{
		 	 		$unique_id = $student_info['doc_data']['widget_data']['page1']['Student Details']['Hospital Unique ID'];
		 	 		array_push($submitted_students, $student_info);
		 	 		array_push($unique_ids, $unique_id);
		 	 	}
		 	 	
		 	 }
		 	 /* $dist_code = strtoupper(str_ireplace(".", "_",substr($email,0,strpos($email,"@")-2)));
		 	 $unique_list = $this->mongo_db->command(array('distinct' => $this->screening_app_col_tm ,'key' => "doc_data.widget_data.page1.Personal Information.Hospital Unique ID",'query'=>array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => array('$regex' => $dist_code."*"))));
		 	 $arra_diff_ids = array_values(array_diff($unique_list['values'], $unique_ids)); 
			 $not_in_unique = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information'))->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => array('$in' => $arra_diff_ids)))->get($this->screening_app_col_tm );*/

		 	 $search_query = array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => array(
                     '$nin' =>  $unique_ids ), 'history.last_stage.submitted_by' => str_replace("@", "#", $email)                     
            );
		 	 $not_in_unique = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details'))->where($search_query)->get($this->bmi_app_col_tm);
		 	 $query['submitted_students'] = $submitted_students;
		 	 $query['not_submitted_students'] = $not_in_unique;
		 	
		 	return $query;
		 	
		}elseif($user_type == "BCWELFARE_HS")
		{
		 	//$query = $this->mongo_db->where($check_query)->whereLike('doc_data.widget_data.page1.Student Details.BMI_values.month',$total_month)->get($this->bmi_app_col_bc);		
		 	$query_info = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details'))->where($check_query)->get($this->bmi_app_col_bc);	

		 	foreach ($query_info as $student_info) 
		 	 {
		 	 	$end_array = end($student_info['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
		 	 	if(preg_match("/$total_month/i", $end_array['month']))
		 	 	{
		 	 		$unique_id = $student_info['doc_data']['widget_data']['page1']['Student Details']['Hospital Unique ID'];
		 	 		array_push($submitted_students, $student_info);
		 	 		array_push($unique_ids, $unique_id);
		 	 	}
		 	 	
		 	 }
		 	 /* $dist_code = strtoupper(str_ireplace(".", "_",substr($email,0,strpos($email,"@")-2)));
		 	 $unique_list = $this->mongo_db->command(array('distinct' => $this->screening_app_col_bc ,'key' => "doc_data.widget_data.page1.Personal Information.Hospital Unique ID",'query'=>array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => array('$regex' => $dist_code."*"))));
		 	 $arra_diff_ids = array_values(array_diff($unique_list['values'], $unique_ids)); 
			 $not_in_unique = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information'))->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => array('$in' => $arra_diff_ids)))->get($this->screening_app_col_bc );*/
		 	 $search_query = array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => array(
                     '$nin' =>  $unique_ids ), 'history.last_stage.submitted_by' => str_replace("@", "#", $email)                     
            );
		 	 $not_in_unique = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details'))->where($search_query)->get($this->bmi_app_col_bc);
		 	 $query['submitted_students'] = $submitted_students;
		 	 $query['not_submitted_students'] = $not_in_unique;
		 	
		 	return $query;	 	
		}
		
		if(!empty($query))
		{
			return $query;
		}else
		{
			return FALSE;
		}
	}

	public function get_school_health_status($school_name,$user_type)
		{
				
				$all_asthma_cases = array();
				$all_kidney_cases = array();
				$all_scabies_cases = array();
				$all_epilepsy_cases = array();
				$all_bmi_cases = array();
				$all_hb_cases = array();
				$astham_cases_details = array();
				$kidney_cases_details = array();
				$scabies_cases_details = array();
				$epilipsy_cases_details = array();
				$bmi_details = array();
				$bmi_between_15_and_28_details = array();
				$bmi_above_28_details = array();
				$hb_between_7_and_18_details = array();
				$hb_details = array();
				$asthma_count = 0;
				$kidney_count = 0;
				$scabies_count = 0;
				$epilipsy_count = 0;
				$bmi_count = 0;
				$hb_count = 0;
			
				$zone_data = [];

				$all_cases = array();
					if($user_type == "PANACEA_HS")
					{
					// Asthma cases
					$asthma_docs = $this->mongo_db->select ( array (
							//"doc_data.widget_data",
							"doc_data.widget_data.page1.Student Info.School Name.field_ref"
					) )->where(array(
						"doc_data.widget_data.page1.Problem Info.Chronic.Respiratory_system" => "Asthma",
						"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school_name
					) )->whereNe(array(
						'doc_data.widget_data.page2.Review Info.Status' => "Cured"
					))->get ( 'healthcare2016531124515424_static_html' );

					// Kidney cases
					$kidney_docs = $this->mongo_db->select ( array (
							"doc_data.widget_data.page1.Student Info.School Name.field_ref"
					) )->where(array(
						"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school_name
					) )->whereNe(array(
						"doc_data.widget_data.page1.Problem Info.Chronic.Kidney" => array(),
						'doc_data.widget_data.page2.Review Info.Status' => "Cured"
					))->get ( 'healthcare2016531124515424_static_html' );

					// Scabies cases
					$scabies_docs = $this->mongo_db->select ( array (
							//"doc_data.widget_data",
							"doc_data.widget_data.page1.Student Info.School Name.field_ref"
					) )->where(array(
						"doc_data.widget_data.page1.Problem Info.Chronic.Skin" => "Scabies",
						"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school_name,
					) )->whereNe(array(
						'doc_data.widget_data.page2.Review Info.Status' => "Cured"
					))->get ( 'healthcare2016531124515424_static_html' );

					// Epilipsy cases
					$epilipsy_docs = $this->mongo_db->select ( array (
							//"doc_data.widget_data",
							"doc_data.widget_data.page1.Student Info.School Name.field_ref"
					) )->where(array(
						"doc_data.widget_data.page1.Problem Info.Chronic.Central_nervous_system" => "Epilepy",
						"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school_name,
					) )->whereNe(array(
						'doc_data.widget_data.page2.Review Info.Status' => "Cured"
					))->get ( 'healthcare2016531124515424_static_html' );

				
				$bmi_array_14 = array();
				$bmi_array_15_28 = array();
				$bmi_array_28 = array();
				$bmi_details['bmi_issues_docs'] = 0;
				$bmi_details['bmi_issues_count'] = 0;
				$bmi_between_15_and_28_details['bmi_between_count'] = 0;
				$bmi_above_28_details['bmi_above_count'] = 0;
				$bmi_docs = $this->mongo_db->select ( array (
						"doc_data.widget_data"
				) )->where(array("doc_data.widget_data.school_details.School Name"=>$school_name))->get ( $this->bmi_app_col_sw );

				foreach ($bmi_docs as $bmi_details_info) 
				{
					$end_array = end($bmi_details_info['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
					
					if($end_array['bmi'] <= 14)
					{
						array_push($bmi_array_14, $bmi_details_info);
						//log_message('error','bmi_array=============15762'.print_r($bmi_array,TRUE));
						$bmi_details['school_name'] = $school_name;
			   			$bmi_details['bmi_issues_docs'] = $bmi_array_14;
						$bmi_details['bmi_issues_count'] = count($bmi_array_14);
						//echo print_r($bmi_details['bmi_issues_count'],TRUE);
						
					}else if($end_array['bmi'] >= 15 && $end_array['bmi'] <= 28 )
					{   
						array_push($bmi_array_15_28, $bmi_details_info);
						$bmi_between_15_and_28_details['school_name'] = $school_name;
			   			$bmi_between_15_and_28_details['bmi_between_docs'] = $bmi_array_15_28;
						$bmi_between_15_and_28_details['bmi_between_count'] = count($bmi_array_15_28);
						
					}else if($end_array['bmi'] > 28)
					{
						array_push($bmi_array_28, $bmi_details_info);
						$bmi_above_28_details['school_name'] = $school_name;
			   			$bmi_above_28_details['bmi_above_docs'] = $bmi_array_28;
						$bmi_above_28_details['bmi_above_count'] = count($bmi_array_28);
					}
				}
					// Getting All BMI report Submitted Students data
					$bmi_total_docs = $this->mongo_db->select ( array (
						"doc_data.widget_data"
				) )->where(array("doc_data.widget_data.school_details.School Name"=>$school_name))->count ( $this->bmi_app_col_sw );

					// Getting HB value LESSTHAN 6 Students
					// Modified code
				$hb_array_6 = array();
				$hb_array_7_18 = array();
				$hb_details['hb_issues_docs'] = 0;
				$hb_details['hb_issues_count'] = 0;
				$hb_details['hb_between_count'] = 0;
			
				$hb_docs = $this->mongo_db->select ( array (
						"doc_data.widget_data"
				) )->where(array("doc_data.widget_data.school_details.School Name"=>$school_name))->get ( $this->hb_app_col_sw );

				foreach ($hb_docs as $hb_details_info) 
				{
					$end_array = end($hb_details_info['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
					
					if($end_array['hb'] <= 6)
					{
						array_push($hb_array_6, $hb_details_info);
						//log_message('error','bmi_array=============15762'.print_r($bmi_array,TRUE));
						$hb_details['school_name'] = $school_name;
			   			$hb_details['hb_issues_docs'] = $hb_array_6;
						$hb_details['hb_issues_count'] = count($hb_array_6);
					
					}else if($end_array['hb'] >= 7 && $end_array['hb'] <= 18 )
					{   
						array_push($hb_array_7_18, $hb_details_info);
						$hb_between_7_and_18_details['school_name'] = $school_name;
			   			$hb_between_7_and_18_details['hb_between_docs'] = $hb_array_7_18;
						$hb_between_7_and_18_details['hb_between_count'] = count($hb_array_7_18);
						
					}
				}

					// fetching all HB report students data
					$hb_total_docs = $this->mongo_db->select ( array (
							"doc_data.widget_data"
					) )->where(array("doc_data.widget_data.school_details.School Name"=>$school_name))->count ( $this->hb_app_col_sw );
				
					//$asthma_cases_details['school_name'] = $school_name;
				    $asthma_cases_details['asthma_issues_docs'] = $asthma_docs;
					$asthma_cases_details['asthma_issues_count'] = count($asthma_docs);	
					if($asthma_cases_details['asthma_issues_count']>8)
					{
						$asthma_weight = 3;
					}
					elseif($asthma_cases_details['asthma_issues_count']>4)
					{
						$asthma_weight = 2;
					}
					else
					{
						$asthma_weight = 1;
					}
					//$kidney_cases_details['school_name'] = $school_name;
					$kidney_cases_details['kidney_issues_docs'] = $kidney_docs;
					$kidney_cases_details['kidney_issues_count'] = count($kidney_docs);

					if($kidney_cases_details['kidney_issues_count']>8)
					{
						$kidney_weight = 3;
					}
					elseif($kidney_cases_details['kidney_issues_count']>4)
					{
						$kidney_weight = 2;
					}
					else
					{
						$kidney_weight = 1;
					}
				    
					//$scabies_cases_details['school_name'] = $school;
				    $scabies_cases_details['scabies_issues_docs'] = $scabies_docs;
					$scabies_cases_details['scabies_issues_count'] = count($scabies_docs);
					if($scabies_cases_details['scabies_issues_count']>8 )
					{
						$scabies_weight = 3;
					}
					elseif($scabies_cases_details['scabies_issues_count']>4)
					{
						$scabies_weight = 2;
					}
					else
					{
						$scabies_weight = 1;
					}
					//$epilipsy_cases_details['school_name'] = $school;
				    $epilipsy_cases_details['epilipsy_issues_docs'] = $epilipsy_docs;
					$epilipsy_cases_details['epilipsy_issues_count'] = count($epilipsy_docs);
					if($epilipsy_cases_details['epilipsy_issues_count']>8)
					{
						$epilipsy_weight = 3;
					}
					elseif($epilipsy_cases_details['epilipsy_issues_count']>4)
					{
						$epilipsy_weight = 2;
					}
					else
					{
						$epilipsy_weight = 1;
					}
					//Calculate Grade
					$total_grade = $asthma_weight + $kidney_weight + $scabies_weight + $epilipsy_weight;
					

					//echo print_r($total_grade,true);//$bmi_total_docs == 0 || $hb_total_docs == 0 ||
						if( $bmi_details['bmi_issues_count'] > 0 || $bmi_above_28_details['bmi_above_count'] > 0 || $hb_details['hb_issues_count'] > 0 || $scabies_cases_details['scabies_issues_count'] > 0 || $total_grade > 12){
							$zone1_criteria = array("TSWREIS SOCIAL WELFARE",$school_name,$bmi_total_docs==0?"BMI values not submitted till now":"BMI value Lessthan or Equal to 14, students count is : ".$bmi_details['bmi_issues_count'],"BMI value Greater than 28 students count is : ".$bmi_above_28_details['bmi_above_count'],$hb_total_docs==0?"HB values not submitted till now": "HB value Lessthan or Equal to 6, students count is : ".$hb_details['hb_issues_count'], $asthma_cases_details['asthma_issues_count'] == 0 ?"":"Total Asthma cases count is : ".$asthma_cases_details['asthma_issues_count'],$kidney_cases_details['kidney_issues_count'] == 0 ? "":"Total Kidney cases count is : ".$kidney_cases_details['kidney_issues_count'],$epilipsy_cases_details['epilipsy_issues_count'] == 0 ? "":"Total Epilipsy cases count is : ".$epilipsy_cases_details['epilipsy_issues_count'],$scabies_cases_details['scabies_issues_count'] == 0 ? "":"Total Scabies cases count is : ".$scabies_cases_details['scabies_issues_count']);

							/*$zone1_criteria = array("TSWREIS SOCIAL WELFARE",$school_name,$bmi_total_docs==0?"BMI values not submitted till now":"BMI value less than 14 students count is : ".$bmi_details['bmi_issues_count'],$hb_total_docs==0?"HB values not submitted till now": "HB value < 6 students count is : ".$hb_details['hb_issues_count'], "Total Asthma cases count is : ".$asthma_cases_details['asthma_issues_count'],"Total Kidney cases count is : ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy cases count is : ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies count is : ".$scabies_cases_details['scabies_issues_count']);*/

							$zone['status_color'] = "Red"; 
							$zone['criteria'] = $zone1_criteria; 
						/*	$zone['bmi_value_lessthan_14_students'] =  $bmi_docs;
							$zone['bmi_value_greaterthan_28_students'] =  $bmi_above_28_docs;*/
							array_push($zone_data,$zone);
					}
					elseif($total_grade > 8)// || $bmi_between_15_and_28_details['bmi_between_count'] > 0 || 
						//$hb_between_7_and_18_details['hb_between_count'] > 0 )
					{
						//YEL
							$zone2_criteria = array($school_name, "BMI values are Greaterthan or equal to 15 and Lessthan or equal to 28, Total No: ".$bmi_between_15_and_28_details['bmi_between_count'], "HB Greaterthan 7 and Lessthan 18 students count is : ".$hb_between_7_and_18_details['hb_between_count'], "Total Asthma cases count is : ".$asthma_cases_details['asthma_issues_count'],"Total Kidney cases count is : ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy cases count is : ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies cases count is : ".$scabies_cases_details['scabies_issues_count']);
							$zone['status_color'] = "Yellow"; 
							$zone['criteria'] = $zone2_criteria; 
							array_push($zone_data,$zone);

					}
					else
					{
						//GREEN
						$zone3_criteria = array($school_name, "Total Asthma cases count is : ".$asthma_cases_details['asthma_issues_count'],"Total Kidney cases count is :".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy cases count is : ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies cases count is : ".$scabies_cases_details['scabies_issues_count']);
							$zone['status_color'] = "Green"; 
							$zone['criteria'] = $zone3_criteria; 
							array_push($zone_data,$zone);
					}

					array_push($all_cases, $zone);
					
				return $all_cases;
			}

			///////////////////////////////
			elseif($user_type == "TTWREIS_HS")
			{
					// Asthma cases
					$asthma_docs = $this->mongo_db->select ( array (
							//"doc_data.widget_data",
							"doc_data.widget_data.page1.Student Info.School Name.field_ref"
					) )->where(array(
						"doc_data.widget_data.page1.Problem Info.Chronic.Respiratory_system" => "Asthma",
						"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school_name
					) )->whereNe(array(
						'doc_data.widget_data.page2.Review Info.Status' => "Cured"
					))->get ( 'healthcare2016108181933756_static_html' );

					// Kidney cases
					$kidney_docs = $this->mongo_db->select ( array (
							"doc_data.widget_data.page1.Student Info.School Name.field_ref"
					) )->where(array(
						"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school_name
					) )->whereNe(array(
						"doc_data.widget_data.page1.Problem Info.Chronic.Kidney" => array(),
						'doc_data.widget_data.page2.Review Info.Status' => "Cured"
					))->get ( 'healthcare2016108181933756_static_html' );

					// Scabies cases
					$scabies_docs = $this->mongo_db->select ( array (
							//"doc_data.widget_data",
							"doc_data.widget_data.page1.Student Info.School Name.field_ref"
					) )->where(array(
						"doc_data.widget_data.page1.Problem Info.Chronic.Skin" => "Scabies",
						"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school_name,
					) )->whereNe(array(
						'doc_data.widget_data.page2.Review Info.Status' => "Cured"
					))->get ( 'healthcare2016108181933756_static_html' );

					// Epilipsy cases
					$epilipsy_docs = $this->mongo_db->select ( array (
							//"doc_data.widget_data",
							"doc_data.widget_data.page1.Student Info.School Name.field_ref"
					) )->where(array(
						"doc_data.widget_data.page1.Problem Info.Chronic.Central_nervous_system" => "Epilepy",
						"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school_name,
					) )->whereNe(array(
						'doc_data.widget_data.page2.Review Info.Status' => "Cured"
					))->get ( 'healthcare2016108181933756_static_html' );

				
					// BMI cases
				$bmi_array_14 = array();
				$bmi_array_15_28 = array();
				$bmi_array_28 = array();
				$bmi_details['bmi_issues_docs'] = 0;
				$bmi_details['bmi_issues_count'] = 0;
				$bmi_between_15_and_28_details['bmi_between_count'] = 0;
				$bmi_above_28_details['bmi_above_count'] = 0;
				$bmi_docs = $this->mongo_db->select ( array (
						"doc_data.widget_data"
				) )->where(array("doc_data.widget_data.school_details.School Name"=>$school_name))->get ( 'healthcare2017619153715384' );

				foreach ($bmi_docs as $bmi_details_info) 
				{
					$end_array = end($bmi_details_info['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
					
					if($end_array['bmi'] <= 14)
					{
						array_push($bmi_array_14, $bmi_details_info);
						//log_message('error','bmi_array=============15762'.print_r($bmi_array,TRUE));
						$bmi_details['school_name'] = $school_name;
			   			$bmi_details['bmi_issues_docs'] = $bmi_array_14;
						$bmi_details['bmi_issues_count'] = count($bmi_array_14);
						//echo print_r($bmi_details['bmi_issues_count'],TRUE);
						
					}else if($end_array['bmi'] >= 15 && $end_array['bmi'] <= 28 )
					{   
						array_push($bmi_array_15_28, $bmi_details_info);
						$bmi_between_15_and_28_details['school_name'] = $school_name;
			   			$bmi_between_15_and_28_details['bmi_between_docs'] = $bmi_array_15_28;
						$bmi_between_15_and_28_details['bmi_between_count'] = count($bmi_array_15_28);
						
					}else if($end_array['bmi'] > 28)
					{
						array_push($bmi_array_28, $bmi_details_info);
						$bmi_above_28_details['school_name'] = $school_name;
			   			$bmi_above_28_details['bmi_above_docs'] = $bmi_array_28;
						$bmi_above_28_details['bmi_above_count'] = count($bmi_array_28);
					}
				}
					// Getting All BMI report Submitted Students data
					

					$bmi_total_docs = $this->mongo_db->select ( array (
						"doc_data.widget_data"
				) )->where(array("doc_data.widget_data.school_details.School Name"=>$school_name))->count ( 'healthcare2017619153715384' );
					// Getting HB value LESSTHAN 6 Students
					// Modified code
				$hb_array_6 = array();
				$hb_array_7_18 = array();
				$hb_details['hb_issues_docs'] = 0;
				$hb_details['hb_issues_count'] = 0;
				$hb_details['hb_between_count'] = 0;
			
				$hb_docs = $this->mongo_db->select ( array (
						"doc_data.widget_data"
				) )->where(array("doc_data.widget_data.school_details.School Name"=>$school_name))->get ( 'ttwreis_himglobin_report_col' );

				foreach ($hb_docs as $hb_details_info) 
				{
					$end_array = end($hb_details_info['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
					
					if($end_array['hb'] <= 6)
					{
						array_push($hb_array_6, $hb_details_info);
						//log_message('error','bmi_array=============15762'.print_r($bmi_array,TRUE));
						$hb_details['school_name'] = $school_name;
			   			$hb_details['hb_issues_docs'] = $hb_array_6;
						$hb_details['hb_issues_count'] = count($hb_array_6);
					
					}else if($end_array['hb'] >= 7 && $end_array['hb'] <= 18 )
					{   
						array_push($hb_array_7_18, $hb_details_info);
						$hb_between_7_and_18_details['school_name'] = $school_name;
			   			$hb_between_7_and_18_details['hb_between_docs'] = $hb_array_7_18;
						$hb_between_7_and_18_details['hb_between_count'] = count($hb_array_7_18);
						
					}
				}

					// fetching all HB report students data
					$hb_total_docs = $this->mongo_db->select ( array (
							"doc_data.widget_data"
					) )->where(array("doc_data.widget_data.school_details.School Name"=>$school_name))->count ( 'ttwreis_himglobin_report_col' );
				
					//$asthma_cases_details['school_name'] = $school_name;
				    $asthma_cases_details['asthma_issues_docs'] = $asthma_docs;
					$asthma_cases_details['asthma_issues_count'] = count($asthma_docs);	
					if($asthma_cases_details['asthma_issues_count']>8)
					{
						$asthma_weight = 3;
					}
					elseif($asthma_cases_details['asthma_issues_count']>4)
					{
						$asthma_weight = 2;
					}
					else
					{
						$asthma_weight = 1;
					}
					//$kidney_cases_details['school_name'] = $school_name;
					$kidney_cases_details['kidney_issues_docs'] = $kidney_docs;
					$kidney_cases_details['kidney_issues_count'] = count($kidney_docs);

					if($kidney_cases_details['kidney_issues_count']>8)
					{
						$kidney_weight = 3;
					}
					elseif($kidney_cases_details['kidney_issues_count']>4)
					{
						$kidney_weight = 2;
					}
					else
					{
						$kidney_weight = 1;
					}
				    
					//$scabies_cases_details['school_name'] = $school;
				    $scabies_cases_details['scabies_issues_docs'] = $scabies_docs;
					$scabies_cases_details['scabies_issues_count'] = count($scabies_docs);
					if($scabies_cases_details['scabies_issues_count']>8 )
					{
						$scabies_weight = 3;
					}
					elseif($scabies_cases_details['scabies_issues_count']>4)
					{
						$scabies_weight = 2;
					}
					else
					{
						$scabies_weight = 1;
					}
					//$epilipsy_cases_details['school_name'] = $school;
				    $epilipsy_cases_details['epilipsy_issues_docs'] = $epilipsy_docs;
					$epilipsy_cases_details['epilipsy_issues_count'] = count($epilipsy_docs);
					if($epilipsy_cases_details['epilipsy_issues_count']>8)
					{
						$epilipsy_weight = 3;
					}
					elseif($epilipsy_cases_details['epilipsy_issues_count']>4)
					{
						$epilipsy_weight = 2;
					}
					else
					{
						$epilipsy_weight = 1;
					}
					//Calculate Grade
					$total_grade = $asthma_weight + $kidney_weight + $scabies_weight + $epilipsy_weight;
					

					//echo print_r($total_grade,true);
						if($bmi_total_docs == 0 || $hb_total_docs == 0 || $bmi_details['bmi_issues_count'] > 0 || $bmi_above_28_details['bmi_above_count'] > 0 || $hb_details['hb_issues_count'] > 0 || $scabies_cases_details['scabies_issues_count'] > 0 || $total_grade > 12){
							$zone1_criteria = array("TTWREIS TRIBAL",$school_name,$bmi_total_docs==0?"BMI values not submitted till now":"BMI value Lessthan or Equal to 14, students count is : ".$bmi_details['bmi_issues_count'],"BMI value Greaterthan or Equal to 28, students count is : ".$bmi_above_28_details['bmi_above_count'],$hb_total_docs==0?"HB values not submitted till now": "HB value Lessthan or Equal to 6, students count is : ".$hb_details['hb_issues_count'], $asthma_cases_details['asthma_issues_count'] == 0 ?"":"Total Asthma cases count is : ".$asthma_cases_details['asthma_issues_count'],$kidney_cases_details['kidney_issues_count'] == 0 ? "":"Total Kidney cases count is : ".$kidney_cases_details['kidney_issues_count'],$epilipsy_cases_details['epilipsy_issues_count'] == 0 ? "":"Total Epilipsy cases count is : ".$epilipsy_cases_details['epilipsy_issues_count'],$scabies_cases_details['scabies_issues_count'] == 0 ? "":"Total Scabies cases count is : ".$scabies_cases_details['scabies_issues_count']);

							$zone['status_color'] = "Red"; 
							$zone['criteria'] = $zone1_criteria; 
						/*	$zone['bmi_value_lessthan_14_students'] =  $bmi_docs;
							$zone['bmi_value_greaterthan_28_students'] =  $bmi_above_28_docs;*/
							array_push($zone_data,$zone);
							log_message('error','zone_data=====6432'.print_r($zone_data,true));
					}
					elseif($total_grade > 8 || $bmi_between_15_and_28_details['bmi_between_count'] > 0 || 
						$hb_between_7_and_18_details['hb_between_count'] > 0 )
					{
						//YEL
							$zone2_criteria = array($school_name, "BMI values are Greaterthan or equal to 15 and Lessthan or equal to 28, Total No: ".$bmi_between_15_and_28_details['bmi_between_count'], "HB Greaterthan 7 and Lessthan 18 students count is : ".$hb_between_7_and_18_details['hb_between_count'], "Total Asthma cases count is : ".$asthma_cases_details['asthma_issues_count'],"Total Kidney cases count is : ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy cases count is : ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies cases count is : ".$scabies_cases_details['scabies_issues_count']);
							$zone['status_color'] = "Yellow"; 
							$zone['criteria'] = $zone2_criteria; 
							array_push($zone_data,$zone);

					}
					else
					{
						//GREEN
						$zone3_criteria = array($school_name, "Total Asthma cases count is : ".$asthma_cases_details['asthma_issues_count'],"Total Kidney cases count is :".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy cases count is : ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies cases count is : ".$scabies_cases_details['scabies_issues_count']);
							$zone['status_color'] = "Green"; 
							$zone['criteria'] = $zone3_criteria; 
							array_push($zone_data,$zone);
					}

					array_push($all_cases, $zone);
					
				return $all_cases;
			}
			elseif($user_type == "TMREIS_HS")
			{
					// Asthma cases
					$asthma_docs = $this->mongo_db->select ( array (
							//"doc_data.widget_data",
							"doc_data.widget_data.page1.Student Info.School Name.field_ref"
					) )->where(array(
						"doc_data.widget_data.page1.Problem Info.Chronic.Respiratory_system" => "Asthma",
						"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school_name
					) )->whereNe(array(
						'doc_data.widget_data.page2.Review Info.Status' => "Cured"
					))->get ( 'healthcare201610114435690_static_html' );

					// Kidney cases
					$kidney_docs = $this->mongo_db->select ( array (
							"doc_data.widget_data.page1.Student Info.School Name.field_ref"
					) )->where(array(
						"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school_name
					) )->whereNe(array(
						"doc_data.widget_data.page1.Problem Info.Chronic.Kidney" => array(),
						'doc_data.widget_data.page2.Review Info.Status' => "Cured"
					))->get ( 'healthcare201610114435690_static_html' );

					// Scabies cases
					$scabies_docs = $this->mongo_db->select ( array (
							//"doc_data.widget_data",
							"doc_data.widget_data.page1.Student Info.School Name.field_ref"
					) )->where(array(
						"doc_data.widget_data.page1.Problem Info.Chronic.Skin" => "Scabies",
						"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school_name,
					) )->whereNe(array(
						'doc_data.widget_data.page2.Review Info.Status' => "Cured"
					))->get ( 'healthcare201610114435690_static_html' );

					// Epilipsy cases
					$epilipsy_docs = $this->mongo_db->select ( array (
							//"doc_data.widget_data",
							"doc_data.widget_data.page1.Student Info.School Name.field_ref"
					) )->where(array(
						"doc_data.widget_data.page1.Problem Info.Chronic.Central_nervous_system" => "Epilepy",
						"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school_name,
					) )->whereNe(array(
						'doc_data.widget_data.page2.Review Info.Status' => "Cured"
					))->get ( 'healthcare201610114435690_static_html' );

				
					// BMI cases
					$bmi_array_14 = array();
				$bmi_array_15_28 = array();
				$bmi_array_28 = array();
				$bmi_details['bmi_issues_docs'] = 0;
				$bmi_details['bmi_issues_count'] = 0;
				$bmi_between_15_and_28_details['bmi_between_count'] = 0;
				$bmi_above_28_details['bmi_above_count'] = 0;
				$bmi_docs = $this->mongo_db->select ( array (
						"doc_data.widget_data"
				) )->where(array("doc_data.widget_data.school_details.School Name"=>$school_name))->get ( 'healthcare201761916814158' );

				foreach ($bmi_docs as $bmi_details_info) 
				{
					$end_array = end($bmi_details_info['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
					
					if($end_array['bmi'] <= 14)
					{
						array_push($bmi_array_14, $bmi_details_info);
						//log_message('error','bmi_array=============15762'.print_r($bmi_array,TRUE));
						$bmi_details['school_name'] = $school_name;
			   			$bmi_details['bmi_issues_docs'] = $bmi_array_14;
						$bmi_details['bmi_issues_count'] = count($bmi_array_14);
						//echo print_r($bmi_details['bmi_issues_count'],TRUE);
						
					}else if($end_array['bmi'] >= 15 && $end_array['bmi'] <= 28 )
					{   
						array_push($bmi_array_15_28, $bmi_details_info);
						$bmi_between_15_and_28_details['school_name'] = $school_name;
			   			$bmi_between_15_and_28_details['bmi_between_docs'] = $bmi_array_15_28;
						$bmi_between_15_and_28_details['bmi_between_count'] = count($bmi_array_15_28);
						
					}else if($end_array['bmi'] > 28)
					{
						array_push($bmi_array_28, $bmi_details_info);
						$bmi_above_28_details['school_name'] = $school_name;
			   			$bmi_above_28_details['bmi_above_docs'] = $bmi_array_28;
						$bmi_above_28_details['bmi_above_count'] = count($bmi_array_28);
					}
				}
					// Getting All BMI report Submitted Students data
				

					$bmi_total_docs = $this->mongo_db->select ( array (
						"doc_data.widget_data"
				) )->where(array("doc_data.widget_data.school_details.School Name"=>$school_name))->count ( 'healthcare201761916814158' );
					// Getting HB value LESSTHAN 6 Students
					// Modified code
				$hb_array_6 = array();
				$hb_array_7_18 = array();
				$hb_details['hb_issues_docs'] = 0;
				$hb_details['hb_issues_count'] = 0;
				$hb_details['hb_between_count'] = 0;
			
				$hb_docs = $this->mongo_db->select ( array (
						"doc_data.widget_data"
				) )->where(array("doc_data.widget_data.school_details.School Name"=>$school_name))->get ( 'tmreis_himglobin_report_col' );

				foreach ($hb_docs as $hb_details_info) 
				{
					$end_array = end($hb_details_info['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
					
					if($end_array['hb'] <= 6)
					{
						array_push($hb_array_6, $hb_details_info);
						//log_message('error','bmi_array=============15762'.print_r($bmi_array,TRUE));
						$hb_details['school_name'] = $school_name;
			   			$hb_details['hb_issues_docs'] = $hb_array_6;
						$hb_details['hb_issues_count'] = count($hb_array_6);
					
					}else if($end_array['hb'] >= 7 && $end_array['hb'] <= 18 )
					{   
						array_push($hb_array_7_18, $hb_details_info);
						$hb_between_7_and_18_details['school_name'] = $school_name;
			   			$hb_between_7_and_18_details['hb_between_docs'] = $hb_array_7_18;
						$hb_between_7_and_18_details['hb_between_count'] = count($hb_array_7_18);
						
					}
				}

					// fetching all HB report students data
					$hb_total_docs = $this->mongo_db->select ( array (
							"doc_data.widget_data"
					) )->where(array("doc_data.widget_data.school_details.School Name"=>$school_name))->count ( 'tmreis_himglobin_report_col' );
				
					//$asthma_cases_details['school_name'] = $school_name;
				    $asthma_cases_details['asthma_issues_docs'] = $asthma_docs;
					$asthma_cases_details['asthma_issues_count'] = count($asthma_docs);	
					if($asthma_cases_details['asthma_issues_count']>8)
					{
						$asthma_weight = 3;
					}
					elseif($asthma_cases_details['asthma_issues_count']>4)
					{
						$asthma_weight = 2;
					}
					else
					{
						$asthma_weight = 1;
					}
					//$kidney_cases_details['school_name'] = $school_name;
					$kidney_cases_details['kidney_issues_docs'] = $kidney_docs;
					$kidney_cases_details['kidney_issues_count'] = count($kidney_docs);

					if($kidney_cases_details['kidney_issues_count']>8)
					{
						$kidney_weight = 3;
					}
					elseif($kidney_cases_details['kidney_issues_count']>4)
					{
						$kidney_weight = 2;
					}
					else
					{
						$kidney_weight = 1;
					}
				    
					//$scabies_cases_details['school_name'] = $school;
				    $scabies_cases_details['scabies_issues_docs'] = $scabies_docs;
					$scabies_cases_details['scabies_issues_count'] = count($scabies_docs);
					if($scabies_cases_details['scabies_issues_count']>8 )
					{
						$scabies_weight = 3;
					}
					elseif($scabies_cases_details['scabies_issues_count']>4)
					{
						$scabies_weight = 2;
					}
					else
					{
						$scabies_weight = 1;
					}
					//$epilipsy_cases_details['school_name'] = $school;
				    $epilipsy_cases_details['epilipsy_issues_docs'] = $epilipsy_docs;
					$epilipsy_cases_details['epilipsy_issues_count'] = count($epilipsy_docs);
					if($epilipsy_cases_details['epilipsy_issues_count']>8)
					{
						$epilipsy_weight = 3;
					}
					elseif($epilipsy_cases_details['epilipsy_issues_count']>4)
					{
						$epilipsy_weight = 2;
					}
					else
					{
						$epilipsy_weight = 1;
					}
					//Calculate Grade
					$total_grade = $asthma_weight + $kidney_weight + $scabies_weight + $epilipsy_weight;
					

					//echo print_r($total_grade,true);
						if($bmi_total_docs == 0 || $hb_total_docs == 0 || $bmi_details['bmi_issues_count'] > 0 || $bmi_above_28_details['bmi_above_count'] > 0 || $hb_details['hb_issues_count'] > 0 || $scabies_cases_details['scabies_issues_count'] > 0 || $total_grade > 12){
							$zone1_criteria = array("TMREIS",$school_name,$bmi_total_docs==0?"BMI values not submitted till now":"BMI value Lessthan or Equal to 14, students count is : ".$bmi_details['bmi_issues_count'],"BMI value Greaterthan or Equal to 28, students count is : ".$bmi_above_28_details['bmi_above_count'],$hb_total_docs==0?"HB values not submitted till now": "HB value Lessthan or Equal to 6, students count is : ".$hb_details['hb_issues_count'], $asthma_cases_details['asthma_issues_count'] == 0 ?"":"Total Asthma cases count is : ".$asthma_cases_details['asthma_issues_count'],$kidney_cases_details['kidney_issues_count'] == 0 ? "":"Total Kidney cases count is : ".$kidney_cases_details['kidney_issues_count'],$epilipsy_cases_details['epilipsy_issues_count'] == 0 ? "":"Total Epilipsy cases count is : ".$epilipsy_cases_details['epilipsy_issues_count'],$scabies_cases_details['scabies_issues_count'] == 0 ? "":"Total Scabies cases count is : ".$scabies_cases_details['scabies_issues_count']);

							$zone['status_color'] = "Red"; 
							$zone['criteria'] = $zone1_criteria; 
						/*	$zone['bmi_value_lessthan_14_students'] =  $bmi_docs;
							$zone['bmi_value_greaterthan_28_students'] =  $bmi_above_28_docs;*/
							array_push($zone_data,$zone);
					}
					elseif($total_grade > 8 || $bmi_between_15_and_28_details['bmi_between_count'] > 0 || 
						$hb_between_7_and_18_details['hb_between_count'] > 0 )
					{
						//YEL
							$zone2_criteria = array($school_name, "BMI values are Greaterthan or equal to 15 and Lessthan or equal to 28, Total No: ".$bmi_between_15_and_28_details['bmi_between_count'], "HB Greaterthan 7 and Lessthan 18 students count is : ".$hb_between_7_and_18_details['hb_between_count'], "Total Asthma cases count is : ".$asthma_cases_details['asthma_issues_count'],"Total Kidney cases count is : ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy cases count is : ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies cases count is : ".$scabies_cases_details['scabies_issues_count']);
							$zone['status_color'] = "Yellow"; 
							$zone['criteria'] = $zone2_criteria; 
							array_push($zone_data,$zone);

					}
					else
					{
						//GREEN
						$zone3_criteria = array($school_name, "Total Asthma cases count is : ".$asthma_cases_details['asthma_issues_count'],"Total Kidney cases count is :".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy cases count is : ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies cases count is : ".$scabies_cases_details['scabies_issues_count']);
							$zone['status_color'] = "Green"; 
							$zone['criteria'] = $zone3_criteria; 
							array_push($zone_data,$zone);
					}

					array_push($all_cases, $zone);
					
				return $all_cases;
			}

			elseif($user_type == "BCWELFARE_HS")
			{
					// Asthma cases
					$asthma_docs = $this->mongo_db->select ( array (
							//"doc_data.widget_data",
							"doc_data.widget_data.page1.Student Info.School Name.field_ref"
					) )->where(array(
						"doc_data.widget_data.page1.Problem Info.Chronic.Respiratory_system" => "Asthma",
						"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school_name
					) )->whereNe(array(
						'doc_data.widget_data.page2.Review Info.Status' => "Cured"
					))->get ( 'healthcare2018122191146894_static_html' );

					// Kidney cases
					$kidney_docs = $this->mongo_db->select ( array (
							"doc_data.widget_data.page1.Student Info.School Name.field_ref"
					) )->where(array(
						"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school_name
					) )->whereNe(array(
						"doc_data.widget_data.page1.Problem Info.Chronic.Kidney" => array(),
						'doc_data.widget_data.page2.Review Info.Status' => "Cured"
					))->get ( 'healthcare2018122191146894_static_html' );

					// Scabies cases
					$scabies_docs = $this->mongo_db->select ( array (
							//"doc_data.widget_data",
							"doc_data.widget_data.page1.Student Info.School Name.field_ref"
					) )->where(array(
						"doc_data.widget_data.page1.Problem Info.Chronic.Skin" => "Scabies",
						"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school_name,
					) )->whereNe(array(
						'doc_data.widget_data.page2.Review Info.Status' => "Cured"
					))->get ( 'healthcare2018122191146894_static_html' );

					// Epilipsy cases
					$epilipsy_docs = $this->mongo_db->select ( array (
							//"doc_data.widget_data",
							"doc_data.widget_data.page1.Student Info.School Name.field_ref"
					) )->where(array(
						"doc_data.widget_data.page1.Problem Info.Chronic.Central_nervous_system" => "Epilepy",
						"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school_name,
					) )->whereNe(array(
						'doc_data.widget_data.page2.Review Info.Status' => "Cured"
					))->get ( 'healthcare2018122191146894_static_html' );

				
				// BMI cases
				$bmi_array_14 = array();
				$bmi_array_15_28 = array();
				$bmi_array_28 = array();
				$bmi_details['bmi_issues_docs'] = 0;
				$bmi_details['bmi_issues_count'] = 0;
				$bmi_between_15_and_28_details['bmi_between_count'] = 0;
				$bmi_above_28_details['bmi_above_count'] = 0;
				$bmi_docs = $this->mongo_db->select ( array (
						"doc_data.widget_data"
				) )->where(array("doc_data.widget_data.school_details.School Name"=>$school_name))->get ( 'healthcare2018213172422286' );

				foreach ($bmi_docs as $bmi_details_info) 
				{
					$end_array = end($bmi_details_info['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
					
					if($end_array['bmi'] <= 14)
					{
						array_push($bmi_array_14, $bmi_details_info);
						//log_message('error','bmi_array=============15762'.print_r($bmi_array,TRUE));
						$bmi_details['school_name'] = $school_name;
			   			$bmi_details['bmi_issues_docs'] = $bmi_array_14;
						$bmi_details['bmi_issues_count'] = count($bmi_array_14);
						//echo print_r($bmi_details['bmi_issues_count'],TRUE);
						
					}else if($end_array['bmi'] >= 15 && $end_array['bmi'] <= 28 )
					{   
						array_push($bmi_array_15_28, $bmi_details_info);
						$bmi_between_15_and_28_details['school_name'] = $school_name;
			   			$bmi_between_15_and_28_details['bmi_between_docs'] = $bmi_array_15_28;
						$bmi_between_15_and_28_details['bmi_between_count'] = count($bmi_array_15_28);
						
					}else if($end_array['bmi'] > 28)
					{
						array_push($bmi_array_28, $bmi_details_info);
						$bmi_above_28_details['school_name'] = $school_name;
			   			$bmi_above_28_details['bmi_above_docs'] = $bmi_array_28;
						$bmi_above_28_details['bmi_above_count'] = count($bmi_array_28);
					}
				}
					// Getting All BMI report Submitted Students data

					$bmi_total_docs = $this->mongo_db->select ( array (
						"doc_data.widget_data"
				) )->where(array("doc_data.widget_data.school_details.School Name"=>$school_name))->count ( 'healthcare2018213172422286' );
					// Getting HB value LESSTHAN 6 Students
					// Modified code
				$hb_array_6 = array();
				$hb_array_7_18 = array();
				$hb_details['hb_issues_docs'] = 0;
				$hb_details['hb_issues_count'] = 0;
				$hb_details['hb_between_count'] = 0;
			
				$hb_docs = $this->mongo_db->select ( array (
						"doc_data.widget_data"
				) )->where(array("doc_data.widget_data.school_details.School Name"=>$school_name))->get ( 'bc_welfare_himglobin_report_col' );

				foreach ($hb_docs as $hb_details_info) 
				{
					$end_array = end($hb_details_info['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
					
					if($end_array['hb'] <= 6)
					{
						array_push($hb_array_6, $hb_details_info);
						//log_message('error','bmi_array=============15762'.print_r($bmi_array,TRUE));
						$hb_details['school_name'] = $school_name;
			   			$hb_details['hb_issues_docs'] = $hb_array_6;
						$hb_details['hb_issues_count'] = count($hb_array_6);
					
					}else if($end_array['hb'] >= 7 && $end_array['hb'] <= 18 )
					{   
						array_push($hb_array_7_18, $hb_details_info);
						$hb_between_7_and_18_details['school_name'] = $school_name;
			   			$hb_between_7_and_18_details['hb_between_docs'] = $hb_array_7_18;
						$hb_between_7_and_18_details['hb_between_count'] = count($hb_array_7_18);
						
					}
				}

					// fetching all HB report students data
					$hb_total_docs = $this->mongo_db->select ( array (
							"doc_data.widget_data"
					) )->where(array("doc_data.widget_data.school_details.School Name"=>$school_name))->count ( 'bc_welfare_himglobin_report_col' );
				
					//$asthma_cases_details['school_name'] = $school_name;
				    $asthma_cases_details['asthma_issues_docs'] = $asthma_docs;
					$asthma_cases_details['asthma_issues_count'] = count($asthma_docs);	
					if($asthma_cases_details['asthma_issues_count']>8)
					{
						$asthma_weight = 3;
					}
					elseif($asthma_cases_details['asthma_issues_count']>4)
					{
						$asthma_weight = 2;
					}
					else
					{
						$asthma_weight = 1;
					}
					//$kidney_cases_details['school_name'] = $school_name;
					$kidney_cases_details['kidney_issues_docs'] = $kidney_docs;
					$kidney_cases_details['kidney_issues_count'] = count($kidney_docs);

					if($kidney_cases_details['kidney_issues_count']>8)
					{
						$kidney_weight = 3;
					}
					elseif($kidney_cases_details['kidney_issues_count']>4)
					{
						$kidney_weight = 2;
					}
					else
					{
						$kidney_weight = 1;
					}
				    
					//$scabies_cases_details['school_name'] = $school;
				    $scabies_cases_details['scabies_issues_docs'] = $scabies_docs;
					$scabies_cases_details['scabies_issues_count'] = count($scabies_docs);
					if($scabies_cases_details['scabies_issues_count']>8 )
					{
						$scabies_weight = 3;
					}
					elseif($scabies_cases_details['scabies_issues_count']>4)
					{
						$scabies_weight = 2;
					}
					else
					{
						$scabies_weight = 1;
					}
					//$epilipsy_cases_details['school_name'] = $school;
				    $epilipsy_cases_details['epilipsy_issues_docs'] = $epilipsy_docs;
					$epilipsy_cases_details['epilipsy_issues_count'] = count($epilipsy_docs);
					if($epilipsy_cases_details['epilipsy_issues_count']>8)
					{
						$epilipsy_weight = 3;
					}
					elseif($epilipsy_cases_details['epilipsy_issues_count']>4)
					{
						$epilipsy_weight = 2;
					}
					else
					{
						$epilipsy_weight = 1;
					}
					//Calculate Grade
					$total_grade = $asthma_weight + $kidney_weight + $scabies_weight + $epilipsy_weight;
					

					//echo print_r($total_grade,true);
						if($bmi_total_docs == 0 || $hb_total_docs == 0 || $bmi_details['bmi_issues_count'] > 0 || $bmi_above_28_details['bmi_above_count'] > 0 || $hb_details['hb_issues_count'] > 0 || $scabies_cases_details['scabies_issues_count'] > 0 || $total_grade > 12){
							$zone1_criteria = array("BCWELFARE",$school_name,$bmi_total_docs==0?"BMI values not submitted till now":"BMI value Lessthan or Equal to 14, students count is : ".$bmi_details['bmi_issues_count'],"BMI value Greaterthan or Equal to 28, students count is : ".$bmi_above_28_details['bmi_above_count'],$hb_total_docs==0?"HB values not submitted till now": "HB value Lessthan or Equal to 6, students count is : ".$hb_details['hb_issues_count'], $asthma_cases_details['asthma_issues_count'] == 0 ?"":"Total Asthma cases count is : ".$asthma_cases_details['asthma_issues_count'],$kidney_cases_details['kidney_issues_count'] == 0 ? "":"Total Kidney cases count is : ".$kidney_cases_details['kidney_issues_count'],$epilipsy_cases_details['epilipsy_issues_count'] == 0 ? "":"Total Epilipsy cases count is : ".$epilipsy_cases_details['epilipsy_issues_count'],$scabies_cases_details['scabies_issues_count'] == 0 ? "":"Total Scabies cases count is : ".$scabies_cases_details['scabies_issues_count']);

							$zone['status_color'] = "Red"; 
							$zone['criteria'] = $zone1_criteria; 
						/*	$zone['bmi_value_lessthan_14_students'] =  $bmi_docs;
							$zone['bmi_value_greaterthan_28_students'] =  $bmi_above_28_docs;*/
							array_push($zone_data,$zone);
					}
					elseif($total_grade > 8 || $bmi_between_15_and_28_details['bmi_between_count'] > 0 || 
						$hb_between_7_and_18_details['hb_between_count'] > 0 )
					{
						//YEL
							$zone2_criteria = array($school_name, "BMI values are Greaterthan or equal to 15 and Lessthan or equal to 28, Total No: ".$bmi_between_15_and_28_details['bmi_between_count'], "HB Greaterthan 7 and Lessthan 18 students count is : ".$hb_between_7_and_18_details['hb_between_count'], "Total Asthma cases count is : ".$asthma_cases_details['asthma_issues_count'],"Total Kidney cases count is : ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy cases count is : ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies cases count is : ".$scabies_cases_details['scabies_issues_count']);
							$zone['status_color'] = "Yellow"; 
							$zone['criteria'] = $zone2_criteria; 
							array_push($zone_data,$zone);

					}
					else
					{
						//GREEN
						$zone3_criteria = array($school_name, "Total Asthma cases count is : ".$asthma_cases_details['asthma_issues_count'],"Total Kidney cases count is :".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy cases count is : ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies cases count is : ".$scabies_cases_details['scabies_issues_count']);
							$zone['status_color'] = "Green"; 
							$zone['criteria'] = $zone3_criteria; 
							array_push($zone_data,$zone);
					}

					array_push($all_cases, $zone);
					
				return $all_cases;
			}
				
	}


	function get_last_unique_id_from_school($u_id,$user_type)
	{
		if($user_type == "PANACEA_HS")
		{
			$all_list = array();
			
			$all_uniqueID = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID'),array())->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' , $u_id)->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1))->get('tswreis_screening_report_col_2021-2022');
			if(!empty($all_uniqueID)){
				foreach ($all_uniqueID as $data1) {
					$uniques1 = $data1['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
					array_push($all_list, $uniques1);
				}
			}

			$all_uniqueID_frm_pasout = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID'),array())->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' , $u_id)->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1))->get('screening_report_col_2021-2022_passed_out');
			if(!empty($all_uniqueID_frm_pasout)){
				foreach ($all_uniqueID_frm_pasout as $data2) {
					$uniques2 = $data2['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
					if(!in_array($uniques2, $all_list)){
						array_push($all_list, $uniques2);
					}
				}
			}

			$all_uniqueID_frm_otherscls = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID'),array())->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' , $u_id)->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1))->get('other_classes_screening_data_2020-2021');
			if(!empty($all_uniqueID_frm_otherscls)){
				foreach ($all_uniqueID_frm_otherscls as $data3) {
					$uniques3 = $data3['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
					if(!in_array($uniques3, $all_list)){
						array_push($all_list, $uniques3);
					}
				}
			}

			/*
				Above we have taken ids from all the collections for one school

				increase last id by ordering array in ascending order,  then last id will come
			*/
			sort($all_list);
			$value = end($all_list);
			$take_value_frm_id = explode('_', $value);
			$last_val_frm_id = $take_value_frm_id[2];
			$increase_value = $last_val_frm_id+1;
			//$new_id = $take_value_frm_id[0]."_".$take_value_frm_id[1]."_".$increase_value;

			return intval($increase_value);

			/*$query = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID'))->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' , $u_id)->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => -1))->limit(1)->get($this->screening_app_col_sw);
			$hospital_UID = $query[0]['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
			$new_UID = explode("_", $hospital_UID);
			if(!empty($new_UID[2]) && isset($new_UID[2]))
			{
				return $new_UID[2] + 1;
			}else
			{
				return FALSE;
			}*/
		}else if($user_type == "TTWREIS_HS")
		{
			$all_list = array();
			
			$all_uniqueID = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID'),array())->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' , $u_id)->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1))->get('ttwreis_screening_report_col_2021-2022');
			if(!empty($all_uniqueID)){
				foreach ($all_uniqueID as $data1) {
					$uniques1 = $data1['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
					array_push($all_list, $uniques1);
				}
			}

			$all_uniqueID_frm_pasout = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID'),array())->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' , $u_id)->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1))->get('ttwreis_screening_report_col_2021-2022_passed_out');
			if(!empty($all_uniqueID_frm_pasout)){
				foreach ($all_uniqueID_frm_pasout as $data2) {
					$uniques2 = $data2['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
					if(!in_array($uniques2, $all_list)){
						array_push($all_list, $uniques2);
					}
				}
			}

			$all_uniqueID_frm_otherscls = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID'),array())->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' , $u_id)->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1))->get('ttwreis_other_classes_screening_data_2020-2021');
			if(!empty($all_uniqueID_frm_otherscls)){
				foreach ($all_uniqueID_frm_otherscls as $data3) {
					$uniques3 = $data3['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
					if(!in_array($uniques3, $all_list)){
						array_push($all_list, $uniques3);
					}
				}
			}

			
			sort($all_list);
			$value = end($all_list);
			$take_value_frm_id = explode('_', $value);
			$last_val_frm_id = $take_value_frm_id[2];
			$increase_value = $last_val_frm_id+1;
			//$new_id = $take_value_frm_id[0]."_".$take_value_frm_id[1]."_".$increase_value;

			return intval($increase_value);

			
		}else if($user_type == "TMREIS_HS")
		{
			$query = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID'))->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' , $u_id)->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => -1))->limit(1)->get($this->screening_app_col_tm);
			$hospital_UID = $query[0]['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
			$new_UID = explode("_", $hospital_UID);
			if(!empty($new_UID[2]) && isset($new_UID[2]))
			{
				return $new_UID[2] + 1;
			}else
			{
				return FALSE;
			}
		}else if($user_type =="BCWELFARE_HS")
		{
			$all_list = array();
			
			$all_uniqueID = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID'),array())->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' , $u_id)->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1))->get('bcwelfare_screening_report_col_2020-2021');
			if(!empty($all_uniqueID)){
				foreach ($all_uniqueID as $data1) {
					$uniques1 = $data1['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
					array_push($all_list, $uniques1);
				}
			}

			$all_uniqueID_frm_pasout = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID'),array())->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' , $u_id)->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1))->get('bcwelfare_screening_report_col_2020-2021_passed_out');
			if(!empty($all_uniqueID_frm_pasout)){
				foreach ($all_uniqueID_frm_pasout as $data2) {
					$uniques2 = $data2['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
					if(!in_array($uniques2, $all_list)){
						array_push($all_list, $uniques2);
					}
				}
			}

			$all_uniqueID_frm_otherscls = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID'),array())->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' , $u_id)->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1))->get('bcwelfare_other_classes_screening_data_2019-2020');
			if(!empty($all_uniqueID_frm_otherscls)){
				foreach ($all_uniqueID_frm_otherscls as $data3) {
					$uniques3 = $data3['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
					if(!in_array($uniques3, $all_list)){
						array_push($all_list, $uniques3);
					}
				}
			}

			
			sort($all_list);
			$value = end($all_list);
			$take_value_frm_id = explode('_', $value);
			$last_val_frm_id = $take_value_frm_id[2];
			$increase_value = $last_val_frm_id+1;
			//$new_id = $take_value_frm_id[0]."_".$take_value_frm_id[1]."_".$increase_value;

			return intval($increase_value);

			
		}
		
	}
	public function get_all_tswreis_schools() {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->get ( $this->collections ['panacea_schools'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		foreach ( $query as $schools => $school ) {
			$dt_name = $this->mongo_db->where ( '_id', new MongoId ( $school ['dt_name'] ) )->get ( 'panacea_district' );
			if (isset ( $school ['dt_name'] )) {
				$query [$schools] ['dt_name'] = $dt_name [0] ['dt_name'];
			} else {
				$query [$schools] ['dt_name'] = "No state selected";
			}
		}
		return $query;
	}
	public function get_all_ttwreis_schools() {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->get ( $this->collections ['ttwreis_schools'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		foreach ( $query as $schools => $school ) {
			$dt_name = $this->mongo_db->where ( '_id', new MongoId ( $school ['dt_name'] ) )->get ( 'ttwreis_district' );
			if (isset ( $school ['dt_name'] )) {
				$query [$schools] ['dt_name'] = $dt_name [0] ['dt_name'];
			} else {
				$query [$schools] ['dt_name'] = "No state selected";
			}
		}
		return $query;
	}
	public function get_all_tmreis_schools() {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->get ( $this->collections ['tmreis_schools'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		foreach ( $query as $schools => $school ) {
			$dt_name = $this->mongo_db->where ( '_id', new MongoId ( $school ['dt_name'] ) )->get ( 'tmreis_district' );
			if (isset ( $school ['dt_name'] )) {
				$query [$schools] ['dt_name'] = $dt_name [0] ['dt_name'];
			} else {
				$query [$schools] ['dt_name'] = "No state selected";
			}
		}
		return $query;
	}
	public function get_all_bcwelfare_schools() {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->get ( $this->collections ['bc_welfare_schools'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		foreach ( $query as $schools => $school ) {
			$dt_name = $this->mongo_db->where ( '_id', new MongoId ( $school ['dt_name'] ) )->get ( 'bc_welfare_district' );
			if (isset ( $school ['dt_name'] )) {
				$query [$schools] ['dt_name'] = $dt_name [0] ['dt_name'];
			} else {
				$query [$schools] ['dt_name'] = "No state selected";
			}
		}
		return $query;
	}

	public function get_all_schools_health_status_count_model($user_type)
	{
		$all_schools_name = array();
		$all_schools = array();
		$zone1['label'] = "Red";
		$zone1['value']=0;
		$zone1['school_name'] =  array();
		$zone1['school_count'] = 0;
		$zone2['label'] = "Yellow";
		$zone2['value']=0;
		$zone2['school_name'] = array();
		$zone2['school_count'] = 0;
		$zone3['label'] = "Green";
		$zone3['value']=0;
		$zone3['school_name'] =  array();
		$zone3['school_count'] = 0;
		$all_asthma_cases = array();
		$all_kidney_cases = array();
		$all_scabies_cases = array();
		$all_epilepsy_cases = array();
		$all_bmi_cases = array();
		$all_hb_cases = array();
		$astham_cases_details = array();
		$kidney_cases_details = array();
		$scabies_cases_details = array();
		$epilipsy_cases_details = array();
		$bmi_details = array();
		$bmi_between_15_and_28_details = array();
		$bmi_above_28_details = array();
		$hb_between_7_and_18_details = array();
		$hb_details = array();
		$asthma_count = 0;
		$kidney_count = 0;
		$scabies_count = 0;
		$epilipsy_count = 0;
		$bmi_count = 0;
		$hb_count = 0;
		$zone1['criteria'] = [];
		$zone2['criteria'] = [];
		$zone3['criteria'] = [];
		$zone1['current_school_name'] = [];
		$zone2['current_school_name'] = [];
		$zone3['current_school_name'] = [];

		$all_cases = array();
		if($user_type == "PANACEA_ADMIN")
		{
			$tswreis_schools_list = $this->get_all_tswreis_schools();
		foreach($tswreis_schools_list as $school)
		{

			// Asthma cases
			$asthma_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"
			) )->where(array(
				"doc_data.widget_data.page1.Problem Info.Chronic.Respiratory_system" => "Asthma",
				"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school['school_name']
			) )->whereNe(array(
				'doc_data.widget_data.page2.Review Info.Status' => "Cured"
			))->get ( $this->health_request_col_panacea_hs );


			// Kidney cases
			$kidney_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"
			) )->where(array(
				"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school['school_name']
			) )->whereNe(array(
				"doc_data.widget_data.page1.Problem Info.Chronic.Kidney" => array(),
				'doc_data.widget_data.page2.Review Info.Status' => "Cured"
			))->get ( $this->health_request_col_panacea_hs );

			
			// Scabies cases
			$scabies_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"
			) )->where(array(
				"doc_data.widget_data.page1.Problem Info.Chronic.Skin" => "Scabies",
				"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school['school_name'],
			) )->whereNe(array(
				'doc_data.widget_data.page2.Review Info.Status' => "Cured"
			))->get ( $this->health_request_col_panacea_hs );

			// Epilipsy cases
			$epilipsy_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"
			) )->where(array(
				"doc_data.widget_data.page1.Problem Info.Chronic.Central_nervous_system" => "Epilepy",
				"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school['school_name'],
			) )->whereNe(array(
				'doc_data.widget_data.page2.Review Info.Status' => "Cured"
			))->get ( $this->health_request_col_panacea_hs );

			// BMI cases
			// Getting BMI value LESSTHAN 14 Students
			$bmi_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data"
			) )->whereLte(
				"doc_data.widget_data.page1.Student Details.BMI_values.bmi",14
			)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( $this->bmi_app_col_sw );
			$bmi_details['school_name'] = $school['school_name'];
			$bmi_details['bmi_issues_docs'] = $bmi_docs;
			$bmi_details['bmi_issues_count'] = count($bmi_docs);

			// Getting BMI value BETWEEN 15 AND 28 Students
			$bmi_between_15_and_28_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data"
			) )->whereBetween(
				"doc_data.widget_data.page1.Student Details.BMI_values.bmi",15,28
			)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( $this->bmi_app_col_sw );
			$bmi_between_15_and_28_details['school_name'] = $school['school_name'];
			$bmi_between_15_and_28_details['bmi_between_docs'] = $bmi_between_15_and_28_docs;
			$bmi_between_15_and_28_details['bmi_between_count'] = count($bmi_between_15_and_28_docs);

			// Getting BMI value ABOVE 28 Students
			$bmi_above_28_docs = $this->mongo_db->select ( array (
					"doc_data.widget_data"
			) )->whereGte(
				"doc_data.widget_data.page1.Student Details.BMI_values.bmi",28
			)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( $this->bmi_app_col_sw );
			$bmi_above_28_details['school_name'] = $school['school_name'];
			$bmi_above_28_details['bmi_above_docs'] = $bmi_above_28_docs;
			$bmi_above_28_details['bmi_above_count'] = count($bmi_above_28_docs);

			// Getting All BMI value BETWEEN 14 AND 28 Students
			$bmi_total_docs = $this->mongo_db->select ( array (
					"doc_data.widget_data"
			) )->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->count ( $this->bmi_app_col_sw );

			// Getting HB value LESSTHAN 6 Students
			$hb_docs = $this->mongo_db->select ( array (
					"doc_data.widget_data"
			) )->whereLte(
				"doc_data.widget_data.page1.Student Details.HB_values.hb",6
			)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( $this->hb_app_col_sw );
			$hb_details['school_name'] = $school['school_name'];
			$hb_details['hb_issues_docs'] = $hb_docs;
			$hb_details['hb_issues_count'] = count($hb_docs);

			// Getting HB value BETWEEEN 7 AND 18 Students
			$hb_between_7_and_18_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data"
			) )->whereBetween(
				"doc_data.widget_data.page1.Student Details.HB_values.hb",7,18
			)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( $this->hb_app_col_sw );
			$hb_between_7_and_18_details['school_name'] = $school['school_name'];
			$hb_between_7_and_18_details['hb_between_docs'] = $hb_between_7_and_18_docs;
			$hb_between_7_and_18_details['hb_between_count'] = count($hb_between_7_and_18_docs);

			

			$hb_total_docs = $this->mongo_db->select ( array (
					"doc_data.widget_data"
			) )->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->count ( $this->hb_app_col_sw );
		
			$asthma_cases_details['school_name'] = $school['school_name'];
			$asthma_cases_details['asthma_issues_docs'] = $asthma_docs;
			$asthma_cases_details['asthma_issues_count'] = count($asthma_docs);	
			if($asthma_cases_details['asthma_issues_count']>8)
			{
				$asthma_weight = 3;
			}
			elseif($asthma_cases_details['asthma_issues_count']>4)
			{
				$asthma_weight = 2;
			}
			else
			{
				$asthma_weight = 1;
			}
			$kidney_cases_details['school_name'] = $school['school_name'];
			$kidney_cases_details['kidney_issues_docs'] = $kidney_docs;
			$kidney_cases_details['kidney_issues_count'] = count($kidney_docs);

			if($kidney_cases_details['kidney_issues_count']>8)
			{
				$kidney_weight = 3;
			}
			elseif($kidney_cases_details['kidney_issues_count']>4)
			{
				$kidney_weight = 2;
			}
			else
			{
				$kidney_weight = 1;
			}
			
			$scabies_cases_details['school_name'] = $school;
			$scabies_cases_details['scabies_issues_docs'] = $scabies_docs;
			$scabies_cases_details['scabies_issues_count'] = count($scabies_docs);
			if($scabies_cases_details['scabies_issues_count']>8 )
			{
				$scabies_weight = 3;
			}
			elseif($scabies_cases_details['scabies_issues_count']>4)
			{
				$scabies_weight = 2;
			}
			else
			{
				$scabies_weight = 1;
			}
			$epilipsy_cases_details['school_name'] = $school;
			$epilipsy_cases_details['epilipsy_issues_docs'] = $epilipsy_docs;
			$epilipsy_cases_details['epilipsy_issues_count'] = count($epilipsy_docs);
			if($epilipsy_cases_details['epilipsy_issues_count']>8)
			{
				$epilipsy_weight = 3;
			}
			elseif($epilipsy_cases_details['epilipsy_issues_count']>4)
			{
				$epilipsy_weight = 2;
			}
			else
			{
				$epilipsy_weight = 1;
			}
			//Calculate Grade
			//echo print_r($school['school_name']."  ".$total_grade,true)."<br>";
			$total_grade = $asthma_weight + $kidney_weight + $scabies_weight + $epilipsy_weight;
			//echo print_r($total_grade,true);//$bmi_total_docs == 0 || $hb_total_docs == 0 ||
				if( $bmi_details['bmi_issues_count'] > 0 || $bmi_above_28_details['bmi_above_count'] > 0 || $hb_details['hb_issues_count'] > 0 || $scabies_cases_details['scabies_issues_count'] > 0 || $total_grade > 12){
					array_push($zone1['school_name'],$school['school_name']);
					$test['sn'] = $school;
					array_push($zone1['current_school_name'],$test['sn']['school_name']);
					$zone1_criteria = array($test['sn']['school_name'],$bmi_total_docs==0?"BMI VALUES NOT SUBMITTED TILL TODAY":"BMI Values are less than 14, total No: ".$bmi_details['bmi_issues_count'],"BMI Values are greater than 28, total No: ".$bmi_above_28_details['bmi_above_count'],$hb_total_docs==0?"HB VALUES NOT SUBMITTED TILL TODAY": "HB Values are less than 6, total No: ".$hb_details['hb_issues_count'], "Total Asthma Cases: ".$asthma_cases_details['asthma_issues_count'],"Total Kidney: ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy Cases: ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies Cases: ".$scabies_cases_details['scabies_issues_count']);
					array_push($zone1['criteria'],$zone1_criteria);
					//array_push($zone1['criteria'],$zone1_criteria);
					$zone1['school_count']++;
					
					$zone1['value']++;
			}
			elseif($total_grade > 8 )//|| $bmi_between_15_and_28_details['bmi_between_count'] > 0 || 
				//$hb_between_7_and_18_details['hb_between_count'] > 0 )
			{
				//YEL
					array_push($zone2['school_name'],$school['school_name']);
					$test['sn'] = $school;
					array_push($zone2['current_school_name'],$test['sn']['school_name']);
					$zone2['school_count']++;
					$zone2['value']++;
					$zone2_criteria = array($test['sn']['school_name'], "BMI Values are >15 and <28, Total No: ".$bmi_between_15_and_28_details['bmi_between_count'], "HB Values are  >7 and <18, Total No: ".$hb_between_7_and_18_details['hb_between_count'], "Total Asthma Cases: ".$asthma_cases_details['asthma_issues_count'],"Total Kidney: ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy Cases: ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies Cases: ".$scabies_cases_details['scabies_issues_count']);
							array_push($zone2['criteria'],$zone2_criteria);
			}
			else
			{
				//GREEN
					array_push($zone3['school_name'],$school['school_name']);
					$test['sn'] = $school;
					array_push($zone3['current_school_name'],$test['sn']['school_name']);
					$zone3['school_count']++;
					$zone3['value']++;
					$zone3_criteria = array($test['sn']['school_name'], "Total Asthma Cases: ".$asthma_cases_details['asthma_issues_count'],"Total Kidney ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy Cases : ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies Cases : ".$scabies_cases_details['scabies_issues_count']);
						array_push($zone3['criteria'],$zone3_criteria);
			}

			$asthma_count += $asthma_cases_details['asthma_issues_count'];
			$kidney_count += $kidney_cases_details['kidney_issues_count'];
			$scabies_count += $scabies_cases_details['scabies_issues_count'];
			$epilipsy_count += $epilipsy_cases_details['epilipsy_issues_count'];
			$bmi_count += $bmi_details['bmi_issues_count'];

		/*	array_push($all_asthma_cases, $asthma_cases_details);
			array_push($all_kidney_cases, $kidney_cases_details);
			array_push($all_scabies_cases, $scabies_cases_details);
			array_push($all_epilepsy_cases, $epilipsy_cases_details);
			array_push($all_bmi_cases, $bmi_details);
			array_push($all_hb_cases, $hb_details);*/
		}
			array_push($all_cases, $zone1);
			
			array_push($all_cases, $zone2);
			
			array_push($all_cases, $zone3);
			/*
			array_push($all_cases, $all_asthma_cases);
			array_push($all_cases, $all_kidney_cases);
			array_push($all_cases, $all_scabies_cases);
			array_push($all_cases, $all_epilepsy_cases);*/
			return $all_cases;
		}
		/*TTWREIS_ADMIN*/
		if($user_type == "TTWREIS_ADMIN")
		{
			$ttwreis_schools_list = $this->get_all_ttwreis_schools();
			foreach($ttwreis_schools_list as $school)
			{

			// Asthma cases
			$asthma_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"
			) )->where(array(
				"doc_data.widget_data.page1.Problem Info.Chronic.Respiratory_system" => "Asthma",
				"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school['school_name']
			) )->whereNe(array(
				'doc_data.widget_data.page2.Review Info.Status' => "Cured"
			))->get ( $this->health_request_col_ttwreis_hs );


			// Kidney cases
			$kidney_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"
			) )->where(array(
				"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school['school_name']
			) )->whereNe(array(
				"doc_data.widget_data.page1.Problem Info.Chronic.Kidney" => array(),
				'doc_data.widget_data.page2.Review Info.Status' => "Cured"
			))->get ( $this->health_request_col_ttwreis_hs );

			
			// Scabies cases
			$scabies_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"
			) )->where(array(
				"doc_data.widget_data.page1.Problem Info.Chronic.Skin" => "Scabies",
				"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school['school_name'],
			) )->whereNe(array(
				'doc_data.widget_data.page2.Review Info.Status' => "Cured"
			))->get ( $this->health_request_col_ttwreis_hs );

			// Epilipsy cases
			$epilipsy_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"
			) )->where(array(
				"doc_data.widget_data.page1.Problem Info.Chronic.Central_nervous_system" => "Epilepy",
				"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school['school_name'],
			) )->whereNe(array(
				'doc_data.widget_data.page2.Review Info.Status' => "Cured"
			))->get ( $this->health_request_col_ttwreis_hs );

			// BMI cases
			// Getting BMI value LESSTHAN 14 Students
			$bmi_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data"
			) )->whereLte(
				"doc_data.widget_data.page1.Student Details.BMI_values.bmi",14
			)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( $this->bmi_app_col_tt );
			$bmi_details['school_name'] = $school['school_name'];
			$bmi_details['bmi_issues_docs'] = $bmi_docs;
			$bmi_details['bmi_issues_count'] = count($bmi_docs);

			// Getting BMI value BETWEEN 15 AND 28 Students
			$bmi_between_15_and_28_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data"
			) )->whereBetween(
				"doc_data.widget_data.page1.Student Details.BMI_values.bmi",15,28
			)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( $this->bmi_app_col_tt );
			$bmi_between_15_and_28_details['school_name'] = $school['school_name'];
			$bmi_between_15_and_28_details['bmi_between_docs'] = $bmi_between_15_and_28_docs;
			$bmi_between_15_and_28_details['bmi_between_count'] = count($bmi_between_15_and_28_docs);

			// Getting BMI value ABOVE 28 Students
			$bmi_above_28_docs = $this->mongo_db->select ( array (
					"doc_data.widget_data"
			) )->whereGte(
				"doc_data.widget_data.page1.Student Details.BMI_values.bmi",28
			)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( $this->bmi_app_col_tt );
			$bmi_above_28_details['school_name'] = $school['school_name'];
			$bmi_above_28_details['bmi_above_docs'] = $bmi_above_28_docs;
			$bmi_above_28_details['bmi_above_count'] = count($bmi_above_28_docs);

			// Getting All BMI value BETWEEN 14 AND 28 Students
			$bmi_total_docs = $this->mongo_db->select ( array (
					"doc_data.widget_data"
			) )->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->count ( $this->bmi_app_col_tt );

			// Getting HB value LESSTHAN 6 Students
			$hb_docs = $this->mongo_db->select ( array (
					"doc_data.widget_data"
			) )->whereLte(
				"doc_data.widget_data.page1.Student Details.HB_values.hb",6
			)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( $this->hb_app_col_tt );
			$hb_details['school_name'] = $school['school_name'];
			$hb_details['hb_issues_docs'] = $hb_docs;
			$hb_details['hb_issues_count'] = count($hb_docs);

			// Getting HB value BETWEEEN 7 AND 18 Students
			$hb_between_7_and_18_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data"
			) )->whereBetween(
				"doc_data.widget_data.page1.Student Details.HB_values.hb",7,18
			)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( $this->hb_app_col_tt );
			$hb_between_7_and_18_details['school_name'] = $school['school_name'];
			$hb_between_7_and_18_details['hb_between_docs'] = $hb_between_7_and_18_docs;
			$hb_between_7_and_18_details['hb_between_count'] = count($hb_between_7_and_18_docs);

			

			$hb_total_docs = $this->mongo_db->select ( array (
					"doc_data.widget_data"
			) )->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->count ( $this->hb_app_col_tt );
		
			$asthma_cases_details['school_name'] = $school['school_name'];
			$asthma_cases_details['asthma_issues_docs'] = $asthma_docs;
			$asthma_cases_details['asthma_issues_count'] = count($asthma_docs);	
			if($asthma_cases_details['asthma_issues_count']>8)
			{
				$asthma_weight = 3;
			}
			elseif($asthma_cases_details['asthma_issues_count']>4)
			{
				$asthma_weight = 2;
			}
			else
			{
				$asthma_weight = 1;
			}
			$kidney_cases_details['school_name'] = $school['school_name'];
			$kidney_cases_details['kidney_issues_docs'] = $kidney_docs;
			$kidney_cases_details['kidney_issues_count'] = count($kidney_docs);

			if($kidney_cases_details['kidney_issues_count']>8)
			{
				$kidney_weight = 3;
			}
			elseif($kidney_cases_details['kidney_issues_count']>4)
			{
				$kidney_weight = 2;
			}
			else
			{
				$kidney_weight = 1;
			}
			
			$scabies_cases_details['school_name'] = $school;
			$scabies_cases_details['scabies_issues_docs'] = $scabies_docs;
			$scabies_cases_details['scabies_issues_count'] = count($scabies_docs);
			if($scabies_cases_details['scabies_issues_count']>8 )
			{
				$scabies_weight = 3;
			}
			elseif($scabies_cases_details['scabies_issues_count']>4)
			{
				$scabies_weight = 2;
			}
			else
			{
				$scabies_weight = 1;
			}
			$epilipsy_cases_details['school_name'] = $school;
			$epilipsy_cases_details['epilipsy_issues_docs'] = $epilipsy_docs;
			$epilipsy_cases_details['epilipsy_issues_count'] = count($epilipsy_docs);
			if($epilipsy_cases_details['epilipsy_issues_count']>8)
			{
				$epilipsy_weight = 3;
			}
			elseif($epilipsy_cases_details['epilipsy_issues_count']>4)
			{
				$epilipsy_weight = 2;
			}
			else
			{
				$epilipsy_weight = 1;
			}
			//Calculate Grade
			//echo print_r($school['school_name']."  ".$total_grade,true)."<br>";
			$total_grade = $asthma_weight + $kidney_weight + $scabies_weight + $epilipsy_weight;
			//echo print_r($total_grade,true);
				if($bmi_total_docs == 0 || $hb_total_docs == 0 || $bmi_details['bmi_issues_count'] > 0 || $bmi_above_28_details['bmi_above_count'] > 0 || $hb_details['hb_issues_count'] > 0 || $scabies_cases_details['scabies_issues_count'] > 0 || $total_grade > 12){
					array_push($zone1['school_name'],$school['school_name']);
					$test['sn'] = $school;
					array_push($zone1['current_school_name'],$test['sn']['school_name']);
					$zone1_criteria = array($test['sn']['school_name'],$bmi_total_docs==0?"BMI VALUES NOT SUBMITTED TILL TODAY":"BMI Values are less than 14, total No: ".$bmi_details['bmi_issues_count'],"BMI Values are greater than 28, total No: ".$bmi_above_28_details['bmi_above_count'],$hb_total_docs==0?"HB VALUES NOT SUBMITTED TILL TODAY": "HB Values are less than 6, total No: ".$hb_details['hb_issues_count'], "Total Asthma Cases: ".$asthma_cases_details['asthma_issues_count'],"Total Kidney: ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy Cases: ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies Cases: ".$scabies_cases_details['scabies_issues_count']);
					array_push($zone1['criteria'],$zone1_criteria);
					//array_push($zone1['criteria'],$zone1_criteria);
					$zone1['school_count']++;
					
					$zone1['value']++;
			}
			elseif($total_grade > 8 || $bmi_between_15_and_28_details['bmi_between_count'] > 0 || 
				$hb_between_7_and_18_details['hb_between_count'] > 0 )
			{
				//YEL
					array_push($zone2['school_name'],$school['school_name']);
					$test['sn'] = $school;
					array_push($zone2['current_school_name'],$test['sn']['school_name']);
					$zone2['school_count']++;
					$zone2['value']++;
					$zone2_criteria = array($test['sn']['school_name'], "BMI Values are >15 and <28, Total No: ".$bmi_between_15_and_28_details['bmi_between_count'], "HB Values are  >7 and <18, Total No: ".$hb_between_7_and_18_details['hb_between_count'], "Total Asthma Cases: ".$asthma_cases_details['asthma_issues_count'],"Total Kidney: ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy Cases: ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies Cases: ".$scabies_cases_details['scabies_issues_count']);
							array_push($zone2['criteria'],$zone2_criteria);
			}
			else
			{
				//GREEN
					array_push($zone3['school_name'],$school['school_name']);
					$test['sn'] = $school;
					array_push($zone3['current_school_name'],$test['sn']['school_name']);
					$zone3['school_count']++;
					$zone3['value']++;
					$zone3_criteria = array($test['sn']['school_name'], "Total Asthma Cases: ".$asthma_cases_details['asthma_issues_count'],"Total Kidney ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy Cases : ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies Cases : ".$scabies_cases_details['scabies_issues_count']);
						array_push($zone3['criteria'],$zone3_criteria);
			}

			$asthma_count += $asthma_cases_details['asthma_issues_count'];
			$kidney_count += $kidney_cases_details['kidney_issues_count'];
			$scabies_count += $scabies_cases_details['scabies_issues_count'];
			$epilipsy_count += $epilipsy_cases_details['epilipsy_issues_count'];
			$bmi_count += $bmi_details['bmi_issues_count'];

			/*array_push($all_asthma_cases, $asthma_cases_details);
			array_push($all_kidney_cases, $kidney_cases_details);
			array_push($all_scabies_cases, $scabies_cases_details);
			array_push($all_epilepsy_cases, $epilipsy_cases_details);
			array_push($all_bmi_cases, $bmi_details);
			array_push($all_hb_cases, $hb_details);*/
		}
			array_push($all_cases, $zone1);
			
			array_push($all_cases, $zone2);
			
			array_push($all_cases, $zone3);
			
			/*array_push($all_cases, $all_asthma_cases);
			array_push($all_cases, $all_kidney_cases);
			array_push($all_cases, $all_scabies_cases);
			array_push($all_cases, $all_epilepsy_cases);*/
			return $all_cases;
		}

		/*TMREIS_ADMIN*/
		if($user_type == "TMREIS_ADMIN")
		{
			$tmreis_schools_list = $this->get_all_tmreis_schools();
			foreach($tmreis_schools_list as $school)
			{

			// Asthma cases
			$asthma_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"
			) )->where(array(
				"doc_data.widget_data.page1.Problem Info.Chronic.Respiratory_system" => "Asthma",
				"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school['school_name']
			) )->whereNe(array(
				'doc_data.widget_data.page2.Review Info.Status' => "Cured"
			))->get ( $this->health_request_col_tmreis_hs );


			// Kidney cases
			$kidney_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"
			) )->where(array(
				"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school['school_name']
			) )->whereNe(array(
				"doc_data.widget_data.page1.Problem Info.Chronic.Kidney" => array(),
				'doc_data.widget_data.page2.Review Info.Status' => "Cured"
			))->get ( $this->health_request_col_tmreis_hs );

			
			// Scabies cases
			$scabies_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"
			) )->where(array(
				"doc_data.widget_data.page1.Problem Info.Chronic.Skin" => "Scabies",
				"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school['school_name'],
			) )->whereNe(array(
				'doc_data.widget_data.page2.Review Info.Status' => "Cured"
			))->get ( $this->health_request_col_tmreis_hs );

			// Epilipsy cases
			$epilipsy_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"
			) )->where(array(
				"doc_data.widget_data.page1.Problem Info.Chronic.Central_nervous_system" => "Epilepy",
				"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school['school_name'],
			) )->whereNe(array(
				'doc_data.widget_data.page2.Review Info.Status' => "Cured"
			))->get ( $this->health_request_col_tmreis_hs );

			// BMI cases
			// Getting BMI value LESSTHAN 14 Students
			$bmi_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data"
			) )->whereLte(
				"doc_data.widget_data.page1.Student Details.BMI_values.bmi",14
			)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( $this->bmi_app_col_tm );
			$bmi_details['school_name'] = $school['school_name'];
			$bmi_details['bmi_issues_docs'] = $bmi_docs;
			$bmi_details['bmi_issues_count'] = count($bmi_docs);

			// Getting BMI value BETWEEN 15 AND 28 Students
			$bmi_between_15_and_28_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data"
			) )->whereBetween(
				"doc_data.widget_data.page1.Student Details.BMI_values.bmi",15,28
			)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( $this->bmi_app_col_tm );
			$bmi_between_15_and_28_details['school_name'] = $school['school_name'];
			$bmi_between_15_and_28_details['bmi_between_docs'] = $bmi_between_15_and_28_docs;
			$bmi_between_15_and_28_details['bmi_between_count'] = count($bmi_between_15_and_28_docs);

			// Getting BMI value ABOVE 28 Students
			$bmi_above_28_docs = $this->mongo_db->select ( array (
					"doc_data.widget_data"
			) )->whereGte(
				"doc_data.widget_data.page1.Student Details.BMI_values.bmi",28
			)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( $this->bmi_app_col_tm );
			$bmi_above_28_details['school_name'] = $school['school_name'];
			$bmi_above_28_details['bmi_above_docs'] = $bmi_above_28_docs;
			$bmi_above_28_details['bmi_above_count'] = count($bmi_above_28_docs);

			// Getting All BMI value BETWEEN 14 AND 28 Students
			$bmi_total_docs = $this->mongo_db->select ( array (
					"doc_data.widget_data"
			) )->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->count ( $this->bmi_app_col_tm );

			// Getting HB value LESSTHAN 6 Students
			$hb_docs = $this->mongo_db->select ( array (
					"doc_data.widget_data"
			) )->whereLte(
				"doc_data.widget_data.page1.Student Details.HB_values.hb",6
			)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( $this->hb_app_col_tm );
			$hb_details['school_name'] = $school['school_name'];
			$hb_details['hb_issues_docs'] = $hb_docs;
			$hb_details['hb_issues_count'] = count($hb_docs);

			// Getting HB value BETWEEEN 7 AND 18 Students
			$hb_between_7_and_18_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data"
			) )->whereBetween(
				"doc_data.widget_data.page1.Student Details.HB_values.hb",7,18
			)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( $this->hb_app_col_tm );
			$hb_between_7_and_18_details['school_name'] = $school['school_name'];
			$hb_between_7_and_18_details['hb_between_docs'] = $hb_between_7_and_18_docs;
			$hb_between_7_and_18_details['hb_between_count'] = count($hb_between_7_and_18_docs);

			

			$hb_total_docs = $this->mongo_db->select ( array (
					"doc_data.widget_data"
			) )->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->count ( $this->hb_app_col_tm );
		
			$asthma_cases_details['school_name'] = $school['school_name'];
			$asthma_cases_details['asthma_issues_docs'] = $asthma_docs;
			$asthma_cases_details['asthma_issues_count'] = count($asthma_docs);	
			if($asthma_cases_details['asthma_issues_count']>8)
			{
				$asthma_weight = 3;
			}
			elseif($asthma_cases_details['asthma_issues_count']>4)
			{
				$asthma_weight = 2;
			}
			else
			{
				$asthma_weight = 1;
			}
			$kidney_cases_details['school_name'] = $school['school_name'];
			$kidney_cases_details['kidney_issues_docs'] = $kidney_docs;
			$kidney_cases_details['kidney_issues_count'] = count($kidney_docs);

			if($kidney_cases_details['kidney_issues_count']>8)
			{
				$kidney_weight = 3;
			}
			elseif($kidney_cases_details['kidney_issues_count']>4)
			{
				$kidney_weight = 2;
			}
			else
			{
				$kidney_weight = 1;
			}
			
			$scabies_cases_details['school_name'] = $school;
			$scabies_cases_details['scabies_issues_docs'] = $scabies_docs;
			$scabies_cases_details['scabies_issues_count'] = count($scabies_docs);
			if($scabies_cases_details['scabies_issues_count']>8 )
			{
				$scabies_weight = 3;
			}
			elseif($scabies_cases_details['scabies_issues_count']>4)
			{
				$scabies_weight = 2;
			}
			else
			{
				$scabies_weight = 1;
			}
			$epilipsy_cases_details['school_name'] = $school;
			$epilipsy_cases_details['epilipsy_issues_docs'] = $epilipsy_docs;
			$epilipsy_cases_details['epilipsy_issues_count'] = count($epilipsy_docs);
			if($epilipsy_cases_details['epilipsy_issues_count']>8)
			{
				$epilipsy_weight = 3;
			}
			elseif($epilipsy_cases_details['epilipsy_issues_count']>4)
			{
				$epilipsy_weight = 2;
			}
			else
			{
				$epilipsy_weight = 1;
			}
			//Calculate Grade
			//echo print_r($school['school_name']."  ".$total_grade,true)."<br>";
			$total_grade = $asthma_weight + $kidney_weight + $scabies_weight + $epilipsy_weight;
			//echo print_r($total_grade,true);
				if($bmi_total_docs == 0 || $hb_total_docs == 0 || $bmi_details['bmi_issues_count'] > 0 || $bmi_above_28_details['bmi_above_count'] > 0 || $hb_details['hb_issues_count'] > 0 || $scabies_cases_details['scabies_issues_count'] > 0 || $total_grade > 12){
					array_push($zone1['school_name'],$school['school_name']);
					$test['sn'] = $school;
					array_push($zone1['current_school_name'],$test['sn']['school_name']);
					$zone1_criteria = array($test['sn']['school_name'],$bmi_total_docs==0?"BMI VALUES NOT SUBMITTED TILL TODAY":"BMI Values are less than 14, total No: ".$bmi_details['bmi_issues_count'],"BMI Values are greater than 28, total No: ".$bmi_above_28_details['bmi_above_count'],$hb_total_docs==0?"HB VALUES NOT SUBMITTED TILL TODAY": "HB Values are less than 6, total No: ".$hb_details['hb_issues_count'], "Total Asthma Cases: ".$asthma_cases_details['asthma_issues_count'],"Total Kidney: ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy Cases: ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies Cases: ".$scabies_cases_details['scabies_issues_count']);
					array_push($zone1['criteria'],$zone1_criteria);
					//array_push($zone1['criteria'],$zone1_criteria);
					$zone1['school_count']++;
					
					$zone1['value']++;
			}
			elseif($total_grade > 8 || $bmi_between_15_and_28_details['bmi_between_count'] > 0 || 
				$hb_between_7_and_18_details['hb_between_count'] > 0 )
			{
				//YEL
					array_push($zone2['school_name'],$school['school_name']);
					$test['sn'] = $school;
					array_push($zone2['current_school_name'],$test['sn']['school_name']);
					$zone2['school_count']++;
					$zone2['value']++;
					$zone2_criteria = array($test['sn']['school_name'], "BMI Values are >15 and <28, Total No: ".$bmi_between_15_and_28_details['bmi_between_count'], "HB Values are  >7 and <18, Total No: ".$hb_between_7_and_18_details['hb_between_count'], "Total Asthma Cases: ".$asthma_cases_details['asthma_issues_count'],"Total Kidney: ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy Cases: ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies Cases: ".$scabies_cases_details['scabies_issues_count']);
							array_push($zone2['criteria'],$zone2_criteria);
			}
			else
			{
				//GREEN
					array_push($zone3['school_name'],$school['school_name']);
					$test['sn'] = $school;
					array_push($zone3['current_school_name'],$test['sn']['school_name']);
					$zone3['school_count']++;
					$zone3['value']++;
					$zone3_criteria = array($test['sn']['school_name'], "Total Asthma Cases: ".$asthma_cases_details['asthma_issues_count'],"Total Kidney ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy Cases : ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies Cases : ".$scabies_cases_details['scabies_issues_count']);
						array_push($zone3['criteria'],$zone3_criteria);
			}

			$asthma_count += $asthma_cases_details['asthma_issues_count'];
			$kidney_count += $kidney_cases_details['kidney_issues_count'];
			$scabies_count += $scabies_cases_details['scabies_issues_count'];
			$epilipsy_count += $epilipsy_cases_details['epilipsy_issues_count'];
			$bmi_count += $bmi_details['bmi_issues_count'];

			/*array_push($all_asthma_cases, $asthma_cases_details);
			array_push($all_kidney_cases, $kidney_cases_details);
			array_push($all_scabies_cases, $scabies_cases_details);
			array_push($all_epilepsy_cases, $epilipsy_cases_details);
			array_push($all_bmi_cases, $bmi_details);
			array_push($all_hb_cases, $hb_details);*/
		}
			array_push($all_cases, $zone1);
			
			array_push($all_cases, $zone2);
			
			array_push($all_cases, $zone3);
			
			/*array_push($all_cases, $all_asthma_cases);
			array_push($all_cases, $all_kidney_cases);
			array_push($all_cases, $all_scabies_cases);
			array_push($all_cases, $all_epilepsy_cases);*/
			return $all_cases;
		}

		/*BCWELFARE_ADMIN*/
		if($user_type == "BCWELFARE_ADMIN")
		{
			$bcwelfare_schools_list = $this->get_all_bcwelfare_schools();
			foreach($bcwelfare_schools_list as $school)
			{

			// Asthma cases
			$asthma_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"
			) )->where(array(
				"doc_data.widget_data.page1.Problem Info.Chronic.Respiratory_system" => "Asthma",
				"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school['school_name']
			) )->whereNe(array(
				'doc_data.widget_data.page2.Review Info.Status' => "Cured"
			))->get ( $this->health_request_col_bcwelfare_hs );


			// Kidney cases
			$kidney_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"
			) )->where(array(
				"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school['school_name']
			) )->whereNe(array(
				"doc_data.widget_data.page1.Problem Info.Chronic.Kidney" => array(),
				'doc_data.widget_data.page2.Review Info.Status' => "Cured"
			))->get ( $this->health_request_col_bcwelfare_hs );

			
			// Scabies cases
			$scabies_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"
			) )->where(array(
				"doc_data.widget_data.page1.Problem Info.Chronic.Skin" => "Scabies",
				"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school['school_name'],
			) )->whereNe(array(
				'doc_data.widget_data.page2.Review Info.Status' => "Cured"
			))->get ( $this->health_request_col_bcwelfare_hs );

			// Epilipsy cases
			$epilipsy_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"
			) )->where(array(
				"doc_data.widget_data.page1.Problem Info.Chronic.Central_nervous_system" => "Epilepy",
				"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school['school_name'],
			) )->whereNe(array(
				'doc_data.widget_data.page2.Review Info.Status' => "Cured"
			))->get ( $this->health_request_col_bcwelfare_hs );

			// BMI cases
			// Getting BMI value LESSTHAN 14 Students
			$bmi_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data"
			) )->whereLte(
				"doc_data.widget_data.page1.Student Details.BMI_values.bmi",14
			)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( $this->bmi_app_col_bc );
			$bmi_details['school_name'] = $school['school_name'];
			$bmi_details['bmi_issues_docs'] = $bmi_docs;
			$bmi_details['bmi_issues_count'] = count($bmi_docs);

			// Getting BMI value BETWEEN 15 AND 28 Students
			$bmi_between_15_and_28_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data"
			) )->whereBetween(
				"doc_data.widget_data.page1.Student Details.BMI_values.bmi",15,28
			)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( $this->bmi_app_col_bc );
			$bmi_between_15_and_28_details['school_name'] = $school['school_name'];
			$bmi_between_15_and_28_details['bmi_between_docs'] = $bmi_between_15_and_28_docs;
			$bmi_between_15_and_28_details['bmi_between_count'] = count($bmi_between_15_and_28_docs);

			// Getting BMI value ABOVE 28 Students
			$bmi_above_28_docs = $this->mongo_db->select ( array (
					"doc_data.widget_data"
			) )->whereGte(
				"doc_data.widget_data.page1.Student Details.BMI_values.bmi",28
			)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( $this->bmi_app_col_bc );
			$bmi_above_28_details['school_name'] = $school['school_name'];
			$bmi_above_28_details['bmi_above_docs'] = $bmi_above_28_docs;
			$bmi_above_28_details['bmi_above_count'] = count($bmi_above_28_docs);

			// Getting All BMI value BETWEEN 14 AND 28 Students
			$bmi_total_docs = $this->mongo_db->select ( array (
					"doc_data.widget_data"
			) )->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->count ( $this->bmi_app_col_bc );

			// Getting HB value LESSTHAN 6 Students
			$hb_docs = $this->mongo_db->select ( array (
					"doc_data.widget_data"
			) )->whereLte(
				"doc_data.widget_data.page1.Student Details.HB_values.hb",6
			)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( $this->hb_app_col_bc );
			$hb_details['school_name'] = $school['school_name'];
			$hb_details['hb_issues_docs'] = $hb_docs;
			$hb_details['hb_issues_count'] = count($hb_docs);

			// Getting HB value BETWEEEN 7 AND 18 Students
			$hb_between_7_and_18_docs = $this->mongo_db->select ( array (
					//"doc_data.widget_data",
					"doc_data.widget_data"
			) )->whereBetween(
				"doc_data.widget_data.page1.Student Details.HB_values.hb",7,18
			)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( $this->hb_app_col_bc );
			$hb_between_7_and_18_details['school_name'] = $school['school_name'];
			$hb_between_7_and_18_details['hb_between_docs'] = $hb_between_7_and_18_docs;
			$hb_between_7_and_18_details['hb_between_count'] = count($hb_between_7_and_18_docs);

			

			$hb_total_docs = $this->mongo_db->select ( array (
					"doc_data.widget_data"
			) )->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->count ( $this->hb_app_col_bc );
		
			$asthma_cases_details['school_name'] = $school['school_name'];
			$asthma_cases_details['asthma_issues_docs'] = $asthma_docs;
			$asthma_cases_details['asthma_issues_count'] = count($asthma_docs);	
			if($asthma_cases_details['asthma_issues_count']>8)
			{
				$asthma_weight = 3;
			}
			elseif($asthma_cases_details['asthma_issues_count']>4)
			{
				$asthma_weight = 2;
			}
			else
			{
				$asthma_weight = 1;
			}
			$kidney_cases_details['school_name'] = $school['school_name'];
			$kidney_cases_details['kidney_issues_docs'] = $kidney_docs;
			$kidney_cases_details['kidney_issues_count'] = count($kidney_docs);

			if($kidney_cases_details['kidney_issues_count']>8)
			{
				$kidney_weight = 3;
			}
			elseif($kidney_cases_details['kidney_issues_count']>4)
			{
				$kidney_weight = 2;
			}
			else
			{
				$kidney_weight = 1;
			}
			
			$scabies_cases_details['school_name'] = $school;
			$scabies_cases_details['scabies_issues_docs'] = $scabies_docs;
			$scabies_cases_details['scabies_issues_count'] = count($scabies_docs);
			if($scabies_cases_details['scabies_issues_count']>8 )
			{
				$scabies_weight = 3;
			}
			elseif($scabies_cases_details['scabies_issues_count']>4)
			{
				$scabies_weight = 2;
			}
			else
			{
				$scabies_weight = 1;
			}
			$epilipsy_cases_details['school_name'] = $school;
			$epilipsy_cases_details['epilipsy_issues_docs'] = $epilipsy_docs;
			$epilipsy_cases_details['epilipsy_issues_count'] = count($epilipsy_docs);
			if($epilipsy_cases_details['epilipsy_issues_count']>8)
			{
				$epilipsy_weight = 3;
			}
			elseif($epilipsy_cases_details['epilipsy_issues_count']>4)
			{
				$epilipsy_weight = 2;
			}
			else
			{
				$epilipsy_weight = 1;
			}
			//Calculate Grade
			//echo print_r($school['school_name']."  ".$total_grade,true)."<br>";
			$total_grade = $asthma_weight + $kidney_weight + $scabies_weight + $epilipsy_weight;
			//echo print_r($total_grade,true);
				if($bmi_total_docs == 0 || $hb_total_docs == 0 || $bmi_details['bmi_issues_count'] > 0 || $bmi_above_28_details['bmi_above_count'] > 0 || $hb_details['hb_issues_count'] > 0 || $scabies_cases_details['scabies_issues_count'] > 0 || $total_grade > 12){
					array_push($zone1['school_name'],$school['school_name']);
					$test['sn'] = $school;
					array_push($zone1['current_school_name'],$test['sn']['school_name']);
					$zone1_criteria = array($test['sn']['school_name'],$bmi_total_docs==0?"BMI VALUES NOT SUBMITTED TILL TODAY":"BMI Values are less than 14, total No: ".$bmi_details['bmi_issues_count'],"BMI Values are greater than 28, total No: ".$bmi_above_28_details['bmi_above_count'],$hb_total_docs==0?"HB VALUES NOT SUBMITTED TILL TODAY": "HB Values are less than 6, total No: ".$hb_details['hb_issues_count'], "Total Asthma Cases: ".$asthma_cases_details['asthma_issues_count'],"Total Kidney: ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy Cases: ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies Cases: ".$scabies_cases_details['scabies_issues_count']);
					array_push($zone1['criteria'],$zone1_criteria);
					//array_push($zone1['criteria'],$zone1_criteria);
					$zone1['school_count']++;
					
					$zone1['value']++;
			}
			elseif($total_grade > 8 || $bmi_between_15_and_28_details['bmi_between_count'] > 0 || 
				$hb_between_7_and_18_details['hb_between_count'] > 0 )
			{
				//YEL
					array_push($zone2['school_name'],$school['school_name']);
					$test['sn'] = $school;
					array_push($zone2['current_school_name'],$test['sn']['school_name']);
					$zone2['school_count']++;
					$zone2['value']++;
					$zone2_criteria = array($test['sn']['school_name'], "BMI Values are >15 and <28, Total No: ".$bmi_between_15_and_28_details['bmi_between_count'], "HB Values are  >7 and <18, Total No: ".$hb_between_7_and_18_details['hb_between_count'], "Total Asthma Cases: ".$asthma_cases_details['asthma_issues_count'],"Total Kidney: ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy Cases: ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies Cases: ".$scabies_cases_details['scabies_issues_count']);
							array_push($zone2['criteria'],$zone2_criteria);
			}
			else
			{
				//GREEN
					array_push($zone3['school_name'],$school['school_name']);
					$test['sn'] = $school;
					array_push($zone3['current_school_name'],$test['sn']['school_name']);
					$zone3['school_count']++;
					$zone3['value']++;
					$zone3_criteria = array($test['sn']['school_name'], "Total Asthma Cases: ".$asthma_cases_details['asthma_issues_count'],"Total Kidney ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy Cases : ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies Cases : ".$scabies_cases_details['scabies_issues_count']);
						array_push($zone3['criteria'],$zone3_criteria);
			}

			$asthma_count += $asthma_cases_details['asthma_issues_count'];
			$kidney_count += $kidney_cases_details['kidney_issues_count'];
			$scabies_count += $scabies_cases_details['scabies_issues_count'];
			$epilipsy_count += $epilipsy_cases_details['epilipsy_issues_count'];
			$bmi_count += $bmi_details['bmi_issues_count'];

		/*	array_push($all_asthma_cases, $asthma_cases_details);
			array_push($all_kidney_cases, $kidney_cases_details);
			array_push($all_scabies_cases, $scabies_cases_details);
			array_push($all_epilepsy_cases, $epilipsy_cases_details);
			array_push($all_bmi_cases, $bmi_details);
			array_push($all_hb_cases, $hb_details);*/
		}
			array_push($all_cases, $zone1);
			
			array_push($all_cases, $zone2);
			
			array_push($all_cases, $zone3);
			
			/*array_push($all_cases, $all_asthma_cases);
			array_push($all_cases, $all_kidney_cases);
			array_push($all_cases, $all_scabies_cases);
			array_push($all_cases, $all_epilepsy_cases);*/
			return $all_cases;
		}
	}

	function create_chronic_case_new($student_unique_id,$request_type,$chronic_disease,$disease_desc,$schoolName)
	{
		log_message('error','request_type========8158'.print_r($request_type,true));
		log_message('error','chronic_disease========8158'.print_r($chronic_disease,true));
		log_message('error','disease_desc========8158'.print_r($disease_desc,true));
		if(!empty($chronic_disease['Central_nervous_system'][0]) && $chronic_disease['Central_nervous_system'][0] == "Epilepy")
		{
			$query = $this->mongo_db->where(array('School Details.School Name' => $schoolName))->inc(array('School Status.2019-02-28.Epilepy' => 1))->update('get_schools_status_collection');			
		}
		if(!empty($chronic_disease['Respiratory_system'][0]) && $chronic_disease['Respiratory_system'][0] == "Asthma") 
		{
			$query = $this->mongo_db->where(array('School Details.School Name' => $schoolName))->inc(array('School Status.2019-02-28.Asthma' => 1))->update('get_schools_status_collection');			
		}
		if($chronic_disease['Kidney'] !== array())
		{
			$query = $this->mongo_db->where(array('School Details.School Name' => $schoolName))->inc(array('School Status.2019-02-28.Kidney' => 1))->update('get_schools_status_collection');
		}
		if(!empty($chronic_disease['Skin'][0]) && $chronic_disease['Skin'][0] == "Scabies")
		{
			$query = $this->mongo_db->where(array('School Details.School Name' => $schoolName))->inc(array('School Status.2019-02-28.Scabies' => 1))->update('get_schools_status_collection');
		}
		  $data = array(
		  'case_id'            => get_unique_id(),
		  'student_unique_id'  => $student_unique_id,
		  'chronic_disease'    => $chronic_disease,
		  'disease_desc'       => $disease_desc,
		  'school_name'        => $schoolName,
		  'created_time'       => date('Y-m-d H:i:s'),
		  'followup_scheduled' => "false"); 
		  
		$query = $this->mongo_db->insert('tswreis_chronic_cases', $data);

	}
	/**
	 * Helper: Get Total Students Counts for IOS
	 * 
	 *@author Naresh 
	 */
	public function total_students_count_in_all_schools()
	{
		$qry = $this->mongo_db->count($this->screening_app_col_sw);
		if($qry){
			return $qry;
		}else{
			return FALSE;
		}
		
	}

	/**
	 * Helper: Get Screened and not screened counts for IOS
	 * 
	 *@author Naresh 
	 */
	public function screened_schools_count()
	{
		// Variables
		$all_schools               = array();
		$all_schools_district      = array();
		$all_schools_name      	   = array();

		$submitted_schools 	       = array();
		$submitted_school_district = array();
		$submitted_school_name     = array();
		$not_submitted_schools	   = array();
		$schools_data              = array();
		$not_submitted_dist        = array();

		$all_schools_mobile        = array();
		$all_schools_cpn      	   = array();
		$submitted_school_mob 	   = array();
		$submitted_school_person   = array();
		$not_submitted_school_mob 	   = array();
		$not_submitted_school_person   = array();

		/*$schools_list = $this->get_all_schools_list();
		foreach($schools_list as $school_data)
		{

			//array_push($all_schools_district,$school_data['dt_name']);
			//array_push($all_schools_name,$school_data['school_name']);
			$studentPhotoandpage3Exists = array (
							"doc_data.widget_data.page3.Physical Exam" => array ('$exists' => true),
							"doc_data.widget_data.page4.Doctor Check Up" => array( '$exists'=> true),
							"doc_data.widget_data.page7.Colour Blindness.Right" => array('$exists' => true),
							"doc_data.widget_data.page9.Dental Check-up.Oral Hygiene" => array('$exists' => true),
							'doc_data.widget_data.page2.Personal Information.School Name' => $school_data
						);
			$query = $this->mongo_db->where($studentPhotoandpage3Exists)->count($this->screening_app_col_sw);

			if($query >= 20)
			{
				array_push ( $submitted_school_name,$school_data);
			}else
			{
				 array_push($not_submitted_dist,$school_data);
			}
			
		}
		$submitted_schools['school']       = $submitted_school_name;		
		$not_submitted_schools['school'] = $not_submitted_dist;
		
		$schools_data['screened_schools_list']     	= $submitted_schools;
		$schools_data['screened_schools_count']     = count($submitted_schools['school']);
		$schools_data['not_screened_schools_list'] 	= $not_submitted_schools;
		$schools_data['not_screened_schools_count'] = count($not_submitted_schools['school']);

		*/

		$query = $this->mongo_db->get('social_welfare_screened_info');
		$all_school_names = array_merge($query[0]['screened_schools_list'],$query[0]['not_screened_schools_list']);
		
		$schools_data['screened_schools_list']     	= $query[0]['screened_schools_list'];
		$schools_data['screened_schools_count']     = $query[0]['screened_schools_count'];
		$schools_data['not_screened_schools_list'] 	= $query[0]['not_screened_schools_list'];
		$schools_data['not_screened_schools_count'] = $query[0]['not_screened_schools_count'];	
		$schools_data['all_schools_names'] = $all_school_names;
		$schools_data['all_schools_count'] = count($all_school_names);
		$schools_data['screened_students_count'] = $query[0]['screened_students_count'];
		$schools_data['screened_not_students_count'] = $query[0]['screened_not_students_count'];

		return $schools_data;
	}

	/**
	 * Helper: Get Classes list from schools for IOS
	 * 
	 *@author Naresh 
	 */
	public function get_school_wise_classes_list($school,$user_type)
    {
    	if(preg_match("/PANACEA/i", $user_type))
    	{    		
	      	$classes = $this->mongo_db->command(array('distinct' => $this->screening_app_col_sw ,'key' => "doc_data.widget_data.page2.Personal Information.Class",'query'=>array('doc_data.widget_data.page2.Personal Information.School Name' => $school)));

        	return $classes['values'];
        }
    }
    /**
	 * Helper: Based on selected class get Students list For IOS
	 * 
	 *@author Naresh 
	 */

    public function get_students_list_device_ios($school,$class,$user_type)
    {
    	if(preg_match("/PANACEA/i", $user_type)){
    			$this->mongo_db->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1));
    		 $query = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information', 'doc_data.widget_data.page2.Personal Information.Class'))->where(array('doc_data.widget_data.page2.Personal Information.School Name' => $school, 'doc_data.widget_data.page2.Personal Information.Class' => $class))->get($this->screening_app_col_sw);
	        $lists = [];
	        foreach ($query as $doc) {
	            $class    = $doc['doc_data']['widget_data']['page2']['Personal Information']['Class'];
	            $healthid_unique = $doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
	            $name = $doc['doc_data']['widget_data']['page1']['Personal Information']['Name'];
	            $healthid = $name." , ".$healthid_unique;
	            if (isset($lists[$class])) {
	                array_push($lists[$class], $healthid);
	                //array_push($lists[$class], $name);
	            } else {
	                $lists[$class] = [];
	                array_push($lists[$class], $healthid);
	               // array_push($lists[$class], $name);
	            }

	        }

        	return $lists;
        }
    }

    public function get_all_schools_student_type($type = false) 
	{
		if(!empty($type))
		{
			if($type == "Male")
			{		
				$regex = "B.,";
			}else if($type == "Female")
			{
				$regex = "G.,";
			}
			
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$query = $this->mongo_db->where(array('school_name' => array('$regex' => $regex)))->get ( $this->collections ['panacea_schools'] );
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			foreach ( $query as $schools => $school ) {
				$dt_name = $this->mongo_db->where ( '_id', new MongoId ( $school ['dt_name'] ) )->get ( 'panacea_district' );
				if (isset ( $school ['dt_name'] )) {
					$query [$schools] ['dt_name'] = $dt_name [0] ['dt_name'];
				} else {
					$query [$schools] ['dt_name'] = "No state selected";
				}
			}
			return $query;
		}else
		{
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$query = $this->mongo_db->get ( $this->collections ['panacea_schools'] );
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			foreach ( $query as $schools => $school ) {
				$dt_name = $this->mongo_db->where ( '_id', new MongoId ( $school ['dt_name'] ) )->get ( 'panacea_district' );
				if (isset ( $school ['dt_name'] )) {
					$query [$schools] ['dt_name'] = $dt_name [0] ['dt_name'];
				} else {
					$query [$schools] ['dt_name'] = "No state selected";
				}
			}
			return $query;
		}
		
	}

    public function get_schools_health_status_count_model_new($student_type = false)
	{
		$all_schools_name = array();
		$all_schools = array();
		$schools_list = $this->get_all_schools_student_type($student_type);
		$zone1['label'] = "Red";
		$zone1['value']=0;
		$zone1['school_name'] =  array();
		$zone1['school_count'] = 0;
		$zone2['label'] = "Yellow";
		$zone2['value']=0;
		$zone2['school_name'] = array();
		$zone2['school_count'] = 0;
		$zone3['label'] = "Green";
		$zone3['value']=0;
		$zone3['school_name'] =  array();
		$zone3['school_count'] = 0;
		$all_asthma_cases = array();
		$all_kidney_cases = array();
		$all_scabies_cases = array();
		$all_epilepsy_cases = array();
		$all_bmi_cases = array();
		$all_hb_cases = array();
		$astham_cases_details = array();
		$kidney_cases_details = array();
		$scabies_cases_details = array();
		$epilipsy_cases_details = array();
		$bmi_details = array();
		$bmi_between_14_and_28_details = array();
		$bmi_above_28_details = array();
		$hb_between_6_and_18_details = array();
		$hb_details = array();
		$asthma_count = 0;
		$kidney_count = 0;
		$scabies_count = 0;
		$epilipsy_count = 0;
		$bmi_count = 0;
		$hb_count = 0;
		$bmi_total_docs = "";
		$hb_total_docs = "";
		$zone1['criteria'] = [];
		$zone2['criteria'] = [];
		$zone3['criteria'] = [];
		$zone1['current_school_name_red'] = [];
		$zone2['current_school_name_yellow'] = [];
		$zone3['current_school_name_green'] = [];

		$under_weight_array = array();

		$all_cases = array();
		foreach ($schools_list as $school) 
		{		
			$asthma_count_doc = $this->mongo_db->where(array('School Status.2019-02-28.Asthma' => array('$ne' => 0),'School Details.School Name' => $school['school_name']))->count('get_schools_status_collection');
			$kidney_count_doc = $this->mongo_db->where(array('School Status.2019-02-28.Kidney' => array('$ne' => 0),'School Details.School Name' => $school['school_name']))->count('get_schools_status_collection');
			$epilipsy_count_doc = $this->mongo_db->where(array('School Status.2019-02-28.Epilepy' => array('$ne' => 0),'School Details.School Name' => $school['school_name']))->count('get_schools_status_collection');

			$scabies_count_doc = $this->mongo_db->where(array('School Status.2019-02-28.Scabies' => array('$ne' => 0),'School Details.School Name' => $school['school_name']))->count('get_schools_status_collection');

			/*$under_count_doc = $this->mongo_db->select(array('School Status.2019-02-28.BMI.Under Weight'))->where(array('School Status.2019-02-28.BMI.Under Weight' => array('$ne' => 0),'School Details.School Name' => $school['school_name']))->get('get_schools_status_collection');
			foreach ($under_count_doc as $value) {
				$under_weight_students = $value['School Status']['2019-02-28']['BMI']['Under Weight'];
			}*/
			$under_count_doc = $this->mongo_db->where(array('School Status.2019-02-28.BMI.Over Weight' => array('$ne' => 0),'School Details.School Name' => $school['school_name']))->count('get_schools_status_collection');
						
			$over_count_doc = $this->mongo_db->where(array('School Status.2019-02-28.BMI.Over Weight' => array('$ne' => 0),'School Details.School Name' => $school['school_name']))->count('get_schools_status_collection');
			$obese_count_doc = $this->mongo_db->where(array('School Status.2019-02-28.BMI.Obese' => array('$ne' => 0),'School Details.School Name' => $school['school_name']))->count('get_schools_status_collection');
			
			$severe_count_doc = $this->mongo_db->where(array('School Status.2019-02-28.HB.Severe' => array('$ne' => 0),'School Details.School Name' => $school['school_name']))->count('get_schools_status_collection');
			$moderate_count_doc = $this->mongo_db->where(array('School Status.2019-02-28.HB.Moderate' => array('$ne' => 0),'School Details.School Name' => $school['school_name']))->count('get_schools_status_collection');
			$mild_count_doc = $this->mongo_db->where(array('School Status.2019-02-28.HB.Mild' => array('$ne' => 0),'School Details.School Name' => $school['school_name']))->count('get_schools_status_collection');
			if($under_count_doc == 0 && $over_count_doc == 0 && $obese_count_doc == 0)
			{				
				$bmi_total_docs = "No BMI Values";//Not Submitted Still Now
			}
			if($severe_count_doc == 0 && $moderate_count_doc == 0 && $mild_count_doc == 0)
			{				
				$hb_total_docs = "No HB Values";//Not Submitted Still Now
			}	

			$under_weight_details['school_name'] = $school['school_name'];				
			$under_weight_details['under_weight_issues_count'] = $under_count_doc;
			
			$over_weight_details['school_name'] = $school['school_name'];				
			$over_weight_details['over_weight_issues_count'] = $over_count_doc;

			$obese_details['school_name'] = $school['school_name'];				
			$obese_details['obese_issues_count'] = $obese_count_doc;

			$severe_details['school_name'] = $school['school_name'];				
			$severe_details['severe_issues_count'] = $severe_count_doc;
			
			$moderate_details['school_name'] = $school['school_name'];				
			$moderate_details['moderate_issues_count'] = $moderate_count_doc;

			$mild_details['school_name'] = $school['school_name'];				
			$mild_details['mild_issues_count'] = $mild_count_doc;

			$asthma_cases_details['school_name'] = $school['school_name'];
			   // $asthma_cases_details['asthma_issues_docs'] = $asthma_docs;
				$asthma_cases_details['asthma_issues_count'] = $asthma_count_doc;	
				if($asthma_cases_details['asthma_issues_count']>8)
				{
					$asthma_weight = 3;
				}
				elseif($asthma_cases_details['asthma_issues_count']>4)
				{
					$asthma_weight = 2;
				}
				else
				{
					$asthma_weight = 1;
				}
				$kidney_cases_details['school_name'] = $school['school_name'];
				//$kidney_cases_details['kidney_issues_docs'] = $kidney_docs;
				$kidney_cases_details['kidney_issues_count'] = $kidney_count_doc;

				if($kidney_cases_details['kidney_issues_count']>8)
				{
					$kidney_weight = 3;
				}
				elseif($kidney_cases_details['kidney_issues_count']>4)
				{
					$kidney_weight = 2;
				}
				else
				{
					$kidney_weight = 1;
				}
			    
				$scabies_cases_details['school_name'] = $school;
			    //$scabies_cases_details['scabies_issues_docs'] = $scabies_docs;
				$scabies_cases_details['scabies_issues_count'] = $scabies_count_doc;
				if($scabies_cases_details['scabies_issues_count']>8 )
				{
					$scabies_weight = 3;
				}
				elseif($scabies_cases_details['scabies_issues_count']>4)
				{
					$scabies_weight = 2;
				}
				else
				{
					$scabies_weight = 1;
				}
				$epilipsy_cases_details['school_name'] = $school;
			    //$epilipsy_cases_details['epilipsy_issues_docs'] = $epilipsy_docs;
				$epilipsy_cases_details['epilipsy_issues_count'] = $epilipsy_count_doc;
				if($epilipsy_cases_details['epilipsy_issues_count']>8)
				{
					$epilipsy_weight = 3;
				}
				elseif($epilipsy_cases_details['epilipsy_issues_count']>4)
				{
					$epilipsy_weight = 2;
				}
				else
				{
					$epilipsy_weight = 1;
				}



			$total_grade = $asthma_weight + $kidney_weight + $scabies_weight + $epilipsy_weight;
							//echo print_r($total_grade,true);
			if($scabies_cases_details['scabies_issues_count'] > 6 || $total_grade > 15 || $under_weight_details['under_weight_issues_count'] > 6 || $over_weight_details['over_weight_issues_count'] > 6 || $obese_details['obese_issues_count'] > 6 || $bmi_total_docs == "No BMI Values" || $hb_total_docs == "No HB Values"){ //|| $moderate_details['moderate_issues_count'] > 0){
						
						array_push($zone1['school_name'],$school['school_name']);
						$test['sn'] = $school;
						array_push($zone1['current_school_name_red'],$test['sn']['school_name']);
						$zone1_criteria[$test['sn']['school_name']] = array($bmi_total_docs == "No BMI Values"?"BMI VALUES NOT SUBMITTED TILL TODAY":"BMI Values are less than 14, total No: ".$under_weight_details['under_weight_issues_count'],"BMI Values are greater than 28, total No: ".$obese_details['obese_issues_count'],$hb_total_docs == "No HB Values"?"HB VALUES NOT SUBMITTED TILL TODAY":"HB Values are less than 8, total no".$severe_details['severe_issues_count'],"Total Asthma Cases: ".$asthma_cases_details['asthma_issues_count'],"Total Kidney: ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy Cases: ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies Cases: ".$scabies_cases_details['scabies_issues_count']);
						array_push($zone1['criteria'],$zone1_criteria);
						//array_push($zone1['criteria'],$zone1_criteria);
						$zone1['school_count']++;
						
						$zone1['value']++;
				}
				else if($total_grade > 8 )
				{
					//YEL
						array_push($zone2['school_name'],$school['school_name']);
						$test['sn'] = $school;
						array_push($zone2['current_school_name_yellow'],$test['sn']['school_name']);
						$zone2['school_count']++;
						$zone2['value']++;
						$zone2_criteria[$test['sn']['school_name']] = array("Total Asthma Cases: ".$asthma_cases_details['asthma_issues_count'],"Total Kidney: ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy Cases: ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies Cases: ".$scabies_cases_details['scabies_issues_count']);
								array_push($zone2['criteria'],$zone2_criteria);
				}
				else
				{
					//GREEN
						array_push($zone3['school_name'],$school['school_name']);
						$test['sn'] = $school;
						array_push($zone3['current_school_name_green'],$test['sn']['school_name']);
						$zone3['school_count']++;
						$zone3['value']++;
						$zone3_criteria[$test['sn']['school_name']] = array("Total Asthma Cases: ".$asthma_cases_details['asthma_issues_count'],"Total Kidney ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy Cases : ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies Cases : ".$scabies_cases_details['scabies_issues_count']);
							array_push($zone3['criteria'],$zone3_criteria);
				}

				$asthma_count += $asthma_cases_details['asthma_issues_count'];
				$kidney_count += $kidney_cases_details['kidney_issues_count'];
				$scabies_count += $scabies_cases_details['scabies_issues_count'];
				$epilipsy_count += $epilipsy_cases_details['epilipsy_issues_count'];
				//$bmi_count += $bmi_details['bmi_issues_count'];

				array_push($all_asthma_cases, $asthma_cases_details);
				array_push($all_kidney_cases, $kidney_cases_details);
				array_push($all_scabies_cases, $scabies_cases_details);
				array_push($all_epilepsy_cases, $epilipsy_cases_details);
				//array_push($all_bmi_cases, $bmi_details);
				//array_push($all_hb_cases, $hb_details);
		}
		
	
				array_push($all_cases, $zone1);				
				array_push($all_cases, $zone2);				
				array_push($all_cases, $zone3);
				
				/*array_push($all_cases, $all_asthma_cases);
				array_push($all_cases, $all_kidney_cases);
				array_push($all_cases, $all_scabies_cases);
				array_push($all_cases, $all_epilepsy_cases);*/
				//echo "<pre>";
				//echo print_r($all_cases,true); echo "</pre>";exit();
				
			return $all_cases;	
					
	}


	public function get_screened_students_list_school_wise($school_name)
	{
		$search_query = array (
						"doc_data.widget_data.page4.Doctor Check Up" => array (
								'$exists' => true
						),
						"doc_data.widget_data.page3.Physical Exam" => array (
								'$exists' => true
						),
						'doc_data.widget_data.page9.Dental Check-up' => array(
							'$exists' => true
						),
						'doc_data.widget_data.page2.Personal Information.School Name' =>$school_name
					);
		
		$query = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID', 'doc_data.widget_data.page1.Personal Information.Name', 'doc_data.widget_data.page2.Personal Information.Class'))->where($search_query)->get($this->screening_app_col_sw);

		$final_array = array();
		foreach($query as $qry)
		{
			$doc['student_id'] = $qry['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
			$doc['students_name'] = $qry['doc_data']['widget_data']['page1']['Personal Information']['Name'];
			$doc['student_class'] = $qry['doc_data']['widget_data']['page2']['Personal Information']['Class'];
			array_push($final_array, $doc);
			
		}
		
		return $final_array;

	}

	public function get_not_screened_students_school_wise($school_name)
	{
		$search_query = array (
						"doc_data.widget_data.page4.Doctor Check Up" => array (
								'$exists' => false
						),
						"doc_data.widget_data.page3.Physical Exam" => array (
								'$exists' => false
						),
						'doc_data.widget_data.page9.Dental Check-up' => array(
							'$exists' => false
						),
						'doc_data.widget_data.page2.Personal Information.School Name' =>$school_name
					);
		
		$query = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID', 'doc_data.widget_data.page1.Personal Information.Name', 'doc_data.widget_data.page2.Personal Information.Class'))->where($search_query)->get($this->screening_app_col_sw);

		
		$final_array = array();
		foreach($query as $qry)
		{
			$doc['student_id'] = $qry['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
			$doc['students_name'] = $qry['doc_data']['widget_data']['page1']['Personal Information']['Name'];
			$doc['student_class'] = $qry['doc_data']['widget_data']['page2']['Personal Information']['Class'];
	
			array_push($final_array, $doc);
			
		}
		return $final_array;

	}

	public function get_bmi_report_doctor_modal_count($today_date)
	{
		/*$bmi_final = array();
		$total_month = substr($today_date, 0,-3);
		$under_weight = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.BMI_values.month' => array('$regex' => $total_month),'doc_data.widget_data.page1.Student Details.BMI_values.bmi' => 18.5))->count($this->bmi_app_col_sw);
		
		$under_weight_cases['label'] ="Under Weight";
		$under_weight_cases['value'] = intval($under_weight);
		array_push($bmi_final, $under_weight_cases);

		$over_weight = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.BMI_values.month' => array('$regex' => $total_month)))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_values.bmi', 24,30)->count($this->bmi_app_col_sw);

		$over_weight_cases['label'] = "Over Weight";
		$over_weight_cases['value'] = intval($over_weight);
		array_push($bmi_final, $over_weight_cases);


		$obese = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.BMI_values.month' => array('$regex' => $total_month)))->whereGte('doc_data.widget_data.page1.Student Details.BMI_values.bmi', 30.1)->count($this->bmi_app_col_sw);

		$obese_cases['label'] = "Obese";
		$obese_cases['value'] = intval($obese);
		array_push($bmi_final, $obese_cases);

		$normal_weight = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.BMI_values.month' => array('$regex' => $total_month)))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_values.bmi', 18.5,23.9)->count($this->bmi_app_col_sw);

		$normal_weight_cases['label'] = 'Normal Weight';
		$normal_weight_cases['value'] = intval($normal_weight);
		array_push($bmi_final, $normal_weight_cases);

		return $bmi_final;*/
		$requests = [ ];
		$request_under_weight = array();
		$request_normal_weight = array();
		$request_over_weight = array();
		$request_obese= array();

		$total_month = substr($today_date, 0,-3);

		$query = array('doc_data.widget_data.page1.Student Details.BMI_values.month' => array('$regex' => $total_month));
		$documents = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where($query)->get($this->bmi_app_col_sw);
			foreach ($documents as  $value) 
			{
				$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
				if($end_array['bmi'] < 18.50)
				{
					array_push($request_under_weight, $value);
				}else if($end_array['bmi'] >= 18.50 && $end_array['bmi'] <= 24.99 )
				{
					array_push($request_normal_weight, $value);
				}else if($end_array['bmi'] >= 25.00 && $end_array['bmi'] <= 29.99 )
				{
					array_push($request_over_weight, $value);
				}else if($end_array['bmi'] >= 30 )
				{
					array_push($request_obese, $value);
				}
			}
				$request ['label'] = 'UNDER WEIGHT';
				$request ['value'] = count($request_under_weight);
				array_push ( $requests, $request );
				$request ['label'] = 'NORMAL WEIGHT';
				$request ['value'] = count($request_normal_weight);
				array_push ( $requests, $request );
				$request ['label'] = 'OVER WEIGHT';
				$request ['value'] = count($request_over_weight);
				array_push ( $requests, $request );
				$request ['label'] = 'OBESE';
				$request ['value'] = count($request_obese);
				array_push ( $requests, $request );

				return $requests;
	}

	public function get_hb_report_doctor_modal_count($today_date)
	{
		/*$hb_final = array();
		$total_month = substr($today_date, 0,-3);
		$severe = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.HB_values.month' => array('$regex' => $total_month )))->whereLt('doc_data.widget_data.page1.Student Details.HB_values.hb', 8)->count($this->hb_app_col_sw);
		$severe_cases['label'] = "Severe";
		$severe_cases['value'] = intval($severe);
		array_push($hb_final, $severe_cases);

		$moderate = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.HB_values.month' => array('$regex' => $total_month )))->whereBetween('doc_data.widget_data.page3.Physical Exam.H B', 8,10)->count($this->hb_app_col_sw);

		$moderate_cases['label'] = "Moderate";
		$moderate_cases['value'] = intval($moderate);
		array_push($hb_final, $moderate_cases);

		$mild = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.HB_values.month' => array('$regex' => $total_month )))->whereBetween('doc_data.widget_data.page3.Physical Exam.H B', 10.1,12)->count($this->hb_app_col_sw);

		$mild_cases['label'] = "Mild";
		$mild_cases['value'] = intval($mild);
		array_push($hb_final, $mild_cases);

		$normal = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.HB_values.month' => array('$regex' => $total_month )))->whereGte('doc_data.widget_data.page3.Physical Exam.H B', 12.1)->count($this->hb_app_col_sw);
		$normal_cases['label'] = "Normal";
		$normal_cases['value'] = intval($normal);
		array_push($hb_final, $normal_cases);

		return $hb_final;*/

		
		$requests = [ ];
		$requests_array = [ ];
		$requests_array_normal = [ ];
		$requests_array_moderate = [ ];
		$requests_array_mild = [ ];
		$total_month = substr($today_date, 0,-3);
		$submitted_school_name = array();
		$query = array('doc_data.widget_data.page1.Student Details.HB_values.month' => array('$regex' => $total_month));
			$documents = $this->mongo_db->select(array('doc_data.widget_data'))->where($query)->get($this->hb_app_col_sw);
			
			foreach ($documents as $value) 
			{
				if(!in_array($value ['doc_data'] ['widget_data'] ['school_details'] ['School Name'],$submitted_school_name))
				{
					$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['HB_values']);				
					
					if($end_array['hb'] <= 8.0)
					{
						array_push($requests_array, $value);
					}else if($end_array['hb'] >= 8.1 && $end_array['hb'] <= 10.0)
					{
						array_push($requests_array_moderate, $value);
					}else if($end_array['hb'] >= 10.1 && $end_array['hb'] < 12.0)
					{
						array_push($requests_array_mild, $value);
					}else if($end_array['hb'] >= 12.0 && $end_array['hb'] <= 18.0)
					{
						array_push($requests_array_normal, $value);			
					}
				}
			}
			
			$request ['label'] = 'SEVERE';
			$request ['value'] = count($requests_array);
			array_push ( $requests, $request );			
			$request ['label'] = 'MODERATE';
			$request ['value'] = count($requests_array_moderate);
			array_push ( $requests, $request );
			$request ['label'] = 'MILD';
			$request ['value'] = count($requests_array_mild);
			array_push ( $requests, $request );
			$request ['label'] = 'NORMAL';
			$request ['value'] = count($requests_array_normal);
			array_push ( $requests, $request );

			return $requests;
	}

	public function get_total_requests($today_date = false)
	{

		$data['total_req_count'] = $this->mongo_db->select(array())->whereNe(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Defects','doc_data.widget_data.page2.Review Info.Request Type' => 'Deficiency','doc_data.widget_data.page2.Review Info.Request Type' => "",'doc_data.widget_data.page2.Review Info.Request Type' => false))->where(array('history.0.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->count($this->health_request_col_panacea_hs);
		
		$data['normal_req_count'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal",'history.0.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->count($this->health_request_col_panacea_hs);

		$data['normal_req_count_not_cured'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal','history.0.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->count($this->health_request_col_panacea_hs);

		$data['normal_req_count_cured'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal','doc_data.widget_data.page2.Review Info.Status' => "Cured",'history.0.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->count($this->health_request_col_panacea_hs);

		$data['emergency_req_count'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency','history.0.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->count($this->health_request_col_panacea_hs);

		$data['emergency_req_count_not_cured'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency','history.0.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => 'Cured'))->count($this->health_request_col_panacea_hs);

		$data['emergency_req_count_cured'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency'))->where(array('doc_data.widget_data.page2.Review Info.Status' => 'Cured','history.0.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->count($this->health_request_col_panacea_hs);

		$data['chronic_req_count'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic",'history.0.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->count($this->health_request_col_panacea_hs);

		$data['chronic_req_count_not_cured'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic','history.0.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => 'Cured'))->count($this->health_request_col_panacea_hs);

		$data['chronic_req_count_cured'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic'))->where(array('doc_data.widget_data.page2.Review Info.Status' => 'Cured','history.0.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->count($this->health_request_col_panacea_hs);

		$data['out_patient_total_count'] 	= $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => "Out Patients"))->count("field_officer_report");
		$data['admitted_total_count'] 		= $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => "Emergency or Admitted"))->count("field_officer_report");
		$data['review_cases_total_count'] 	= $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => "Review Cases"))->count("field_officer_report");
		$data['doctor_visits_total_count'] 	= $this->mongo_db->count("doctor_visiting_reports");

		if(!empty($today_date) && isset($today_date))
		{
			$data['attendance_submitted_count'] = $this->mongo_db->where(array('history.last_stage.time' => array('$regex' => $today_date)))->count($this->absent_app_col);
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$query = $this->mongo_db->count ( $this->collections ['panacea_schools'] );
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			$data['attendance_not_submitted_count'] = $query - $data['attendance_submitted_count'];

			$data['sanitation_submitted_count'] = $this->mongo_db->where(array('history.last_stage.time' => array('$regex' => $today_date)))->count($this->sanitation_app_col_v2);
			$data['sanitation_not_submitted_count'] = $query - $data['sanitation_submitted_count'];

			$data['out_patient_today_date'] = $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => "Out Patients", 'history.last_stage.time' => array('$regex' => $today_date)))->count("field_officer_report");
			$data['admitted_today_date'] = $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => "Emergency or Admitted", 'history.last_stage.time' => array('$regex' => $today_date)))->count("field_officer_report");
			$data['review_cases_today_date'] = $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => "Review Cases", 'history.last_stage.time' => array('$regex' => $today_date)))->count("field_officer_report");
			$data['doctor_visits_today_date'] = $this->mongo_db->where(array('history.last_stage.time' => array('$regex' => $today_date)))->count("doctor_visiting_reports");

		}else
		{
			$today_date = Date('Y-m-d');
			$data['attendance_submitted_count'] = $this->mongo_db->where(array('history.last_stage.time' => array('$regex' => $today_date)))->count($this->absent_app_col);
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$query = $this->mongo_db->count ( $this->collections ['panacea_schools'] );
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			$data['attendance_not_submitted_count'] = $query - $data['attendance_submitted_count'];

			$data['sanitation_submitted_count'] = $this->mongo_db->where(array('history.last_stage.time' => array('$regex' => $today_date)))->count($this->sanitation_app_col_v2);
			$data['sanitation_not_submitted_count'] = $data['sanitation_not_submitted_count'] = $query - $data['sanitation_submitted_count'];

			$data['out_patient_today_date'] = $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => "Out Patients", 'history.last_stage.time' => array('$regex' => $today_date)))->count("field_officer_report");
			$data['admitted_today_date'] = $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => "Emergency or Admitted", 'history.last_stage.time' => array('$regex' => $today_date)))->count("field_officer_report");
			$data['review_cases_today_date'] = $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => "Review Cases", 'history.last_stage.time' => array('$regex' => $today_date)))->count("field_officer_report");
			$data['doctor_visits_today_date'] = $this->mongo_db->where(array('history.last_stage.time' => array('$regex' => $today_date)))->count("doctor_visiting_reports");
		}

		return $data;
	}


	public function get_hs_requests_cured_and_not_cured($request_type,$count = false,$today_date = false)
    {
        $all_cases = array();
        $cured_cases = array();
        $not_cured_cases = array();
        $cured_count = array();
        $not_cured_count = array();
        $hs_history = array('app_properties.app_id'=>'healthcare2016531124515424' , 'doc_data.widget_data.page2.Review Info.Request Type' => $request_type);

         // Get Cured Requests latest 200
        $this->mongo_db->orderBy(array('history.time' => -1));
        $query = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Info.Unique ID', 'doc_data.widget_data.page1.Student Info.Name.field_ref'),array('_id'))->where(array('doc_data.widget_data.page2.Review Info.Status' => "Cured",'history.0.time' => ($today_date)? array('$regex' => $today_date) : array('$exists' => TRUE)))->limit(($count) ? $count : 200)->where($hs_history)->get($this->health_request_col_panacea_hs);
        foreach($query as $qry)
        {
            $cured['student_id'] = $qry['doc_data']['widget_data']['page1']['Student Info']['Unique ID'];
            $cured['student_name'] = $qry['doc_data']['widget_data']['page1']['Student Info']['Name']['field_ref'];          
           array_push($cured_cases, $cured);            
        }
        $all_cases['cured_cases'] = $cured_cases;
        $all_cases['cured_count'] = count($cured_cases);

         // Get Not Cured Requests latest 200
         $this->mongo_db->orderBy(array('history.time' => -1));
        $query = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Info.Unique ID', 'doc_data.widget_data.page1.Student Info.Name.field_ref'),array('_id'))->where(array('doc_data.widget_data.page2.Review Info.Status' =>array('$ne' => "Cured"),'history.0.time' => ($today_date)? array('$regex' => $today_date) : array('$exists' => TRUE)))->limit(($count) ? $count : 200)->where($hs_history)->get($this->health_request_col_panacea_hs);
        foreach($query as $qry)
        {
            $not_cured['student_id'] = $qry['doc_data']['widget_data']['page1']['Student Info']['Unique ID'];
            $not_cured['student_name'] = $qry['doc_data']['widget_data']['page1']['Student Info']['Name']['field_ref'];         
            array_push($not_cured_cases, $not_cured);            
        }
        $all_cases['not_cured_cases'] = $not_cured_cases;
        $all_cases['not_cured_count'] = count($not_cured_cases);
        return $all_cases;
    }


    public function get_schools_list_by_request_type($request_type,$count,$today_date)
	{
		// Variables
		$all_schools               = array();
		$all_schools_district      = array();
		$all_schools_name      	   = array();

		$submitted_schools 	       = array();
		$submitted_school_district = array();
		$submitted_school_name     = array();
		$not_submitted_schools	   = array();
		$schools_data              = array();
		$not_submitted_dist        = array();

		$all_schools_mobile        = array();
		$all_schools_cpn      	   = array();
		$submitted_school_mob 	   = array();
		$submitted_school_person   = array();
		$not_submitted_school_mob 	   = array();
		$not_submitted_school_person   = array();

		$schools_list = $this->get_all_tswreis_schools();

		foreach($schools_list as $school_data)
		{
			array_push($all_schools_name,$school_data['school_name']);
		}
		
		$all_schools['school']   = $all_schools_name;
		if( ($request_type == "Normal") || ($request_type == "Emergency") || ($request_type == "Chronic") )
		{
			$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' =>$request_type,
				'history.0.time' => ($today_date)? array('$regex' => $today_date) : array('$exists' => true)))->limit(($count) ? $count : 200)->get($this->health_request_col_panacea_hs);
		}
		foreach ( $query as $doc )
		{
		    if(!in_array($doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['School Name']['field_ref'],$submitted_school_name))
			{
				array_push ( $submitted_school_name,$doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['School Name']['field_ref'] );					
	        }
		}
		

		//$submitted_schools['district']     = $submitted_school_district;
		$submitted_schools['school']     = $submitted_school_name;
		//$not_submitted_schools['district'] = array();
		$not_submitted_schools['school']   = array_values(array_diff($all_schools['school'],$submitted_schools['school']));
		foreach($not_submitted_schools['school'] as $index => $school_name)
		{
			
		   $dist_array    = explode(",",$school_name);
		   $dist_array[1] = strtolower($dist_array[1]);
		   array_push($not_submitted_dist,ucfirst($dist_array[1]));
		}
		$schools_data['schools_list']     	= $submitted_schools;
		//$schools_data['screened_schools_count']     = count($submitted_schools['school']);
		return $schools_data;
	}


	public function get_students_count_by_request_type($request_type,$school_name,$count,$today_date)
	{
		$schools_data = array();
		if( ($request_type == "Normal") || ($request_type == "Emergency") || ($request_type == "Chronic") ){
			
			$all_students = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type, 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name, 'history.0.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->limit(($count) ? $count : 200 )->count($this->health_request_col_panacea_hs);
			$schools_data['all_students_count'] = $all_students;

			$cured_students = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => "Cured" ,'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,'history.0.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->limit(($count) ? $count : 200 )->count($this->health_request_col_panacea_hs);
			$schools_data['cured_students_count'] = $cured_students;

			$not_cured_students = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type, 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name, 'history.0.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->limit(($count) ? $count : 200 )->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->count($this->health_request_col_panacea_hs);
			$schools_data['not_cured_students_count'] = $not_cured_students;

			return $schools_data;
		}
		else
		{
			return FALSE;
		}
	}

	public function get_hs_request_student_ehr($post, $user_type, $request_type,$request_status) {
			if((preg_match("/PANACEA/i", $user_type)))
			{	
				if($request_status == "Cured")
				{
					$query = $this->mongo_db->select(array('doc_data','history'))->where (array('doc_data.widget_data.page1.Student Info.Unique ID' => trim($post['uniqueID']), 'doc_data.widget_data.page2.Review Info.Request Type' => $request_type, 'doc_data.widget_data.page2.Review Info.Status' => "Cured" ))->orderBy(array('history.0.time' => -1))->get ($this->health_request_col_panacea_hs);
					if ($query) {
						return $query;
					} else {
						return false;
					}
				}
				elseif($request_status == "Not Cured"){
					$query = $this->mongo_db->select(array('doc_data','history'))->where (array('doc_data.widget_data.page1.Student Info.Unique ID' => trim($post['uniqueID']), 'doc_data.widget_data.page2.Review Info.Request Type' => $request_type))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured" ))->orderBy(array('history.0.time' => -1))->get ($this->health_request_col_panacea_hs);
					if ($query) {
						return $query;
					} else {
						return false;
					}
				}		
			}
		
		}

	public function get_students_list_by_request_type($request_type,$school_name,$count,$today_date)
	{
		$schools_data = array();
		if( ($request_type == "Normal") || ($request_type == "Emergency") || ($request_type == "Chronic") ){
			$select_fields = array('doc_data.widget_data.page1.Student Info.Unique ID','doc_data.widget_data.page1.Student Info.Name.field_ref',);
			$all_students = $this->mongo_db->select($select_fields)->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type, 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name, 'history.0.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => true)))->limit(($count)? $count : 200)->get($this->health_request_col_panacea_hs);
			$schools_data['all_students_list'] = $all_students;

			$cured_students = $this->mongo_db->select($select_fields)->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type,'doc_data.widget_data.page2.Review Info.Status' => "Cured" ,'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name, 'history.0.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => true)))->limit(($count)? $count : 200)->get($this->health_request_col_panacea_hs);
			$schools_data['cured_students_list'] = $cured_students;

			$not_cured_students = $this->mongo_db->select($select_fields)->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type, 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name, 'history.0.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => true)))->limit(($count)? $count : 200)->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->get($this->health_request_col_panacea_hs);
			$schools_data['not_cured_students_list'] = $not_cured_students;

			return $schools_data;
		}
		else
		{
			return FALSE;
		}
	}

	public function get_request_and_screening_documents($u_id,$date_time)
	{
		$query['request'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $u_id,'history.0.time'=>$date_time))->get($this->health_request_col_panacea_hs);
		$query['screening'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $u_id,'history.last_stage.time' => $date_time))->get($this->screening_app_col_sw);

		if(!empty($query))
			return $query;
		else
			return FALSE;
	}
	public function submit_rhso_follow_up_form($doc_data,$doc_attachments, $doc_properties, $app_properties, $history,$user_type)
	{
    	if($user_type == "TSWREIS_FO")
    	{
    		 $doc_data = array("doc_data" => $doc_data,'doc_attachments' =>$doc_attachments, "doc_properties" => $doc_properties, "app_properties" => $app_properties, "history" => $history);

	        $query = $this->mongo_db->insert('field_officer_report',$doc_data);
	        if($query)
	            return TRUE;
	        else
	            return FALSE;
    	}else{
    		return 'User Type Not Matched';
    	}
	}
	public function submit_field_officer($doc_data, $doc_attachments,  $doc_properties, $app_properties, $history, $user_type)
    {
    	if($user_type == "TSWREIS_FO")
    	{
    		 $doc_data = array("doc_data" => $doc_data,'doc_attachments' =>$doc_attachments, "doc_properties" => $doc_properties, "app_properties" => $app_properties, "history" => $history);

	        $query = $this->mongo_db->insert('field_officer_report',$doc_data);
	        if($query)
	            return TRUE;
	        else
	            return FALSE;
    	}elseif($user_type == "TTWREIS_FO")
    	{
    		 $doc_data = array("doc_data" => $doc_data,'doc_attachments' =>$doc_attachments, "doc_properties" => $doc_properties, "app_properties" => $app_properties, "history" => $history);

	        $query = $this->mongo_db->insert('ttwreis_field_officer_report',$doc_data);
	        if($query)
	            return TRUE;
	        else
	            return FALSE;
    	}elseif($user_type == "BCWELFARE_FO")
    	{
    		 $doc_data = array("doc_data" => $doc_data,'doc_attachments' =>$doc_attachments, "doc_properties" => $doc_properties, "app_properties" => $app_properties, "history" => $history);

	        $query = $this->mongo_db->insert('bc_welfare_field_officer_report',$doc_data);
	        if($query)
	            return TRUE;
	        else
	            return FALSE;
    	}elseif($user_type == "TMREIS_FO")
    	{
    		 $doc_data = array("doc_data" => $doc_data,'doc_attachments' =>$doc_attachments, "doc_properties" => $doc_properties, "app_properties" => $app_properties, "history" => $history);

	        $query = $this->mongo_db->insert('tmreis_field_officer_report',$doc_data);
	        if($query)
	            return TRUE;
	        else
	            return FALSE;
    	}
       
    }

    public function fetch_field_officer_reports($today_date, $user_type, $mail)
    {
    	if(isset($mail) && !empty($mail)){
    		$mail_id = str_replace('@', '#', $mail);
    	}

    	if($user_type == "TSWREIS_FO")
    	{
    		$final_data = array();

    		if(preg_match("/.cc/i", $mail)){
    			$out_patients = $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => "Out Patients",'history.last_stage.time' => array('$regex' => $today_date)))->count('field_officer_report');

    			$data['out_patients'] = "Out Patients";
    			$data['out_patients_count'] = $out_patients;
    			//array_push($final_data,$data); 

    			$emergency_admitted = $this->mongo_db->whereLike('history.last_stage.time',$today_date )->where('doc_data.widget_data.type_of_request',"Emergency or Admitted")->count('field_officer_report');

    			$data['admitted'] = "Emergency or Admitted";
    			$data['admitted_count'] = $emergency_admitted;
    			//array_push($final_data,$data); 

    			$review_cases = $this->mongo_db->whereLike('history.last_stage.time',$today_date )->where('doc_data.widget_data.type_of_request',"Review Cases")->count('field_officer_report');
    			$data['review_cases'] = "Review Cases";
    			$data['review_count'] = $review_cases;
    			array_push($final_data,$data);

    			return $final_data;
    		}else{

    			
    			$out_patients = $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => "Out Patients",'history.last_stage.time' => array('$regex' => $today_date), 'history.last_stage.submitted_by'=>$mail_id))->count('field_officer_report');

    			$data['out_patients'] = "Out Patients";
    			$data['out_patients_count'] = $out_patients;
    			//array_push($final_data,$data); 

    			$emergency_admitted = $this->mongo_db->whereLike('history.last_stage.time',$today_date )->where('doc_data.widget_data.type_of_request',"Emergency or Admitted")->where('history.last_stage.submitted_by', $mail_id)->count('field_officer_report');

    			$data['admitted'] = "Emergency or Admitted";
    			$data['admitted_count'] = $emergency_admitted;
    			//array_push($final_data,$data); 

    			$review_cases = $this->mongo_db->whereLike('history.last_stage.time',$today_date )->where('doc_data.widget_data.type_of_request',"Review Cases")->where('history.last_stage.submitted_by', $mail_id)->count('field_officer_report');
    			$data['review_cases'] = "Review Cases";
    			$data['review_count'] = $review_cases;
    			array_push($final_data,$data);

    			return $final_data;
    		}
	        
    	}else if($user_type == "TTWREIS_FO")
    	{
    		$final_data = array();

    		if(preg_match("/.cc/i", $mail)){
    			$out_patients = $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => "Out Patients",'history.last_stage.time' => array('$regex' => $today_date)))->count('ttwreis_field_officer_report');

    			$data['out_patients'] = "Out Patients";
    			$data['out_patients_count'] = $out_patients;
    			//array_push($final_data,$data); 

    			$emergency_admitted = $this->mongo_db->whereLike('history.last_stage.time',$today_date )->where('doc_data.widget_data.type_of_request',"Emergency or Admitted")->count('ttwreis_field_officer_report');

    			$data['admitted'] = "Emergency or Admitted";
    			$data['admitted_count'] = $emergency_admitted;
    			//array_push($final_data,$data); 

    			$review_cases = $this->mongo_db->whereLike('history.last_stage.time',$today_date )->where('doc_data.widget_data.type_of_request',"Review Cases")->count('ttwreis_field_officer_report');
    			$data['review_cases'] = "Review Cases";
    			$data['review_count'] = $review_cases;
    			array_push($final_data,$data);

    			return $final_data;
    		}else{
    			$out_patients = $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => "Out Patients",'history.last_stage.time' => array('$regex' => $today_date)))->where('history.last_stage.submitted_by', $mail_id)->count('ttwreis_field_officer_report');

    			$data['out_patients'] = "Out Patients";
    			$data['out_patients_count'] = $out_patients;
    			//array_push($final_data,$data); 

    			$emergency_admitted = $this->mongo_db->whereLike('history.last_stage.time',$today_date )->where('doc_data.widget_data.type_of_request',"Emergency or Admitted")->where('history.last_stage.submitted_by', $mail_id)->count('ttwreis_field_officer_report');

    			$data['admitted'] = "Emergency or Admitted";
    			$data['admitted_count'] = $emergency_admitted;
    			//array_push($final_data,$data); 

    			$review_cases = $this->mongo_db->whereLike('history.last_stage.time',$today_date )->where('doc_data.widget_data.type_of_request',"Review Cases")->where('history.last_stage.submitted_by', $mail_id)->count('ttwreis_field_officer_report');
    			$data['review_cases'] = "Review Cases";
    			$data['review_count'] = $review_cases;
    			array_push($final_data,$data);

    			return $final_data;
    		}
	        
    	}else if($user_type == "BCWELFARE_FO")
    	{
    		$final_data = array();

    		if(preg_match("/.cc/i", $mail)){
    			$out_patients = $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => "Out Patients",'history.last_stage.time' => array('$regex' => $today_date)))->count('bc_welfare_field_officer_report');

    			$data['out_patients'] = "Out Patients";
    			$data['out_patients_count'] = $out_patients;
    			//array_push($final_data,$data); 

    			$emergency_admitted = $this->mongo_db->whereLike('history.last_stage.time',$today_date )->where('doc_data.widget_data.type_of_request',"Emergency or Admitted")->count('bc_welfare_field_officer_report');

    			$data['admitted'] = "Emergency or Admitted";
    			$data['admitted_count'] = $emergency_admitted;
    			//array_push($final_data,$data); 

    			$review_cases = $this->mongo_db->whereLike('history.last_stage.time',$today_date )->where('doc_data.widget_data.type_of_request',"Review Cases")->count('bc_welfare_field_officer_report');
    			$data['review_cases'] = "Review Cases";
    			$data['review_count'] = $review_cases;
    			array_push($final_data,$data);

    			return $final_data;
    		}else{
    			$out_patients = $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => "Out Patients",'history.last_stage.time' => array('$regex' => $today_date)))->where('history.last_stage.submitted_by', $mail_id)->count('bc_welfare_field_officer_report');

    			$data['out_patients'] = "Out Patients";
    			$data['out_patients_count'] = $out_patients;
    			//array_push($final_data,$data); 

    			$emergency_admitted = $this->mongo_db->whereLike('history.last_stage.time',$today_date )->where('doc_data.widget_data.type_of_request',"Emergency or Admitted")->where('history.last_stage.submitted_by', $mail_id)->count('bc_welfare_field_officer_report');

    			$data['admitted'] = "Emergency or Admitted";
    			$data['admitted_count'] = $emergency_admitted;
    			//array_push($final_data,$data); 

    			$review_cases = $this->mongo_db->whereLike('history.last_stage.time',$today_date )->where('doc_data.widget_data.type_of_request',"Review Cases")->where('history.last_stage.submitted_by', $mail_id)->count('bc_welfare_field_officer_report');
    			$data['review_cases'] = "Review Cases";
    			$data['review_count'] = $review_cases;
    			array_push($final_data,$data);

    			return $final_data;
    		}
	        
    	}
        
    }

    public function drill_down_to_field_officer_reports_list($selectedCase, $selectedDate, $user_type, $mail)
    {
    	if(isset($mail) && !empty($mail)){
    		$mail_id = str_replace('@', '#', $mail);
    	}

    	if($user_type == "TSWREIS_FO")
    	{
    		if(preg_match("/.cc/i", $mail)){
    			$this->mongo_db->orderBy(array('history.last_stage.time' => -1));
	        	$getSubmittedDocs = $this->mongo_db->whereLike('history.last_stage.time',$selectedDate)->where(array("doc_data.widget_data.type_of_request"=>$selectedCase))->get('field_officer_report');
    		}else{
    			$this->mongo_db->orderBy(array('history.last_stage.time' => -1));
	        	$getSubmittedDocs = $this->mongo_db->whereLike('history.last_stage.time',$selectedDate)->where(array("doc_data.widget_data.type_of_request"=>$selectedCase, 'history.last_stage.submitted_by'=>$mail_id))->get('field_officer_report');
    		}
    		
	        if(!empty($getSubmittedDocs)){
	            return $getSubmittedDocs;
	         }else{
	            return "No details";
	         }
	       
	        return $getSubmittedDocs; 
    	}elseif($user_type == "TTWREIS_FO")
    	{
    		if(preg_match("/.cc/i", $mail)){
    			$this->mongo_db->orderBy(array('history.last_stage.time' => -1));
	        	$getSubmittedDocs = $this->mongo_db->whereLike('history.last_stage.time',$selectedDate)->where(array("doc_data.widget_data.type_of_request"=>$selectedCase))->get('ttwreis_field_officer_report');
    		}else{
    			$this->mongo_db->orderBy(array('history.last_stage.time' => -1));
	        	$getSubmittedDocs = $this->mongo_db->whereLike('history.last_stage.time',$selectedDate)->where(array("doc_data.widget_data.type_of_request"=>$selectedCase, 'history.last_stage.submitted_by'=>$mail_id))->get('ttwreis_field_officer_report');
    		}
    		
	        if(!empty($getSubmittedDocs)){
	            return $getSubmittedDocs;
	         }else{
	            return "No details";
	         }
	       
	        return $getSubmittedDocs; 
    	}elseif($user_type == "BCWELFARE_FO")
    	{
    		if(preg_match("/.cc/i", $mail)){
    			$this->mongo_db->orderBy(array('history.last_stage.time' => -1));
	        	$getSubmittedDocs = $this->mongo_db->whereLike('history.last_stage.time',$selectedDate)->where(array("doc_data.widget_data.type_of_request"=>$selectedCase))->get('bc_welfare_field_officer_report');
    		}else{
    			$this->mongo_db->orderBy(array('history.last_stage.time' => -1));
	        	$getSubmittedDocs = $this->mongo_db->whereLike('history.last_stage.time',$selectedDate)->where(array("doc_data.widget_data.type_of_request"=>$selectedCase, 'history.last_stage.submitted_by'=>$mail_id))->get('bc_welfare_field_officer_report');
    		}
	        if(!empty($getSubmittedDocs)){
	            return $getSubmittedDocs;
	         }else{
	            return "No details";
	         }
	       
	        return $getSubmittedDocs; 
    	}                 
    }

    public function get_schools_by_bmi_range($bmi_type,$today_date)
	{
		// Variables
		ini_set ( 'memory_limit', '10G' );
		$all_schools               = array();
		$all_schools_district      = array();
		$all_schools_name      	   = array();

		$submitted_schools 	       = array();
		$submitted_school_district = array();
		$submitted_school_name     = array();
		$schools_data              = array();

		$schools_list = $this->get_all_schools_student_type();

		foreach($schools_list as $school_data)
		{
			
			array_push($all_schools_name,$school_data['school_name']);
			
		}

		//$all_schools['district'] = $all_schools_district;
		$all_schools['school']   = $all_schools_name;		
		$total_month = substr($today_date, 0,-3);
		if($bmi_type == "UNDER WEIGHT")
		{
			$query = array('doc_data.widget_data.page1.Student Details.BMI_values.month' => array('$regex' => $total_month),
						   'doc_data.widget_data.page1.Student Details.BMI_values.bmi' => array('$lt' => 18.50));
			$documents = $this->mongo_db->where($query)->get($this->bmi_app_col_sw);
		}
		elseif($bmi_type == "OVER WEIGHT")
		{
			$query = array('doc_data.widget_data.page1.Student Details.BMI_values.month' => array('$regex' => $total_month));
			$documents = $this->mongo_db->where($query)->whereBetween('doc_data.widget_data.page1.Student Details.BMI_values.bmi', 25.0, 29.99)->get($this->bmi_app_col_sw);
		}
		elseif($bmi_type == "OBESE")
		{
			$query = array('doc_data.widget_data.page1.Student Details.BMI_values.month' => array('$regex' => $total_month));
			$documents = $this->mongo_db->where($query)->whereGte('doc_data.widget_data.page1.Student Details.BMI_values.bmi', 30)->get($this->bmi_app_col_sw);
		
		}
		elseif($bmi_type == "NORMAL WEIGHT")
		{
			$query = array('doc_data.widget_data.page1.Student Details.BMI_values.month' => array('$regex' => $total_month));
			$documents = $this->mongo_db->where($query)->whereBetween('doc_data.widget_data.page1.Student Details.BMI_values.bmi', 18.5,24.99)->get($this->bmi_app_col_sw);
		}

		foreach ( $documents as $doc ) 
		{
		    if(!in_array($doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'],$submitted_school_name))
			{
				$end_array = end($doc['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
				if($bmi_type == "UNDER WEIGHT" && $end_array['bmi'] < 18.50)
				{
					array_push ( $submitted_school_name,$doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'] );	
				}else if($bmi_type == "NORMAL WEIGHT" && $end_array['bmi'] >= 18.50 && $end_array['bmi'] <= 24.99 )
				{
					array_push ( $submitted_school_name,$doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'] );	
				}else if($bmi_type == "OVER WEIGHT" && $end_array['bmi'] >= 25.00 && $end_array['bmi'] <= 29.99 )
				{					
					array_push ( $submitted_school_name,$doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'] );	
				}else if($bmi_type == "OBESE" && $end_array['bmi'] >= 30 )
				{
					array_push ( $submitted_school_name,$doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'] );	
				}					
			}
		}

		$submitted_schools['school']     			= $submitted_school_name;
		$schools_data[$bmi_type." Schools"]     	= $submitted_schools;
		$schools_data[$bmi_type." Schools count"]   = count($submitted_schools['school']);
		return $schools_data;
	}
	

	public function get_students_list_by_bmi_range($bmi_type, $school_name = false, $today_date)
	{	
		$total_month = substr($today_date, 0,-3);
		$data = array();
		$submitted_school_name  = array();
		$select_fields = array('doc_data.widget_data');
		if($bmi_type == "UNDER WEIGHT")
		{
			$documents = $this->mongo_db->select($select_fields)->where(array('doc_data.widget_data.page1.Student Details.BMI_values.bmi' => array('$lt' => 18.5),'doc_data.widget_data.page1.Student Details.BMI_values.month' => array('$regex' => $total_month),'doc_data.widget_data.school_details.School Name' => ($school_name) ? $school_name : array('$exists' => true)))->get($this->bmi_app_col_sw);
		}
		elseif($bmi_type == "OVER WEIGHT")
		{
			$documents = $this->mongo_db->select($select_fields)->whereBetween('doc_data.widget_data.page1.Student Details.BMI_values.bmi', 25,29.99)->where(array('doc_data.widget_data.page1.Student Details.BMI_values.month' => array('$regex' => $total_month),'doc_data.widget_data.school_details.School Name'=> ($school_name) ? $school_name : array('$exists' => true)))->get($this->bmi_app_col_sw);
		}
		elseif($bmi_type == "OBESE")
		{
			$documents = $this->mongo_db->select($select_fields)->whereGte('doc_data.widget_data.page1.Student Details.BMI_values.bmi', 30)->where(array('doc_data.widget_data.school_details.School Name' => ($school_name) ? $school_name : array('$exists' => true),'doc_data.widget_data.page1.Student Details.BMI_values.month' => array('$regex' => $total_month)))->get($this->bmi_app_col_sw);
		}
		elseif($bmi_type == "NORMAL WEIGHT")
		{
			$documents = $this->mongo_db->select($select_fields)->whereBetween('doc_data.widget_data.page1.Student Details.BMI_values.bmi', 18.5,24.9)->where(array('doc_data.widget_data.school_details.School Name' => ($school_name) ? $school_name : array('$exists' => true),'doc_data.widget_data.page1.Student Details.BMI_values.month' => array('$regex' => $total_month)))->get($this->bmi_app_col_sw);
		}

		foreach ( $documents as $doc ) 
		{
		    if(!in_array($doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'],$submitted_school_name))
			{
				$end_array = end($doc['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
				if($bmi_type == "UNDER WEIGHT" && $end_array['bmi'] < 18.50)
				{
					$data[$bmi_type." Students"] = $documents;
					$data[$bmi_type." count"] = count($documents);
					return $data;
				}else if($bmi_type == "NORMAL WEIGHT" && $end_array['bmi'] >= 18.50 && $end_array['bmi'] <= 24.99 )
				{
					$data[$bmi_type." Students"] = $documents;
					$data[$bmi_type." count"] = count($documents);
					return $data;
				}else if($bmi_type == "OVER WEIGHT" && $end_array['bmi'] >= 25.00 && $end_array['bmi'] <= 29.99 )
				{					
					$data[$bmi_type." Students"] = $documents;
					$data[$bmi_type." count"] = count($documents);
					return $data;
				}else if($bmi_type == "OBESE" && $end_array['bmi'] >= 30 )
				{
					$data[$bmi_type." Students"] = $documents;
					$data[$bmi_type." count"] = count($documents);
					return $data;
				}
			}
		}
	}

	public function get_schools_by_hb_range($hb_type,$today_date)
	{
		// Variables
		ini_set ( 'memory_limit', '100G' );
		$all_schools               = array();
		$all_schools_district      = array();
		$all_schools_name      	   = array();

		$submitted_schools 	       = array();
		$submitted_school_district = array();
		$submitted_school_name     = array();
		$schools_data              = array();

		$schools_list = $this->get_all_schools_student_type();

		foreach($schools_list as $school_data)
		{
			
			array_push($all_schools_name,$school_data['school_name']);
			
		}

		//$all_schools['district'] = $all_schools_district;
		$total_month = substr($today_date, 0,-3);
		$all_schools['school']   = $all_schools_name;

		/*if($hb_type == "SEVERE")
		{
			$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.HB_values.hb' => array('$lt' => 8),'doc_data.widget_data.page1.Student Details.HB_values.month' => array('$regex' => $total_month)))->get($this->hb_app_col_sw);
			echo print_r($query,true);exit();
		}
		elseif($hb_type == "MODERATE")
		{
			$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.HB_values.month' => array('$regex' => $total_month),'doc_data.widget_data.page1.Student Details.HB_values.hb' => array('$gte' => 8.1, '$lte' => 10)))->get($this->hb_app_col_sw);
		}
		elseif($hb_type == "MILD")
		{
			$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.HB_values.month' => array('$regex' => $total_month),'doc_data.widget_data.page1.Student Details.HB_values.hb' => array('$gte' => 10.1, '$lte' => 12)))->get($this->hb_app_col_sw);
		
		}
		elseif($hb_type == "NORMAL")
		{
			$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.HB_values.month' => array('$regex' => $total_month)))->whereGte('doc_data.widget_data.page1.Student Details.HB_values.hb', 12.1)->get($this->hb_app_col_sw);
		}

		foreach ( $query as $doc )
		 {
		    if(!in_array($doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'],$submitted_school_name))
			{
				$end_array = end($doc['doc_data']['widget_data']['page1']['Student Details']['HB_values']);				
			
				if($hb_type == "SEVERE" && $end_array['hb'] < 8.0)
				{
					array_push ( $submitted_school_name,$doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'] );	
				}else if($hb_type == "MODERATE" && $end_array['hb'] >= 8.1 && $end_array['hb'] <= 10.0)
				{
					array_push ( $submitted_school_name,$doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'] );	
				}else if($hb_type == "MILD" && $end_array['hb'] >= 10.1 && $end_array['hb'] < 12.0)
				{
					array_push ( $submitted_school_name,$doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'] );	
				}else if($hb_type == "NORMAL" && $end_array['hb'] > 12.1)
				{
					array_push ( $submitted_school_name,$doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'] );		
				}
								
	        }
		}*/

		$query = array('doc_data.widget_data.page1.Student Details.HB_values.month' => array('$regex' => $total_month));
			$documents = $this->mongo_db->select(array('doc_data.widget_data'))->where($query)->get($this->hb_app_col_sw);
			
			foreach ($documents as $doc) 
			{
				if(!in_array($doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'],$submitted_school_name))
				{
					$end_array = end($doc['doc_data']['widget_data']['page1']['Student Details']['HB_values']);				
					
					if($hb_type == "SEVERE" && $end_array['hb'] <= 8.0)
					{
						array_push ( $submitted_school_name,$doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'] );		
					}else if($hb_type == "MODERATE" && $end_array['hb'] >= 8.1 && $end_array['hb'] <= 10.0)
					{
						array_push ( $submitted_school_name,$doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'] );		
					}else if($hb_type == "MILD" && $end_array['hb'] >= 10.1 && $end_array['hb'] < 12.0)
					{
						array_push ( $submitted_school_name,$doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'] );		
					}else if($hb_type == "NORMAL" && $end_array['hb'] >= 12.0 && $end_array['hb'] <= 18.0)
					{
						array_push ( $submitted_school_name,$doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'] );		
					}
				}

			}		

		$submitted_schools['school']     = $submitted_school_name;
		$schools_data[$hb_type." Schools"]     	= $submitted_schools;
		$schools_data[$hb_type." Schools count"]     = count($submitted_schools['school']);
		return $schools_data;
	}
	

	public function get_students_list_by_hb_range($hb_type, $school_name = false, $today_date)
	{	
		$data = array();
		$submitted_school_name = array();
		$total_month = substr($today_date, 0,-3);
		$select_fields = array('doc_data.widget_data');
		/*if($hb_type == "SEVERE")
		{
			$documents = $this->mongo_db->select($select_fields)->where(array('doc_data.widget_data.school_details.School Name' => ($school_name) ? $school_name : array('$exists' => true),'doc_data.widget_data.page1.Student Details.HB_values.hb' => array('$lt' => 8),'doc_data.widget_data.page1.Student Details.HB_values.month' => array('$regex' => $total_month)))->get($this->hb_app_col_sw);
		}
		elseif($hb_type == "MODERATE")
		{
			$documents = $this->mongo_db->select($select_fields)->where(array('doc_data.widget_data.school_details.School Name' => ($school_name) ? $school_name : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.HB_values.month' => array('$regex' => $total_month),'doc_data.widget_data.page1.Student Details.HB_values.hb' => array('$gte' => 8.1, '$lte' => 10)))->get($this->hb_app_col_sw);
		}
		elseif($hb_type == "MILD")
		{
			$documents = $this->mongo_db->select($select_fields)->where(array('doc_data.widget_data.school_details.School Name' => ($school_name) ? $school_name : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.HB_values.month' => array('$regex' => $total_month),'doc_data.widget_data.page1.Student Details.HB_values.hb' => array('$gte' => 10.1, '$lte' => 12)))->get($this->hb_app_col_sw);
		}
		elseif($hb_type == "NORMAL")
		{
			$documents = $this->mongo_db->select($select_fields)->whereGte('doc_data.widget_data.page1.Student Details.HB_values.hb', 12.1)->where(array('doc_data.widget_data.school_details.School Name' => ($school_name) ? $school_name : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.HB_values.month' => array('$regex' => $total_month)))->get($this->hb_app_col_sw);
		}

		foreach ( $documents as $doc )
		{
		    if(!in_array($doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'],$submitted_school_name))
			{
				$end_array = end($doc['doc_data']['widget_data']['page1']['Student Details']['HB_values']);				
			
				if($hb_type == "SEVERE" && $end_array['hb'] < 8.0)
				{
					$data[$hb_type." Students"] = $documents;
					$data[$hb_type." count"] 	= count($documents);
					return $data;
				}else if($hb_type == "MODERATE" && $end_array['hb'] >= 8.1 && $end_array['hb'] <= 10.0)
				{
					$data[$hb_type." Students"] = $documents;
					$data[$hb_type." count"] 	= count($documents);
					return $data;
				}else if($hb_type == "MILD" && $end_array['hb'] >= 10.1 && $end_array['hb'] <= 12.0)
				{
					$data[$hb_type." Students"] = $documents;
					$data[$hb_type." count"] 	= count($documents);
					return $data;
				}else if($hb_type == "NORMAL" && $end_array['hb'] > 12.1)
				{
					$data[$hb_type." Students"] = $documents;
					$data[$hb_type." count"] 	= count($documents);
					return $data;
				}
								
	        }
		}*/
		$documents = $this->mongo_db->select($select_fields)->where(array('doc_data.widget_data.school_details.School Name' => ($school_name) ? $school_name : array('$exists' => true),'doc_data.widget_data.page1.Student Details.HB_values.month' => array('$regex' => $total_month)))->get($this->hb_app_col_sw);
		$array_push_docs = array();
		foreach ( $documents as $doc )
		{
		    if(!in_array($doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'],$submitted_school_name))
			{
				$end_array = end($doc['doc_data']['widget_data']['page1']['Student Details']['HB_values']);				
			
				if($hb_type == "SEVERE" && $end_array['hb'] <= 8.0)
				{
					array_push($array_push_docs, $doc);					
					$data[$hb_type." Students"] = $array_push_docs;
					$data[$hb_type." count"] 	= count($array_push_docs);
					
				}else if($hb_type == "MODERATE" && $end_array['hb'] >= 8.1 && $end_array['hb'] <= 10.0)
				{
					array_push($array_push_docs, $doc);					
					$data[$hb_type." Students"] = $array_push_docs;
					$data[$hb_type." count"] 	= count($array_push_docs);
					
				}else if($hb_type == "MILD" && $end_array['hb'] >= 10.1 && $end_array['hb'] < 12.0)
				{
					array_push($array_push_docs, $doc);					
					$data[$hb_type." Students"] = $array_push_docs;
					$data[$hb_type." count"] 	= count($array_push_docs);
					
				}else if($hb_type == "NORMAL" && $end_array['hb'] >= 12.0 && $end_array['hb'] <= 18.0)
				{
					array_push($array_push_docs, $doc);					
					$data[$hb_type." Students"] = $array_push_docs;
					$data[$hb_type." count"] 	= count($array_push_docs);
					
				}
								
	        }
		}		
		return $data;

	}

	public function get_students_list_of_health_status_tracking($review_status, $today_date)
	{

		switch ($review_status) {
			case 'Out Patients':
				$query = $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => 'Out Patients'))->get('field_officer_report');
				return $query;
				break;

			case 'Emergency or Admitted':
				$query = $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => 'Emergency or Admitted'))->get('field_officer_report');
				return $query;
				break;

			case 'Review Cases':
				$query = $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => 'Review Cases'))->get('field_officer_report');
				return $query;
				break;

			case 'Doctor visits today':
				$query = $this->mongo_db->orderBy(array('history.last_stage.time' => -1))->where(array('history.last_stage.time' => array('$regex' => $today_date)))->limit(200)->get('doctor_visiting_reports');
				return $query;
				break;

			case 'Doctor visits total':
				$query = $this->mongo_db->orderBy(array('history.last_stage.time' => -1))->where(array('history.last_stage.time' => array('$exists' => true)))->limit(200)->get('doctor_visiting_reports');
				return $query;
				break;
			
			default:
				# code...
				break;
		}
	}


	public function insert_medical_information_sync($doc_data, $history, $doc_properties ,$user_type)
	{
		
		$school_name = $doc_data['widget_data']['page2']['Personal Information']['School Name'];
		$district = $doc_data['widget_data']['page2']['Personal Information']['District'];
		$dateofexam = $doc_data['widget_data']['page2']['Personal Information']['Date of Exam'];
		$unique_id = $doc_data['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
		$height = $doc_data['widget_data']['page3']['Physical Exam']['Height cms'];
		$weight = $doc_data['widget_data']['page3']['Physical Exam']['Weight kgs'];
		$bloodgroup = $doc_data['widget_data']['page3']['Physical Exam']['Blood Group'];
		$page4_description = $doc_data['widget_data']['page4']['Doctor Check Up']['Description'];
		$page9_hygiene = $doc_data['widget_data']['page9']['Dental Check-up']['Oral Hygiene'];
		$synced_date = $history['last_stage']['synced_date'];

		if ($user_type == "tswreis" || $user_type == "PANACEA_HS") {
			$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id))->get('tswreis_screening_report_col_2021-2022');
		
		if(!empty($query))
		{
			
			if(!empty($query[0]['doc_data']['widget_data']['page2']['Personal Information']['Date of Exam']))
			{
				if($height == $query[0]['doc_data']['widget_data']['page3']['Physical Exam']['Height cms'] && $weight == $query[0]['doc_data']['widget_data']['page3']['Physical Exam']['Weight kgs'] && $bloodgroup == $query[0]['doc_data']['widget_data']['page3']['Physical Exam']['Blood Group'] && $page4_description == $query[0]['doc_data']['widget_data']['page4']['Doctor Check Up']['Description'] && $page9_hygiene == $query[0]['doc_data']['widget_data']['page9']['Dental Check-up']['Oral Hygiene'])
				{
					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id, 'doc_data.widget_data.page2.Personal Information.Date of Exam' => $dateofexam))->set(array('doc_data' => $doc_data, 'history.last_stage.synced_date'=>$synced_date))->update('tswreis_screening_report_col_2021-2022');
				}
			}
			else
			{
				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id))->set(array('doc_data' => $doc_data, 'history.last_stage.synced_date'=>$synced_date))->update('tswreis_screening_report_col_2021-2022');
			}
			
			
		}else
		{
			$full_doc = array('doc_data' => $doc_data, 'doc_properties' => $doc_properties, 'history' => $history);
			$query = $this->mongo_db->insert('tswreis_screening_report_col_2021-2022', $full_doc);

			//$this->update_screening_collection($unique_id, $synced_date, $school_name, $district);
		}
		
		}elseif ($user_type == "private_schools" || $user_type == "PRIVATE_SCHOOLS") {
			$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id))->get('private_schools_col_2021-2022');
			
			if(!empty($query))
			{
				
				if(!empty($query[0]['doc_data']['widget_data']['page2']['Personal Information']['Date of Exam']))
				{
					if($height == $query[0]['doc_data']['widget_data']['page3']['Physical Exam']['Height cms'] && $weight == $query[0]['doc_data']['widget_data']['page3']['Physical Exam']['Weight kgs'] && $bloodgroup == $query[0]['doc_data']['widget_data']['page3']['Physical Exam']['Blood Group'] && $page4_description == $query[0]['doc_data']['widget_data']['page4']['Doctor Check Up']['Description'] && $page9_hygiene == $query[0]['doc_data']['widget_data']['page9']['Dental Check-up']['Oral Hygiene'])
					{
						$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id, 'doc_data.widget_data.page2.Personal Information.Date of Exam' => $dateofexam))->set(array('doc_data' => $doc_data, 'history.last_stage.synced_date'=>$synced_date))->update('private_schools_col_2021-2022');
					}
				}
				else
				{
					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id))->set(array('doc_data' => $doc_data, 'history.last_stage.synced_date'=>$synced_date))->update('private_schools_col_2021-2022');
				}
				
				
			}else
			{
				$full_doc = array('doc_data' => $doc_data, 'doc_properties' => $doc_properties, 'history' => $history);
				$query = $this->mongo_db->insert('private_schools_col_2021-2022', $full_doc);

				//$this->update_screening_collection($unique_id, $synced_date, $school_name, $district);
			}
		}elseif ($user_type == "ttwreis" || $user_type == "TTWREIS_HS")  {
			$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id))->get('ttwreis_screening_report_col_2021-2022');
		
		if(!empty($query))
		{
			
			if(!empty($query[0]['doc_data']['widget_data']['page2']['Personal Information']['Date of Exam']))
			{
				if($height == $query[0]['doc_data']['widget_data']['page3']['Physical Exam']['Height cms'] && $weight == $query[0]['doc_data']['widget_data']['page3']['Physical Exam']['Weight kgs'] && $bloodgroup == $query[0]['doc_data']['widget_data']['page3']['Physical Exam']['Blood Group'] && $page4_description == $query[0]['doc_data']['widget_data']['page4']['Doctor Check Up']['Description'] && $page9_hygiene == $query[0]['doc_data']['widget_data']['page9']['Dental Check-up']['Oral Hygiene'])
				{
					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id, 'doc_data.widget_data.page2.Personal Information.Date of Exam' => $dateofexam))->set(array('doc_data' => $doc_data, 'history.last_stage.synced_date'=>$synced_date))->update('ttwreis_screening_report_col_2021-2022');
				}
			}
			else
			{
				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id))->set(array('doc_data' => $doc_data, 'history.last_stage.synced_date'=>$synced_date))->update('ttwreis_screening_report_col_2021-2022');
			}
			
			
		}else
		{
			$full_doc = array('doc_data' => $doc_data, 'doc_properties' => $doc_properties, 'history' => $history);
			$query = $this->mongo_db->insert('ttwreis_screening_report_col_2021-2022', $full_doc);

			//$this->update_screening_collection($unique_id, $synced_date, $school_name, $district);
		}
		
		}elseif ($user_type == "bcwelfare" || $user_type == "BCWELFARE_HS")  {
			$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id))->get('bcwelfare_screening_report_col_2021-2022');
		
		if(!empty($query))
		{
			
			if(!empty($query[0]['doc_data']['widget_data']['page2']['Personal Information']['Date of Exam']))
			{
				if($height == $query[0]['doc_data']['widget_data']['page3']['Physical Exam']['Height cms'] && $weight == $query[0]['doc_data']['widget_data']['page3']['Physical Exam']['Weight kgs'] && $bloodgroup == $query[0]['doc_data']['widget_data']['page3']['Physical Exam']['Blood Group'] && $page4_description == $query[0]['doc_data']['widget_data']['page4']['Doctor Check Up']['Description'] && $page9_hygiene == $query[0]['doc_data']['widget_data']['page9']['Dental Check-up']['Oral Hygiene'])
				{
					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id, 'doc_data.widget_data.page2.Personal Information.Date of Exam' => $dateofexam))->set(array('doc_data' => $doc_data, 'history.last_stage.synced_date'=>$synced_date))->update('bcwelfare_screening_report_col_2021-2022');
				}
			}
			else
			{
				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id))->set(array('doc_data' => $doc_data, 'history.last_stage.synced_date'=>$synced_date))->update('bcwelfare_screening_report_col_2021-2022');
			}
			
			
		}else
		{
			$full_doc = array('doc_data' => $doc_data, 'doc_properties' => $doc_properties, 'history' => $history);
			$query = $this->mongo_db->insert('bcwelfare_screening_report_col_2021-2022', $full_doc);

			//$this->update_screening_collection($unique_id, $synced_date, $school_name, $district);
		}
		
		}
		
		

		if(!empty($query))
		{
			return TRUE;
		}else
		{
			return FALSE;
		}
		

	}

	public function update_screening_collection($unique_id, $synced_date, $school_name, $district)
	{
		if ($synced_date) {
			$today_date = $synced_date;
		} else {
			$today_date = $this->today_date;
		}
		
		//Creating analytics For Year wise
		/*if ($screening_duration != "Yearly"){
			$get_year = explode(" ",$screening_duration);
			$year = $get_year[0];
		}
		else
		{
			$get_year = explode("-",$today_date);
			$year = $get_year[0];
		}*/
		
		//$dates = $this->get_start_end_date ( $today_date, $screening_duration ); // "Daily" ); //
		
		//log_message ( "debug", "datesssssssssssssssssssssssssssssssss--------------------" . print_r ( $dates, true ) );
		// ===================================stage1================================================
		//for($init_date = $dates ['today_date']; $init_date >= $dates ['end_date'];) {
			//log_message ( "debug", "iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii--------------------" . print_r ( $init_date, true ) );
			//log_message ( "debug", "eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee--------------------" . print_r ( $dates ['end_date'], true ) );
			$query = $this->mongo_db->where ( array (
					'pie_data.date' => $today_date
			) )->count ( "Medical_Evalution_Syn_collection_screening" );

			$requests_data_stage5 = "";
			
			//$end_date = date ( "Y-m-d H:i:s", strtotime ( $init_date . "-1 day" ) );
			
			//$temp_dates ['today_date'] = $init_date;
			//$temp_dates ['end_date'] = $end_date;
			
			
			// $temp_dates = $this->get_start_end_date ( $init_date, "Daily" );
			
			if ($query == 0) 
			{
				$pie_data = array (
						"pie_data" => array (
								'date' => $today_date
						) 
				);
				
				$requests_data_stage5 = $this->screening_pie_data_for_stage5 ($unique_id, $today_date );
				$pie_data ['pie_data'] ['stage5_pie_vales'] = $requests_data_stage5;
				
				$requests_data_stage4 = $this->screening_pie_data_for_stage4_new ( $requests_data_stage5 );
				$pie_data ['pie_data'] ['stage4_pie_vales'] = $requests_data_stage4;
				
				$requests_data_stage3 = $this->screening_pie_data_for_stage3_new ( $requests_data_stage4 );
				$pie_data ['pie_data'] ['stage3_pie_vales'] = $requests_data_stage3;
				
				$requests_data_stage2 = $this->screening_pie_data_for_stage2_new ( $requests_data_stage3 );
				$pie_data ['pie_data'] ['stage2_pie_vales'] = $requests_data_stage2;
				
				$requests_data_stage1 = $this->screening_pie_data_for_stage1_new ( $requests_data_stage2 );
				$pie_data ['pie_data'] ['stage1_pie_vales'] = $requests_data_stage1;
				
				$this->mongo_db->insert ( "Medical_Evalution_Syn_collection_screening", $pie_data ); 
			}
			else
			{
				$requests_data_stage5 = $this->screening_pie_data_for_stage5 ($unique_id, $today_date);
				//$pie_data ['pie_data'] ['stage5_pie_vales'] = $requests_data;
				$requests_data_stage4 = $this->screening_pie_data_for_stage4_new ( $requests_data_stage5 );
				//$pie_data ['pie_data'] ['stage4_pie_vales'] = $requests;				
				$requests_data_stage3 = $this->screening_pie_data_for_stage3_new ( $requests_data_stage4 );
				//$pie_data ['pie_data'] ['stage3_pie_vales'] = $requests;
				$requests_data_stage2 = $this->screening_pie_data_for_stage2_new ( $requests_data_stage3 );

				$requests_data_stage1 = $this->screening_pie_data_for_stage1_new ( $requests_data_stage2 );
				
				/*foreach ($requests_data_stage5 as $identifers => $school_names)
				{
					log_message('error','identifersidentifersidentifersidentifersidentifers===========9769'.print_r($identifers, true));

				}
				exit();*/
				foreach ($requests_data_stage5 as $identifers => $school_names)
				{
					$dist = strtolower($district);	
					log_message('error','identifersidentifersidentifersidentifersidentifers===========9769'.print_r($identifers, true));
					foreach ($school_names as $base64_school_name => $value)
					{
						if(!empty($value))
						{											
							if(base64_decode($base64_school_name) == strtolower($school_name))
							{	$array = array("pie_data.stage5_pie_vales.$identifers.$base64_school_name");								
								log_message('error','base64_school_namebase64_school_name===========9769'.print_r($base64_school_name, true));
								log_message('error','valuevaluevaluevaluevalue===========9769'.print_r($value[0], true));
								log_message('error','arrayyyyyyyyyyyyyyyyyyyy===========9769'.print_r($array, true));
								log_message('error','identifersidentifersidentifersidentifers===========979222'.print_r($identifers, true));
								$query = $this->mongo_db->where(array('pie_data.date' => $today_date))->push ("pie_data.stage5_pie_vales.$identifers.$base64_school_name", $value[0])->update('Medical_Evalution_Syn_collection_screening');
							}							
						}						
					}
					for ($i=0; $i<= 31 ; $i++) 
					{ 
						$count = $this->mongo_db->select(array("pie_data.stage4_pie_vales.$identifers.$dist"))->where(array("pie_data.date" => $today_date, "pie_data.stage4_pie_vales.$identifers.$dist.label" => strtoupper($school_name)))->count('Medical_Evalution_Syn_collection_screening');
						
						if($count == 0)
						{
							$documents = $this->mongo_db->select(array("pie_data.stage4_pie_vales.$identifers.$dist"))->where(array("pie_data.date" => $today_date))->get('Medical_Evalution_Syn_collection_screening');	
							
							$array_size = sizeof($documents[0]["pie_data"]["stage4_pie_vales"]["$identifers"]["$dist"]);
							$this->mongo_db->where(array("pie_data.date" => $today_date))->set(array("pie_data.stage4_pie_vales.$identifers.$dist.$array_size.label" => strtoupper($school_name), "pie_data.stage4_pie_vales.$identifers.$dist.$array_size.value" => 1))->update('Medical_Evalution_Syn_collection_screening');
						}else
						{
							$this->mongo_db->where(array("pie_data.date" => $today_date, "pie_data.stage4_pie_vales.$identifers.$dist.$i.label" => strtoupper($school_name)))->inc (array("pie_data.stage4_pie_vales.$identifers.$dist.$i.value" => 1 ))->update('Medical_Evalution_Syn_collection_screening');
						}

						$this->mongo_db->where(array("pie_data.date" => $today_date, "pie_data.stage3_pie_vales.$identifers.$i.label" => strtoupper($dist)))->inc(array("pie_data.stage3_pie_vales.$identifers.$i.value" => 1 ))->update('Medical_Evalution_Syn_collection_screening');	
						foreach ($requests_data_stage2 as $index => $abnormalities_details) 
						{
							foreach ($abnormalities_details as $abnormalities => $value) 
							{
								log_message('error','abnormalities=================9820'.print_r($abnormalities, true));
								log_message('error','values===================9821'.print_r($value, true));
								$this->mongo_db->where(array("pie_data.date" => $today_date, "pie_data.stage2_pie_vales.$i.$abnormalities.label" => $identifers,'pie_data.stage2_pie_vales.$i.$abnormalities.value' => array('$ne' => 0)))->inc(array("pie_data.stage2_pie_vales.$i.$abnormalities.value" => 1))->update('Medical_Evalution_Syn_collection_screening');			

								$this->mongo_db->where(array("pie_data.date" => $today_date, "pie_data.stage1_pie_vales.$i.label" => $abnormalities))->inc(array("pie_data.stage1_pie_vales.$i.value" => 1))->update('Medical_Evalution_Syn_collection_screening');	
							}
						}
							
					}
						
				}
			}			
			

			

			$unique = explode("_", $unique_id);
			$email_analytics = strtolower($unique[0].".".$unique[1]."."."hs#gmail.com_pie_analytics");

			$query_school = $this->mongo_db->where( array(
					'pie_data.date' => $today_date
			))->count($email_analytics);
			log_message('error', 'email_analyticsemail_analyticsemail_analytics=============ifff'.print_r($email_analytics, true));
			if($query_school == 0)
			{
				$pie_data_school = array (
							"pie_data" => array (
									'date' => $today_date
							) 
					);
				//
				$requests_data_stage3 = $this->screening_pie_data_for_school_stage3 ($unique_id, $today_date, $school_name );
				log_message('error', 'requests_data_stage3=============ifff'.print_r($requests_data_stage3, true));
				log_message('error', 'email_analyticsemail_analytics=============ifff'.print_r($email_analytics, true));
				$pie_data_school ['pie_data'] ['stage3_pie_values'] = $requests_data_stage3;
				
				$requests_data_stage2 = $this->screening_pie_data_for_school_stage2 ( $requests_data_stage3 );
				$pie_data_school ['pie_data'] ['stage2_pie_values'] = $requests_data_stage2;
				
				$requests_data_stage1 = $this->screening_pie_data_for_school_stage1 ( $requests_data_stage2 );
				$pie_data_school ['pie_data'] ['stage1_pie_values'] = $requests_data_stage1;

				$this->mongo_db->insert ( $email_analytics, $pie_data_school );
			}else
			{
				$requests_data_stage3 = $this->screening_pie_data_for_school_stage3 ($unique_id, $today_date, $school_name );
				$requests_data_stage2 = $this->screening_pie_data_for_school_stage2 ( $requests_data_stage3 );
				
				foreach ($requests_data_stage3 as $identifers => $value)
				{
					if(!empty($value))
					{
						log_message('error', 'identifersidentifersidentifersidentifers============='.print_r($identifers, true));
						log_message('error', 'vaaaaaaaaaaaaa============='.print_r($value[0], true));
						$this->mongo_db->where(array('pie_data.date' => $today_date))->push ("pie_data.stage3_pie_values.$identifers", $value[0])->update($email_analytics);
						foreach ($requests_data_stage2 as $index => $abnormalities_details) 
						{
							foreach ($abnormalities_details as $abnormalities => $value) 
							{
								for ($i=0; $i<= 31 ; $i++) 
								{ 
									$this->mongo_db->where(array("pie_data.date" => $today_date, "pie_data.stage2_pie_values.$i.$abnormalities.label" => $identifers))->inc(array("pie_data.stage2_pie_values.$i.$abnormalities.value" => 1))->update($email_analytics);			

									$this->mongo_db->where(array("pie_data.date" => $today_date, "pie_data.stage1_pie_values.$i.label" => $abnormalities))->inc(array("pie_data.stage1_pie_values.$i.value" => 1))->update($email_analytics);	
								}
							}
						}
					}
					/*foreach ($school_names as $base64_school_name => $value)
					{
						if(!empty($value))
						{			
							$dist = strtolower($district);					
							if(base64_decode($base64_school_name) == strtolower($school_name))
							{									
								$this->mongo_db->where(array('pie_data.date' => $today_date))->push ("pie_data.stage3_pie_values.$identifers", $value[0])->update($email_analytics);
								foreach ($requests_data_stage2 as $index => $abnormalities_details) 
								{
									foreach ($abnormalities_details as $abnormalities => $value) 
									{
										for ($i=0; $i<= 31 ; $i++) 
										{ 
											$this->mongo_db->where(array("pie_data.date" => $today_date, "pie_data.stage2_pie_vales.$i.$abnormalities.label" => $identifers))->inc(array("pie_data.stage2_pie_vales.$i.$abnormalities.value" => 1))->update($email_analytics);			

											$this->mongo_db->where(array("pie_data.date" => $today_date, "pie_data.stage1_pie_vales.$i.label" => $abnormalities))->inc(array("pie_data.stage1_pie_vales.$i.value" => 1))->update($email_analytics);	
										}
									}
								}
																
							}							
						}						
					}*/
				}
			}			
	}

	public function get_all_schools() {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->get ( $this->collections ['panacea_schools'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		foreach ( $query as $schools => $school ) {
			$dt_name = $this->mongo_db->where ( '_id', new MongoId ( $school ['dt_name'] ) )->get ( 'panacea_district' );
			if (isset ( $school ['dt_name'] )) {
				$query [$schools] ['dt_name'] = $dt_name [0] ['dt_name'];
			} else {
				$query [$schools] ['dt_name'] = "No state selected";
			}
		}
		return $query;
	}

	public function get_schools_with_district_name($dt_names){

		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->where('district_name', $dt_names)->get ( 'panacea_schools_bkp_copy' );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		foreach ( $query as $schools => $school ) {
			if (isset ( $school ['district_name'] )) {
				$query [$schools] ['dt_name'] = $school['district_name'];
			} else {
				$query [$schools] ['dt_name'] = "No state selected";
			}
		}
		return $query;
	}
	private function screening_pie_data_for_stage5($unique_id,$dates) 
	{
		ini_set ( 'max_execution_time', 0 );
		ini_set('memory_limit','10G');
		
		$school_list = $this->get_all_schools ();
		// //log_message('debug','schhhhhhhhhhhhhhhhhhhhhhhhhhoooooooooooooooooooooooooooooolllllllll'.print_r($school_list,true));
		/*$count = $this->mongo_db->count ( $this->screening_app_col );
		$add_count = $count+100;
		if ($count < $add_count) {
			$per_page = $count;
			$loop = 2; // $count / $per_page;
		} else {
			$per_page = 5000;
			$loop = $count / $per_page;
		}*/
		// ======================================================stage 3 =================================================
		
		$requests = [ ];
		$and_merged_array = array();
		

		$merged_array = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$in' => array (
								"Over Weight" 
						) 
				) 
		);

		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);
		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		log_message('error', 'unique_id=====================9849'.print_r($unique_id, true));
		
		array_push($and_merged_array, $merged_array);
		array_push($and_merged_array, $unique_id_array);
		array_push($and_merged_array, $history_synced);
		
		$result = [ ];
		
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array(
								'$and' => $and_merged_array
						)  
					)
					
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => 'Medical_Evalution_Syn_collection',
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$stage5_result = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
			$request ["Over Weight"] [base64_encode( strtolower ( $school_name ['school_name']) )] = (isset($stage5_result) && !empty($stage5_result)) ? $stage5_result : [];
		}

		//====================================================
		$and_merged_array = array();
		$or_merged_array = array();
		
		$merged_array = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$in' => array (
								"Under Weight" 
						) 
				) 
		);

		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		log_message('error', 'unique_id_arrayunique_id_array=====================9849'.print_r($unique_id_array, true));
		

		array_push($and_merged_array, $merged_array);
		array_push($and_merged_array, $unique_id_array);
		array_push($and_merged_array, $history_synced);
		log_message('error', 'unique_id_arrayunique_id_arrayand_merged_array=====================9849'.print_r($and_merged_array, true));
		
		$result = [ ];
		
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array(
								'$and' => $and_merged_array
						)  
					)
					
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => 'Medical_Evalution_Syn_collection',
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			// //log_message('debug','schhhhhhhhhhhhhhhhhhhhhhhhhhoooooooooooooooooooooooooooooolllllllll'.print_r($school_name,true));
			$stage5_result = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
			$request ["Under Weight"] [base64_encode( strtolower ( $school_name ['school_name']) )] = (isset($stage5_result) && !empty($stage5_result)) ? $stage5_result : [];
		}
		//==================================Under Weight================
		
		// ========================================================================================

		$and_merged_array = array();
		$merged_array = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$in' => array (
								"Obese" 
						) 
				) 
		);
		
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);
		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));

		array_push($and_merged_array, $merged_array);
		array_push($and_merged_array, $unique_id_array);
		array_push($and_merged_array, $history_synced);

		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array(
								'$and' => $and_merged_array
						)  
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => "Medical_Evalution_Syn_collection",
					'pipeline' => $pipeline 
			) );
			//echo print_r($response,true);
			//exit();
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$stage5_result = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
			$request ["Obese"] [base64_encode( strtolower ( $school_name ['school_name']) )] = (isset($stage5_result) && !empty($stage5_result)) ? $stage5_result : [];
		}
		
		// ========================================================================================
		
		$and_merged_array = array ();
		
		$general_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$ne' => '' 
				) 
		);
		$general_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$ne' => ' ' 
				) 
		);
		$general_arr = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$ne' => [ ] 
				) 
		);
		
		$not_skin = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$nin' => array (
								"Skin" 
						) 
				) 
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$exists' => true 
				) 
		);
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $and_merged_array, $general_str_empty );
		array_push ( $and_merged_array, $general_str_space );
		array_push ( $and_merged_array, $general_arr );
		array_push ( $and_merged_array, $not_skin );
		array_push ( $and_merged_array, $page4_exists );
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		foreach ( $school_list as $school_name ) {
			$stage5_result = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
			$request ["General"] [base64_encode( strtolower ( $school_name ['school_name']) )] = (isset($stage5_result) && !empty($stage5_result)) ? $stage5_result : [];
		}
		
		$and_merged_array = array ();
		
		$merged_array = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$in' => array (
								"Skin" 
						) 
				) 
		);

		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));

		array_push($and_merged_array, $merged_array);
		array_push($and_merged_array, $unique_id_array);
		array_push($and_merged_array, $history_synced);

		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array(
								'$and' => $and_merged_array
						)  
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		foreach ( $school_list as $school_name ) {
			$stage5_result = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
			$request ["Skin"] [base64_encode( strtolower ( $school_name ['school_name']) )] = (isset($stage5_result) && !empty($stage5_result)) ? $stage5_result : [];
		}
		
		//===============================================================================
		
				//==============================================================================
		$and_merged_array = array ();
		
		$description_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Description" => array (
						'$ne' => ''
				)
		);
		$description_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Description" => array (
						'$ne' => ' '
				)
		);
		
		$advice_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Advice" => array (
						'$ne' => ''
				)
		);
		$advice_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Advice" => array (
						'$ne' => ' '
				)
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$exists' => true
				)
		);

		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $and_merged_array, $description_str_empty );
		array_push ( $and_merged_array, $description_str_space );
		array_push ( $and_merged_array, $advice_str_empty );
		array_push ( $and_merged_array, $advice_str_space );
		array_push ( $and_merged_array, $page4_exists );
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		$result = [ ];
			
			$pipeline = [
			array (
					'$match' => array (
							'$and' => $and_merged_array
					)
			),
			array (
					'$project' => array (
							"doc_data.widget_data" => true,
							"history" => true
					)
			)
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
		
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
						
					if ($time <= $dates ) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
				
			$result = array_merge ( $result, $temp_result );
		
		foreach ( $school_list as $school_name ) {
			$stage5_result = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
			$request ["Others(Description/Advice)"] [base64_encode( strtolower ( $school_name ['school_name']) )] = (isset($stage5_result) && !empty($stage5_result)) ? $stage5_result : [];
		}
		
		// ==============================================================================
		
		$and_merged_array = array ();
		$ortho = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		
		$ortho_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$ne' => '' 
				) 
		);
		$ortho_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$ne' => ' ' 
				) 
		);
		$ortho_arr = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$ne' => [ ] 
				) 
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$exists' => true 
				) 
		);
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $and_merged_array, $ortho );
		array_push ( $and_merged_array, $ortho_str_empty );
		array_push ( $and_merged_array, $ortho_str_space );
		array_push ( $and_merged_array, $ortho_arr );
		array_push ( $and_merged_array, $page4_exists );
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
			log_message('error','result======================10435'.print_r($result, true));
		
		foreach ( $school_list as $school_name ) {
			$stage5_result = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
			$request ["Ortho"] [base64_encode( strtolower ( $school_name ['school_name']) )] = (isset($stage5_result) && !empty($stage5_result)) ? $stage5_result : [];
		}
		
		// ===========================================================================
		
		$and_merged_array = array ();
		
		$postural = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		$postural_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$ne' => '' 
				) 
		);
		$postural_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$ne' => ' ' 
				) 
		);
		$postural_arr = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$ne' => [ ] 
				) 
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$exists' => true 
				) 
		);

		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $and_merged_array, $postural );
		array_push ( $and_merged_array, $postural_str_empty );
		array_push ( $and_merged_array, $postural_str_space );
		array_push ( $and_merged_array, $postural_arr );
		array_push ( $and_merged_array, $page4_exists );
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$stage5_result = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
			$request ["Postural"] [base64_encode( strtolower ( $school_name ['school_name']) )] = (isset($stage5_result) && !empty($stage5_result)) ? $stage5_result : [];
		}
		
		// ========================================================================
		
		$and_merged_array = array ();
		
		$birth_defect = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		$page5_exists = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$exists' => true 
				) 
		);
		
		$birth_defect_str_empty = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$ne' => '' 
				) 
		);
		$birth_defect_str_space = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$ne' => ' ' 
				) 
		);
		$birth_defect_arr = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$ne' => [ ] 
				) 
		);

		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $and_merged_array, $birth_defect_str_empty );
		array_push ( $and_merged_array, $birth_defect_str_space );
		array_push ( $and_merged_array, $birth_defect_arr );
		
		array_push ( $and_merged_array, $birth_defect );
		array_push ( $and_merged_array, $page5_exists );
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ['Defects at Birth'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// ==============================================================================
		
		// $and_merged_array = array ();
		
		// $deficencies = array (
				// "doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						// '$not' => array (
								// '$size' => 0 
						// ) 
				// ) 
		// );
		// $page5_exists = array (
				// "doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						// '$exists' => true 
				// ) 
		// );
		
		// $deficencies_str_empty = array (
				// "doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						// '$ne' => '' 
				// ) 
		// );
		// $deficencies_str_space = array (
				// "doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						// '$ne' => ' ' 
				// ) 
		// );
		// $deficencies_arr = array (
				// "doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						// '$ne' => [ ] 
				// ) 
		// );
		
		// array_push ( $and_merged_array, $deficencies_str_empty );
		// array_push ( $and_merged_array, $deficencies_str_space );
		// array_push ( $and_merged_array, $deficencies_arr );
		
		// array_push ( $and_merged_array, $deficencies );
		// array_push ( $and_merged_array, $page5_exists );
		
		// $result = [ ];
		// for($page = 1; $page < $loop; $page ++) {
			// $offset = $per_page * ($page);
			// $pipeline = [ 
					// array (
							// '$match' => array (
									// '$and' => $and_merged_array 
							// ) 
					// ),
					// array (
							// '$project' => array (
									// "doc_data.widget_data" => true,
									// "history" => true 
							// ) 
					// ),
					// array (
							// '$limit' => $offset 
					// ),
					// array (
							// '$skip' => $offset - $per_page 
					// ) 
			// ];
			// $response = $this->mongo_db->command ( array (
					// 'aggregate' => $this->screening_app_col,
					// 'pipeline' => $pipeline 
			// ) );
			
			// $temp_result = [ ];
			// foreach ( $response ['result'] as $doc ) {
				// foreach ( $doc ['history'] as $date ) {
					// $time = $date ['time'];
					// if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						// array_push ( $temp_result, $doc );
						// break;
					// }
				// }
			// }
			// $result = array_merge ( $result, $temp_result );
		// }
		
		// foreach ( $school_list as $school_name ) {
			// $request ['Deficencies'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		// }
		
		//======================Deficencies divided into further parts=================================
		$and_merged_array = array();
		$merged_array = array (
			"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
					'$in' => array (
							"Anaemia" 
					) 
			) 
		);

		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));

		array_push($and_merged_array, $merged_array);
		array_push($and_merged_array, $unique_id_array);
		array_push($and_merged_array, $history_synced);
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array(
								'$and' => $and_merged_array
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ["Anaemia"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		$and_merged_array = array();
		$merged_array = array (
			"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
					'$in' => array (
							"Vitamin Deficiency - Bcomplex" 
					) 
			) 
		);

		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));

		array_push($and_merged_array, $merged_array);
		array_push($and_merged_array, $unique_id_array);
		array_push($and_merged_array, $history_synced);
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array(
								'$and' => $and_merged_array
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
	
		
		foreach ( $school_list as $school_name ) {
			$request ["Vitamin Deficiency - Bcomplex"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		$and_merged_array = array();

		$merged_array = array (
			"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
					'$in' => array (
							"Vitamin A Deficiency" 
					) 
			) 
		);

		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));

		array_push($and_merged_array, $merged_array);
		array_push($and_merged_array, $unique_id_array);
		array_push($and_merged_array, $history_synced);
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array(
								'$and' => $and_merged_array
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ["Vitamin A Deficiency"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		$and_merged_array = array();
		$merged_array = array (
			"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
					'$in' => array (
							"Vitamin Deficiency - Bcomplex" 
					) 
			) 
		);

		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));

		array_push($and_merged_array, $merged_array);
		array_push($and_merged_array, $unique_id_array);
		array_push($and_merged_array, $history_synced);
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array(
								'$and' => $and_merged_array
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		foreach ( $school_list as $school_name ) {
			$request ["Vitamin Deficiency - Bcomplex"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		$and_merged_array = array();
		$merged_array = array (
			"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
					'$in' => array (
							"Vitamin D Deficiency" 
					) 
			) 
		);
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));

		array_push($and_merged_array, $merged_array);
		array_push($and_merged_array, $unique_id_array);
		array_push($and_merged_array, $history_synced);
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array(
								'$and' => $and_merged_array
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ["Vitamin D Deficiency"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		$and_merged_array = array();
				$merged_array = array (
			"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
					'$in' => array (
							"Vitamin Deficiency - Bcomplex" 
					) 
			) 
		);

		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));

		array_push($and_merged_array, $merged_array);
		array_push($and_merged_array, $unique_id_array);
		array_push($and_merged_array, $history_synced);
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array(
								'$and' => $and_merged_array
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ["Vitamin Deficiency - Bcomplex"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		$and_merged_array = array();
		$merged_array = array (
			"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
					'$in' => array (
							"SAM/stunting" 
					) 
			) 
		);

		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));

		array_push($and_merged_array, $merged_array);
		array_push($and_merged_array, $unique_id_array);
		array_push($and_merged_array, $history_synced);
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array(
								'$and' => $and_merged_array
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ["SAM/stunting"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		$and_merged_array = array();
				$merged_array = array (
			"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
					'$in' => array (
							"Vitamin Deficiency - Bcomplex" 
					) 
			) 
		);
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));

		array_push($and_merged_array, $merged_array);
		array_push($and_merged_array, $unique_id_array);
		array_push($and_merged_array, $history_synced);
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array(
								'$and' => $and_merged_array
							)
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ["Vitamin Deficiency - Bcomplex"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		$and_merged_array = array();
		$merged_array = array (
			"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
					'$in' => array (
							"Goiter" 
					) 
			) 
		);
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));

		array_push($and_merged_array, $merged_array);
		array_push($and_merged_array, $unique_id_array);
		array_push($and_merged_array, $history_synced);
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array(
								'$and' => $and_merged_array
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ["Goiter"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		//======================Deficencies divided into further parts=================================
		
		// ===========================================================================================
		
		$and_merged_array = array ();
		
		$childhood_diseases = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		$page5_exists = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$exists' => true 
				) 
		);
		
		$childhood_diseases_str_empty = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$ne' => '' 
				) 
		);
		$childhood_diseases_str_space = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$ne' => ' ' 
				) 
		);
		$childhood_diseases_arr = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$ne' => [ ] 
				) 
		);
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $and_merged_array, $childhood_diseases_str_empty );
		array_push ( $and_merged_array, $childhood_diseases_str_space );
		array_push ( $and_merged_array, $childhood_diseases_arr );
		
		array_push ( $and_merged_array, $childhood_diseases );
		array_push ( $and_merged_array, $page5_exists );
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ['Childhood Diseases'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// ===================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$without_glass_left = array (
				"doc_data.widget_data.page6.Without Glasses.Left" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		$without_glass_right = array (
				"doc_data.widget_data.page6.Without Glasses.Right" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		
		$page6_exists = array (
				"doc_data.widget_data.page6.Without Glasses" => array (
						'$exists' => true 
				) 
		);

		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $or_merged_array, $without_glass_left );
		array_push ( $or_merged_array, $without_glass_right );
		array_push ( $and_merged_array, $page6_exists );
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ['Without Glasses'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// =============================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$with_glass_left = array (
				"doc_data.widget_data.page6.With Glasses.Left" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		$with_glass_right = array (
				"doc_data.widget_data.page6.With Glasses.Right" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		
		$page6_exists = array (
				"doc_data.widget_data.page6.With Glasses" => array (
						'$exists' => true 
				) 
		);

		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $or_merged_array, $with_glass_left );
		array_push ( $or_merged_array, $with_glass_right );
		array_push ( $and_merged_array, $page6_exists );
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ['With Glasses'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// ===================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$color_right = array (
				"doc_data.widget_data.page7.Colour Blindness.Right" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$color_left = array (
				"doc_data.widget_data.page7.Colour Blindness.Left" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness" => array (
						'$exists' => true 
				) 
		);

		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $or_merged_array, $color_right );
		array_push ( $or_merged_array, $color_left );
		array_push ( $and_merged_array, $page7_exists );
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ['Colour Blindness'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		// ===========================================================================
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$eye_lids = array (
				"doc_data.widget_data.page7.Colour Blindness.Eye Lids" => array (
						'$nin' => array (
								"Normal",
								"",
								" " 
						) 
				) 
		);		
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness.Eye Lids" => array (
						'$exists' => true 
				) 
		);

		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		
		array_push ( $or_merged_array, $eye_lids );
		array_push ( $and_merged_array, $page7_exists );
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		

		foreach ( $school_list as $school_name ) {
			$request ['Eye Lids'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		//============================================
		// ===================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$conjunctiva = array (
				"doc_data.widget_data.page7.Colour Blindness.Conjunctiva" => array (
						'$nin' => array (
								"Normal",
								"",
								" " 
						) 
				) 
		);		
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness.Conjunctiva" => array (
						'$exists' => true 
				) 
		);

		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));

		array_push ( $or_merged_array, $conjunctiva );
		array_push ( $and_merged_array, $page7_exists );
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ['Conjunctiva'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		
		// ===================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$cornea = array (
				"doc_data.widget_data.page7.Colour Blindness.Cornea" => array (
						'$nin' => array (
								"Normal",
								"",
								" " 
						) 
				) 
		);		
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness.Cornea" => array (
						'$exists' => true 
				) 
		);

		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		
		array_push ( $or_merged_array, $cornea );
		array_push ( $and_merged_array, $page7_exists );
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
	
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ['Cornea'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
	
		// ===================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$pupil = array (
				"doc_data.widget_data.page7.Colour Blindness.Pupil" => array (
						'$nin' => array (
								"Normal",
								"",
								" " 
						) 
				) 
		);		
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness.Pupil" => array (
						'$exists' => true 
				) 
		);
		
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));

		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		array_push ( $or_merged_array, $pupil );
		array_push ( $and_merged_array, $page7_exists );
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ['Pupil'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
	
		// ===================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$wearing_spectacles = array (
				"doc_data.widget_data.page7.Colour Blindness.Wearing Spectacles" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);		
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness.Wearing Spectacles" => array (
						'$exists' => true 
				) 
		);

		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );	
		
		array_push ( $or_merged_array, $wearing_spectacles );
		array_push ( $and_merged_array, $page7_exists );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ['Wearing Spectacles'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		
		// ===================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$subjective_refraction = array (
				"doc_data.widget_data.page7.Colour Blindness.Subjective Refraction" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);		
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness.Subjective Refraction" => array (
						'$exists' => true 
				) 
		);
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );	
		
		array_push ( $or_merged_array, $subjective_refraction );
		array_push ( $and_merged_array, $page7_exists );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ['Subjective Refraction'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		//===========================================================
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$audi_right = array (
				"doc_data.widget_data.page8. Auditory Screening.Right" => array (
						'$nin' => array (
								"Pass",
								"",
								" " 
						) 
				) 
		);
		$page8_exists = array (
				"doc_data.widget_data.page8. Auditory Screening" => array (
						'$exists' => true 
				) 
		);
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		array_push ( $or_merged_array, $audi_right );
		
		array_push ( $and_merged_array, $page8_exists );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ['Right Ear'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// ==============================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$audi_left = array (
				"doc_data.widget_data.page8. Auditory Screening.Left" => array (
						'$nin' => array (
								"Pass",
								"",
								" " 
						) 
				) 
		);
		$page8_exists = array (
				"doc_data.widget_data.page8. Auditory Screening" => array (
						'$exists' => true 
				) 
		);
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		array_push ( $or_merged_array, $audi_left );
		array_push ( $and_merged_array, $page8_exists );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ['Left Ear'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		// ====================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$speech = array (
				"doc_data.widget_data.page8. Auditory Screening.Speech Screening" => array (
						'$nin' => array (
								"Normal",
								"",
								" ",
								[ ] 
						) 
				) 
		);
		
		$page8_exists = array (
				"doc_data.widget_data.page8. Auditory Screening" => array (
						'$exists' => true 
				) 
		);
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		array_push ( $or_merged_array, $speech );
		
		array_push ( $and_merged_array, $page8_exists );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ['Speech Screening'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// =============================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$oral_hygiene = array (
				"doc_data.widget_data.page9.Dental Check-up.Oral Hygiene" => array (
						'$nin' => array (
								"Good",
								"Poor",
								"",
								" " 
						) 
				) 
		);
		
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		array_push ( $or_merged_array, $oral_hygiene );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ["Oral Hygiene - Fair"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$oral_hygiene = array (
				"doc_data.widget_data.page9.Dental Check-up.Oral Hygiene" => array (
						'$nin' => array (
								"Good",
								"Fair",
								"",
								" " 
						) 
				) 
		);
		
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		array_push ( $or_merged_array, $oral_hygiene );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ["Oral Hygiene - Poor"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// ==============================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$carious_teeth = array (
				"doc_data.widget_data.page9.Dental Check-up.Carious Teeth" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		array_push ( $or_merged_array, $carious_teeth );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ["Carious Teeth"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// ==============================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$flourosis = array (
				"doc_data.widget_data.page9.Dental Check-up.Flourosis" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		array_push ( $or_merged_array, $flourosis );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ["Flourosis"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// ==============================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$orthodontic = array (
				"doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		array_push ( $or_merged_array, $orthodontic );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ["Orthodontic Treatment"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// ===========================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$indication = array (
				"doc_data.widget_data.page9.Dental Check-up.Indication for extraction" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		array_push ( $or_merged_array, $indication );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ["Indication for extraction"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
//====================================================================
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$indication = array (
				"doc_data.widget_data.page9.Dental Check-up.Root Canal Treatment" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up.Root Canal Treatment" => array (
						'$exists' => true 
				) 
		);
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		array_push ( $or_merged_array, $indication );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ["Root Canal Treatment"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
//===============================================================
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$indication = array (
				"doc_data.widget_data.page9.Dental Check-up.CROWNS" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up.CROWNS" => array (
						'$exists' => true 
				) 
		);
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		array_push ( $or_merged_array, $indication );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ["CROWNS"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		//===========================================================
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$indication = array (
				"doc_data.widget_data.page9.Dental Check-up.Fixed Partial Denture" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up.Fixed Partial Denture" => array (
						'$exists' => true 
				) 
		);
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		array_push ( $or_merged_array, $indication );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ["Fixed Partial Denture"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		//=======================================================
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$indication = array (
				"doc_data.widget_data.page9.Dental Check-up.Curettage" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up.Curettage" => array (
						'$exists' => true 
				) 
		);
		$unique_id_array = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id);

		$history_synced = array('history.last_stage.synced_date' => array('$exists' => TRUE));
		
		array_push ( $and_merged_array, $unique_id_array );
		array_push ( $and_merged_array, $history_synced );
		
		array_push ( $or_merged_array, $indication );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		foreach ( $school_list as $school_name ) {
			$request ["Curettage"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		// ======================================================end of stage 3 ===========================================
		return $request;
	}
	public function screening_pie_data_for_stage4_new($requests) {

		$school_list = $this->get_all_schools ();
		$school_in_dist = [ ];
		
		foreach ( $school_list as $school ) {
			$school_in_dist [base64_encode(strtolower ( $school ['school_name'] ))] = strtolower ( $school ['dt_name'] );
		}
		
		$request_stage4 = [ ];
		//log_message("debug","in 3333333333333333333333333333333333333333333333333=======".print_r($school_in_dist,true));
		foreach ( $requests as $screening_index => $screening_array ) {
			$request_stage4 [$screening_index] = [ ];
			log_message("error","in 11111111111111111111111111111111111111111111111111111111=======".print_r($screening_array,true));
			foreach ( $screening_array as $school_name => $inner_data ) {
				log_message("error","in 222222222222222222222222222222222222222222222222222222=======".print_r($inner_data,true));
				if (! isset ( $request_stage4 [$screening_index] [$school_in_dist [$school_name]] )) {
					$request_stage4 [$screening_index] [$school_in_dist [$school_name]] = [];
				}
				
				$school_data = [ ];
				if (count ( $inner_data ) > 0) {
					if (! isset ( $request_stage4 [$screening_index] [$school_in_dist [$school_name]] )) {
						$request_stage4 [$screening_index] [$school_in_dist [$school_name]] = [ ];
					}
					$school_data ['label'] = strtoupper ( base64_decode($school_name) );
					$school_data ['value'] = count ( $inner_data );
					array_push ( $request_stage4 [$screening_index] [$school_in_dist [$school_name]], $school_data );
					// //log_message("debug","in ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc=======".print_r($request_stage4,true));
				}
			}
		}
		log_message("error","in request_stage4request_stage4request_stage4request_stage4request_stage4=======12852".print_r($request_stage4,true));
		return $request_stage4;
	}

	public function screening_pie_data_for_stage3_new($requests) {
		$request_stage3 = [ ];
		foreach ( $requests as $request => $request_data ) {
			$request_stage3 [$request] = [ ];
			foreach ( $request_data as $dist_name => $dist_array ) {
				$dist_data ['label'] = strtoupper ( $dist_name );
				if (is_array ( $dist_array )) {
					$value_count = 0;
					foreach ( $dist_array as $school_array ) {
						$value_count = $value_count + $school_array ['value'];
					}
					$dist_data ['value'] = $value_count;
				} else {
					$dist_data ['value'] = count ( $dist_array );
				}
				
				array_push ( $request_stage3 [$request], $dist_data );
			}
		}
		return $request_stage3;
	}

	public function screening_pie_data_for_stage2_new($requests) {
		$request_stage2 = [ ];
		
		$stage_array = [ ];
		$stage_array ["Physical Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Over Weight"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Physical Abnormalities"] ["label"] = "Over Weight";
		$stage_array ["Physical Abnormalities"] ['value'] = $total_count;
		
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["Physical Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Under Weight"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Physical Abnormalities"] ["label"] = "Under Weight";
		$stage_array ["Physical Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// =====
		$stage_array = [ ];
		$stage_array ["Physical Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Obese"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Physical Abnormalities"] ["label"] = "Obese";
		$stage_array ["Physical Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// =====
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["General"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "General";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Skin"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Skin";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// ===
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Others(Description/Advice)"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Others(Description/Advice)";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// =====
		// =====
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Ortho"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Ortho";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Postural"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Postural";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Defects at Birth"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Defects at Birth";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		// $stage_array = [ ];
		// $stage_array ["General Abnormalities"] = [ ];
		
		// $request = [ ];
		// foreach ( $requests ["Deficencies"] as $doc ) {
			// if (isset ( $request [$doc ['label']] )) {
				// $request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			// } else {
				// $request [$doc ['label']] = $doc ['value'];
			// }
		// }
		// $total_count = 0;
		// foreach ( $request as $dist => $count ) {
			// $total_count = $total_count + $count;
		// }
		// $stage_array ["General Abnormalities"] ["label"] = "Deficencies";
		// $stage_array ["General Abnormalities"] ['value'] = $total_count;
		// array_push ( $request_stage2, $stage_array );
		
		//===
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Anaemia"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Anaemia";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Vitamin Deficiency - Bcomplex"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Vitamin Deficiency - Bcomplex";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Vitamin A Deficiency"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Vitamin A Deficiency";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Vitamin D Deficiency"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Vitamin D Deficiency";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["SAM/stunting"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "SAM/stunting";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Goiter"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Goiter";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Childhood Diseases"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Childhood Diseases";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Without Glasses"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Eye Abnormalities"] ["label"] = "Without Glasses";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["With Glasses"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Eye Abnormalities"] ["label"] = "With Glasses";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Colour Blindness"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Eye Abnormalities"] ["label"] = "Colour Blindness";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$request = [ ];
		
		foreach ( $requests ["Eye Lids"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Eye Abnormalities"] ["label"] = "Eye Lids";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Conjunctiva"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Eye Abnormalities"] ["label"] = "Conjunctiva";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Cornea"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Eye Abnormalities"] ["label"] = "Cornea";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Pupil"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Eye Abnormalities"] ["label"] = "Pupil";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Wearing Spectacles"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Eye Abnormalities"] ["label"] = "Wearing Spectacles";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Subjective Refraction"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Eye Abnormalities"] ["label"] = "Subjective Refraction";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Auditory Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Right Ear"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Auditory Abnormalities"] ["label"] = "Right Ear";
		$stage_array ["Auditory Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Auditory Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Left Ear"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Auditory Abnormalities"] ["label"] = "Left Ear";
		$stage_array ["Auditory Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Auditory Abnormalities"] = [ ];
		
		$stage2_data = [ ];
		$stage2_data ["label"] = "Speech Screening";
		
		$request = [ ];
		foreach ( $requests ["Speech Screening"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Auditory Abnormalities"] ["label"] = "Speech Screening";
		$stage_array ["Auditory Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Oral Hygiene - Fair"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Dental Abnormalities"] ["label"] = "Oral Hygiene - Fair";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Oral Hygiene - Poor"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Dental Abnormalities"] ["label"] = "Oral Hygiene - Poor";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Carious Teeth"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Dental Abnormalities"] ["label"] = "Carious Teeth";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$stage2_data = [ ];
		$stage2_data ["label"] = "Flourosis";
		
		$request = [ ];
		foreach ( $requests ["Flourosis"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Dental Abnormalities"] ["label"] = "Flourosis";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Orthodontic Treatment"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Dental Abnormalities"] ["label"] = "Orthodontic Treatment";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Indication for extraction"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Dental Abnormalities"] ["label"] = "Indication for extraction";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Root Canal Treatment"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Dental Abnormalities"] ["label"] = "Root Canal Treatment";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["CROWNS"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Dental Abnormalities"] ["label"] = "CROWNS";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Fixed Partial Denture"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Dental Abnormalities"] ["label"] = "Fixed Partial Denture";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Curettage"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Dental Abnormalities"] ["label"] = "Curettage";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		
		return $request_stage2;
	}
	public function screening_pie_data_for_stage1_new($requests) {
		$request_stage1 = [ ];
		$stage_data = [ ];
		$stage_data ['label'] = "Physical Abnormalities";
		$stage_data ['value'] = $requests [0] ["Physical Abnormalities"] ['value'] + $requests [1] ["Physical Abnormalities"] ['value'] + $requests [2] ["Physical Abnormalities"] ['value'];
		array_push ( $request_stage1, $stage_data );
		
		$stage_data = [ ];
		$stage_data ['label'] = "General Abnormalities";
		$stage_data ['value'] = $requests [3] ["General Abnormalities"] ['value'] + $requests [4] ["General Abnormalities"] ['value'] + $requests [5] ["General Abnormalities"] ['value'] + $requests [6] ["General Abnormalities"] ['value'] + $requests [7] ["General Abnormalities"] ['value'] + $requests [8] ["General Abnormalities"] ['value'] + $requests [9] ["General Abnormalities"] ['value'] + $requests [10] ["General Abnormalities"] ['value'] + $requests [11] ["General Abnormalities"] ['value'] + $requests [12] ["General Abnormalities"] ['value'] + $requests [13] ["General Abnormalities"] ['value'] + $requests [14] ["General Abnormalities"] ['value'] + $requests [15] ["General Abnormalities"] ['value'];
		array_push ( $request_stage1, $stage_data );
		
		$stage_data = [ ];
		$stage_data ['label'] = "Eye Abnormalities";
		$stage_data ['value'] = $requests [16] ["Eye Abnormalities"] ['value'] + $requests [17] ["Eye Abnormalities"] ['value'] + $requests [18] ["Eye Abnormalities"] ['value'] + $requests [19] ["Eye Abnormalities"] ['value'] + $requests [20] ["Eye Abnormalities"] ['value'] + $requests [21] ["Eye Abnormalities"] ['value'] + $requests [22] ["Eye Abnormalities"] ['value'] + $requests [23] ["Eye Abnormalities"] ['value'] + $requests [24] ["Eye Abnormalities"] ['value'];
		array_push ( $request_stage1, $stage_data );
		
		$stage_data = [ ];
		$stage_data ['label'] = "Auditory Abnormalities";
		$stage_data ['value'] = $requests [25] ["Auditory Abnormalities"] ['value'] + $requests [26] ["Auditory Abnormalities"] ['value'] + $requests [27] ["Auditory Abnormalities"] ['value'];
		array_push ( $request_stage1, $stage_data );
		
		$stage_data = [ ];
		$stage_data ['label'] = "Dental Abnormalities";
		$stage_data ['value'] = $requests [28] ["Dental Abnormalities"] ['value'] + $requests [29] ["Dental Abnormalities"] ['value'] + $requests [30] ["Dental Abnormalities"] ['value'] + $requests [31] ["Dental Abnormalities"] ['value'] + $requests [32] ["Dental Abnormalities"] ['value'] + $requests [33] ["Dental Abnormalities"] ['value'] + $requests [34] ["Dental Abnormalities"] ['value'] + $requests [35] ["Dental Abnormalities"] ['value'] + $requests [36] ["Dental Abnormalities"] ['value'] + $requests [37] ["Dental Abnormalities"] ['value'];
		array_push ( $request_stage1, $stage_data );
		
		return $request_stage1;
	}

	public function get_drilling_screenings_students_prepare_pie_array($query, $school_name) {
		$search_result = [ ];
		$count = 0;
		if ($query) {
			foreach ( $query as $doc ) {
				if (isset ( $doc ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['School Name'] )) {
					if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['School Name'] ) == $school_name) {
						array_push ( $search_result, $doc ['_id']->{'$id'} );
					}
				}
			}
			log_message('error','search_resultsearch_result========================100006'.print_r($search_result, true));
			return $search_result;
		}
	}


	/**
	 * Helper: Generate screening pie analytics
	 *
	 *
	 * @param  array  $dates  		Dates ( Start date & end date )
	 * @param  string $school_name  Name of the school ( logged in school )
	 *
	 * @return array
	 */
	 
	private function screening_pie_data_for_school_stage3($unique_id, $dates, $school_name) 
	{
		ini_set ( 'max_execution_time', 0 );
		ini_set ( 'memory_limit', '2G' );
		
		$request = array();
		
		/*$count = $this->mongo_db->count ( $this->screening_app_col );
		$add_count = $count+100;
		if ($count < $add_count) 
		{
			$per_page = $count;
			$loop = 2; 
		} 
		else 
		{
			$per_page = 5000;
			$loop 	  = $count / $per_page;
		}*/
		
		$merged_array = array();
		
		$overweight_array = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$in' => array (
								"Over Weight" 
						) 
				    )
				
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($merged_array,$student_id);		
		array_push($merged_array,$overweight_array);
		array_push($merged_array,$schoolwise_check);
		log_message('error', 'merged_arraymerged_array======================13716'.print_r($merged_array, true));
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array(
							'$and'	=> $merged_array
							)
					)
			];
			
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			log_message('error', 'response======================13716'.print_r($response, true));
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) 
			{
				foreach ( $doc ['history'] as $date ) 
				{
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Over Weight"]  = $search_result;
		
		// ==========================================================================================
		
		$merged_array = array();
		
		$underweight_array = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$in' => array (
								"Under Weight" 
						) 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($merged_array,$student_id);	
		array_push($merged_array,$underweight_array);
		array_push($merged_array,$schoolwise_check);
		
		
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array(
							'$and'	 => $merged_array 
							)
					)
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Under Weight"]  = $search_result;
		
		// ========================================================================================
		
		$merged_array = array();
		
		$obese_array = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$in' => array (
								"Obese" 
						) 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($merged_array,$student_id);	
		array_push($merged_array,$obese_array);
		array_push($merged_array,$schoolwise_check);
		
		
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array(
							'$and'	 => $merged_array 
							)
					)
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Obese"]  = $search_result;
		//====================================
		$and_merged_array = array ();
		
		$general_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$ne' => '' 
				) 
		);
		$general_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$ne' => ' ' 
				) 
		);
		$general_arr = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$ne' => [ ] 
				) 
		);
		
		$not_skin = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$nin' => array (
								"Skin" 
						) 
				) 
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$exists' => true 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push ( $and_merged_array, $student_id);	
		array_push ( $and_merged_array, $general_str_empty );
		array_push ( $and_merged_array, $general_str_space );
		array_push ( $and_merged_array, $general_arr );
		array_push ( $and_merged_array, $not_skin );
		array_push ( $and_merged_array, $page4_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					)
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["General"]  = $search_result;
		
		// ========================================================================================
		
		
		$merged_array = array ();
		
		$skin_array = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$in' => array (
								"Skin" 
						) 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($merged_array,$student_id);	
		array_push ( $merged_array, $skin_array );
		array_push ( $merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array(
							'$and'	 =>$merged_array 
							)
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Skin"]  = $search_result;
		
		// ========================================================================================
	
		$and_merged_array = array ();
		
		$description_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Description" => array (
						'$ne' => ''
				)
		);
		$description_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Description" => array (
						'$ne' => ' '
				)
		);
		
		$advice_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Advice" => array (
						'$ne' => ''
				)
		);
		$advice_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Advice" => array (
						'$ne' => ' '
				)
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$exists' => true
				)
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);			
		array_push ( $and_merged_array, $description_str_empty );
		array_push ( $and_merged_array, $description_str_space );
		array_push ( $and_merged_array, $advice_str_empty );
		array_push ( $and_merged_array, $advice_str_space );
		array_push ( $and_merged_array, $page4_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [
			array (
					'$match' => array (
							'$and' => $and_merged_array
					)
			),
			array (
					'$project' => array (
							"doc_data.widget_data" => true,
							"history" => true
					)
			)
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
		
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
				
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Others(Description/Advice)"] = $search_result;
		
		// ==============================================================================
		
		$and_merged_array = array ();
		$ortho = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		
		$ortho_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$ne' => '' 
				) 
		);
		$ortho_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$ne' => ' ' 
				) 
		);
		$ortho_arr = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$ne' => [ ] 
				) 
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$exists' => true 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);	
		array_push ( $and_merged_array, $ortho );
		array_push ( $and_merged_array, $ortho_str_empty );
		array_push ( $and_merged_array, $ortho_str_space );
		array_push ( $and_merged_array, $ortho_arr );
		array_push ( $and_merged_array, $page4_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					)
			];
			
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Ortho"] = $search_result;
		
		// ===========================================================================
		
		$and_merged_array = array ();
		
		$postural = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		$postural_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$ne' => '' 
				) 
		);
		$postural_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$ne' => ' ' 
				) 
		);
		$postural_arr = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$ne' => [ ] 
				) 
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$exists' => true 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);	
		array_push ( $and_merged_array, $postural );
		array_push ( $and_merged_array, $postural_str_empty );
		array_push ( $and_merged_array, $postural_str_space );
		array_push ( $and_merged_array, $postural_arr );
		array_push ( $and_merged_array, $page4_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					)
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Postural"] = $search_result;
		
		// ========================================================================
		
		$and_merged_array = array ();
		
		$birth_defect = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		$page5_exists = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$exists' => true 
				) 
		);
		
		$birth_defect_str_empty = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$ne' => '' 
				) 
		);
		$birth_defect_str_space = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$ne' => ' ' 
				) 
		);
		$birth_defect_arr = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$ne' => [ ] 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);	
		array_push ( $and_merged_array, $birth_defect_str_empty );
		array_push ( $and_merged_array, $birth_defect_str_space );
		array_push ( $and_merged_array, $birth_defect_arr );
		
		array_push ( $and_merged_array, $birth_defect );
		array_push ( $and_merged_array, $page5_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					)
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Defects at Birth"] = $search_result;
		
		// ==============================================================================
		
		$and_merged_array = array ();
		
		$deficencies = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		$page5_exists = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$exists' => true 
				) 
		);
		
		$deficencies_str_empty = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$ne' => '' 
				) 
		);
		$deficencies_str_space = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$ne' => ' ' 
				) 
		);
		$deficencies_arr = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$ne' => [ ] 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);			
		array_push ( $and_merged_array, $deficencies_str_empty );
		array_push ( $and_merged_array, $deficencies_str_space );
		array_push ( $and_merged_array, $deficencies_arr );
		
		array_push ( $and_merged_array, $deficencies );
		array_push ( $and_merged_array, $page5_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );

		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Deficencies"] = $search_result;
		
		// ==========================================================================================
		
		$and_merged_array = array ();
		
		$childhood_diseases = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		$page5_exists = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$exists' => true 
				) 
		);
		
		$childhood_diseases_str_empty = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$ne' => '' 
				) 
		);
		$childhood_diseases_str_space = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$ne' => ' ' 
				) 
		);
		$childhood_diseases_arr = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$ne' => [ ] 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);			
		array_push ( $and_merged_array, $childhood_diseases_str_empty );
		array_push ( $and_merged_array, $childhood_diseases_str_space );
		array_push ( $and_merged_array, $childhood_diseases_arr );
		
		array_push ( $and_merged_array, $childhood_diseases );
		array_push ( $and_merged_array, $page5_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					)
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Childhood Diseases"] = $search_result;
		
		// ===================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$without_glass_left = array (
				"doc_data.widget_data.page6.Without Glasses.Left" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		$without_glass_right = array (
				"doc_data.widget_data.page6.Without Glasses.Right" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		
		$page6_exists = array (
				"doc_data.widget_data.page6.Without Glasses" => array (
						'$exists' => true 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);			
		array_push ( $or_merged_array, $without_glass_left );
		array_push ( $or_merged_array, $without_glass_right );
		array_push ( $and_merged_array, $page6_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Without Glasses"] = $search_result;
		
		// =============================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$with_glass_left = array (
				"doc_data.widget_data.page6.With Glasses.Left" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		$with_glass_right = array (
				"doc_data.widget_data.page6.With Glasses.Right" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		
		$page6_exists = array (
				"doc_data.widget_data.page6.With Glasses" => array (
						'$exists' => true 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);	
		array_push ( $or_merged_array, $with_glass_left );
		array_push ( $or_merged_array, $with_glass_right );
		array_push ( $and_merged_array, $page6_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["With Glasses"] = $search_result;
		
		// ===================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$color_right = array (
				"doc_data.widget_data.page7.Colour Blindness.Right" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$color_left = array (
				"doc_data.widget_data.page7.Colour Blindness.Left" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness" => array (
						'$exists' => true 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);	
		
		array_push ( $or_merged_array, $color_right );
		array_push ( $or_merged_array, $color_left );
		array_push ( $and_merged_array, $page7_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Colour Blindness"] = $search_result;
		
		// ===========================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$eye_lids = array (
				"doc_data.widget_data.page7.Colour Blindness.Eye Lids" => array (
						'$nin' => array (
								"Normal",
								"",
								" " 
						) 
				) 
		);		
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness" => array (
						'$exists' => true 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);	
		array_push ( $or_merged_array, $eye_lids );
		array_push ( $and_merged_array, $page7_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Eye Lids"] = $search_result;
		//============================================
		// ===================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$conjunctiva = array (
				"doc_data.widget_data.page7.Colour Blindness.Conjunctiva" => array (
						'$nin' => array (
								"Normal",
								"",
								" " 
						) 
				) 
		);		
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness" => array (
						'$exists' => true 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);	
		
		array_push ( $or_merged_array, $conjunctiva );
		array_push ( $and_merged_array, $page7_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					)
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Conjunctiva"] = $search_result;
		//============================================
		// ===================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$cornea = array (
				"doc_data.widget_data.page7.Colour Blindness.Cornea" => array (
						'$nin' => array (
								"Normal",
								"",
								" " 
						) 
				) 
		);		
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness" => array (
						'$exists' => true 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);	
		array_push ( $or_merged_array, $cornea );
		array_push ( $and_merged_array, $page7_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Cornea"] = $search_result;
		//============================================
		// ===================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$pupil = array (
				"doc_data.widget_data.page7.Colour Blindness.Pupil" => array (
						'$nin' => array (
								"Normal",
								"",
								" " 
						) 
				) 
		);		
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness" => array (
						'$exists' => true 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);	
		array_push ( $or_merged_array, $pupil );
		array_push ( $and_merged_array, $page7_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
	
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Pupil"] = $search_result;
		//============================================
		// ===================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$wearing_spectacles = array (
				"doc_data.widget_data.page7.Colour Blindness.Wearing Spectacles" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);		
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness" => array (
						'$exists' => true 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);	
		array_push ( $or_merged_array, $wearing_spectacles );
		array_push ( $and_merged_array, $page7_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					)
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
	
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Wearing Spectacles"] = $search_result;
		//============================================
		// ===================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$subjective_refraction = array (
				"doc_data.widget_data.page7.Colour Blindness.Subjective Refraction" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);		
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness" => array (
						'$exists' => true 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);	
		array_push ( $or_merged_array, $subjective_refraction );
		array_push ( $and_merged_array, $page7_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					)
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Subjective Refraction"] = $search_result;
		//============================================
		
		$and_merged_array = array ();
		$or_merged_array  = array ();
		
		$audi_right = array (
				"doc_data.widget_data.page8. Auditory Screening.Right" => array (
						'$nin' => array (
								"Pass",
								"",
								" " 
						) 
				) 
		);
		$page8_exists = array (
				"doc_data.widget_data.page8. Auditory Screening" => array (
						'$exists' => true 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);	
		array_push ( $or_merged_array, $audi_right );
		array_push ( $and_merged_array, $page8_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Right Ear"] = $search_result;
		
		// ==============================================================================
		
		$and_merged_array = array ();
		$or_merged_array  = array ();
		
		$audi_left = array (
				"doc_data.widget_data.page8. Auditory Screening.Left" => array (
						'$nin' => array (
								"Pass",
								"",
								" " 
						) 
				) 
		);
		$page8_exists = array (
				"doc_data.widget_data.page8. Auditory Screening" => array (
						'$exists' => true 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);	
		array_push ( $or_merged_array, $audi_left );
		array_push ( $and_merged_array, $page8_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Left Ear"] = $search_result;
		
		// ====================================================================================
		
		$and_merged_array = array ();
		$or_merged_array  = array ();
		
		$speech = array (
				"doc_data.widget_data.page8. Auditory Screening.Speech Screening" => array (
						'$nin' => array (
								"Normal",
								"",
								" ",
								[ ] 
						) 
				) 
		);
		
		$page8_exists = array (
				"doc_data.widget_data.page8. Auditory Screening" => array (
						'$exists' => true 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);	
		array_push ( $or_merged_array, $speech );
		
		array_push ( $and_merged_array, $page8_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Speech Screening"] = $search_result;
		
		// =============================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$oral_hygiene = array (
				"doc_data.widget_data.page9.Dental Check-up.Oral Hygiene" => array (
						'$nin' => array (
								"Good",
								"Poor",
								"",
								" " 
						) 
				) 
		);
		
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);	
		array_push ( $or_merged_array, $oral_hygiene );
		array_push ( $and_merged_array, $page9_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Oral Hygiene - Fair"] = $search_result;
		
		// ==========================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$oral_hygiene = array (
				"doc_data.widget_data.page9.Dental Check-up.Oral Hygiene" => array (
						'$nin' => array (
								"Good",
								"Fair",
								"",
								" " 
						) 
				) 
		);
		
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);	
		array_push ( $or_merged_array, $oral_hygiene );
		array_push ( $and_merged_array, $page9_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					)
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Oral Hygiene - Poor"] = $search_result;
		
		// ==========================================================================================
		
		$and_merged_array = array ();
		$or_merged_array  = array ();
		
		$carious_teeth = array (
				"doc_data.widget_data.page9.Dental Check-up.Carious Teeth" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);	
		array_push ( $or_merged_array, $carious_teeth );
		array_push ( $and_merged_array, $page9_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Carious Teeth"] = $search_result;
		
		// ==========================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$flourosis = array (
				"doc_data.widget_data.page9.Dental Check-up.Flourosis" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);	
		array_push ( $or_merged_array, $flourosis );
		array_push ( $and_merged_array, $page9_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					)
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Flourosis"] = $search_result;
		
		// ==============================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$orthodontic = array (
				"doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push($and_merged_array,$student_id);	
		array_push ( $or_merged_array, $orthodontic );
		array_push ( $and_merged_array, $page9_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					)
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['synced_date'];
					
					if ($time <= $dates) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Orthodontic Treatment"] = $search_result;
		
		// ==========================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$indication = array (
				"doc_data.widget_data.page9.Dental Check-up.Indication for extraction" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		$schoolwise_check = array (
				"doc_data.widget_data.page2.Personal Information.School Name" => $school_name
				);
		$student_id = array(
			'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id
		);
		
		array_push ($and_merged_array, $student_id);	
		array_push ( $or_merged_array, $indication );
		array_push ( $and_merged_array, $page9_exists );
		array_push ( $and_merged_array, $schoolwise_check );
		
		$result = [ ];
		
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					)					
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		
		
		$search_result = array();
		
		foreach($result as $doc)
		{
		  array_push($search_result,$doc ['_id']->{'$id'} );
		}
		
		$request["Indication for extraction"] = $search_result;
		
		return $request;
	}

	
	// ------------------------------------------------------------------------

	/**
	 * Helper: Generate screening pie analytics - stage 2
	 *
	 *
	 * @param  array  $requests  Request data
	 *
	 * @return array
	 */
	 
	public function screening_pie_data_for_school_stage2($requests) {
		$request_stage2 = [ ];
		
		//log_message('debug','screening_pie_data_for_stage2_new=====453=='.print_r($requests,true));
		
		$stage_array = [ ];
		$stage_array ["Physical Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests["Over Weight"] as $doc ) 
		{
		  $total_count = $total_count + count($doc);
		}
		
		$stage_array ["Physical Abnormalities"] ["label"] = "Over Weight";
		$stage_array ["Physical Abnormalities"] ['value'] = $total_count;
		
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["Physical Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Under Weight"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["Physical Abnormalities"] ["label"] = "Under Weight";
		$stage_array ["Physical Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["General"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["General Abnormalities"] ["label"] = "General";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Skin"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["General Abnormalities"] ["label"] = "Skin";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// ===
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Others(Description/Advice)"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["General Abnormalities"] ["label"] = "Others(Description/Advice)";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Ortho"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["General Abnormalities"] ["label"] = "Ortho";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Postural"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["General Abnormalities"] ["label"] = "Postural";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Defects at Birth"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["General Abnormalities"] ["label"] = "Defects at Birth";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Deficencies"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["General Abnormalities"] ["label"] = "Deficencies";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Childhood Diseases"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["General Abnormalities"] ["label"] = "Childhood Diseases";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Without Glasses"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["Eye Abnormalities"] ["label"] = "Without Glasses";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["With Glasses"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["Eye Abnormalities"] ["label"] = "With Glasses";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Colour Blindness"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["Eye Abnormalities"] ["label"] = "Colour Blindness";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Eye Lids"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["Eye Abnormalities"] ["label"] = "Eye Lids";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Conjunctiva"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["Eye Abnormalities"] ["label"] = "Conjunctiva";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Cornea"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["Eye Abnormalities"] ["label"] = "Cornea";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Pupil"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["Eye Abnormalities"] ["label"] = "Pupil";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Wearing Spectacles"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["Eye Abnormalities"] ["label"] = "Wearing Spectacles";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Subjective Refraction"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["Eye Abnormalities"] ["label"] = "Subjective Refraction";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["Auditory Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Right Ear"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["Auditory Abnormalities"] ["label"] = "Right Ear";
		$stage_array ["Auditory Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["Auditory Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Left Ear"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["Auditory Abnormalities"] ["label"] = "Left Ear";
		$stage_array ["Auditory Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["Auditory Abnormalities"] = [ ];
		
		$stage2_data = [ ];
		$stage2_data ["label"] = "Speech Screening";
		
		$total_count = 0;
		foreach ( $requests ["Speech Screening"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["Auditory Abnormalities"] ["label"] = "Speech Screening";
		$stage_array ["Auditory Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Oral Hygiene - Fair"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["Dental Abnormalities"] ["label"] = "Oral Hygiene - Fair";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Oral Hygiene - Poor"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["Dental Abnormalities"] ["label"] = "Oral Hygiene - Poor";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Carious Teeth"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["Dental Abnormalities"] ["label"] = "Carious Teeth";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$stage2_data = [ ];
		$stage2_data ["label"] = "Flourosis";
		
		$total_count = 0;
		foreach ( $requests ["Flourosis"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}

		$stage_array ["Dental Abnormalities"] ["label"] = "Flourosis";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Orthodontic Treatment"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["Dental Abnormalities"] ["label"] = "Orthodontic Treatment";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$total_count = 0;
		foreach ( $requests ["Indication for extraction"] as $doc ) 
		{
			$total_count = $total_count + count($doc);
		}
		
		$stage_array ["Dental Abnormalities"] ["label"] = "Indication for extraction";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		return $request_stage2;
	}
	
	// ------------------------------------------------------------------------

	/**
	 * Helper: Generate screening pie analytics - stage 1
	 *
	 *
	 * @param  array  $requests  Request data
	 *
	 * @return array
	 */
	 
	public function screening_pie_data_for_school_stage1($requests) 
	{
		$request_stage1 = [ ];
		
		//log_message('debug','screening_pie_data_for_stage1_new====2122=='.print_r($requests,true));
		
		$stage_data = [ ];
		$stage_data ['label'] = "Physical Abnormalities";
		$stage_data ['value'] = $requests[0]["Physical Abnormalities"]['value'] + $requests[1]["Physical Abnormalities"]['value'];
		array_push ( $request_stage1, $stage_data );
		
		$stage_data = [ ];
		$stage_data ['label'] = "General Abnormalities";
		$stage_data ['value'] = $requests [2] ["General Abnormalities"] ['value'] + $requests [3] ["General Abnormalities"] ['value'] + $requests [4] ["General Abnormalities"] ['value'] + $requests [5] ["General Abnormalities"] ['value'] + $requests [6] ["General Abnormalities"] ['value'] + $requests [7] ["General Abnormalities"] ['value'] + $requests [8] ["General Abnormalities"] ['value'] + $requests [9] ["General Abnormalities"] ['value'];
		array_push ( $request_stage1, $stage_data );
		
		$stage_data = [ ];
		$stage_data ['label'] = "Eye Abnormalities";
		$stage_data ['value'] = $requests [10] ["Eye Abnormalities"] ['value'] + $requests [11] ["Eye Abnormalities"] ['value'] + $requests [12] ["Eye Abnormalities"] ['value'] + $requests [13] ["Eye Abnormalities"] ['value'] + $requests [14] ["Eye Abnormalities"] ['value'] + $requests [15] ["Eye Abnormalities"] ['value'] + $requests [16] ["Eye Abnormalities"] ['value'] + $requests [17] ["Eye Abnormalities"] ['value'] + $requests [18] ["Eye Abnormalities"] ['value'];
		array_push ( $request_stage1, $stage_data );
		
		$stage_data = [ ];
		$stage_data ['label'] = "Auditory Abnormalities";
		$stage_data ['value'] = $requests [19] ["Auditory Abnormalities"] ['value'] + $requests [20] ["Auditory Abnormalities"] ['value'] + $requests [21] ["Auditory Abnormalities"] ['value'];
		array_push ( $request_stage1, $stage_data );
		
		$stage_data = [ ];
		$stage_data ['label'] = "Dental Abnormalities";
		$stage_data ['value'] = $requests [22] ["Dental Abnormalities"] ['value'] + $requests [23] ["Dental Abnormalities"] ['value'] + $requests [24] ["Dental Abnormalities"] ['value'] + $requests [25] ["Dental Abnormalities"] ['value'] + $requests [26] ["Dental Abnormalities"] ['value'] + $requests [27] ["Dental Abnormalities"] ['value'];
		array_push ( $request_stage1, $stage_data );
		
		return $request_stage1;
	}

	public function get_documents_based_on_synced_date($date)
	{
		$docs = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('history.last_stage.synced_date' => $date, 'history.last_stage.synced_date' => array('$exists' => TRUE)))->get('Medical_Evalution_Syn_collection');
		if(!empty($docs))
		{
			return $docs;
		}else{
			return FALSE;
		}
	}

	public function insert_psychologist_form_data($form_data, $doc_properties, $history)
	{
		$doc_data = array('doc_data' => $form_data,'doc_properties' => $doc_properties, 'history' => $history);
		$query = $this->mongo_db->insert('psychologist_collection', $doc_data);
		return $query;
	}

	/*public function get_psychologist_submitted_details()
	{
		$this->mongo_db->where('')
	}*/

// Maharashtra Screening Syncing data =====================

	public function maharashtra_insert_medical_information_sync($doc_data, $history, $doc_properties, $app_properties)
		{
			//log_message('error','doccccccccccccccc=========5437'.print_r($doc_data, true));
			//maharashtra_screening_sync_app_collection

			$school_name = $doc_data['widget_data']['page2']['Personal Information']['School Name'];
			$district = $doc_data['widget_data']['page2']['Personal Information']['District'];
			$dateofexam = $doc_data['widget_data']['page2']['Personal Information']['Date of Exam'];
			$unique_id = $doc_data['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
			$height = $doc_data['widget_data']['page3']['Physical Exam']['Height cms'];
			$weight = $doc_data['widget_data']['page3']['Physical Exam']['Weight kgs'];
			$bloodgroup = $doc_data['widget_data']['page3']['Physical Exam']['Blood Group'];
			$page4_description = $doc_data['widget_data']['page4']['Doctor Check Up']['Description'];
			$page9_hygiene = $doc_data['widget_data']['page9']['Dental Check-up']['Oral Hygiene'];
			$synced_date = $history['last_stage']['synced_date'];

			$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id, 'doc_data.widget_data.page2.Personal Information.Date of Exam' => $dateofexam,'doc_data.widget_data.page5.Doctor Check Up' => array('$exists' => true),'doc_data.widget_data.page9.Dental Check-up' =>array('$exists' => true)))->get('maharashtra_nandurbar_screening_sync_app_collection');
		
			
			if(!empty($query))
			{
				if($height == $query[0]['doc_data']['widget_data']['page3']['Physical Exam']['Height cms'] && $weight == $query[0]['doc_data']['widget_data']['page3']['Physical Exam']['Weight kgs'] && $bloodgroup == $query[0]['doc_data']['widget_data']['page3']['Physical Exam']['Blood Group'] && $page4_description == $query[0]['doc_data']['widget_data']['page4']['Doctor Check Up']['Description'] && $page9_hygiene == $query[0]['doc_data']['widget_data']['page9']['Dental Check-up']['Oral Hygiene'])
				{
					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id, 'doc_data.widget_data.page2.Personal Information.Date of Exam' => $dateofexam))->set(array('doc_data' => $doc_data,'history.last_stage.synced_date' => $history['last_stage']['synced_date'], 'history.last_stage.Version' => $history['last_stage']['Version']))->update('maharashtra_nandurbar_screening_sync_app_collection');
				
				}else
				{
					$full_doc = array('doc_data' => $doc_data, 'doc_properties' => $doc_properties, 'history' => $history);
					
					$query = $this->mongo_db->insert('maharashtra_nandurbar_screening_sync_app_collection', $full_doc);
					
				}
				
			}else
			{	
				$personal_info = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id, 'doc_data.widget_data.page5.Doctor Check Up' => array('$exists' => false),'doc_data.widget_data.page9.Dental Check-up' =>array('$exists' =>false)))->get('maharashtra_nandurbar_screening_sync_app_collection');
			
				if(!empty($personal_info))
				{
					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id))->set(array('doc_data' => $doc_data, 'history.last_stage.synced_date' => $history['last_stage']['synced_date'], 'history.last_stage.Version' => $history['last_stage']['Version']))->update('maharashtra_nandurbar_screening_sync_app_collection');
				}else
				{
					$full_doc = array('doc_data' => $doc_data, 'doc_properties' => $doc_properties, 'history' => $history);
				
					$query = $this->mongo_db->insert('maharashtra_nandurbar_screening_sync_app_collection', $full_doc);
					
				}

			
			}
			

			if(!empty($query))
			{
				return TRUE;
			}else
			{
				return FALSE;
			}
		}

function get_submitted_doctor_visit_students($email,$date,$user_type)
	{
		$check_query = array('history.last_stage.submitted_by' => str_replace("@", "#", $email));
		$total_month = substr($date, 0,-3);
		$unique_ids = array();
		$submitted_students = array();

	if($user_type == 'PANACEA_HS'){

		$query_info = $this->mongo_db->where($check_query)->orderBy(array('history.last_stage.time' => -1))->get("doctor_visiting_reports");
			
			 	foreach ($query_info as $student_info) 
			 	{		
			 	 	$end_array = $student_info['doc_data']['widget_data']['Student Details']['doctor_visiting_date'];

			 	 	if(preg_match("/$total_month/i", $end_array))
			 	 	{
			 	 		$unique_id = $student_info['doc_data']['widget_data']['Student Details']['Hospital Unique ID'];
			 	 		
			 	 		array_push($submitted_students, $student_info);		 	 		
			 	 	}

			 	} 

		$query['submitted_students'] = $submitted_students;
		 	
	}elseif ($user_type == 'TTWREIS_HS') {

		$query_info = $this->mongo_db->where($check_query)->orderBy(array('history.last_stage.time' => -1))->get("ttwreis_doctor_visiting_reports");
				
			 	foreach ($query_info as $student_info) 
			 	{		
			 	 	$end_array = $student_info['doc_data']['widget_data']['Student Details']['doctor_visiting_date'];

			 	 	if(preg_match("/$total_month/i", $end_array))
			 	 	{
			 	 		$unique_id = $student_info['doc_data']['widget_data']['Student Details']['Hospital Unique ID'];
			 	 		
			 	 		array_push($submitted_students, $student_info);		 	 		
			 	 	}

			 	} 

		$query['submitted_students'] = $submitted_students;

	}elseif ($user_type == "BCWELFARE_HS"){

		$query_info = $this->mongo_db->where($check_query)->orderBy(array('history.last_stage.time' => -1))->get("bc_welfare_doctor_visiting_reports");
				
				 	foreach ($query_info as $student_info) 
				 	{		
				 	 	$end_array = $student_info['doc_data']['widget_data']['Student Details']['doctor_visiting_date'];

				 	 	if(preg_match("/$total_month/i", $end_array))
				 	 	{
				 	 		$unique_id = $student_info['doc_data']['widget_data']['Student Details']['Hospital Unique ID'];
				 	 		
				 	 		array_push($submitted_students, $student_info);		 	 		
				 	 	}	

				 	} 

		 	$query['submitted_students'] = $submitted_students;

		 }

		 return $query;

	}


	public function add_doctor_profile_model($history,$doc_properties,$doc_data,$user_type)
	{

		if($user_type == 'PANACEA_HS'){

			 $doc_data = array("doc_data"=>array("widget_data"=>$doc_data),"history"=>$history,"doc_properties"=>$doc_properties);
			 $query = $this->mongo_db->insert('ts_doctor_personal_profile_report', $doc_data);		  

	}elseif ($user_type == 'TTWREIS_HS') {

		    $doc_data = array("doc_data"=>array("widget_data"=>$doc_data),"history"=>$history,"doc_properties"=>$doc_properties);
	  		$query = $this->mongo_db->insert('tt_doctor_personal_profile_report', $doc_data);			  

	}elseif ($user_type == "BCWELFARE_HS"){

	    	$doc_data = array("doc_data"=>array("widget_data"=>$doc_data),"history"=>$history,"doc_properties"=>$doc_properties);
	  		$query = $this->mongo_db->insert('bc_doctor_personal_profile_report', $doc_data);			 
		
	}

		return $query;

	}

	public function get_doctor_names($email,$user_type)
	{
		 if($user_type == 'PANACEA_HS'){

		$query = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information.Name'))->orderBy(array('history.last_stage.time' => -1))->where(array("history.last_stage.submitted_by" => str_replace("@", "#", $email)))->get('ts_doctor_personal_profile_report');
		
		}elseif ($user_type == 'TTWREIS_HS') {

		$query = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information.Name'))->orderBy(array('history.last_stage.time' => -1))->where(array("history.last_stage.submitted_by" => str_replace("@", "#", $email)))->get('tt_doctor_personal_profile_report');		
		
		}elseif ($user_type == "BCWELFARE_HS"){

		$query = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information.Name'))->orderBy(array('history.last_stage.time' => -1))->where(array("history.last_stage.submitted_by" => str_replace("@", "#", $email)))->get('bc_doctor_personal_profile_report');
		}
		return $query;
	}

	 public function submit_doctor_visiting_report($doc_data, $doc_attachments, $doc_properties, $app_properties, $history, $user_type)
    {

    	if($user_type == 'PANACEA_HS'){

          $doc_data = array("doc_data"=>array("widget_data"=>$doc_data),'doc_attachments' =>$doc_attachments, "doc_properties" => $doc_properties, "app_properties" => $app_properties, "history" => $history);

          $query = $this->mongo_db->insert('doctor_visiting_reports',$doc_data);

        }elseif ($user_type == 'TTWREIS_HS') {

          $doc_data = array("doc_data"=>array("widget_data"=>$doc_data),'doc_attachments' =>$doc_attachments, "doc_properties" => $doc_properties, "app_properties" => $app_properties, "history" => $history);

          $query = $this->mongo_db->insert('ttwreis_doctor_visiting_reports',$doc_data);

        }elseif ($user_type == "BCWELFARE_HS"){

          $doc_data = array("doc_data"=>array("widget_data"=>$doc_data),'doc_attachments' =>$doc_attachments, "doc_properties" => $doc_properties, "app_properties" => $app_properties, "history" => $history);

          $query = $this->mongo_db->insert('bc_welfare_doctor_visiting_reports',$doc_data);

      }

      return $query;
       
    }



	public function maharashtra_get_school_info($school_code,$user_type = false)
	{		
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$res = $this->mongo_db->where(array('school_code' => $school_code))->get( 'maharashtra_schools_list' );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		if(!empty($res))
		{
			return $res;	
		}else
		{
			return FALSE;
		}
		
	}
// End Maharashtra Screening Syncing data =====================

// For Parent health registration app
	public function register_otp_for_parents_health($doc_data, $history)
	{
		$doc = array('doc_data' => $doc_data, 'history' => $history);

		$query = $this->mongo_db->insert('panacea_parents_otp_registration', $doc);

		if(!empty($query)){
			return $query;
		}else{
			return FALSE;
		}
	}

	public function check_uid_exists_today($uid, $date)
	{
		$query = $this->mongo_db->where(array('doc_data.Hospital Unique ID'=>$uid, 'doc_data.Date'=> $date))->whereNe('doc_data.Status', 0)->get('panacea_parents_otp_registration');
		if (!empty($query)) {
			return TRUE;
		}else{
			return FALSE;
		}
	}

	public function insert_family_details($doc_data,$history,$doc_properties, $app_properties)
	{
		$doc = array('doc_data' => $doc_data, 'history'=>$history, 'doc_properties'=>$doc_properties, 'app_properties'=>$app_properties);

		$query = $this->mongo_db->insert('panacea_stud_family_health_data',$doc);

		return $query;
	}

	public function submit_family_health_information($doc_data, $history, $app_properties, $doc_properties)
	{

		
		$doc = array('doc_data' => $doc_data, 'history'=>$history, 'doc_properties'=>$doc_properties, 'app_properties'=>$app_properties);

		$query = $this->mongo_db->insert('panacea_family_health_2020-2021',$doc);

		//log_message('debug','checking insert for family health Information'.print_r($query, true));

		return $query;
	}

	public function update_family_health_attachements($doc_data, $doc_id, $unique)
	{
		//echo print_r($doc_id, true);
		//echo print_r($unique, true);
		$get_doc = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->get('panacea_family_health_2020-2021');
		//echo print_r($get_doc, true); exit();
		$result_array = [];
		//Father Attachments
		if(isset($doc_data['father_attach_update']) && !empty($doc_data['father_attach_update'])){
			if(isset($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Father Data']['attachments']) && !empty($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Father Data']['attachments'])){

				$old_attachments = $get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Father Data']['attachments'];

				$merged_attachments = array_merge($old_attachments, $doc_data['father_attach_update']);
				$insert_attachements = array_replace_recursive($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Father Data']['attachments'], $merged_attachments);

				$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Father Data.attachments', $insert_attachements)->update('panacea_family_health_2020-2021');

				
				if($update_father){
					$result = 'Father attachements updated';
					array_push($result_array, $result);
				}else{
					$result = 'Father attachements not updated';
					array_push($result_array, $result);
				}

				
			}
			else
			{
				$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Father Data.attachments', $doc_data['father_attach_update'])->update('panacea_family_health_2020-2021');
				if($update_father){
					$result = 'Father attachements updated';
					array_push($result_array, $result);
				}else{
					$result = 'Father attachements not updated';
					array_push($result_array, $result);
				}
				
			}

		}
		
		//Mother attachments
		if(isset($doc_data['mother_attach_update']) && !empty($doc_data['mother_attach_update'])){
			if(isset($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Mother Data']['attachments']) && !empty($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Mother Data']['attachments'])){

				$old_attachments = $get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Mother Data']['attachments'];

				$merged_attachments = array_merge($old_attachments, $doc_data['mother_attach_update']);
				$insert_attachements = array_replace_recursive($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Mother Data']['attachments'], $merged_attachments);

				$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Mother Data.attachments', $insert_attachements)->update('panacea_family_health_2020-2021');
				if($update_father){
					$result = 'Mother attachements updated';
					array_push($result_array, $result);
				}else{
					$result = 'Mother attachements not updated';
					array_push($result_array, $result);
				}
			}
			else
			{

				$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Mother Data.attachments',$doc_data['mother_attach_update'])->update('panacea_family_health_2020-2021');

				if($update_father){
					$result = 'Mother attachements updated';
					array_push($result_array, $result);
				}else{
					$result = 'Mother attachements not updated';
					array_push($result_array, $result);
				}
			}
		}
			
		//sister 1 attachments
			if(isset($doc_data['sister1_attach_update']) && !empty($doc_data['sister1_attach_update'])){
				if(isset($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Sisters Data']['Sister1']['attachments']) && !empty($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Sisters Data']['Sister1']['attachments'])){

					$old_attachments = $get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Sisters Data']['Sister1']['attachments'];

					$merged_attachments = array_merge($old_attachments, $doc_data['sister1_attach_update']);
					$insert_attachements = array_replace_recursive($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Sisters Data']['Sister1']['attachments'], $merged_attachments);

					$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Sisters Data.Sister1.attachments', $insert_attachements)->update('panacea_family_health_2020-2021');
					if($update_father){
						$result = 'Sister1 attachements updated';
						array_push($result_array, $result);
					}else{
						$result = 'Sister1 attachements not updated';
						array_push($result_array, $result);
					}
				}
				else
				{
					
					$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Sisters Data.Sister1.attachments', $doc_data['sister1_attach_update'])->update('panacea_family_health_2020-2021');
					
					if($update_father){
						$result = 'Sister1 attachements updated';
						array_push($result_array, $result);
					}else{
						$result = 'Sister1 attachements not updated';
						array_push($result_array, $result);
					}
				}
			}
			
		//sister 2 attachments
			if(isset($doc_data['sister2_attach_update']) && !empty($doc_data['sister2_attach_update'])){
				if(isset($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Sisters Data']['Sister2']['attachments']) && !empty($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Sisters Data']['Sister2']['attachments'])){

					$old_attachments = $get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Sisters Data']['Sister2']['attachments'];

					$merged_attachments = array_merge($old_attachments, $doc_data['sister2_attach_update']);
					$insert_attachements = array_replace_recursive($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Sisters Data']['Sister2']['attachments'], $merged_attachments);

					$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Sisters Data.Sister2.attachments', $insert_attachements)->update('panacea_family_health_2020-2021');
					if($update_father){
						$result = 'Sister2 attachements updated';
						array_push($result_array, $result);
					}else{
						$result = 'Sister2 attachements not updated';
						array_push($result_array, $result);
					}
				}
				else
				{
					
					$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Sisters Data.Sister2.attachments', $doc_data['sister2_attach_update'])->update('panacea_family_health_2020-2021');
					if($update_father){
						$result = 'Sister2 attachements updated';
						array_push($result_array, $result);
					}else{
						$result = 'Sister2 attachements not updated';
						array_push($result_array, $result);
					}
				}
			}
			
		//sister 3 attachments
			if(isset($doc_data['sister3_attach_update']) && !empty($doc_data['sister3_attach_update'])){
				if(isset($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Sisters Data']['Sister3']['attachments']) && !empty($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Sisters Data']['Sister3']['attachments'])){

					$old_attachments = $get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Sisters Data']['Sister3']['attachments'];

					$merged_attachments = array_merge($old_attachments, $doc_data['sister3_attach_update']);
					$insert_attachements = array_replace_recursive($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Sisters Data']['Sister3']['attachments'], $merged_attachments);

					$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Sisters Data.Sister3.attachments', $insert_attachements)->update('panacea_family_health_2020-2021');
					if($update_father){
						$result = 'Sister3 attachements updated';
						array_push($result_array, $result);
					}else{
						$result = 'Sister3 attachements not updated';
						array_push($result_array, $result);
					}
				}
				else
				{
					$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Sisters Data.Sister3.attachments', $doc_data['sister3_attach_update'])->update('panacea_family_health_2020-2021');

					if($update_father){
						$result = 'Sister3 attachements updated';
						array_push($result_array, $result);
					}else{
						$result = 'Sister3 attachements not updated';
						array_push($result_array, $result);
					}
				}
			}
			
		//sister 4 attachments
			if(isset($doc_data['sister4_attach_update']) && !empty($doc_data['sister4_attach_update'])){
				if(isset($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Sisters Data']['Sister4']['attachments']) && !empty($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Sisters Data']['Sister4']['attachments'])){

					$old_attachments = $get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Sisters Data']['Sister4']['attachments'];

					$merged_attachments = array_merge($old_attachments, $doc_data['sister4_attach_update']);
					$insert_attachements = array_replace_recursive($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Sisters Data']['Sister4']['attachments'], $merged_attachments);

					$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Sisters Data.Sister4.attachments', $insert_attachements)->update('panacea_family_health_2020-2021');
					if($update_father){
						$result = 'Sister4 attachements updated';
						array_push($result_array, $result);
					}else{
						$result = 'Sister4 attachements not updated';
						array_push($result_array, $result);
					}
				}
				else
				{
					$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Sisters Data.Sister4.attachments', $doc_data['sister4_attach_update'])->update('panacea_family_health_2020-2021');

					if($update_father){
						$result = 'Sister4 attachements updated';
						array_push($result_array, $result);
					}else{
						$result = 'Sister4 attachements not updated';
						array_push($result_array, $result);
					}
				}
		}
			
		//sister 5 attachments
			if(isset($doc_data['sister5_attach_update']) && !empty($doc_data['sister5_attach_update'])){
				if(isset($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Sisters Data']['Sister5']['attachments']) && !empty($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Sisters Data']['Sister5']['attachments'])){

					$old_attachments = $get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Sisters Data']['Sister5']['attachments'];

					$merged_attachments = array_merge($old_attachments, $doc_data['sister5_attach_update']);
					$insert_attachements = array_replace_recursive($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Sisters Data']['Sister5']['attachments'], $merged_attachments);

					$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Sisters Data.Sister5.attachments', $insert_attachements)->update('panacea_family_health_2020-2021');
					if($update_father){
						$result = 'Sister5 attachements updated';
						array_push($result_array, $result);
					}else{
						$result = 'Sister5 attachements not updated';
						array_push($result_array, $result);
					}
				}
				else
				{
					$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Sisters Data.Sister5.attachments', $doc_data['sister5_attach_update'])->update('panacea_family_health_2020-2021');

					if($update_father){
						$result = 'Sister5 attachements updated';
						array_push($result_array, $result);
					}else{
						$result = 'Sister5 attachements not updated';
						array_push($result_array, $result);
					}
				}

			}

			
		//brother 1 attachments
			if(isset($doc_data['brother1_attach_update']) && !empty($doc_data['brother1_attach_update'])){
				if(isset($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Brothers Data']['Brother1']['attachments']) && !empty($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Brothers Data']['Brother1']['attachments'])){

				$old_attachments = $get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Brothers Data']['Brother1']['attachments'];

				$merged_attachments = array_merge($old_attachments, $doc_data['brother1_attach_update']);
				$insert_attachements = array_replace_recursive($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Brothers Data']['Brother1']['attachments'], $merged_attachments);

				$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Brothers Data.Brother1.attachments', $insert_attachements)->update('panacea_family_health_2020-2021');
				if($update_father){
					$result = 'Brother1 attachements updated';
					array_push($result_array, $result);
				}else{
					$result = 'Brother1 attachements not updated';
					array_push($result_array, $result);
				}
			}
			else
			{
				$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Brothers Data.Brother1.attachments', $doc_data['brother1_attach_update'])->update('panacea_family_health_2020-2021');
				
				if($update_father){
					$result = 'Brother1 attachements updated';
					array_push($result_array, $result);
				}else{
					$result = 'Brother1 attachements not updated';
					array_push($result_array, $result);
				}
			}
		}
			
		//brother 2 attachments
			if(isset($doc_data['brother2_attach_update']) && !empty($doc_data['brother2_attach_update'])){
					if(isset($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Brothers Data']['Brother2']['attachments']) && !empty($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Brothers Data']['Brother2']['attachments'])){

					$old_attachments = $get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Brothers Data']['Brother2']['attachments'];

					$merged_attachments = array_merge($old_attachments, $doc_data['brother2_attach_update']);
					$insert_attachements = array_replace_recursive($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Brothers Data']['Brother2']['attachments'], $merged_attachments);

					$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Brothers Data.Brother2.attachments', $insert_attachements)->update('panacea_family_health_2020-2021');
					if($update_father){
						$result = 'Brother2 attachements updated';
						array_push($result_array, $result);
					}else{
						$result = 'Brother2 attachements not updated';
						array_push($result_array, $result);
					}
				}
				else
				{
					$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Brothers Data.Brother2.attachments', $doc_data['brother2_attach_update'])->update('panacea_family_health_2020-2021');
					
					if($update_father){
						$result = 'Brother2 attachements updated';
						array_push($result_array, $result);
					}else{
						$result = 'Brother2 attachements not updated';
						array_push($result_array, $result);
					}
				}
			}
			
		//brother 3 attachments
			if(isset($doc_data['brother3_attach_update']) && !empty($doc_data['brother3_attach_update'])){
					if(isset($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Brothers Data']['Brother3']['attachments']) && !empty($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Brothers Data']['Brother3']['attachments'])){

					$old_attachments = $get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Brothers Data']['Brother3']['attachments'];

					$merged_attachments = array_merge($old_attachments, $doc_data['brother3_attach_update']);
					$insert_attachements = array_replace_recursive($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Brothers Data']['Brother3']['attachments'], $merged_attachments);

					$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Brothers Data.Brother3.attachments', $insert_attachements)->update('panacea_family_health_2020-2021');
					if($update_father){
						$result = 'Brother3 attachements updated';
						array_push($result_array, $result);
					}else{
						$result = 'Brother3 attachements not updated';
						array_push($result_array, $result);
					}
				}
				else
				{
					$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Brothers Data.Brother3.attachments', $doc_data['brother3_attach_update'])->update('panacea_family_health_2020-2021');
					
					if($update_father){
						$result = 'Brother3 attachements updated';
						array_push($result_array, $result);
					}else{
						$result = 'Brother3 attachements not updated';
						array_push($result_array, $result);
					}
				}
			}
			
		//brother 4 attachments
			if(isset($doc_data['brother4_attach_update']) && !empty($doc_data['brother4_attach_update'])){
					if(isset($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Brothers Data']['Brother4']['attachments']) && !empty($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Brothers Data']['Brother4']['attachments'])){

					$old_attachments = $get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Brothers Data']['Brother4']['attachments'];

					$merged_attachments = array_merge($old_attachments, $doc_data['brother4_attach_update']);
					$insert_attachements = array_replace_recursive($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Brothers Data']['Brother4']['attachments'], $merged_attachments);

					$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Brothers Data.Brother4.attachments', $insert_attachements)->update('panacea_family_health_2020-2021');
					if($update_father){
						$result = 'Brother4 attachements updated';
						array_push($result_array, $result);
					}else{
						$result = 'Brother4 attachements not updated';
						array_push($result_array, $result);
					}
				}
				else
				{
					$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Brothers Data.Brother4.attachments', $doc_data['brother4_attach_update'])->update('panacea_family_health_2020-2021');
					
					if($update_father){
						$result = 'Brother4 attachements updated';
						array_push($result_array, $result);
					}else{
						$result = 'Brother4 attachements not updated';
						array_push($result_array, $result);
					}
				}
			}
			
		//brother 5 attachments
		if(isset($doc_data['brother5_attach_update']) && !empty($doc_data['brother5_attach_update'])){
				if(isset($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Brothers Data']['Brother5']['attachments']) && !empty($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Brothers Data']['Brother5']['attachments'])){

				$old_attachments = $get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Brothers Data']['Brother5']['attachments'];

				$merged_attachments = array_merge($old_attachments, $doc_data['brother5_attach_update']);
				$insert_attachements = array_replace_recursive($get_doc[0]['doc_data']['widget_data']['page2']['Family Health Info']['Brothers Data']['Brother5']['attachments'], $merged_attachments);

				$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Brothers Data.Brother5.attachments', $insert_attachements)->update('panacea_family_health_2020-2021');
				if($update_father){
					$result = 'Brother5 attachements updated';
					array_push($result_array, $result);
				}else{
					$result = 'Brother5 attachements not updated';
					array_push($result_array, $result);
				}
			}
			else
			{
				$update_father = $this->mongo_db->where(array('doc_properties.doc_id'=> $doc_id, 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID'=> $unique))->set('doc_data.widget_data.page2.Family Health Info.Brothers Data.Brother5.attachments', $doc_data['brother5_attach_update'])->update('panacea_family_health_2020-2021');
				
				if($update_father){
					$result = 'Brother5 attachements updated';
					array_push($result_array, $result);
				}else{
					$result = 'Brother5 attachements not updated';
					array_push($result_array, $result);
				}
			}
		}


		if(!empty($result_array)){
			return $result_array;
		}else{
			return "UPDATE_FAIL";
		}
	}

	public function fetch_family_submitted_details($unique_id)
	{
		$query = $this->mongo_db->where('doc_data.widget_data.page1.Personal Information.Hospital Unique ID',$unique_id)->orderBy(array('history.last_stage.time' => -1))->limit(1)->get('panacea_family_health_2020-2021');

		return $query;
	}

	//Get StudentsData with School Name

	public function get_student_info_by_school_name($school_name)
	{
		$query = $this->mongo_db->select(array('doc_data.widget_data.page1', 'doc_data.widget_data.page2'))->where('doc_data.widget_data.page2.Personal Information.School Name',$school_name)->get($this->screening_app_col_sw);
			return $query;
	}

	//Get OTP data

	public function get_otp_list_for_hs_for_app($school, $start, $end)
	{

		$query = $this->mongo_db->where('doc_data.School Name', $school)->whereBetween('doc_data.Date', $start, $end)->get('panacea_parents_otp_registration');

		return $query;
	}

	//Change status to authenticate

	public function change_status_to_remove_from_list($id)
	{
		$set_to = array('doc_data.Status' => 0);
		$query = $this->mongo_db->where('_id', new MongoId($id))->set($set_to)->update('panacea_parents_otp_registration');
		
		if($query)
		{
		   return "UPDATE_SUCCESS";
		}
		else
		{
	       return "UPDATE_FAIL";
		}
	}

	public function check_and_get_if_regular_is_there($doc_id, $unique_id)
	{
	    $query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Unique ID' => $unique_id, 'doc_properties.doc_id' => $doc_id))->where(array('regular_follow_up'=>array('$exists'=>true)))->get('healthcare2016531124515424_static_html');

	    if(isset($query) && !empty($query)){
	        return $query;
	    }else{
	        return "No Data";
	    }
	}

	public function check_today_submission($school, $district, $date)
	{
		$query = $this->mongo_db->where(array('School Name'=>$school, 'District'=>$district, 'Date'=>$date))->get('tswreis_rhso_sanitation_data');

		if(isset($query) && !empty($query)){
			return "Success";

		}else{
			return "Failed";
		}
	}

	public function insert_rhso_sanitation_data($doc_data, $email)
	{
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$get_rhso_name = $this->mongo_db->where('email', $email)->get('rhso_users');
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

		if(!empty($get_rhso_name)){
			$name = $get_rhso_name[0]['rhso_name'];
			$rhso_mobile = $get_rhso_name[0]['rhso_mobile'];
			//$dt_name = $get_rhso_name[0]['rhso_name'];
		}

		$doc_data['history'] = array(
					'status' => '',
					'email' => $email,
					'rhso_name' => $name,
					'rhso_mobile' => $rhso_mobile,
					'created_time' => date('Y-m-d H:i:s')
					);

		$query = $this->mongo_db->insert('tswreis_rhso_sanitation_data', $doc_data);

		if(isset($query) && !empty($query)){
			return "Success";

		}else{
			return "Failed";
		}
	}

	public function check_images_rhso_sanitation_data($submission_type, $school, $district, $date)
	{
		if($submission_type == 'Kitchens'){
			$query = $this->mongo_db->select(array('Kitchen.Attachments'))->where(array('School Name'=>$school, 'District'=>$district, 'Date'=>$date))->get('tswreis_rhso_sanitation_data');

			
		}elseif ($submission_type == 'Toilets') {
			$query = $this->mongo_db->select(array('Toilets.Attachments'))->where(array('School Name'=>$school, 'District'=>$district, 'Date'=>$date))->get('tswreis_rhso_sanitation_data');

			
		}elseif ($submission_type == 'Campus') {
			$query = $this->mongo_db->select(array('Campus.Attachments'))->where(array('School Name'=>$school, 'District'=>$district, 'Date'=>$date))->get('tswreis_rhso_sanitation_data');

			
		}elseif ($submission_type == 'Dormitory') {
			$query = $this->mongo_db->select(array('Dormitory.Attachments'))->where(array('School Name'=>$school, 'District'=>$district, 'Date'=>$date))->get('tswreis_rhso_sanitation_data');

			
		}elseif ($submission_type == 'ROPlant') {
			$query = $this->mongo_db->select(array('ROPlant.Attachments'))->where(array('School Name'=>$school, 'District'=>$district, 'Date'=>$date))->get('tswreis_rhso_sanitation_data');

			
		}

		return $query;
		
	}

	public function update_rhso_sanitation_data($doc_data, $school, $district, $date, $submission_type)
	{
		if($submission_type == 'Kitchens'){
			$query = $this->mongo_db->where(array('School Name'=>$school, 'District'=>$district, 'Date'=>$date))->set(array('Kitchen'=>$doc_data))->update('tswreis_rhso_sanitation_data');
		}elseif ($submission_type == 'Toilets') {
			$query = $this->mongo_db->where(array('School Name'=>$school, 'District'=>$district, 'Date'=>$date))->set(array('Toilets'=>$doc_data))->update('tswreis_rhso_sanitation_data');
		}elseif ($submission_type == 'Campus') {
			$query = $this->mongo_db->where(array('School Name'=>$school, 'District'=>$district, 'Date'=>$date))->set(array('Campus'=>$doc_data))->update('tswreis_rhso_sanitation_data');
		}elseif ($submission_type == 'Dormitory') {
			$query = $this->mongo_db->where(array('School Name'=>$school, 'District'=>$district, 'Date'=>$date))->set(array('Dormitory'=>$doc_data))->update('tswreis_rhso_sanitation_data');
			
		}elseif ($submission_type == 'ROPlant') {
			$query = $this->mongo_db->where(array('School Name'=>$school, 'District'=>$district, 'Date'=>$date))->set(array('ROPlant'=>$doc_data))->update('tswreis_rhso_sanitation_data');
			
		}


		if(isset($query) && !empty($query)){
			return 'Success';
		}else{
			return 'Failed';
		}
	}

	public function update_status_today_submission($school, $district, $date, $status, $email)
	{
		/*$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$get_rhso_name = $this->mongo_db->where('email', $email)->get('rhso_users');
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

		if(!empty($get_rhso_name)){
			$name = $get_rhso_name[0]['rhso_name'];
			$rhso_mobile = $get_rhso_name[0]['rhso_mobile'];
			
		}

		$history = array(
					'status' => $status,
					'email' => $email,
					'rhso_name' => $name,
					'rhso_mobile' => $rhso_mobile,
					'created_time' => date('Y-m-d H:i:s')
					);*/
		

		$insert = $this->mongo_db->where(array('School Name'=>$school, 'District'=>$district, 'Date'=>$date))->set(array('history.status'=>$status))->update('tswreis_rhso_sanitation_data');

		if(isset($insert) && !empty($insert)){
			return 'Success';
		}else{
			return 'Failed';
		}
		
	}

/* Get rhso sanitation data */

	public function show_rhso_sanitation_submitted_list($email, $start_date, $end_date)
	{
		//echo print_r($start_date, TRUE);
		//echo print_r($end_date, TRUE);

		if($start_date == $end_date){
			//echo print_r($start_date, TRUE); //exit();
			$query = $this->mongo_db->where(array('history.email'=>$email, 'Date'=> $start_date))->get('tswreis_rhso_sanitation_data');

			//echo print_r($query, TRUE); exit();
		}else{
			$query = $this->mongo_db->where(array('history.email'=>$email))->whereBetween('Date', $start_date, $end_date)->get('tswreis_rhso_sanitation_data');
		}
		

		return $query;
	}

	/*
		RHSO Data for all Institutions district wise
	*/

	public function get_academic_year_wise_collection($year, $user_type)
	{
		if(preg_match("/PANACEA/i", $user_type) || preg_match("/PANACEA_HS/", $user_type) || preg_match("/PANACEA_DOCTOR/", $user_type) || preg_match("/PANACEA_ADMIN/", $user_type) || preg_match("/TSWREIS_FO/", $user_type) || preg_match("/TSWREIS_ADMIN/", $user_type))
		{
			if($year == "2019-2020"){
				$academic = $this->screening_app_col_sw;
			}
			elseif($year == "2020-2021"){
				$academic = $this->screening_app_col_sw_2020_2021;
			}
			elseif($year == "2021-2022"){
				$academic = $this->screening_app_col_sw_2021_2022;
			}
			else
			{
				$academic = $this->screening_app_col_sw;
			}
		}
		elseif (preg_match("/TTWREIS/i", $user_type) || preg_match("/TTWREIS_HS/", $user_type) || preg_match("/TTWREIS_DOCTOR/", $user_type) || preg_match("/TTWREIS_ADMIN/", $user_type) || preg_match("/TTWREIS_FO/", $user_type)) {
			if($year == "2019-2020"){
				$academic = $this->screening_app_col_tt;
			}elseif($year == "2020-2021"){
				$academic = $this->screening_app_col_tt_2020_2021;
			}elseif($year == "2021-2022"){
				$academic = $this->screening_app_col_tt_2021_2022;
			}else{
				$academic = $this->screening_app_col_tt;
			}
		}
		elseif (preg_match("/BCWELFARE/i", $user_type) || preg_match("/BCWELFARE_HS/", $user_type) || preg_match("/BCWELFARE_DOCTOR/", $user_type) || preg_match("/BCWELFARE_ADMIN/", $user_type) || preg_match("/BCWELFARE_FO/", $user_type)) {
			if($year == "2019-2020"){
				$academic = $this->screening_app_col_bc;
			}elseif($year == "2020-2021"){
				$academic = $this->screening_app_col_bc_2020_2021;
			}elseif($year == "2021-2022"){
				$academic = $this->screening_app_col_bc_2021_2022;
			}else
			{
				$academic = $this->screening_app_col_bc;
			}
		}
		

		return $academic;	
	}

	public function get_start_end_date_for_requests_academic_year($year)
	{
		if($year == '2015-2016'){
			$data['start_date'] = '2015-05-20';
			$data['end_date'] = '2016-05-20';
		}elseif($year == '2016-2017'){
			$data['start_date'] = '2016-05-21';
			$data['end_date'] = '2017-05-20';
		}elseif ($year == '2017-2018') {
			$data['start_date'] = '2017-05-21';
			$data['end_date'] = '2018-05-20';
		}elseif ($year == '2018-2019') {
			$data['start_date'] = '2018-05-21';
			$data['end_date'] = '2019-05-20';
		}elseif ($year == '2019-2020') {
			$data['start_date'] = '2019-05-21';
			$data['end_date'] = '2020-05-20';
		}elseif ($year == '2020-2021') {
			$data['start_date'] = '2020-05-21';
			$data['end_date'] = '2021-05-20';
		}elseif ($year == '2021-2022') {
			$data['start_date'] = '2021-05-21';
			$data['end_date'] = '2022-05-20';
		}

		return $data;
	}

	public function district_wise_counts_for_rhso($email, $district, $user_type, $academic_year)
	{

		if(isset($user_type) && !empty($user_type))
		{
			if(preg_match("/PANACEA/i", $user_type))
			{
				if(isset($academic_year) && !empty($academic_year)){
					$collection = $this->get_academic_year_wise_collection($academic_year, $user_type);
				}else{
					return "Send Valid academic year";
				}

				$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
				$data['total_scls'] = $this->mongo_db->where('district_name', $district)->count ('panacea_schools_list');
				$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

				$data['total_studs'] = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.District', $district)->count($collection);
				$data['total_request'] = $this->mongo_db->where('doc_data.widget_data.page1.Student Info.District.field_ref', $district)->count($this->health_request_col_panacea_hs);
				 
				return $data; 
			}
			else
			{
				return "User type Not Found";
			}
			
		}
		else{
			return "User Type Mismatched";
		}
	}

	/*
		Get get schools names and total request counts and student counts
	*/

	public function get_schools_info_for_rhso_with_counts($district, $user_type, $academic_year)
	{
		$final_array = [];
		if(preg_match("/PANACEA/i", $user_type) || $user_type == "PANACEA_ADMIN")
		{
			if(isset($academic_year) && !empty($academic_year)){
				$collection = $this->get_academic_year_wise_collection($academic_year, $user_type);
			}else{
				return "Send Valid academic year";
			}

			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			if($district == "All"){
				$schools = $this->mongo_db->select('school_name')->get ('panacea_schools_list');
			}
			else{
				$schools = $this->mongo_db->select('school_name')->where('district_name', $district)->get ('panacea_schools_list');
			}
			
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

			foreach ($schools as $scl) {
				$total_studs = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $scl['school_name'])->count($collection);
				$total_request = $this->mongo_db->where('doc_data.widget_data.page1.Student Info.School Name.field_ref', $scl['school_name'])->count($this->health_request_col_panacea_hs);

				$data['school_name'] = $scl['school_name'];
				$data['total_students'] = $total_studs;
				$data['total_requests'] = $total_request;
				array_push($final_array, $data);
			}
			
			return $final_array; 
		}elseif(preg_match("/TTWREIS/i", $user_type) || $user_type == "TTWREIS_ADMIN")
		{
			if(isset($academic_year) && !empty($academic_year)){
				$collection = $this->get_academic_year_wise_collection($academic_year, $user_type);
			}else{
				return "Send Valid academic year";
			}

			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			if($district == "All"){
				$schools = $this->mongo_db->select('school_name')->get ('ttwreis_schools_list');
			}
			else{
				$schools = $this->mongo_db->select('school_name')->where('district_name', $district)->get ('ttwreis_schools_list');
			}
			
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

			foreach ($schools as $scl) {
				$total_studs = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $scl['school_name'])->count($collection);
				$total_request = $this->mongo_db->where('doc_data.widget_data.page1.Student Info.School Name.field_ref', $scl['school_name'])->count($this->health_request_col_ttwreis_hs);

				$data['school_name'] = $scl['school_name'];
				$data['total_students'] = $total_studs;
				$data['total_requests'] = $total_request;
				array_push($final_array, $data);
			}
			
			return $final_array; 
		}elseif(preg_match("/BCWELFARE/i", $user_type) || $user_type == "BCWELFARE_ADMIN")
		{
			if(isset($academic_year) && !empty($academic_year)){
				$collection = $this->get_academic_year_wise_collection($academic_year, $user_type);
			}else{
				return "Send Valid academic year";
			}

			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			if($district == "All"){
				$schools = $this->mongo_db->select('school_name')->get ('bc_welfare_schools_districts');
			}
			else{
				$schools = $this->mongo_db->select('school_name')->where('district_name', $district)->get ('bc_welfare_schools_districts');
			}
			
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

			foreach ($schools as $scl) {
				$total_studs = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $scl['school_name'])->count($collection);
				$total_request = $this->mongo_db->where('doc_data.widget_data.page1.Student Info.School Name.field_ref', $scl['school_name'])->count($this->health_request_col_bcwelfare_hs);

				$data['school_name'] = $scl['school_name'];
				$data['total_students'] = $total_studs;
				$data['total_requests'] = $total_request;
				array_push($final_array, $data);
			}
			
			return $final_array; 
		}else
		{
			return "User type Not Found";
		}
	}

	public function get_requests_for_selected_span($district, $user_type, $start, $end, $school)
	{
		if(isset($user_type) && !empty($user_type))
		{
			if(preg_match("/PANACEA/i", $user_type))
			{

				if($district == "All" && $school =="All")
				{
					$query['Normal'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal'))->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_panacea_hs);

					$query['Emergency'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency'))->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_panacea_hs);

					$query['Chronic'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic'))->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_panacea_hs);

					/*$exists_doctor = array('history.submitted_by' => array('$regex' => 'panacea.dr'),'history.current_stage' => 'Doctor');
					$query['doc_response'] = $this->mongo_db->select(array('history'))->where($exists_doctor)->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_panacea_hs);

					$query['Cured'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured'))->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_panacea_hs);*/
				}
				elseif ($district != "All" && $school =="All") {
					$query['Normal'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_panacea_hs);

					$query['Emergency'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_panacea_hs);

					$query['Chronic'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_panacea_hs);
				}
				elseif ($school !="All") {
					$query['Normal'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_panacea_hs);

					$query['Emergency'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_panacea_hs);

					$query['Chronic'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_panacea_hs);
				}
				
				return $query; 
			}
			elseif (preg_match("/TTWREIS/i", $user_type)) {
				if($district == "All" && $school =="All")
				{
					$query['Normal'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal'))->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_ttwreis_hs);

					$query['Emergency'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency'))->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_ttwreis_hs);

					$query['Chronic'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic'))->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_ttwreis_hs);

					/*$exists_doctor = array('history.submitted_by' => array('$regex' => 'panacea.dr'),'history.current_stage' => 'Doctor');
					$query['doc_response'] = $this->mongo_db->select(array('history'))->where($exists_doctor)->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_ttwreis_hs);

					$query['Cured'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured'))->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_ttwreis_hs);*/
				}
				elseif ($district != "All" && $school =="All") {
					$query['Normal'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_ttwreis_hs);

					$query['Emergency'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_ttwreis_hs);

					$query['Chronic'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_ttwreis_hs);
				}
				elseif ($school !="All") {
					$query['Normal'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_ttwreis_hs);

					$query['Emergency'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_ttwreis_hs);

					$query['Chronic'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_ttwreis_hs);
				}
				
				return $query; 
			}
			elseif (preg_match("/BCWELFARE/i", $user_type)) {
				if($district == "All" && $school =="All")
				{
					$query['Normal'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal'))->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_bcwelfare_hs);

					$query['Emergency'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency'))->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_bcwelfare_hs);

					$query['Chronic'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic'))->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_bcwelfare_hs);

					/*$exists_doctor = array('history.submitted_by' => array('$regex' => 'panacea.dr'),'history.current_stage' => 'Doctor');
					$query['doc_response'] = $this->mongo_db->select(array('history'))->where($exists_doctor)->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_bcwelfare_hs);

					$query['Cured'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured'))->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_bcwelfare_hs);*/
				}
				elseif ($district != "All" && $school =="All") {
					$query['Normal'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_bcwelfare_hs);

					$query['Emergency'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_bcwelfare_hs);

					$query['Chronic'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_bcwelfare_hs);
				}
				elseif ($school !="All") {
					$query['Normal'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_bcwelfare_hs);

					$query['Emergency'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_bcwelfare_hs);

					$query['Chronic'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->whereBetween('history.0.time',$start, $end)->count($this->health_request_col_bcwelfare_hs);
				}
				
				return $query; 
			}
			else
			{
				return "User type Not Found";
			}
			
		}
		else{
			return "User Type Not Found";
		}
	}

	public function get_diseases_with_counts_for_request_type($dist, $user_type, $start_date, $end_date, $scl, $req_type)
	{
		$subtype = [];
		$problems = [];

		if(isset($user_type) && !empty($user_type) && preg_match("/PANACEA/i", $user_type))
		{
			if($scl == 'All')
			{
				switch ($req_type) {
					case 'Emergency':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Emergency'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Emergency', 'doc_data.widget_data.page1.Student Info.District.field_ref'=> $dist))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
						foreach ($emer as $em) {
							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];

							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;

						break;

					case 'Chronic':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Chronic'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Chronic', 'doc_data.widget_data.page1.Student Info.District.field_ref'=> $dist))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
						$empty = [];
						foreach ($emer as $em) {

							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
							array_push($empty, $data1);
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
							array_push($empty, $data2);
							$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
							array_push($empty, $data3);
							$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
							array_push($empty, $data4);
							$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
							array_push($empty, $data5);
							$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
							array_push($empty, $data6);
							$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
							array_push($empty, $data7);
							$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
							array_push($empty, $data8);
							$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
							array_push($empty, $data9);
							$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
							array_push($empty, $data10);
							$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
							array_push($empty, $data11);
							$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
							array_push($empty, $data12);
							$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
							array_push($empty, $data13);

							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data3 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data4 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data5 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data6 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data7 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data8 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data9 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data10 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data11 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data12 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data13 as $key => $value) {
								array_push($subtype, $value);
							}
						
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;
						break;

					case 'Normal':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Normal'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Normal', 'doc_data.widget_data.page1.Student Info.District.field_ref'=> $dist))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
						$empty = [];
						foreach ($emer as $em) {

							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
							array_push($empty, $data1);
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
							array_push($empty, $data2);
							$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
							array_push($empty, $data3);
							$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
							array_push($empty, $data4);
							$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
							array_push($empty, $data5);
							$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
							array_push($empty, $data6);
							$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
							array_push($empty, $data7);
							$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
							array_push($empty, $data8);
							$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
							array_push($empty, $data9);
							$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
							array_push($empty, $data10);
							$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
							array_push($empty, $data11);
							$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
							array_push($empty, $data12);
							$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
							array_push($empty, $data13);

							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data3 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data4 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data5 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data6 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data7 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data8 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data9 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data10 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data11 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data12 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data13 as $key => $value) {
								array_push($subtype, $value);
							}				
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;

						break;

					case 'Cured':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Emergency', 'doc_data.widget_data.page1.Problem Info.Chronic', 'doc_data.widget_data.page1.Problem Info.Normal'))->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured', 'doc_data.widget_data.page1.Student Info.District.field_ref'=> $dist))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');

						$empty = [];

						foreach ($emer as $key => $em) {
							$data14 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
							$data15 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];

							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
							array_push($empty, $data1);
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
							array_push($empty, $data2);
							$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
							array_push($empty, $data3);
							$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
							array_push($empty, $data4);
							$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
							array_push($empty, $data5);
							$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
							array_push($empty, $data6);
							$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
							array_push($empty, $data7);
							$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
							array_push($empty, $data8);
							$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
							array_push($empty, $data9);
							$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
							array_push($empty, $data10);
							$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
							array_push($empty, $data11);
							$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
							array_push($empty, $data12);
							$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
							array_push($empty, $data13);

							$data16 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
							array_push($empty, $data1);
							$data17 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
							array_push($empty, $data2);
							$data18 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
							array_push($empty, $data3);
							$data19 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
							array_push($empty, $data4);
							$data20 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
							array_push($empty, $data5);
							$data21 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
							array_push($empty, $data6);
							$data22 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
							array_push($empty, $data7);
							$data23 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
							array_push($empty, $data8);
							$data24 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
							array_push($empty, $data9);
							$data25 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
							array_push($empty, $data10);
							$data26 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
							array_push($empty, $data11);
							$data27 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
							array_push($empty, $data12);
							$data28 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
							array_push($empty, $data13);

							foreach ($data14 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data15 as $key => $value) {
								array_push($subtype, $value);
							}


							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data3 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data4 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data5 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data6 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data7 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data8 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data9 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data10 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data11 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data12 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data13 as $key => $value) {
								array_push($subtype, $value);
							}

							foreach ($data16 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data17 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data18 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data19 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data20 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data21 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data22 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data23 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data24 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data25 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data26 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data27 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data28 as $key => $value) {
								array_push($subtype, $value);
							}
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;


						break;
					
					default:
						# code...
						break;
				}
			}
			/*
				School level starts here in else
			*/
			else 
			{
				switch ($req_type) {
					case 'Emergency':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Emergency'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Emergency', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
						foreach ($emer as $em) {
							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];

							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;

						break;

					case 'Chronic':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Chronic'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Chronic', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
						$empty = [];
						foreach ($emer as $em) {

							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
							array_push($empty, $data1);
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
							array_push($empty, $data2);
							$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
							array_push($empty, $data3);
							$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
							array_push($empty, $data4);
							$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
							array_push($empty, $data5);
							$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
							array_push($empty, $data6);
							$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
							array_push($empty, $data7);
							$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
							array_push($empty, $data8);
							$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
							array_push($empty, $data9);
							$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
							array_push($empty, $data10);
							$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
							array_push($empty, $data11);
							$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
							array_push($empty, $data12);
							$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
							array_push($empty, $data13);

							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data3 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data4 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data5 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data6 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data7 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data8 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data9 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data10 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data11 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data12 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data13 as $key => $value) {
								array_push($subtype, $value);
							}
						
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;
						break;

					case 'Normal':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Normal'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Normal', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
						$empty = [];
						foreach ($emer as $em) {

							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
							array_push($empty, $data1);
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
							array_push($empty, $data2);
							$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
							array_push($empty, $data3);
							$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
							array_push($empty, $data4);
							$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
							array_push($empty, $data5);
							$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
							array_push($empty, $data6);
							$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
							array_push($empty, $data7);
							$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
							array_push($empty, $data8);
							$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
							array_push($empty, $data9);
							$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
							array_push($empty, $data10);
							$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
							array_push($empty, $data11);
							$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
							array_push($empty, $data12);
							$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
							array_push($empty, $data13);

							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data3 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data4 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data5 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data6 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data7 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data8 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data9 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data10 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data11 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data12 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data13 as $key => $value) {
								array_push($subtype, $value);
							}				
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;

						break;

					case 'Cured':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Emergency', 'doc_data.widget_data.page1.Problem Info.Chronic', 'doc_data.widget_data.page1.Problem Info.Normal'))->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');

						$empty = [];

						foreach ($emer as $key => $em) {
							$data14 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
							$data15 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];

							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
							array_push($empty, $data1);
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
							array_push($empty, $data2);
							$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
							array_push($empty, $data3);
							$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
							array_push($empty, $data4);
							$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
							array_push($empty, $data5);
							$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
							array_push($empty, $data6);
							$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
							array_push($empty, $data7);
							$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
							array_push($empty, $data8);
							$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
							array_push($empty, $data9);
							$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
							array_push($empty, $data10);
							$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
							array_push($empty, $data11);
							$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
							array_push($empty, $data12);
							$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
							array_push($empty, $data13);

							$data16 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
							array_push($empty, $data1);
							$data17 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
							array_push($empty, $data2);
							$data18 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
							array_push($empty, $data3);
							$data19 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
							array_push($empty, $data4);
							$data20 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
							array_push($empty, $data5);
							$data21 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
							array_push($empty, $data6);
							$data22 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
							array_push($empty, $data7);
							$data23 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
							array_push($empty, $data8);
							$data24 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
							array_push($empty, $data9);
							$data25 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
							array_push($empty, $data10);
							$data26 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
							array_push($empty, $data11);
							$data27 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
							array_push($empty, $data12);
							$data28 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
							array_push($empty, $data13);

							foreach ($data14 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data15 as $key => $value) {
								array_push($subtype, $value);
							}


							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data3 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data4 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data5 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data6 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data7 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data8 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data9 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data10 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data11 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data12 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data13 as $key => $value) {
								array_push($subtype, $value);
							}

							foreach ($data16 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data17 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data18 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data19 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data20 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data21 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data22 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data23 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data24 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data25 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data26 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data27 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data28 as $key => $value) {
								array_push($subtype, $value);
							}
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;


						break;
					
					default:
						# code...
						break;
				}
			}
		}elseif($user_type == "TTWREIS_HS" || $user_type == "TTWREIS_ADMIN")
		{
			if($scl == 'All')
			{
				switch ($req_type) {
					case 'Emergency':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Emergency'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Emergency', 'doc_data.widget_data.page1.Student Info.District.field_ref'=> $dist))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016108181933756_static_html');
						foreach ($emer as $em) {
							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];

							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;

						break;

					case 'Chronic':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Chronic'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Chronic', 'doc_data.widget_data.page1.Student Info.District.field_ref'=> $dist))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016108181933756_static_html');
						$empty = [];
						foreach ($emer as $em) {

							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
							array_push($empty, $data1);
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
							array_push($empty, $data2);
							$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
							array_push($empty, $data3);
							$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
							array_push($empty, $data4);
							$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
							array_push($empty, $data5);
							$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
							array_push($empty, $data6);
							$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
							array_push($empty, $data7);
							$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
							array_push($empty, $data8);
							$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
							array_push($empty, $data9);
							$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
							array_push($empty, $data10);
							$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
							array_push($empty, $data11);
							$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
							array_push($empty, $data12);
							$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
							array_push($empty, $data13);

							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data3 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data4 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data5 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data6 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data7 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data8 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data9 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data10 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data11 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data12 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data13 as $key => $value) {
								array_push($subtype, $value);
							}
						
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;
						break;

					case 'Normal':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Normal'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Normal', 'doc_data.widget_data.page1.Student Info.District.field_ref'=> $dist))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016108181933756_static_html');
						$empty = [];
						foreach ($emer as $em) {

							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
							array_push($empty, $data1);
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
							array_push($empty, $data2);
							$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
							array_push($empty, $data3);
							$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
							array_push($empty, $data4);
							$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
							array_push($empty, $data5);
							$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
							array_push($empty, $data6);
							$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
							array_push($empty, $data7);
							$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
							array_push($empty, $data8);
							$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
							array_push($empty, $data9);
							$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
							array_push($empty, $data10);
							$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
							array_push($empty, $data11);
							$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
							array_push($empty, $data12);
							$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
							array_push($empty, $data13);

							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data3 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data4 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data5 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data6 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data7 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data8 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data9 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data10 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data11 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data12 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data13 as $key => $value) {
								array_push($subtype, $value);
							}				
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;

						break;

					case 'Cured':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Emergency', 'doc_data.widget_data.page1.Problem Info.Chronic', 'doc_data.widget_data.page1.Problem Info.Normal'))->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured', 'doc_data.widget_data.page1.Student Info.District.field_ref'=> $dist))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016108181933756_static_html');

						$empty = [];

						foreach ($emer as $key => $em) {
							$data14 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
							$data15 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];

							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
							array_push($empty, $data1);
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
							array_push($empty, $data2);
							$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
							array_push($empty, $data3);
							$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
							array_push($empty, $data4);
							$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
							array_push($empty, $data5);
							$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
							array_push($empty, $data6);
							$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
							array_push($empty, $data7);
							$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
							array_push($empty, $data8);
							$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
							array_push($empty, $data9);
							$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
							array_push($empty, $data10);
							$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
							array_push($empty, $data11);
							$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
							array_push($empty, $data12);
							$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
							array_push($empty, $data13);

							$data16 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
							array_push($empty, $data1);
							$data17 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
							array_push($empty, $data2);
							$data18 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
							array_push($empty, $data3);
							$data19 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
							array_push($empty, $data4);
							$data20 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
							array_push($empty, $data5);
							$data21 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
							array_push($empty, $data6);
							$data22 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
							array_push($empty, $data7);
							$data23 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
							array_push($empty, $data8);
							$data24 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
							array_push($empty, $data9);
							$data25 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
							array_push($empty, $data10);
							$data26 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
							array_push($empty, $data11);
							$data27 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
							array_push($empty, $data12);
							$data28 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
							array_push($empty, $data13);

							foreach ($data14 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data15 as $key => $value) {
								array_push($subtype, $value);
							}


							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data3 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data4 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data5 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data6 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data7 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data8 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data9 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data10 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data11 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data12 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data13 as $key => $value) {
								array_push($subtype, $value);
							}

							foreach ($data16 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data17 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data18 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data19 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data20 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data21 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data22 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data23 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data24 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data25 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data26 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data27 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data28 as $key => $value) {
								array_push($subtype, $value);
							}
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;


						break;
					
					default:
						# code...
						break;
				}
			}
			/*
				School level starts here in else
			*/
			else 
			{
				switch ($req_type) {
					case 'Emergency':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Emergency'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Emergency', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016108181933756_static_html');
						foreach ($emer as $em) {
							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];

							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;

						break;

					case 'Chronic':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Chronic'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Chronic', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016108181933756_static_html');
						$empty = [];
						foreach ($emer as $em) {

							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
							array_push($empty, $data1);
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
							array_push($empty, $data2);
							$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
							array_push($empty, $data3);
							$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
							array_push($empty, $data4);
							$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
							array_push($empty, $data5);
							$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
							array_push($empty, $data6);
							$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
							array_push($empty, $data7);
							$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
							array_push($empty, $data8);
							$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
							array_push($empty, $data9);
							$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
							array_push($empty, $data10);
							$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
							array_push($empty, $data11);
							$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
							array_push($empty, $data12);
							$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
							array_push($empty, $data13);

							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data3 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data4 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data5 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data6 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data7 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data8 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data9 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data10 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data11 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data12 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data13 as $key => $value) {
								array_push($subtype, $value);
							}
						
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;
						break;

					case 'Normal':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Normal'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Normal', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016108181933756_static_html');
						$empty = [];
						foreach ($emer as $em) {

							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
							array_push($empty, $data1);
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
							array_push($empty, $data2);
							$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
							array_push($empty, $data3);
							$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
							array_push($empty, $data4);
							$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
							array_push($empty, $data5);
							$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
							array_push($empty, $data6);
							$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
							array_push($empty, $data7);
							$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
							array_push($empty, $data8);
							$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
							array_push($empty, $data9);
							$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
							array_push($empty, $data10);
							$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
							array_push($empty, $data11);
							$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
							array_push($empty, $data12);
							$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
							array_push($empty, $data13);

							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data3 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data4 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data5 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data6 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data7 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data8 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data9 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data10 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data11 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data12 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data13 as $key => $value) {
								array_push($subtype, $value);
							}				
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;

						break;

					case 'Cured':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Emergency', 'doc_data.widget_data.page1.Problem Info.Chronic', 'doc_data.widget_data.page1.Problem Info.Normal'))->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016108181933756_static_html');

						$empty = [];

						foreach ($emer as $key => $em) {
							$data14 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
							$data15 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];

							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
							array_push($empty, $data1);
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
							array_push($empty, $data2);
							$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
							array_push($empty, $data3);
							$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
							array_push($empty, $data4);
							$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
							array_push($empty, $data5);
							$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
							array_push($empty, $data6);
							$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
							array_push($empty, $data7);
							$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
							array_push($empty, $data8);
							$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
							array_push($empty, $data9);
							$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
							array_push($empty, $data10);
							$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
							array_push($empty, $data11);
							$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
							array_push($empty, $data12);
							$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
							array_push($empty, $data13);

							$data16 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
							array_push($empty, $data1);
							$data17 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
							array_push($empty, $data2);
							$data18 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
							array_push($empty, $data3);
							$data19 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
							array_push($empty, $data4);
							$data20 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
							array_push($empty, $data5);
							$data21 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
							array_push($empty, $data6);
							$data22 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
							array_push($empty, $data7);
							$data23 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
							array_push($empty, $data8);
							$data24 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
							array_push($empty, $data9);
							$data25 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
							array_push($empty, $data10);
							$data26 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
							array_push($empty, $data11);
							$data27 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
							array_push($empty, $data12);
							$data28 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
							array_push($empty, $data13);

							foreach ($data14 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data15 as $key => $value) {
								array_push($subtype, $value);
							}


							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data3 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data4 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data5 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data6 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data7 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data8 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data9 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data10 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data11 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data12 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data13 as $key => $value) {
								array_push($subtype, $value);
							}

							foreach ($data16 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data17 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data18 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data19 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data20 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data21 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data22 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data23 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data24 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data25 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data26 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data27 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data28 as $key => $value) {
								array_push($subtype, $value);
							}
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;


						break;
					
					default:
						# code...
						break;
				}
			}
		}elseif($user_type == "BCWELFARE_HS" || $user_type == "BCWELFARE_ADMIN")
		{
			if($scl == 'All')
			{
				switch ($req_type) {
					case 'Emergency':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Emergency'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Emergency', 'doc_data.widget_data.page1.Student Info.District.field_ref'=> $dist))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2018122191146894_static_html');
						foreach ($emer as $em) {
							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];

							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;

						break;

					case 'Chronic':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Chronic'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Chronic', 'doc_data.widget_data.page1.Student Info.District.field_ref'=> $dist))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2018122191146894_static_html');
						$empty = [];
						foreach ($emer as $em) {

							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
							array_push($empty, $data1);
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
							array_push($empty, $data2);
							$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
							array_push($empty, $data3);
							$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
							array_push($empty, $data4);
							$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
							array_push($empty, $data5);
							$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
							array_push($empty, $data6);
							$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
							array_push($empty, $data7);
							$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
							array_push($empty, $data8);
							$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
							array_push($empty, $data9);
							$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
							array_push($empty, $data10);
							$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
							array_push($empty, $data11);
							$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
							array_push($empty, $data12);
							$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
							array_push($empty, $data13);

							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data3 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data4 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data5 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data6 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data7 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data8 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data9 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data10 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data11 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data12 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data13 as $key => $value) {
								array_push($subtype, $value);
							}
						
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;
						break;

					case 'Normal':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Normal'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Normal', 'doc_data.widget_data.page1.Student Info.District.field_ref'=> $dist))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2018122191146894_static_html');
						$empty = [];
						foreach ($emer as $em) {

							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
							array_push($empty, $data1);
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
							array_push($empty, $data2);
							$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
							array_push($empty, $data3);
							$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
							array_push($empty, $data4);
							$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
							array_push($empty, $data5);
							$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
							array_push($empty, $data6);
							$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
							array_push($empty, $data7);
							$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
							array_push($empty, $data8);
							$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
							array_push($empty, $data9);
							$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
							array_push($empty, $data10);
							$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
							array_push($empty, $data11);
							$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
							array_push($empty, $data12);
							$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
							array_push($empty, $data13);

							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data3 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data4 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data5 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data6 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data7 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data8 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data9 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data10 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data11 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data12 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data13 as $key => $value) {
								array_push($subtype, $value);
							}				
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;

						break;

					case 'Cured':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Emergency', 'doc_data.widget_data.page1.Problem Info.Chronic', 'doc_data.widget_data.page1.Problem Info.Normal'))->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured', 'doc_data.widget_data.page1.Student Info.District.field_ref'=> $dist))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2018122191146894_static_html');

						$empty = [];

						foreach ($emer as $key => $em) {
							$data14 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
							$data15 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];

							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
							array_push($empty, $data1);
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
							array_push($empty, $data2);
							$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
							array_push($empty, $data3);
							$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
							array_push($empty, $data4);
							$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
							array_push($empty, $data5);
							$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
							array_push($empty, $data6);
							$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
							array_push($empty, $data7);
							$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
							array_push($empty, $data8);
							$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
							array_push($empty, $data9);
							$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
							array_push($empty, $data10);
							$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
							array_push($empty, $data11);
							$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
							array_push($empty, $data12);
							$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
							array_push($empty, $data13);

							$data16 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
							array_push($empty, $data1);
							$data17 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
							array_push($empty, $data2);
							$data18 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
							array_push($empty, $data3);
							$data19 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
							array_push($empty, $data4);
							$data20 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
							array_push($empty, $data5);
							$data21 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
							array_push($empty, $data6);
							$data22 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
							array_push($empty, $data7);
							$data23 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
							array_push($empty, $data8);
							$data24 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
							array_push($empty, $data9);
							$data25 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
							array_push($empty, $data10);
							$data26 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
							array_push($empty, $data11);
							$data27 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
							array_push($empty, $data12);
							$data28 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
							array_push($empty, $data13);

							foreach ($data14 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data15 as $key => $value) {
								array_push($subtype, $value);
							}


							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data3 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data4 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data5 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data6 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data7 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data8 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data9 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data10 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data11 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data12 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data13 as $key => $value) {
								array_push($subtype, $value);
							}

							foreach ($data16 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data17 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data18 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data19 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data20 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data21 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data22 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data23 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data24 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data25 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data26 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data27 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data28 as $key => $value) {
								array_push($subtype, $value);
							}
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;


						break;
					
					default:
						# code...
						break;
				}
			}
			/*
				School level starts here in else
			*/
			else 
			{
				switch ($req_type) {
					case 'Emergency':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Emergency'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Emergency', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2018122191146894_static_html');
						foreach ($emer as $em) {
							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];

							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;

						break;

					case 'Chronic':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Chronic'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Chronic', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2018122191146894_static_html');
						$empty = [];
						foreach ($emer as $em) {

							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
							array_push($empty, $data1);
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
							array_push($empty, $data2);
							$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
							array_push($empty, $data3);
							$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
							array_push($empty, $data4);
							$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
							array_push($empty, $data5);
							$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
							array_push($empty, $data6);
							$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
							array_push($empty, $data7);
							$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
							array_push($empty, $data8);
							$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
							array_push($empty, $data9);
							$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
							array_push($empty, $data10);
							$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
							array_push($empty, $data11);
							$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
							array_push($empty, $data12);
							$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
							array_push($empty, $data13);

							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data3 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data4 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data5 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data6 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data7 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data8 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data9 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data10 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data11 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data12 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data13 as $key => $value) {
								array_push($subtype, $value);
							}
						
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;
						break;

					case 'Normal':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Normal'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Normal', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2018122191146894_static_html');
						$empty = [];
						foreach ($emer as $em) {

							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
							array_push($empty, $data1);
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
							array_push($empty, $data2);
							$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
							array_push($empty, $data3);
							$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
							array_push($empty, $data4);
							$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
							array_push($empty, $data5);
							$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
							array_push($empty, $data6);
							$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
							array_push($empty, $data7);
							$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
							array_push($empty, $data8);
							$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
							array_push($empty, $data9);
							$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
							array_push($empty, $data10);
							$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
							array_push($empty, $data11);
							$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
							array_push($empty, $data12);
							$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
							array_push($empty, $data13);

							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data3 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data4 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data5 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data6 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data7 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data8 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data9 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data10 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data11 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data12 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data13 as $key => $value) {
								array_push($subtype, $value);
							}				
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;

						break;

					case 'Cured':
						$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Emergency', 'doc_data.widget_data.page1.Problem Info.Chronic', 'doc_data.widget_data.page1.Problem Info.Normal'))->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2018122191146894_static_html');

						$empty = [];

						foreach ($emer as $key => $em) {
							$data14 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
							$data15 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];

							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
							array_push($empty, $data1);
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
							array_push($empty, $data2);
							$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
							array_push($empty, $data3);
							$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
							array_push($empty, $data4);
							$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
							array_push($empty, $data5);
							$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
							array_push($empty, $data6);
							$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
							array_push($empty, $data7);
							$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
							array_push($empty, $data8);
							$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
							array_push($empty, $data9);
							$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
							array_push($empty, $data10);
							$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
							array_push($empty, $data11);
							$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
							array_push($empty, $data12);
							$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
							array_push($empty, $data13);

							$data16 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
							array_push($empty, $data1);
							$data17 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
							array_push($empty, $data2);
							$data18 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
							array_push($empty, $data3);
							$data19 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
							array_push($empty, $data4);
							$data20 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
							array_push($empty, $data5);
							$data21 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
							array_push($empty, $data6);
							$data22 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
							array_push($empty, $data7);
							$data23 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
							array_push($empty, $data8);
							$data24 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
							array_push($empty, $data9);
							$data25 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
							array_push($empty, $data10);
							$data26 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
							array_push($empty, $data11);
							$data27 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
							array_push($empty, $data12);
							$data28 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
							array_push($empty, $data13);

							foreach ($data14 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data15 as $key => $value) {
								array_push($subtype, $value);
							}


							foreach ($data1 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data2 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data3 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data4 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data5 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data6 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data7 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data8 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data9 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data10 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data11 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data12 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data13 as $key => $value) {
								array_push($subtype, $value);
							}

							foreach ($data16 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data17 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data18 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data19 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data20 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data21 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data22 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data23 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data24 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data25 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data26 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data27 as $key => $value) {
								array_push($subtype, $value);
							}
							foreach ($data28 as $key => $value) {
								array_push($subtype, $value);
							}
						}

						$final = array_count_values($subtype);

						foreach ($final as $key => $value) {
							$out['label'] = $key;
							$out['value'] = $value;
							array_push($problems, $out);
						}

						return $problems;


						break;
					
					default:
						# code...
						break;
				}
			}
		}else
		{
			return "Check User Type";
		}
	}

	/*
		Get students for Diseases with selected span
	*/
	public function get_students_for_selected_disease_for_span($district, $user_type, $start_date, $end_date, $scl, $request_type, $symptom)
	{
		if(isset($user_type) && !empty($user_type) && preg_match("/PANACEA/i", $user_type))
		{
			if($scl == "All")
			{
				$schools = [];

					switch ($request_type) {
						case 'Emergency':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Emergency', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');


								foreach ($emer as $em) {
									$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
									$check1 = in_array($symptom, $data1);
									
									if(!empty($check1))
									{
										array_push($schools, $em);

									}
									$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];
									$check2 = in_array($symptom, $data2);
									if(!empty($check2))
									{
										array_push($schools, $em);

									}

								}


							
							return $schools;
							break;

						case 'Chronic':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Chronic', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
							$empty = [];
							foreach ($emer as $em) {

								$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
								$check1 = in_array($symptom, $data1);
										
								if(!empty($check1))
								{
									array_push($schools, $em);

								}
								$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
								$check2 = in_array($symptom, $data2);
															
								if(!empty($check2))
								{
									array_push($schools, $em);

								}
								$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
								$check3 = in_array($symptom, $data3);
															
								if(!empty($check3))
								{
									array_push($schools, $em);

								}
								$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
								$check4 = in_array($symptom, $data4);
															
								if(!empty($check4))
								{
									array_push($schools, $em);

								}
								$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
								$check5 = in_array($symptom, $data5);
															
								if(!empty($check5))
								{
									array_push($schools, $em);

								}
								$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
								$check6 = in_array($symptom, $data6);
															
								if(!empty($check6))
								{
									array_push($schools, $em);

								}
								$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
								$check7 = in_array($symptom, $data7);
															
								if(!empty($check7))
								{
									array_push($schools, $em);

								}
								$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
								$check8 = in_array($symptom, $data8);
															
								if(!empty($check8))
								{
									array_push($schools, $em);

								}
								$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
								$check9 = in_array($symptom, $data9);
															
								if(!empty($check9))
								{
									array_push($schools, $em);

								}
								$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
								$check10 = in_array($symptom, $data10);
															
								if(!empty($check10))
								{
									array_push($schools, $em);

								}
								$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
								$check11 = in_array($symptom, $data11);
															
								if(!empty($check11))
								{
									array_push($schools, $em);

								}
								$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
								$check12 = in_array($symptom, $data12);
															
								if(!empty($check12))
								{
									array_push($schools, $em);

								}
								$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
								$check13 = in_array($symptom, $data13);
															
								if(!empty($check13))
								{
									array_push($schools, $em);

								}
							}

							
							return $schools;
							break;

						case 'Normal':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Normal', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');


							$empty = [];
							foreach ($emer as $em) {

								$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
								$check1 = in_array($symptom, $data1);
										
								if(!empty($check1))
								{
									array_push($schools, $em);

								}
								$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
								$check2 = in_array($symptom, $data2);
										
								if(!empty($check2))
								{
									array_push($schools, $em);

								}
								$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
								$check3 = in_array($symptom, $data3);
										
								if(!empty($check3))
								{
									array_push($schools, $em);

								}
								$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
								$check4 = in_array($symptom, $data4);
										
								if(!empty($check4))
								{
									array_push($schools, $em);

								}
								$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
								$check5 = in_array($symptom, $data5);
										
								if(!empty($check5))
								{
									array_push($schools, $em);

								}
								$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
								$check6 = in_array($symptom, $data6);
										
								if(!empty($check6))
								{
									array_push($schools, $em);

								}
								$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
								$check7 = in_array($symptom, $data7);
										
								if(!empty($check7))
								{
									array_push($schools, $em);

								}
								$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
								$check8 = in_array($symptom, $data8);
										
								if(!empty($check8))
								{
									array_push($schools, $em);

								}
								$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
								$check9 = in_array($symptom, $data9);
										
								if(!empty($check9))
								{
									array_push($schools, $em);

								}
								$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
								$check10 = in_array($symptom, $data10);
										
								if(!empty($check10))
								{
									array_push($schools, $em);

								}
								$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
								$check11 = in_array($symptom, $data11);
										
								if(!empty($check11))
								{
									array_push($schools, $em);

								}
								$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
								$check12 = in_array($symptom, $data12);
										
								if(!empty($check12))
								{
									array_push($schools, $em);

								}
								$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
								$check13 = in_array($symptom, $data13);
										
								if(!empty($check13))
								{
									array_push($schools, $em);

								}
							}


							return $schools;
							break;

						case 'Cured':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');

							$empty = [];

							foreach ($emer as $key => $em) {
								$data14 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
								$check14 = in_array($symptom, $data14);
										
								if(!empty($check14))
								{
									array_push($schools, $em);

								}
								$data15 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];
								$check15 = in_array($symptom, $data15);
										
								if(!empty($check15))
								{
									array_push($schools, $em);

								}

								$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
								$check1 = in_array($symptom, $data1);
										
								if(!empty($check1))
								{
									array_push($schools, $em);

								}
								$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
								$check2 = in_array($symptom, $data2);
										
								if(!empty($check2))
								{
									array_push($schools, $em);

								}
								$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
								$check3 = in_array($symptom, $data3);
										
								if(!empty($check3))
								{
									array_push($schools, $em);

								}
								$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
								$check4 = in_array($symptom, $data4);
										
								if(!empty($check4))
								{
									array_push($schools, $em);

								}
								$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
								$check5 = in_array($symptom, $data5);
										
								if(!empty($check5))
								{
									array_push($schools, $em);

								}
								$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
								$check6 = in_array($symptom, $data6);
										
								if(!empty($check6))
								{
									array_push($schools, $em);

								}
								$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
								$check7 = in_array($symptom, $data7);
										
								if(!empty($check7))
								{
									array_push($schools, $em);

								}
								$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
								$check8 = in_array($symptom, $data8);
										
								if(!empty($check8))
								{
									array_push($schools, $em);

								}
								$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
								$check9 = in_array($symptom, $data9);
										
								if(!empty($check9))
								{
									array_push($schools, $em);

								}
								$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
								$check10 = in_array($symptom, $data10);
										
								if(!empty($check10))
								{
									array_push($schools, $em);

								};
								$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
								$check11 = in_array($symptom, $data11);
										
								if(!empty($check11))
								{
									array_push($schools, $em);

								};
								$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
								$check12 = in_array($symptom, $data12);
										
								if(!empty($check12))
								{
									array_push($schools, $em);

								};
								$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
								$check13 = in_array($symptom, $data13);
										
								if(!empty($check13))
								{
									array_push($schools, $em);

								};

								$data16 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
								$check16 = in_array($symptom, $data16);
										
								if(!empty($check16))
								{
									array_push($schools, $em);

								};
								$data17 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
								$check17 = in_array($symptom, $data17);
										
								if(!empty($check17))
								{
									array_push($schools, $em);

								};
								$data18 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
								$check18 = in_array($symptom, $data18);
										
								if(!empty($check18))
								{
									array_push($schools, $em);

								};
								$data19 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
								$check19 = in_array($symptom, $data19);
										
								if(!empty($check19))
								{
									array_push($schools, $em);

								}
								$data20 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
								$check20 = in_array($symptom, $data20);
										
								if(!empty($check20))
								{
									array_push($schools, $em);

								}
								$data21 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
								$check21 = in_array($symptom, $data21);
										
								if(!empty($check21))
								{
									array_push($schools, $em);

								}
								$data22 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
								$check22 = in_array($symptom, $data22);
										
								if(!empty($check22))
								{
									array_push($schools, $em);

								}
								$data23 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
								$check23 = in_array($symptom, $data23);
										
								if(!empty($check23))
								{
									array_push($schools, $em);

								}
								$data24 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
								$check24 = in_array($symptom, $data24);
										
								if(!empty($check24))
								{
									array_push($schools, $em);

								}
								$data25 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
								$check25 = in_array($symptom, $data25);
										
								if(!empty($check25))
								{
									array_push($schools, $em);

								}
								$data26 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
								$check26 = in_array($symptom, $data26);
										
								if(!empty($check26))
								{
									array_push($schools, $em);

								}
								$data27 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
								$check27 = in_array($symptom, $data27);
										
								if(!empty($check27))
								{
									array_push($schools, $em);

								}
								$data28 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
								$check28 = in_array($symptom, $data28);
										
								if(!empty($check28))
								{
									array_push($schools, $em);

								}

							}
							
							return $schools;
							break;
						
						default:
							# code...
							break;
					}
			}
			/*
				School level else starts here
			*/
			else
			{
				$schools = [];

					switch ($request_type) {
						case 'Emergency':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Emergency', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');


								foreach ($emer as $em) {
									$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
									$check1 = in_array($symptom, $data1);
									
									if(!empty($check1))
									{
										array_push($schools, $em);

									}
									$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];
									$check2 = in_array($symptom, $data2);
									if(!empty($check2))
									{
										array_push($schools, $em);

									}

								}


							
							return $schools;
							break;

						case 'Chronic':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Chronic', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
							$empty = [];
							foreach ($emer as $em) {

								$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
								$check1 = in_array($symptom, $data1);
										
								if(!empty($check1))
								{
									array_push($schools, $em);

								}
								$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
								$check2 = in_array($symptom, $data2);
															
								if(!empty($check2))
								{
									array_push($schools, $em);

								}
								$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
								$check3 = in_array($symptom, $data3);
															
								if(!empty($check3))
								{
									array_push($schools, $em);

								}
								$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
								$check4 = in_array($symptom, $data4);
															
								if(!empty($check4))
								{
									array_push($schools, $em);

								}
								$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
								$check5 = in_array($symptom, $data5);
															
								if(!empty($check5))
								{
									array_push($schools, $em);

								}
								$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
								$check6 = in_array($symptom, $data6);
															
								if(!empty($check6))
								{
									array_push($schools, $em);

								}
								$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
								$check7 = in_array($symptom, $data7);
															
								if(!empty($check7))
								{
									array_push($schools, $em);

								}
								$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
								$check8 = in_array($symptom, $data8);
															
								if(!empty($check8))
								{
									array_push($schools, $em);

								}
								$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
								$check9 = in_array($symptom, $data9);
															
								if(!empty($check9))
								{
									array_push($schools, $em);

								}
								$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
								$check10 = in_array($symptom, $data10);
															
								if(!empty($check10))
								{
									array_push($schools, $em);

								}
								$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
								$check11 = in_array($symptom, $data11);
															
								if(!empty($check11))
								{
									array_push($schools, $em);

								}
								$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
								$check12 = in_array($symptom, $data12);
															
								if(!empty($check12))
								{
									array_push($schools, $em);

								}
								$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
								$check13 = in_array($symptom, $data13);
															
								if(!empty($check13))
								{
									array_push($schools, $em);

								}
							}

							
							return $schools;
							break;

						case 'Normal':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Normal', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');


							$empty = [];
							foreach ($emer as $em) {

								$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
								$check1 = in_array($symptom, $data1);
										
								if(!empty($check1))
								{
									array_push($schools, $em);

								}
								$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
								$check2 = in_array($symptom, $data2);
										
								if(!empty($check2))
								{
									array_push($schools, $em);

								}
								$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
								$check3 = in_array($symptom, $data3);
										
								if(!empty($check3))
								{
									array_push($schools, $em);

								}
								$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
								$check4 = in_array($symptom, $data4);
										
								if(!empty($check4))
								{
									array_push($schools, $em);

								}
								$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
								$check5 = in_array($symptom, $data5);
										
								if(!empty($check5))
								{
									array_push($schools, $em);

								}
								$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
								$check6 = in_array($symptom, $data6);
										
								if(!empty($check6))
								{
									array_push($schools, $em);

								}
								$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
								$check7 = in_array($symptom, $data7);
										
								if(!empty($check7))
								{
									array_push($schools, $em);

								}
								$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
								$check8 = in_array($symptom, $data8);
										
								if(!empty($check8))
								{
									array_push($schools, $em);

								}
								$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
								$check9 = in_array($symptom, $data9);
										
								if(!empty($check9))
								{
									array_push($schools, $em);

								}
								$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
								$check10 = in_array($symptom, $data10);
										
								if(!empty($check10))
								{
									array_push($schools, $em);

								}
								$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
								$check11 = in_array($symptom, $data11);
										
								if(!empty($check11))
								{
									array_push($schools, $em);

								}
								$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
								$check12 = in_array($symptom, $data12);
										
								if(!empty($check12))
								{
									array_push($schools, $em);

								}
								$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
								$check13 = in_array($symptom, $data13);
										
								if(!empty($check13))
								{
									array_push($schools, $em);

								}
							}


							return $schools;
							break;

						case 'Cured':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');

							$empty = [];

							foreach ($emer as $key => $em) {
								$data14 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
								$check14 = in_array($symptom, $data14);
										
								if(!empty($check14))
								{
									array_push($schools, $em);

								}
								$data15 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];
								$check15 = in_array($symptom, $data15);
										
								if(!empty($check15))
								{
									array_push($schools, $em);

								}

								$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
								$check1 = in_array($symptom, $data1);
										
								if(!empty($check1))
								{
									array_push($schools, $em);

								}
								$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
								$check2 = in_array($symptom, $data2);
										
								if(!empty($check2))
								{
									array_push($schools, $em);

								}
								$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
								$check3 = in_array($symptom, $data3);
										
								if(!empty($check3))
								{
									array_push($schools, $em);

								}
								$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
								$check4 = in_array($symptom, $data4);
										
								if(!empty($check4))
								{
									array_push($schools, $em);

								}
								$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
								$check5 = in_array($symptom, $data5);
										
								if(!empty($check5))
								{
									array_push($schools, $em);

								}
								$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
								$check6 = in_array($symptom, $data6);
										
								if(!empty($check6))
								{
									array_push($schools, $em);

								}
								$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
								$check7 = in_array($symptom, $data7);
										
								if(!empty($check7))
								{
									array_push($schools, $em);

								}
								$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
								$check8 = in_array($symptom, $data8);
										
								if(!empty($check8))
								{
									array_push($schools, $em);

								}
								$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
								$check9 = in_array($symptom, $data9);
										
								if(!empty($check9))
								{
									array_push($schools, $em);

								}
								$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
								$check10 = in_array($symptom, $data10);
										
								if(!empty($check10))
								{
									array_push($schools, $em);

								};
								$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
								$check11 = in_array($symptom, $data11);
										
								if(!empty($check11))
								{
									array_push($schools, $em);

								};
								$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
								$check12 = in_array($symptom, $data12);
										
								if(!empty($check12))
								{
									array_push($schools, $em);

								};
								$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
								$check13 = in_array($symptom, $data13);
										
								if(!empty($check13))
								{
									array_push($schools, $em);

								};

								$data16 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
								$check16 = in_array($symptom, $data16);
										
								if(!empty($check16))
								{
									array_push($schools, $em);

								};
								$data17 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
								$check17 = in_array($symptom, $data17);
										
								if(!empty($check17))
								{
									array_push($schools, $em);

								};
								$data18 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
								$check18 = in_array($symptom, $data18);
										
								if(!empty($check18))
								{
									array_push($schools, $em);

								};
								$data19 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
								$check19 = in_array($symptom, $data19);
										
								if(!empty($check19))
								{
									array_push($schools, $em);

								}
								$data20 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
								$check20 = in_array($symptom, $data20);
										
								if(!empty($check20))
								{
									array_push($schools, $em);

								}
								$data21 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
								$check21 = in_array($symptom, $data21);
										
								if(!empty($check21))
								{
									array_push($schools, $em);

								}
								$data22 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
								$check22 = in_array($symptom, $data22);
										
								if(!empty($check22))
								{
									array_push($schools, $em);

								}
								$data23 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
								$check23 = in_array($symptom, $data23);
										
								if(!empty($check23))
								{
									array_push($schools, $em);

								}
								$data24 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
								$check24 = in_array($symptom, $data24);
										
								if(!empty($check24))
								{
									array_push($schools, $em);

								}
								$data25 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
								$check25 = in_array($symptom, $data25);
										
								if(!empty($check25))
								{
									array_push($schools, $em);

								}
								$data26 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
								$check26 = in_array($symptom, $data26);
										
								if(!empty($check26))
								{
									array_push($schools, $em);

								}
								$data27 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
								$check27 = in_array($symptom, $data27);
										
								if(!empty($check27))
								{
									array_push($schools, $em);

								}
								$data28 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
								$check28 = in_array($symptom, $data28);
										
								if(!empty($check28))
								{
									array_push($schools, $em);

								}

							}
							
							return $schools;
							break;
						
						default:
							# code...
							break;
					}
			}
		}elseif(isset($user_type) && !empty($user_type) && preg_match("/TTWREIS/i", $user_type))
		{
			if($scl == "All")
			{
				$schools = [];

					switch ($request_type) {
						case 'Emergency':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Emergency', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016108181933756_static_html');


								foreach ($emer as $em) {
									$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
									$check1 = in_array($symptom, $data1);
									
									if(!empty($check1))
									{
										array_push($schools, $em);

									}
									$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];
									$check2 = in_array($symptom, $data2);
									if(!empty($check2))
									{
										array_push($schools, $em);

									}

								}


							
							return $schools;
							break;

						case 'Chronic':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Chronic', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016108181933756_static_html');
							$empty = [];
							foreach ($emer as $em) {

								$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
								$check1 = in_array($symptom, $data1);
										
								if(!empty($check1))
								{
									array_push($schools, $em);

								}
								$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
								$check2 = in_array($symptom, $data2);
															
								if(!empty($check2))
								{
									array_push($schools, $em);

								}
								$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
								$check3 = in_array($symptom, $data3);
															
								if(!empty($check3))
								{
									array_push($schools, $em);

								}
								$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
								$check4 = in_array($symptom, $data4);
															
								if(!empty($check4))
								{
									array_push($schools, $em);

								}
								$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
								$check5 = in_array($symptom, $data5);
															
								if(!empty($check5))
								{
									array_push($schools, $em);

								}
								$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
								$check6 = in_array($symptom, $data6);
															
								if(!empty($check6))
								{
									array_push($schools, $em);

								}
								$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
								$check7 = in_array($symptom, $data7);
															
								if(!empty($check7))
								{
									array_push($schools, $em);

								}
								$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
								$check8 = in_array($symptom, $data8);
															
								if(!empty($check8))
								{
									array_push($schools, $em);

								}
								$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
								$check9 = in_array($symptom, $data9);
															
								if(!empty($check9))
								{
									array_push($schools, $em);

								}
								$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
								$check10 = in_array($symptom, $data10);
															
								if(!empty($check10))
								{
									array_push($schools, $em);

								}
								$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
								$check11 = in_array($symptom, $data11);
															
								if(!empty($check11))
								{
									array_push($schools, $em);

								}
								$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
								$check12 = in_array($symptom, $data12);
															
								if(!empty($check12))
								{
									array_push($schools, $em);

								}
								$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
								$check13 = in_array($symptom, $data13);
															
								if(!empty($check13))
								{
									array_push($schools, $em);

								}
							}

							
							return $schools;
							break;

						case 'Normal':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Normal', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016108181933756_static_html');


							$empty = [];
							foreach ($emer as $em) {

								$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
								$check1 = in_array($symptom, $data1);
										
								if(!empty($check1))
								{
									array_push($schools, $em);

								}
								$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
								$check2 = in_array($symptom, $data2);
										
								if(!empty($check2))
								{
									array_push($schools, $em);

								}
								$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
								$check3 = in_array($symptom, $data3);
										
								if(!empty($check3))
								{
									array_push($schools, $em);

								}
								$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
								$check4 = in_array($symptom, $data4);
										
								if(!empty($check4))
								{
									array_push($schools, $em);

								}
								$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
								$check5 = in_array($symptom, $data5);
										
								if(!empty($check5))
								{
									array_push($schools, $em);

								}
								$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
								$check6 = in_array($symptom, $data6);
										
								if(!empty($check6))
								{
									array_push($schools, $em);

								}
								$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
								$check7 = in_array($symptom, $data7);
										
								if(!empty($check7))
								{
									array_push($schools, $em);

								}
								$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
								$check8 = in_array($symptom, $data8);
										
								if(!empty($check8))
								{
									array_push($schools, $em);

								}
								$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
								$check9 = in_array($symptom, $data9);
										
								if(!empty($check9))
								{
									array_push($schools, $em);

								}
								$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
								$check10 = in_array($symptom, $data10);
										
								if(!empty($check10))
								{
									array_push($schools, $em);

								}
								$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
								$check11 = in_array($symptom, $data11);
										
								if(!empty($check11))
								{
									array_push($schools, $em);

								}
								$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
								$check12 = in_array($symptom, $data12);
										
								if(!empty($check12))
								{
									array_push($schools, $em);

								}
								$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
								$check13 = in_array($symptom, $data13);
										
								if(!empty($check13))
								{
									array_push($schools, $em);

								}
							}


							return $schools;
							break;

						case 'Cured':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016108181933756_static_html');

							$empty = [];

							foreach ($emer as $key => $em) {
								$data14 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
								$check14 = in_array($symptom, $data14);
										
								if(!empty($check14))
								{
									array_push($schools, $em);

								}
								$data15 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];
								$check15 = in_array($symptom, $data15);
										
								if(!empty($check15))
								{
									array_push($schools, $em);

								}

								$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
								$check1 = in_array($symptom, $data1);
										
								if(!empty($check1))
								{
									array_push($schools, $em);

								}
								$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
								$check2 = in_array($symptom, $data2);
										
								if(!empty($check2))
								{
									array_push($schools, $em);

								}
								$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
								$check3 = in_array($symptom, $data3);
										
								if(!empty($check3))
								{
									array_push($schools, $em);

								}
								$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
								$check4 = in_array($symptom, $data4);
										
								if(!empty($check4))
								{
									array_push($schools, $em);

								}
								$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
								$check5 = in_array($symptom, $data5);
										
								if(!empty($check5))
								{
									array_push($schools, $em);

								}
								$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
								$check6 = in_array($symptom, $data6);
										
								if(!empty($check6))
								{
									array_push($schools, $em);

								}
								$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
								$check7 = in_array($symptom, $data7);
										
								if(!empty($check7))
								{
									array_push($schools, $em);

								}
								$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
								$check8 = in_array($symptom, $data8);
										
								if(!empty($check8))
								{
									array_push($schools, $em);

								}
								$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
								$check9 = in_array($symptom, $data9);
										
								if(!empty($check9))
								{
									array_push($schools, $em);

								}
								$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
								$check10 = in_array($symptom, $data10);
										
								if(!empty($check10))
								{
									array_push($schools, $em);

								};
								$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
								$check11 = in_array($symptom, $data11);
										
								if(!empty($check11))
								{
									array_push($schools, $em);

								};
								$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
								$check12 = in_array($symptom, $data12);
										
								if(!empty($check12))
								{
									array_push($schools, $em);

								};
								$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
								$check13 = in_array($symptom, $data13);
										
								if(!empty($check13))
								{
									array_push($schools, $em);

								};

								$data16 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
								$check16 = in_array($symptom, $data16);
										
								if(!empty($check16))
								{
									array_push($schools, $em);

								};
								$data17 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
								$check17 = in_array($symptom, $data17);
										
								if(!empty($check17))
								{
									array_push($schools, $em);

								};
								$data18 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
								$check18 = in_array($symptom, $data18);
										
								if(!empty($check18))
								{
									array_push($schools, $em);

								};
								$data19 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
								$check19 = in_array($symptom, $data19);
										
								if(!empty($check19))
								{
									array_push($schools, $em);

								}
								$data20 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
								$check20 = in_array($symptom, $data20);
										
								if(!empty($check20))
								{
									array_push($schools, $em);

								}
								$data21 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
								$check21 = in_array($symptom, $data21);
										
								if(!empty($check21))
								{
									array_push($schools, $em);

								}
								$data22 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
								$check22 = in_array($symptom, $data22);
										
								if(!empty($check22))
								{
									array_push($schools, $em);

								}
								$data23 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
								$check23 = in_array($symptom, $data23);
										
								if(!empty($check23))
								{
									array_push($schools, $em);

								}
								$data24 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
								$check24 = in_array($symptom, $data24);
										
								if(!empty($check24))
								{
									array_push($schools, $em);

								}
								$data25 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
								$check25 = in_array($symptom, $data25);
										
								if(!empty($check25))
								{
									array_push($schools, $em);

								}
								$data26 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
								$check26 = in_array($symptom, $data26);
										
								if(!empty($check26))
								{
									array_push($schools, $em);

								}
								$data27 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
								$check27 = in_array($symptom, $data27);
										
								if(!empty($check27))
								{
									array_push($schools, $em);

								}
								$data28 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
								$check28 = in_array($symptom, $data28);
										
								if(!empty($check28))
								{
									array_push($schools, $em);

								}

							}
							
							return $schools;
							break;
						
						default:
							# code...
							break;
					}
			}
			/*
				School level else starts here
			*/
			else
			{
				$schools = [];

					switch ($request_type) {
						case 'Emergency':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Emergency', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016108181933756_static_html');


								foreach ($emer as $em) {
									$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
									$check1 = in_array($symptom, $data1);
									
									if(!empty($check1))
									{
										array_push($schools, $em);

									}
									$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];
									$check2 = in_array($symptom, $data2);
									if(!empty($check2))
									{
										array_push($schools, $em);

									}

								}


							
							return $schools;
							break;

						case 'Chronic':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Chronic', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016108181933756_static_html');
							$empty = [];
							foreach ($emer as $em) {

								$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
								$check1 = in_array($symptom, $data1);
										
								if(!empty($check1))
								{
									array_push($schools, $em);

								}
								$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
								$check2 = in_array($symptom, $data2);
															
								if(!empty($check2))
								{
									array_push($schools, $em);

								}
								$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
								$check3 = in_array($symptom, $data3);
															
								if(!empty($check3))
								{
									array_push($schools, $em);

								}
								$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
								$check4 = in_array($symptom, $data4);
															
								if(!empty($check4))
								{
									array_push($schools, $em);

								}
								$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
								$check5 = in_array($symptom, $data5);
															
								if(!empty($check5))
								{
									array_push($schools, $em);

								}
								$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
								$check6 = in_array($symptom, $data6);
															
								if(!empty($check6))
								{
									array_push($schools, $em);

								}
								$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
								$check7 = in_array($symptom, $data7);
															
								if(!empty($check7))
								{
									array_push($schools, $em);

								}
								$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
								$check8 = in_array($symptom, $data8);
															
								if(!empty($check8))
								{
									array_push($schools, $em);

								}
								$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
								$check9 = in_array($symptom, $data9);
															
								if(!empty($check9))
								{
									array_push($schools, $em);

								}
								$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
								$check10 = in_array($symptom, $data10);
															
								if(!empty($check10))
								{
									array_push($schools, $em);

								}
								$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
								$check11 = in_array($symptom, $data11);
															
								if(!empty($check11))
								{
									array_push($schools, $em);

								}
								$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
								$check12 = in_array($symptom, $data12);
															
								if(!empty($check12))
								{
									array_push($schools, $em);

								}
								$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
								$check13 = in_array($symptom, $data13);
															
								if(!empty($check13))
								{
									array_push($schools, $em);

								}
							}

							
							return $schools;
							break;

						case 'Normal':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Normal', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016108181933756_static_html');


							$empty = [];
							foreach ($emer as $em) {

								$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
								$check1 = in_array($symptom, $data1);
										
								if(!empty($check1))
								{
									array_push($schools, $em);

								}
								$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
								$check2 = in_array($symptom, $data2);
										
								if(!empty($check2))
								{
									array_push($schools, $em);

								}
								$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
								$check3 = in_array($symptom, $data3);
										
								if(!empty($check3))
								{
									array_push($schools, $em);

								}
								$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
								$check4 = in_array($symptom, $data4);
										
								if(!empty($check4))
								{
									array_push($schools, $em);

								}
								$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
								$check5 = in_array($symptom, $data5);
										
								if(!empty($check5))
								{
									array_push($schools, $em);

								}
								$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
								$check6 = in_array($symptom, $data6);
										
								if(!empty($check6))
								{
									array_push($schools, $em);

								}
								$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
								$check7 = in_array($symptom, $data7);
										
								if(!empty($check7))
								{
									array_push($schools, $em);

								}
								$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
								$check8 = in_array($symptom, $data8);
										
								if(!empty($check8))
								{
									array_push($schools, $em);

								}
								$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
								$check9 = in_array($symptom, $data9);
										
								if(!empty($check9))
								{
									array_push($schools, $em);

								}
								$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
								$check10 = in_array($symptom, $data10);
										
								if(!empty($check10))
								{
									array_push($schools, $em);

								}
								$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
								$check11 = in_array($symptom, $data11);
										
								if(!empty($check11))
								{
									array_push($schools, $em);

								}
								$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
								$check12 = in_array($symptom, $data12);
										
								if(!empty($check12))
								{
									array_push($schools, $em);

								}
								$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
								$check13 = in_array($symptom, $data13);
										
								if(!empty($check13))
								{
									array_push($schools, $em);

								}
							}


							return $schools;
							break;

						case 'Cured':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016108181933756_static_html');

							$empty = [];

							foreach ($emer as $key => $em) {
								$data14 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
								$check14 = in_array($symptom, $data14);
										
								if(!empty($check14))
								{
									array_push($schools, $em);

								}
								$data15 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];
								$check15 = in_array($symptom, $data15);
										
								if(!empty($check15))
								{
									array_push($schools, $em);

								}

								$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
								$check1 = in_array($symptom, $data1);
										
								if(!empty($check1))
								{
									array_push($schools, $em);

								}
								$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
								$check2 = in_array($symptom, $data2);
										
								if(!empty($check2))
								{
									array_push($schools, $em);

								}
								$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
								$check3 = in_array($symptom, $data3);
										
								if(!empty($check3))
								{
									array_push($schools, $em);

								}
								$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
								$check4 = in_array($symptom, $data4);
										
								if(!empty($check4))
								{
									array_push($schools, $em);

								}
								$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
								$check5 = in_array($symptom, $data5);
										
								if(!empty($check5))
								{
									array_push($schools, $em);

								}
								$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
								$check6 = in_array($symptom, $data6);
										
								if(!empty($check6))
								{
									array_push($schools, $em);

								}
								$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
								$check7 = in_array($symptom, $data7);
										
								if(!empty($check7))
								{
									array_push($schools, $em);

								}
								$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
								$check8 = in_array($symptom, $data8);
										
								if(!empty($check8))
								{
									array_push($schools, $em);

								}
								$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
								$check9 = in_array($symptom, $data9);
										
								if(!empty($check9))
								{
									array_push($schools, $em);

								}
								$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
								$check10 = in_array($symptom, $data10);
										
								if(!empty($check10))
								{
									array_push($schools, $em);

								};
								$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
								$check11 = in_array($symptom, $data11);
										
								if(!empty($check11))
								{
									array_push($schools, $em);

								};
								$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
								$check12 = in_array($symptom, $data12);
										
								if(!empty($check12))
								{
									array_push($schools, $em);

								};
								$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
								$check13 = in_array($symptom, $data13);
										
								if(!empty($check13))
								{
									array_push($schools, $em);

								};

								$data16 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
								$check16 = in_array($symptom, $data16);
										
								if(!empty($check16))
								{
									array_push($schools, $em);

								};
								$data17 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
								$check17 = in_array($symptom, $data17);
										
								if(!empty($check17))
								{
									array_push($schools, $em);

								};
								$data18 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
								$check18 = in_array($symptom, $data18);
										
								if(!empty($check18))
								{
									array_push($schools, $em);

								};
								$data19 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
								$check19 = in_array($symptom, $data19);
										
								if(!empty($check19))
								{
									array_push($schools, $em);

								}
								$data20 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
								$check20 = in_array($symptom, $data20);
										
								if(!empty($check20))
								{
									array_push($schools, $em);

								}
								$data21 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
								$check21 = in_array($symptom, $data21);
										
								if(!empty($check21))
								{
									array_push($schools, $em);

								}
								$data22 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
								$check22 = in_array($symptom, $data22);
										
								if(!empty($check22))
								{
									array_push($schools, $em);

								}
								$data23 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
								$check23 = in_array($symptom, $data23);
										
								if(!empty($check23))
								{
									array_push($schools, $em);

								}
								$data24 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
								$check24 = in_array($symptom, $data24);
										
								if(!empty($check24))
								{
									array_push($schools, $em);

								}
								$data25 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
								$check25 = in_array($symptom, $data25);
										
								if(!empty($check25))
								{
									array_push($schools, $em);

								}
								$data26 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
								$check26 = in_array($symptom, $data26);
										
								if(!empty($check26))
								{
									array_push($schools, $em);

								}
								$data27 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
								$check27 = in_array($symptom, $data27);
										
								if(!empty($check27))
								{
									array_push($schools, $em);

								}
								$data28 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
								$check28 = in_array($symptom, $data28);
										
								if(!empty($check28))
								{
									array_push($schools, $em);

								}

							}
							
							return $schools;
							break;
						
						default:
							# code...
							break;
					}
			}
		}elseif(isset($user_type) && !empty($user_type) && preg_match("/BCWELFARE/i", $user_type))
		{
			if($scl == "All")
			{
				$schools = [];

					switch ($request_type) {
						case 'Emergency':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Emergency', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2018122191146894_static_html');


								foreach ($emer as $em) {
									$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
									$check1 = in_array($symptom, $data1);
									
									if(!empty($check1))
									{
										array_push($schools, $em);

									}
									$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];
									$check2 = in_array($symptom, $data2);
									if(!empty($check2))
									{
										array_push($schools, $em);

									}

								}


							
							return $schools;
							break;

						case 'Chronic':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Chronic', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2018122191146894_static_html');
							$empty = [];
							foreach ($emer as $em) {

								$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
								$check1 = in_array($symptom, $data1);
										
								if(!empty($check1))
								{
									array_push($schools, $em);

								}
								$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
								$check2 = in_array($symptom, $data2);
															
								if(!empty($check2))
								{
									array_push($schools, $em);

								}
								$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
								$check3 = in_array($symptom, $data3);
															
								if(!empty($check3))
								{
									array_push($schools, $em);

								}
								$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
								$check4 = in_array($symptom, $data4);
															
								if(!empty($check4))
								{
									array_push($schools, $em);

								}
								$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
								$check5 = in_array($symptom, $data5);
															
								if(!empty($check5))
								{
									array_push($schools, $em);

								}
								$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
								$check6 = in_array($symptom, $data6);
															
								if(!empty($check6))
								{
									array_push($schools, $em);

								}
								$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
								$check7 = in_array($symptom, $data7);
															
								if(!empty($check7))
								{
									array_push($schools, $em);

								}
								$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
								$check8 = in_array($symptom, $data8);
															
								if(!empty($check8))
								{
									array_push($schools, $em);

								}
								$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
								$check9 = in_array($symptom, $data9);
															
								if(!empty($check9))
								{
									array_push($schools, $em);

								}
								$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
								$check10 = in_array($symptom, $data10);
															
								if(!empty($check10))
								{
									array_push($schools, $em);

								}
								$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
								$check11 = in_array($symptom, $data11);
															
								if(!empty($check11))
								{
									array_push($schools, $em);

								}
								$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
								$check12 = in_array($symptom, $data12);
															
								if(!empty($check12))
								{
									array_push($schools, $em);

								}
								$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
								$check13 = in_array($symptom, $data13);
															
								if(!empty($check13))
								{
									array_push($schools, $em);

								}
							}

							
							return $schools;
							break;

						case 'Normal':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Normal', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2018122191146894_static_html');


							$empty = [];
							foreach ($emer as $em) {

								$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
								$check1 = in_array($symptom, $data1);
										
								if(!empty($check1))
								{
									array_push($schools, $em);

								}
								$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
								$check2 = in_array($symptom, $data2);
										
								if(!empty($check2))
								{
									array_push($schools, $em);

								}
								$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
								$check3 = in_array($symptom, $data3);
										
								if(!empty($check3))
								{
									array_push($schools, $em);

								}
								$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
								$check4 = in_array($symptom, $data4);
										
								if(!empty($check4))
								{
									array_push($schools, $em);

								}
								$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
								$check5 = in_array($symptom, $data5);
										
								if(!empty($check5))
								{
									array_push($schools, $em);

								}
								$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
								$check6 = in_array($symptom, $data6);
										
								if(!empty($check6))
								{
									array_push($schools, $em);

								}
								$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
								$check7 = in_array($symptom, $data7);
										
								if(!empty($check7))
								{
									array_push($schools, $em);

								}
								$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
								$check8 = in_array($symptom, $data8);
										
								if(!empty($check8))
								{
									array_push($schools, $em);

								}
								$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
								$check9 = in_array($symptom, $data9);
										
								if(!empty($check9))
								{
									array_push($schools, $em);

								}
								$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
								$check10 = in_array($symptom, $data10);
										
								if(!empty($check10))
								{
									array_push($schools, $em);

								}
								$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
								$check11 = in_array($symptom, $data11);
										
								if(!empty($check11))
								{
									array_push($schools, $em);

								}
								$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
								$check12 = in_array($symptom, $data12);
										
								if(!empty($check12))
								{
									array_push($schools, $em);

								}
								$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
								$check13 = in_array($symptom, $data13);
										
								if(!empty($check13))
								{
									array_push($schools, $em);

								}
							}


							return $schools;
							break;

						case 'Cured':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2018122191146894_static_html');

							$empty = [];

							foreach ($emer as $key => $em) {
								$data14 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
								$check14 = in_array($symptom, $data14);
										
								if(!empty($check14))
								{
									array_push($schools, $em);

								}
								$data15 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];
								$check15 = in_array($symptom, $data15);
										
								if(!empty($check15))
								{
									array_push($schools, $em);

								}

								$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
								$check1 = in_array($symptom, $data1);
										
								if(!empty($check1))
								{
									array_push($schools, $em);

								}
								$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
								$check2 = in_array($symptom, $data2);
										
								if(!empty($check2))
								{
									array_push($schools, $em);

								}
								$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
								$check3 = in_array($symptom, $data3);
										
								if(!empty($check3))
								{
									array_push($schools, $em);

								}
								$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
								$check4 = in_array($symptom, $data4);
										
								if(!empty($check4))
								{
									array_push($schools, $em);

								}
								$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
								$check5 = in_array($symptom, $data5);
										
								if(!empty($check5))
								{
									array_push($schools, $em);

								}
								$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
								$check6 = in_array($symptom, $data6);
										
								if(!empty($check6))
								{
									array_push($schools, $em);

								}
								$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
								$check7 = in_array($symptom, $data7);
										
								if(!empty($check7))
								{
									array_push($schools, $em);

								}
								$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
								$check8 = in_array($symptom, $data8);
										
								if(!empty($check8))
								{
									array_push($schools, $em);

								}
								$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
								$check9 = in_array($symptom, $data9);
										
								if(!empty($check9))
								{
									array_push($schools, $em);

								}
								$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
								$check10 = in_array($symptom, $data10);
										
								if(!empty($check10))
								{
									array_push($schools, $em);

								};
								$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
								$check11 = in_array($symptom, $data11);
										
								if(!empty($check11))
								{
									array_push($schools, $em);

								};
								$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
								$check12 = in_array($symptom, $data12);
										
								if(!empty($check12))
								{
									array_push($schools, $em);

								};
								$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
								$check13 = in_array($symptom, $data13);
										
								if(!empty($check13))
								{
									array_push($schools, $em);

								};

								$data16 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
								$check16 = in_array($symptom, $data16);
										
								if(!empty($check16))
								{
									array_push($schools, $em);

								};
								$data17 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
								$check17 = in_array($symptom, $data17);
										
								if(!empty($check17))
								{
									array_push($schools, $em);

								};
								$data18 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
								$check18 = in_array($symptom, $data18);
										
								if(!empty($check18))
								{
									array_push($schools, $em);

								};
								$data19 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
								$check19 = in_array($symptom, $data19);
										
								if(!empty($check19))
								{
									array_push($schools, $em);

								}
								$data20 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
								$check20 = in_array($symptom, $data20);
										
								if(!empty($check20))
								{
									array_push($schools, $em);

								}
								$data21 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
								$check21 = in_array($symptom, $data21);
										
								if(!empty($check21))
								{
									array_push($schools, $em);

								}
								$data22 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
								$check22 = in_array($symptom, $data22);
										
								if(!empty($check22))
								{
									array_push($schools, $em);

								}
								$data23 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
								$check23 = in_array($symptom, $data23);
										
								if(!empty($check23))
								{
									array_push($schools, $em);

								}
								$data24 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
								$check24 = in_array($symptom, $data24);
										
								if(!empty($check24))
								{
									array_push($schools, $em);

								}
								$data25 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
								$check25 = in_array($symptom, $data25);
										
								if(!empty($check25))
								{
									array_push($schools, $em);

								}
								$data26 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
								$check26 = in_array($symptom, $data26);
										
								if(!empty($check26))
								{
									array_push($schools, $em);

								}
								$data27 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
								$check27 = in_array($symptom, $data27);
										
								if(!empty($check27))
								{
									array_push($schools, $em);

								}
								$data28 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
								$check28 = in_array($symptom, $data28);
										
								if(!empty($check28))
								{
									array_push($schools, $em);

								}

							}
							
							return $schools;
							break;
						
						default:
							# code...
							break;
					}
			}
			/*
				School level else starts here
			*/
			else
			{
				$schools = [];

					switch ($request_type) {
						case 'Emergency':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Emergency', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2018122191146894_static_html');


								foreach ($emer as $em) {
									$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
									$check1 = in_array($symptom, $data1);
									
									if(!empty($check1))
									{
										array_push($schools, $em);

									}
									$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];
									$check2 = in_array($symptom, $data2);
									if(!empty($check2))
									{
										array_push($schools, $em);

									}

								}


							
							return $schools;
							break;

						case 'Chronic':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Chronic', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2018122191146894_static_html');
							$empty = [];
							foreach ($emer as $em) {

								$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
								$check1 = in_array($symptom, $data1);
										
								if(!empty($check1))
								{
									array_push($schools, $em);

								}
								$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
								$check2 = in_array($symptom, $data2);
															
								if(!empty($check2))
								{
									array_push($schools, $em);

								}
								$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
								$check3 = in_array($symptom, $data3);
															
								if(!empty($check3))
								{
									array_push($schools, $em);

								}
								$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
								$check4 = in_array($symptom, $data4);
															
								if(!empty($check4))
								{
									array_push($schools, $em);

								}
								$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
								$check5 = in_array($symptom, $data5);
															
								if(!empty($check5))
								{
									array_push($schools, $em);

								}
								$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
								$check6 = in_array($symptom, $data6);
															
								if(!empty($check6))
								{
									array_push($schools, $em);

								}
								$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
								$check7 = in_array($symptom, $data7);
															
								if(!empty($check7))
								{
									array_push($schools, $em);

								}
								$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
								$check8 = in_array($symptom, $data8);
															
								if(!empty($check8))
								{
									array_push($schools, $em);

								}
								$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
								$check9 = in_array($symptom, $data9);
															
								if(!empty($check9))
								{
									array_push($schools, $em);

								}
								$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
								$check10 = in_array($symptom, $data10);
															
								if(!empty($check10))
								{
									array_push($schools, $em);

								}
								$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
								$check11 = in_array($symptom, $data11);
															
								if(!empty($check11))
								{
									array_push($schools, $em);

								}
								$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
								$check12 = in_array($symptom, $data12);
															
								if(!empty($check12))
								{
									array_push($schools, $em);

								}
								$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
								$check13 = in_array($symptom, $data13);
															
								if(!empty($check13))
								{
									array_push($schools, $em);

								}
							}

							
							return $schools;
							break;

						case 'Normal':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Normal', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2018122191146894_static_html');


							$empty = [];
							foreach ($emer as $em) {

								$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
								$check1 = in_array($symptom, $data1);
										
								if(!empty($check1))
								{
									array_push($schools, $em);

								}
								$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
								$check2 = in_array($symptom, $data2);
										
								if(!empty($check2))
								{
									array_push($schools, $em);

								}
								$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
								$check3 = in_array($symptom, $data3);
										
								if(!empty($check3))
								{
									array_push($schools, $em);

								}
								$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
								$check4 = in_array($symptom, $data4);
										
								if(!empty($check4))
								{
									array_push($schools, $em);

								}
								$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
								$check5 = in_array($symptom, $data5);
										
								if(!empty($check5))
								{
									array_push($schools, $em);

								}
								$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
								$check6 = in_array($symptom, $data6);
										
								if(!empty($check6))
								{
									array_push($schools, $em);

								}
								$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
								$check7 = in_array($symptom, $data7);
										
								if(!empty($check7))
								{
									array_push($schools, $em);

								}
								$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
								$check8 = in_array($symptom, $data8);
										
								if(!empty($check8))
								{
									array_push($schools, $em);

								}
								$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
								$check9 = in_array($symptom, $data9);
										
								if(!empty($check9))
								{
									array_push($schools, $em);

								}
								$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
								$check10 = in_array($symptom, $data10);
										
								if(!empty($check10))
								{
									array_push($schools, $em);

								}
								$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
								$check11 = in_array($symptom, $data11);
										
								if(!empty($check11))
								{
									array_push($schools, $em);

								}
								$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
								$check12 = in_array($symptom, $data12);
										
								if(!empty($check12))
								{
									array_push($schools, $em);

								}
								$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
								$check13 = in_array($symptom, $data13);
										
								if(!empty($check13))
								{
									array_push($schools, $em);

								}
							}


							return $schools;
							break;

						case 'Cured':
							$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2018122191146894_static_html');

							$empty = [];

							foreach ($emer as $key => $em) {
								$data14 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
								$check14 = in_array($symptom, $data14);
										
								if(!empty($check14))
								{
									array_push($schools, $em);

								}
								$data15 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];
								$check15 = in_array($symptom, $data15);
										
								if(!empty($check15))
								{
									array_push($schools, $em);

								}

								$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
								$check1 = in_array($symptom, $data1);
										
								if(!empty($check1))
								{
									array_push($schools, $em);

								}
								$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
								$check2 = in_array($symptom, $data2);
										
								if(!empty($check2))
								{
									array_push($schools, $em);

								}
								$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
								$check3 = in_array($symptom, $data3);
										
								if(!empty($check3))
								{
									array_push($schools, $em);

								}
								$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
								$check4 = in_array($symptom, $data4);
										
								if(!empty($check4))
								{
									array_push($schools, $em);

								}
								$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
								$check5 = in_array($symptom, $data5);
										
								if(!empty($check5))
								{
									array_push($schools, $em);

								}
								$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
								$check6 = in_array($symptom, $data6);
										
								if(!empty($check6))
								{
									array_push($schools, $em);

								}
								$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
								$check7 = in_array($symptom, $data7);
										
								if(!empty($check7))
								{
									array_push($schools, $em);

								}
								$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
								$check8 = in_array($symptom, $data8);
										
								if(!empty($check8))
								{
									array_push($schools, $em);

								}
								$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
								$check9 = in_array($symptom, $data9);
										
								if(!empty($check9))
								{
									array_push($schools, $em);

								}
								$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
								$check10 = in_array($symptom, $data10);
										
								if(!empty($check10))
								{
									array_push($schools, $em);

								};
								$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
								$check11 = in_array($symptom, $data11);
										
								if(!empty($check11))
								{
									array_push($schools, $em);

								};
								$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
								$check12 = in_array($symptom, $data12);
										
								if(!empty($check12))
								{
									array_push($schools, $em);

								};
								$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
								$check13 = in_array($symptom, $data13);
										
								if(!empty($check13))
								{
									array_push($schools, $em);

								};

								$data16 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
								$check16 = in_array($symptom, $data16);
										
								if(!empty($check16))
								{
									array_push($schools, $em);

								};
								$data17 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
								$check17 = in_array($symptom, $data17);
										
								if(!empty($check17))
								{
									array_push($schools, $em);

								};
								$data18 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
								$check18 = in_array($symptom, $data18);
										
								if(!empty($check18))
								{
									array_push($schools, $em);

								};
								$data19 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
								$check19 = in_array($symptom, $data19);
										
								if(!empty($check19))
								{
									array_push($schools, $em);

								}
								$data20 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
								$check20 = in_array($symptom, $data20);
										
								if(!empty($check20))
								{
									array_push($schools, $em);

								}
								$data21 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
								$check21 = in_array($symptom, $data21);
										
								if(!empty($check21))
								{
									array_push($schools, $em);

								}
								$data22 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
								$check22 = in_array($symptom, $data22);
										
								if(!empty($check22))
								{
									array_push($schools, $em);

								}
								$data23 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
								$check23 = in_array($symptom, $data23);
										
								if(!empty($check23))
								{
									array_push($schools, $em);

								}
								$data24 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
								$check24 = in_array($symptom, $data24);
										
								if(!empty($check24))
								{
									array_push($schools, $em);

								}
								$data25 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
								$check25 = in_array($symptom, $data25);
										
								if(!empty($check25))
								{
									array_push($schools, $em);

								}
								$data26 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
								$check26 = in_array($symptom, $data26);
										
								if(!empty($check26))
								{
									array_push($schools, $em);

								}
								$data27 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
								$check27 = in_array($symptom, $data27);
										
								if(!empty($check27))
								{
									array_push($schools, $em);

								}
								$data28 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
								$check28 = in_array($symptom, $data28);
										
								if(!empty($check28))
								{
									array_push($schools, $em);

								}

							}
							
							return $schools;
							break;
						
						default:
							# code...
							break;
					}
			}
		}else{
			return "User Type Not Found";
		}
	}
	//global search for active cases
	public function get_search_with_name_or_id_for_active_requests($district, $user_type, $search, $school)
	{
		if(isset($user_type) && !empty($user_type))
		{
			if(preg_match("/PANACEA/i", $user_type))
			{
				$data = trim($search);

				if(preg_match("/_/", $data)){

					if($school == "All")
					{
						$query = $this->mongo_db->where('doc_data.widget_data.page1.Student Info.District.field_ref',$district)->whereLike('doc_data.widget_data.page1.Student Info.Unique ID', $data)->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->orderBy(array('history.0.time' => -1))->get($this->health_request_col_panacea_hs);
					}
					else
					{
						$query = $this->mongo_db->where('doc_data.widget_data.page1.Student Info.School Name.field_ref',$school)->whereLike('doc_data.widget_data.page1.Student Info.Unique ID', $data)->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->orderBy(array('history.0.time' => -1))->get($this->health_request_col_panacea_hs);
					}
					

				}else{

					if($school == "All")
					{
						$query = $this->mongo_db->where('doc_data.widget_data.page1.Student Info.District.field_ref',$district)->whereLike('doc_data.widget_data.page1.Student Info.Name.field_ref', $data)->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->orderBy(array('history.0.time' => -1))->get($this->health_request_col_panacea_hs);
					}
					else
					{
						$query = $this->mongo_db->where('doc_data.widget_data.page1.Student Info.School Name.field_ref',$school)->whereLike('doc_data.widget_data.page1.Student Info.Name.field_ref', $data)->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->orderBy(array('history.0.time' => -1))->get($this->health_request_col_panacea_hs);
					}
				
					
				}
				
				return $query; 
			}
			elseif (preg_match("/TTWREIS/i", $user_type)) {
				
					$data = trim($search);

					if(preg_match("/_/", $data)){

						if($school == "All")
						{
							$query = $this->mongo_db->where('doc_data.widget_data.page1.Student Info.District.field_ref',$district)->whereLike('doc_data.widget_data.page1.Student Info.Unique ID', $data)->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->orderBy(array('history.0.time' => -1))->get($this->health_request_col_ttwreis_hs);
						}
						else
						{
							$query = $this->mongo_db->where('doc_data.widget_data.page1.Student Info.School Name.field_ref',$school)->whereLike('doc_data.widget_data.page1.Student Info.Unique ID', $data)->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->orderBy(array('history.0.time' => -1))->get($this->health_request_col_ttwreis_hs);
						}
						

					}else{

						if($school == "All")
						{
							$query = $this->mongo_db->where('doc_data.widget_data.page1.Student Info.District.field_ref',$district)->whereLike('doc_data.widget_data.page1.Student Info.Name.field_ref', $data)->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->orderBy(array('history.0.time' => -1))->get($this->health_request_col_ttwreis_hs);
						}
						else
						{
							$query = $this->mongo_db->where('doc_data.widget_data.page1.Student Info.School Name.field_ref',$school)->whereLike('doc_data.widget_data.page1.Student Info.Name.field_ref', $data)->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->orderBy(array('history.0.time' => -1))->get($this->health_request_col_ttwreis_hs);
						}
					
						
					}
					
					return $query; 
				
			}
			elseif (preg_match("/BCWELFARE/i/", $user_type)) {
				
					$data = trim($search);

					if(preg_match("/_/", $data)){

						if($school == "All")
						{
							$query = $this->mongo_db->where('doc_data.widget_data.page1.Student Info.District.field_ref',$district)->whereLike('doc_data.widget_data.page1.Student Info.Unique ID', $data)->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->orderBy(array('history.0.time' => -1))->get($this->health_request_col_bcwelfare_hs);
						}
						else
						{
							$query = $this->mongo_db->where('doc_data.widget_data.page1.Student Info.School Name.field_ref',$school)->whereLike('doc_data.widget_data.page1.Student Info.Unique ID', $data)->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->orderBy(array('history.0.time' => -1))->get($this->health_request_col_bcwelfare_hs);
						}
						

					}else{

						if($school == "All")
						{
							$query = $this->mongo_db->where('doc_data.widget_data.page1.Student Info.District.field_ref',$district)->whereLike('doc_data.widget_data.page1.Student Info.Name.field_ref', $data)->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->orderBy(array('history.0.time' => -1))->get($this->health_request_col_bcwelfare_hs);
						}
						else
						{
							$query = $this->mongo_db->where('doc_data.widget_data.page1.Student Info.School Name.field_ref',$school)->whereLike('doc_data.widget_data.page1.Student Info.Name.field_ref', $data)->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->orderBy(array('history.0.time' => -1))->get($this->health_request_col_bcwelfare_hs);
						}
					
						
					}
					
					return $query; 
				
			}
			else
			{
				return "User type Not Found";
			}
			
		}
		else{
			return "User Type Not Found";
		}
	}

	// RHSO hospitalised students follwup

	public function get_hospitalised_students_list_for_followup($district, $user_type, $school)
	{
		if(isset($user_type) && !empty($user_type))
		{
			if(preg_match("/PANACEA/i", $user_type))
			{
				if($school == "All")
				{
					$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Status' => 'Hospitalized', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->orderBy(array('history.time' => -1))->get($this->health_request_col_panacea_hs);
				}
				else
				{
					$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Status' => 'Hospitalized', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->orderBy(array('history.time' => -1))->get($this->health_request_col_panacea_hs);
				}
				
				
				return $query; 
			}
			elseif (preg_match("/TTWREIS/i", $user_type)) {
				if($school == "All")
				{
					$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Status' => 'Hospitalized', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->orderBy(array('history.0.time' => -1))->get($this->health_request_col_ttwreis_hs);
				}
				else
				{
					$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Status' => 'Hospitalized', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->orderBy(array('history.0.time' => -1))->get($this->health_request_col_ttwreis_hs);
				}
			}
			elseif (preg_match("/BCWELFARE/i", $user_type)) {
				if($school == "All")
				{
					$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Status' => 'Hospitalized', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->orderBy(array('history.0.time' => -1))->get($this->health_request_col_bcwelfare_hs);
				}
				else
				{
					$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Status' => 'Hospitalized', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->orderBy(array('history.0.time' => -1))->get($this->health_request_col_bcwelfare_hs);
				}
			}
			else
			{
				return "User type Not Found";
			}
			
		}
		else{
			return "User Type Not Found";
		}
	}

	/*
		Get school level data
	*/
	public function get_counts_for_school_level_app($user_type, $school, $academic)
	{
		if(isset($user_type) && !empty($user_type))
		{
			if(isset($academic) && !empty($academic)){
				$collection = $this->get_academic_year_wise_collection($academic, $user_type);
				//$request = $this-> get_start_end_date_for_requests_academic_year($academic);
			}else{
				return "Send Valid academic year";
			}
			$documents = [];

			if(preg_match("/PANACEA_HS/i", $user_type))
			{
				$arr = [];
				$arr['total_studs'] = $this->mongo_db->whereLike("doc_data.widget_data.page2.Personal Information.School Name", $school)->count($collection);

				$normal = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->get($this->health_request_col_panacea_hs);

				 foreach ($normal as $nor1) {
                $exp = $nor1['doc_data']['widget_data']['page2']['Review Info']['Status'];
                if($exp != "Expired"){
                	if(empty($arr['Normal']))
                	{
                		$arr['Normal'] = 1;
                	}
                	else{
                		$arr['Normal']++;
                	}
                }
            }

				$emergency = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->get($this->health_request_col_panacea_hs);

				 foreach ($emergency as $emer1) {
                $exp = $emer1['doc_data']['widget_data']['page2']['Review Info']['Status'];
                if($exp != "Expired"){
                	if(empty($arr['Emergency']))
                	{
                		$arr['Emergency'] = 1;
                	}
                	else{
                		$arr['Emergency']++;
                	}
                   
                }
            }

				$chronic = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->get($this->health_request_col_panacea_hs);
				 foreach ($chronic as $chr1) {
                $exp = $chr1['doc_data']['widget_data']['page2']['Review Info']['Status'];
                if($exp != "Expired"){
                	if(empty($arr['Chronic']))
                	{
                		$arr['Chronic'] = 1;
                	}
                	else{
                		$arr['Chronic']++;
                	}
                   
                }
            }
				

				$arr['Cured'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->count($this->health_request_col_panacea_hs);

				return $arr;
			}
			elseif(preg_match("/TTWREIS_HS/i", $user_type)) 
			{
				$arr = [];
				$arr['total_studs'] = $this->mongo_db->whereLike("doc_data.widget_data.page2.Personal Information.School Name", $school)->count($collection);

				$normal = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->get($this->health_request_col_ttwreis_hs);

				 foreach ($normal as $nor1) {
                $exp = $nor1['doc_data']['widget_data']['page2']['Review Info']['Status'];
                if($exp != "Expired"){
                	if(empty($arr['Normal']))
                	{
                		$arr['Normal'] = 1;
                	}
                	else{
                		$arr['Normal']++;
                	}
                }
            }

				$emergency = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->get($this->health_request_col_ttwreis_hs);

				 foreach ($emergency as $emer1) {
                $exp = $emer1['doc_data']['widget_data']['page2']['Review Info']['Status'];
                if($exp != "Expired"){
                	if(empty($arr['Emergency']))
                	{
                		$arr['Emergency'] = 1;
                	}
                	else{
                		$arr['Emergency']++;
                	}
                   
                }
            }

				$chronic = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->get($this->health_request_col_ttwreis_hs);
				 foreach ($chronic as $chr1) {
                $exp = $chr1['doc_data']['widget_data']['page2']['Review Info']['Status'];
                if($exp != "Expired"){
                	if(empty($arr['Chronic']))
                	{
                		$arr['Chronic'] = 1;
                	}
                	else{
                		$arr['Chronic']++;
                	}
                   
                }
            }
				

				$arr['Cured'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->count($this->health_request_col_ttwreis_hs);

				return $arr;
			}
			elseif(preg_match("/BCWELFARE_HS/i", $user_type)) 
			{
				$arr = [];
				$arr['total_studs'] = $this->mongo_db->whereLike("doc_data.widget_data.page2.Personal Information.School Name", $school)->count($collection);

				$normal = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->get($this->health_request_col_bcwelfare_hs);

				 foreach ($normal as $nor1) {
                $exp = $nor1['doc_data']['widget_data']['page2']['Review Info']['Status'];
                if($exp != "Expired"){
                	if(empty($arr['Normal']))
                	{
                		$arr['Normal'] = 1;
                	}
                	else{
                		$arr['Normal']++;
                	}
                }
            }

				$emergency = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->get($this->health_request_col_bcwelfare_hs);

				 foreach ($emergency as $emer1) {
                $exp = $emer1['doc_data']['widget_data']['page2']['Review Info']['Status'];
                if($exp != "Expired"){
                	if(empty($arr['Emergency']))
                	{
                		$arr['Emergency'] = 1;
                	}
                	else{
                		$arr['Emergency']++;
                	}
                   
                }
            }

				$chronic = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->get($this->health_request_col_bcwelfare_hs);
				 foreach ($chronic as $chr1) {
                $exp = $chr1['doc_data']['widget_data']['page2']['Review Info']['Status'];
                if($exp != "Expired"){
                	if(empty($arr['Chronic']))
                	{
                		$arr['Chronic'] = 1;
                	}
                	else{
                		$arr['Chronic']++;
                	}
                   
                }
            }
				

				$arr['Cured'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->count($this->health_request_col_bcwelfare_hs);

				return $arr;
			}
			
		}
		else
		{
			return "User Type Not Found";
		}
	}

	/*
		Hb Values latest values and custom span
	*/
	public function get_latest_submitted_hb_values($user_type, $district, $school, $start_date, $end_date)
	{
		if(preg_match("/PANACEA/i", $user_type))
		{
			if($district == "All" && $school =="All")
			{
				$data["severe"] = $this->mongo_db->whereLte("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8)->count($this->hb_app_col_sw);
				$data["Moderate"] = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8.1, 10.0)->count($this->hb_app_col_sw);
				$data["Mild"] = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 10.1, 11.9)->count($this->hb_app_col_sw);
				$data["Normal"] = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 12, 18)->count($this->hb_app_col_sw);

				return $data;
			}
			elseif ($district != "All" && $school =="All") {
				$data["severe"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereLte("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8)->count($this->hb_app_col_sw);
				$data["Moderate"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8.1, 10.0)->count($this->hb_app_col_sw);
				$data["Mild"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 10.1, 11.9)->count($this->hb_app_col_sw);
				$data["Normal"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 12, 18)->count($this->hb_app_col_sw);

				return $data;
			}
			elseif ($school !="All") {

				$data["severe"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereLte("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8)->count($this->hb_app_col_sw);
				$data["Moderate"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8.1, 10.0)->count($this->hb_app_col_sw);
				$data["Mild"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 10.1, 11.9)->count($this->hb_app_col_sw);
				$data["Normal"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 12, 18)->count($this->hb_app_col_sw);

				$docs = $this->mongo_db->select(array("doc_data.widget_data.page1.Student Details.HB_latest.month"))->orderBy(array("doc_data.widget_data.page1.Student Details.HB_latest.month" => -1))->limit(1)->get($this->hb_app_col_sw);
				if(!empty($docs)){
					foreach ($docs as $doc) {
					$date = $doc['doc_data']['widget_data']['page1']['Student Details']['HB_latest']['month'];
					 $data["Last_submitted_date"] = (date("F", strtotime($date)).date("Y", strtotime($date)));
					}
				}else{
					$data["Last_submitted_date"] = false;
				}
				
				return $data;
			}
		}
		elseif (preg_match("/TTWREIS/i", $user_type)) {
			if($district == "All" && $school =="All")
			{
				$data["severe"] = $this->mongo_db->whereLte("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8)->count($this->hb_app_col_tt);
				$data["Moderate"] = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8.1, 10.0)->count($this->hb_app_col_tt);
				$data["Mild"] = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 10.1, 11.9)->count($this->hb_app_col_tt);
				$data["Normal"] = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 12, 18)->count($this->hb_app_col_tt);

				return $data;
			}
			elseif ($district != "All" && $school =="All") {
				$data["severe"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereLte("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8)->count($this->hb_app_col_tt);
				$data["Moderate"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8.1, 10.0)->count($this->hb_app_col_tt);
				$data["Mild"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 10.1, 11.9)->count($this->hb_app_col_tt);
				$data["Normal"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $district)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 12, 18)->count($this->hb_app_col_tt);

				return $data;
			}
			elseif ($school !="All") {

				$data["severe"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereLte("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8)->count($this->hb_app_col_tt);
				$data["Moderate"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8.1, 10.0)->count($this->hb_app_col_tt);
				$data["Mild"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 10.1, 11.9)->count($this->hb_app_col_tt);
				$data["Normal"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 12, 18)->count($this->hb_app_col_tt);

				$docs = $this->mongo_db->select(array("doc_data.widget_data.page1.Student Details.HB_latest.month"))->orderBy(array("doc_data.widget_data.page1.Student Details.HB_latest.month" => -1))->limit(1)->get($this->hb_app_col_tt);
				if(!empty($docs)){
					foreach ($docs as $doc) {
					$date = $doc['doc_data']['widget_data']['page1']['Student Details']['HB_latest']['month'];
					 $data["Last_submitted_date"] = (date("F", strtotime($date)).date("Y", strtotime($date)));
					}
				}else{
					$data["Last_submitted_date"] = false;
				}
				
				return $data;
			}
		}
		elseif (preg_match("/BCWELFARE/i", $user_type)) {
			if($district == "All" && $school =="All")
			{
				$data["severe"] = $this->mongo_db->whereLte("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8)->count($this->hb_app_col_bc);
				$data["Moderate"] = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8.1, 10.0)->count($this->hb_app_col_bc);
				$data["Mild"] = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 10.1, 11.9)->count($this->hb_app_col_bc);
				$data["Normal"] = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 12, 18)->count($this->hb_app_col_bc);

				return $data;
			}
			elseif ($district != "All" && $school =="All") {
				$data["severe"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereLte("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8)->count($this->hb_app_col_bc);
				$data["Moderate"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8.1, 10.0)->count($this->hb_app_col_bc);
				$data["Mild"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 10.1, 11.9)->count($this->hb_app_col_bc);
				$data["Normal"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $district)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 12, 18)->count($this->hb_app_col_bc);

				return $data;
			}
			elseif ($school !="All") {

				$data["severe"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereLte("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8)->count($this->hb_app_col_bc);
				$data["Moderate"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8.1, 10.0)->count($this->hb_app_col_bc);
				$data["Mild"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 10.1, 11.9)->count($this->hb_app_col_bc);
				$data["Normal"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 12, 18)->count($this->hb_app_col_bc);

				$docs = $this->mongo_db->select(array("doc_data.widget_data.page1.Student Details.HB_latest.month"))->orderBy(array("doc_data.widget_data.page1.Student Details.HB_latest.month" => -1))->limit(1)->get($this->hb_app_col_bc);
				if(!empty($docs)){
					foreach ($docs as $doc) {
					$date = $doc['doc_data']['widget_data']['page1']['Student Details']['HB_latest']['month'];
					 $data["Last_submitted_date"] = (date("F", strtotime($date)).date("Y", strtotime($date)));
					}
				}else{
					$data["Last_submitted_date"] = false;
				}
				
				return $data;
			}
		}
		else{
			return "User Type Not Found";
		}
	}

	/* Fetch Hb Values school wise Data*/

	public function get_hb_values_school_wise_count($user_type, $district, $school, $hb_type)
	{
		 if(preg_match("/PANACEA/i", $user_type)){		 	

		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		if($district =="All"){
			$schl_list = $this->mongo_db->select ( array ('school_name') )->orderBy ( array ('school_name' => 1 ) )->get ( 'panacea_schools_list' );
		}
		else
		{
			$schl_list = $this->mongo_db->select ( array ('school_name'	) )->orderBy ( array ('school_name' => 1 ) )->where(array('district_name' => $district ))->get ('panacea_schools_list' );
		}		
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		
		$data = [];				
			switch ($hb_type) {
		case 'Severe':				
				foreach ($schl_list as $scl) {
					$severeCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name" , $scl['school_name'])->whereLte("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8)->count($this->hb_app_col_sw);
					$saveData['school_name'] = $scl['school_name'];
					$saveData['count'] = 	$severeCount;

					if($saveData['count'] != 0){
						array_push($data, $saveData);
					}
					
				}
					return $data;
			  		break;
		case 'Mild':
					foreach ($schl_list as $scl) {
					$mildCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name" , $scl['school_name'])->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 10.1, 12)->count($this->hb_app_col_sw);
					$saveData['school_name'] = $scl['school_name'];
					$saveData['count'] = 	$mildCount;

					if($saveData['count'] != 0){
						array_push($data, $saveData);
					}
				}
					return $data;
					break;

		case 'Moderate':
					foreach ($schl_list as $scl) {
					$moderateCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name" , $scl['school_name'])->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8.1, 10)->count($this->hb_app_col_sw);
					$saveData['school_name'] = $scl['school_name'];
					$saveData['count'] = 	$moderateCount;

					if($saveData['count'] != 0){
						array_push($data, $saveData);
					}
				}

						return $data;
						break;			

				  default:
                        # code...
                        break;		
	
					}
	}elseif ($user_type == "TTWREIS_HS" || $user_type == "TTWREIS_ADMIN") {

		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		if($district =="All"){
			$schl_list = $this->mongo_db->select ( array ('school_name') )->orderBy ( array ('school_name' => 1 ) )->get ( 'ttwreis_schools_list' );
		}
		else
		{
			$schl_list = $this->mongo_db->select ( array ('school_name'	) )->orderBy ( array ('school_name' => 1 ) )->where(array('district_name' => $district ))->get ('ttwreis_schools_list' );
		}		
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		
		$data = [];				
			switch ($hb_type) {
		case 'Severe':				
				foreach ($schl_list as $scl) {
					$severeCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name" , $scl['school_name'])->whereLte("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8)->count($this->hb_app_col_tt);
					$saveData['school_name'] = $scl['school_name'];
					$saveData['count'] = 	$severeCount;

					if($saveData['count'] != 0){
						array_push($data, $saveData);
					}
					
				}
					return $data;
			  		break;
		case 'Mild':
					foreach ($schl_list as $scl) {
					$mildCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name" , $scl['school_name'])->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 10.1, 12)->count($this->hb_app_col_tt);
					$saveData['school_name'] = $scl['school_name'];
					$saveData['count'] = 	$mildCount;

					if($saveData['count'] != 0){
						array_push($data, $saveData);
					}
				}
					return $data;
					break;

		case 'Moderate':
					foreach ($schl_list as $scl) {
					$moderateCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name" , $scl['school_name'])->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8.1, 10)->count($this->hb_app_col_tt);
					$saveData['school_name'] = $scl['school_name'];
					$saveData['count'] = 	$moderateCount;

					if($saveData['count'] != 0){
						array_push($data, $saveData);
					}
				}

						return $data;
						break;			

				  default:
                        # code...
                        break;		
	
					}

	}elseif ($user_type == "BCWELFARE_HS" || $user_type == "BCWELFARE_ADMIN") {

		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		if($district =="All"){
			$schl_list = $this->mongo_db->select ( array ('school_name') )->orderBy ( array ('school_name' => 1 ) )->get ( 'bc_welfare_schools_districts' );
		}
		else
		{
			$schl_list = $this->mongo_db->select ( array ('school_name'	) )->orderBy ( array ('school_name' => 1 ) )->where(array('district_name' => $district ))->get ('bc_welfare_schools_districts' );
		}		
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		
		$data = [];				
			switch ($hb_type) {
		case 'Severe':				
				foreach ($schl_list as $scl) {
					$severeCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name" , $scl['school_name'])->whereLte("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8)->count($this->hb_app_col_bc);
					$saveData['school_name'] = $scl['school_name'];
					$saveData['count'] = 	$severeCount;

					if($saveData['count'] != 0){
						array_push($data, $saveData);
					}
					
				}
					return $data;
			  		break;
		case 'Mild':
					foreach ($schl_list as $scl) {
					$mildCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name" , $scl['school_name'])->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 10.1, 12)->count($this->hb_app_col_bc);
					$saveData['school_name'] = $scl['school_name'];
					$saveData['count'] = 	$mildCount;

					if($saveData['count'] != 0){
						array_push($data, $saveData);
					}
				}
					return $data;
					break;

		case 'Moderate':
					foreach ($schl_list as $scl) {
					$moderateCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name" , $scl['school_name'])->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8.1, 10)->count($this->hb_app_col_bc);
					$saveData['school_name'] = $scl['school_name'];
					$saveData['count'] = 	$moderateCount;

					if($saveData['count'] != 0){
						array_push($data, $saveData);
					}
				}

						return $data;
						break;			

				  default:
                        # code...
                        break;		
	
					}

	} else{
            return "User Type Not Found";
        }

	}
	/* Fetch Students for latest hb */

	public function get_students_for_latest_submitted_hb($user_type, $district, $school, $fetch_count, $hb_type)
	{
		if(isset($user_type) && preg_match("/PANACEA/i", $user_type))
		{
			if($district == "All" && $school == "All")
			{
				switch ($hb_type) {

					case 'Severe':
						$severeCount = $this->mongo_db->whereLte("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8)->count($this->hb_app_col_sw);

						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$lte'=>8) );

						//array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.month' => -1)
										),
										array (
												'$limit' => 10
										)
										
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_sw,
										'pipeline' => $pipeline 
								) );

											
						return $response;

					
						break;

					case 'Mild':

						
						$mildCount = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 10.1, 11.9)->count($this->hb_app_col_sw);

						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>10.1, '$lte'=>11.9));

						//array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.month' => -1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_sw,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					case 'Moderate':

						$moderateCount = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8.1, 10)->count($this->hb_app_col_sw);


						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>8.1, '$lte'=>10));

						//array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.month' => -1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_sw,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;

				case 'Normal':

						$moderateCount = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 12 ,18)->count($this->hb_app_col_sw);


						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>12, '$lte'=>18));

						//array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.month' => -1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_sw,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;

					
					default:
						# code...
						break;
				}
			}
			elseif ($district != "All" && $school == "All") {
				switch ($hb_type) {

					case 'Severe':
						$severeCount = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereLte("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8)->count($this->hb_app_col_sw);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$lte'=>8));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.month' => -1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_sw,
										'pipeline' => $pipeline 
								) );

											
						return $response;

					
						break;

					case 'Mild':

						
						$mildCount = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 10.1, 11.9)->count($this->hb_app_col_sw);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>10.1, '$lte'=>11.9));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.month' => -1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_sw,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					case 'Moderate':

						$moderateCount = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8.1, 10)->count($this->hb_app_col_sw);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=> $district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>8.1, '$lte'=>10));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.month' => -1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_sw,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;

				case 'Normal':

						$moderateCount = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 12, 18)->count($this->hb_app_col_sw);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=> $district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=> 12, '$lte'=>18));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.month' => -1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_sw,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					
					default:
						# code...
						break;
				}
			}
			elseif ($school != "All") {
				switch ($hb_type) {

									case 'Severe':
										$severeCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereLte("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8)->count($this->hb_app_col_sw);

										$and_merged_array = array();

										$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

										$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$lte'=>8));

										//$sortDatewise = array('doc_data.widget_data.page1.Student Details.HB_latest.month' => array('$sort'=> -1));
										array_push($and_merged_array, $scl_match);
										array_push($and_merged_array, $hb_match);
										//array_push($and_merged_array, $sortDatewise);

											$pipeline = [ 
														array (
																'$project' => array ( 
																		"doc_data" => true,
																	   
																) 
														),
														array(
															'$match' => array(
																'$and' => $and_merged_array
															)
														),
														array(
															'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.month' => -1)
														),
														array (
																'$skip' => intval($fetch_count)
														),
														
														array (
																'$limit' => 10
														)
																											
												];
												$response = $this->mongo_db->command ( array (
														'aggregate' => $this->hb_app_col_sw,
														'pipeline' => $pipeline 
												) );

															
										return $response;

									
										break;

									case 'Mild':

										
										$mildCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 10.1, 11.9)->count($this->hb_app_col_sw);

										$and_merged_array = array();

										$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

										$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>10.1, '$lte'=>11.9));

										array_push($and_merged_array, $scl_match);
										array_push($and_merged_array, $hb_match);

											$pipeline = [ 
														array (
																'$project' => array ( 
																		"doc_data" => true,
																	   
																) 
														),
														array(
															'$match' => array(
																'$and' => $and_merged_array
															)
														),
														array(
															'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.month' => -1)
														),
														array (
																'$skip' => intval($fetch_count)
														),
														array (
																'$limit' => 10
														)
														
												];
												$response = $this->mongo_db->command ( array (
														'aggregate' => $this->hb_app_col_sw,
														'pipeline' => $pipeline 
												) );

															
										return $response;
										break;
									case 'Moderate':

										$moderateCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8.1, 10)->count($this->hb_app_col_sw);


										$and_merged_array = array();

										$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

										$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>8.1, '$lte'=>10));

										array_push($and_merged_array, $scl_match);
										array_push($and_merged_array, $hb_match);

											$pipeline = [ 
														array (
																'$project' => array ( 
																		"doc_data" => true,
																	   
																) 
														),
														array(
															'$match' => array(
																'$and' => $and_merged_array
															)
														),
														array(
															'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.month' => -1)
														),
														array (
																'$skip' => intval($fetch_count)
														),
														array (
																'$limit' => 10
														)
												];
												$response = $this->mongo_db->command ( array (
														'aggregate' => $this->hb_app_col_sw,
														'pipeline' => $pipeline 
												) );

															
										return $response;
										break;

						case 'Normal':

										$moderateCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 12,18)->count($this->hb_app_col_sw);


										$and_merged_array = array();

										$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

										$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=> 12, '$lte'=>18));

										array_push($and_merged_array, $scl_match);
										array_push($and_merged_array, $hb_match);

											$pipeline = [ 
														array (
																'$project' => array ( 
																		"doc_data" => true,
																	   
																) 
														),
														array(
															'$match' => array(
																'$and' => $and_merged_array
															)
														),
														array(
															'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.month' => -1)
														),
														array (
																'$skip' => intval($fetch_count)
														),
														array (
																'$limit' => 10
														)
												];
												$response = $this->mongo_db->command ( array (
														'aggregate' => $this->hb_app_col_sw,
														'pipeline' => $pipeline 
												) );

															
										return $response;
										break;
									
									default:
										# code...
										break;
								}
			}
			
		}
		elseif ($user_type == "TTWREIS_HS" || $user_type == "TTWREIS_ADMIN") {

			if($district == "All" && $school == "All")
			{
				switch ($hb_type) {
					
					case 'Severe':
						$severeCount = $this->mongo_db->whereLte("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8)->count($this->hb_app_col_tt);

						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$lte'=>8));

						//array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;

					
						break;

					case 'Mild':

						
						$mildCount = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 10.1, 11.9)->count($this->hb_app_col_tt);

						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>10.1, '$lte'=>11.9));

						//array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					case 'Moderate':

						$moderateCount = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8.1, 10)->count($this->hb_app_col_tt);


						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>8.1, '$lte'=>10));

						//array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;

						case 'Normal':

						$moderateCount = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 12 ,18)->count($this->hb_app_col_tt);


						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>12, '$lte'=>18));

						//array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.month' => -1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					
					default:
						# code...
						break;
				}
			}
			elseif ($district != "All" && $school == "All") {
				switch ($hb_type) {
					
					case 'Severe':
						$severeCount = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereLte("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8)->count($this->hb_app_col_tt);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=> $district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$lte'=>8));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;

					
						break;

					case 'Mild':

						
						$mildCount = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 10.1, 11.9)->count($this->hb_app_col_tt);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=> $district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>10.1, '$lte'=>11.9));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					case 'Moderate':

						$moderateCount = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8.1, 10)->count($this->hb_app_col_tt);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=> $district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>8.1, '$lte'=>10));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;

					case 'Normal':

						$moderateCount = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 12, 18)->count($this->hb_app_col_tt);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=> $district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=> 12, '$lte'=>18));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;


					
					default:
						# code...
						break;
				}
			}
			elseif ($school != "All") {
				switch ($hb_type) {
					
					case 'Severe':
						$severeCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereLte("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8)->count($this->hb_app_col_tt);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$lte'=>8));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;

					
						break;

					case 'Mild':

						
						$mildCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 10.1, 11.9)->count($this->hb_app_col_tt);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>10.1, '$lte'=>11.9));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					case 'Moderate':

						$moderateCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8.1, 10)->count($this->hb_app_col_tt);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>8.1, '$lte'=>10));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;

				case 'Normal':

						$moderateCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 12,18)->count($this->hb_app_col_tt);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>12, '$lte'=>18));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					
					default:
						# code...
						break;
				}
			}
			

		}
		elseif ($user_type == "BCWELFARE_HS" || $user_type == "BCWELFARE_ADMIN") {
			if($district == "All" && $school == "All")
			{
				switch ($hb_type) {
					
					case 'Severe':
						$severeCount = $this->mongo_db->whereLte("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8)->count($this->hb_app_col_bc);

						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$lte'=>8));

						//array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;

					
						break;

					case 'Mild':

						
						$mildCount = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 10.1, 11.9)->count($this->hb_app_col_bc);

						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>10.1, '$lte'=>11.9));

						//array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					case 'Moderate':

						$moderateCount = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8.1, 10)->count($this->hb_app_col_bc);


						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>8.1, '$lte'=>10));

						//array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;

				case 'Normal':

						$moderateCount = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 12 ,18)->count($this->hb_app_col_bc);


						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>12, '$lte'=>18));

						//array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.month' => -1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					
					default:
						# code...
						break;
				}
			}
			elseif ($district != "All" && $school == "All") {
				switch ($hb_type) {
					
					case 'Severe':
						$severeCount = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereLte("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8)->count($this->hb_app_col_bc);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$lte'=>8));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;

					
						break;

					case 'Mild':

						
						$mildCount = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 10.1, 11.9)->count($this->hb_app_col_bc);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>10.1, '$lte'=>11.9));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					case 'Moderate':

						$moderateCount = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8.1, 10)->count($this->hb_app_col_bc);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=> $district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>8.1, '$lte'=>10));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;

			case 'Normal':

						$moderateCount = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 12,18)->count($this->hb_app_col_bc);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=> $district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>12, '$lte'=>18));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					
					default:
						# code...
						break;
				}
			}
			elseif ($school != "All") {
				switch ($hb_type) {
					
					case 'Severe':
						$severeCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereLte("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8)->count($this->hb_app_col_bc);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$lte'=>8));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;

					
						break;

					case 'Mild':

						
						$mildCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 10.1, 11.9)->count($this->hb_app_col_bc);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>10.1, '$lte'=>11.9));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					case 'Moderate':

						$moderateCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 8.1, 10)->count($this->hb_app_col_bc);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>8.1, '$lte'=>10));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;

				case 'Normal':

						$moderateCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.HB_latest.hb", 12,18)->count($this->hb_app_col_bc);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.HB_latest.hb"=>array('$gte'=>12, '$lte'=>18));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->hb_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					
					default:
						# code...
						break;
				}
			}
			

		}
		else{
			return "User Type Not Found";
		}
	}

	/*
		BMI Values latest values and custom span
	*/
	public function get_latest_submitted_bmi_values($user_type, $district, $school, $start_date, $end_date)
	{
		if(preg_match("/PANACEA/i", $user_type))
		{
			if($district == "All" && $school =="All")
			{
				$data["Under_weight"] = $this->mongo_db->whereLte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.5)->count($this->bmi_app_col_sw);
				$data["Obese"] = $this->mongo_db->whereGte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 30)->count($this->bmi_app_col_sw);
				$data["Over_weight"] = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 25, 29.9)->count($this->bmi_app_col_sw);
				$data["Normal"] = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.9, 24.9)->count($this->bmi_app_col_sw);

				return $data;
			}
			elseif ($district != "All" && $school =="All") {

				$data["Under_weight"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereLte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.5)->count($this->bmi_app_col_sw);

				$data["Obese"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereGte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 30)->count($this->bmi_app_col_sw);

				$data["Over_weight"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 25, 29.9)->count($this->bmi_app_col_sw);

				$data["Normal"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.9, 24.9)->count($this->bmi_app_col_sw);

				return $data;
			}
			elseif ($school !="All") {

				$data["Under_weight"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereLte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.5)->count($this->bmi_app_col_sw);

				$data["Obese"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereGte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 30)->count($this->bmi_app_col_sw);

				$data["Over_weight"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 25, 29.9)->count($this->bmi_app_col_sw);

				$data["Normal"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.9, 24.9)->count($this->bmi_app_col_sw);

				$docs = $this->mongo_db->select(array("doc_data.widget_data.page1.Student Details.BMI_latest.month"))->orderBy(array("doc_data.widget_data.page1.Student Details.BMI_latest.month" => -1))->limit(1)->get($this->bmi_app_col_sw);

				if(!empty($docs)){
					foreach ($docs as $doc) {
					$date = $doc['doc_data']['widget_data']['page1']['Student Details']['BMI_latest']['month'];
					 $data["Last_submitted_date"] = (date("F", strtotime($date)).date("Y", strtotime($date)));
					}
				}else{
					$data["Last_submitted_date"] = false;
				}
				
				return $data;
			}
		}
		elseif (preg_match("/TTWREIS/i", $user_type)) {

			if($district == "All" && $school =="All")
			{
				$data["Under_weight"] = $this->mongo_db->whereLte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.5)->count($this->bmi_app_col_tt);
				$data["Obese"] = $this->mongo_db->whereGte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 30)->count($this->bmi_app_col_tt);
				$data["Over_weight"] = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 25, 29.9)->count($this->bmi_app_col_tt);
				$data["Normal"] = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.9, 24.9)->count($this->bmi_app_col_tt);

				return $data;
			}
			elseif ($district != "All" && $school =="All") {

				$data["Under_weight"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereLte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.5)->count($this->bmi_app_col_tt);

				$data["Obese"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereGte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 30)->count($this->bmi_app_col_tt);

				$data["Over_weight"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 25, 29.9)->count($this->bmi_app_col_tt);

				$data["Normal"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.9, 24.9)->count($this->bmi_app_col_tt);

				return $data;
			}
			elseif ($school !="All") {

				$data["Under_weight"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereLte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.5)->count($this->bmi_app_col_tt);

				$data["Obese"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereGte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 30)->count($this->bmi_app_col_tt);

				$data["Over_weight"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 25, 29.9)->count($this->bmi_app_col_tt);

				$data["Normal"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.9, 24.9)->count($this->bmi_app_col_tt);

				$docs = $this->mongo_db->select(array("doc_data.widget_data.page1.Student Details.BMI_latest.month"))->orderBy(array("doc_data.widget_data.page1.Student Details.BMI_latest.month" => -1))->limit(1)->get($this->bmi_app_col_tt);
				if(!empty($docs)){
					foreach ($docs as $doc) {
					$date = $doc['doc_data']['widget_data']['page1']['Student Details']['BMI_latest']['month'];
					 $data["Last_submitted_date"] = (date("F", strtotime($date)).date("Y", strtotime($date)));
					}
				}else{
					$data["Last_submitted_date"] = false;
				}
				
				return $data;
			}
			
		}
		elseif (preg_match("/BCWELFARE/i", $user_type)){

		if($district == "All" && $school =="All")
			{
				$data["Under_weight"] = $this->mongo_db->whereLte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.5)->count($this->bmi_app_col_bc);
				$data["Obese"] = $this->mongo_db->whereGte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 30)->count($this->bmi_app_col_bc);
				$data["Over_weight"] = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 25, 29.9)->count($this->bmi_app_col_bc);
				$data["Normal"] = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.9, 24.9)->count($this->bmi_app_col_bc);

				return $data;
			}
			elseif ($district != "All" && $school =="All") {

				$data["Under_weight"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereLte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.5)->count($this->bmi_app_col_bc);

				$data["Obese"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereGte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 30)->count($this->bmi_app_col_bc);

				$data["Over_weight"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 25, 29.9)->count($this->bmi_app_col_bc);

				$data["Normal"] = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.9, 24.9)->count($this->bmi_app_col_bc);

				return $data;
			}
			elseif ($school !="All") {

				$data["Under_weight"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereLte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.5)->count($this->bmi_app_col_bc);

				$data["Obese"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereGte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 30)->count($this->bmi_app_col_bc);

				$data["Over_weight"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 25, 29.9)->count($this->bmi_app_col_bc);

				$data["Normal"] = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.9, 24.9)->count($this->bmi_app_col_bc);

				$docs = $this->mongo_db->select(array("doc_data.widget_data.page1.Student Details.BMI_latest.month"))->orderBy(array("doc_data.widget_data.page1.Student Details.BMI_latest.month" => -1))->limit(1)->get($this->bmi_app_col_bc);

				if(!empty($docs)){
					foreach ($docs as $doc) {
					$date = $doc['doc_data']['widget_data']['page1']['Student Details']['BMI_latest']['month'];
					 $data["Last_submitted_date"] = (date("F", strtotime($date)).date("Y", strtotime($date)));
					}
				}else{
					$data["Last_submitted_date"] = false;
				}
				
				return $data;
			}		
			
		}
		else{
			return "User Type Not Found";
		}
	}

	/* Get Students of BMI latest submitted */

	/* Fetch BMI Values school wise Data*/

public function get_bmi_values_school_wise_count ($user_type, $district, $school, $bmi_type)
{
    if(preg_match("/PANACEA/i", $user_type)){           

        $this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
        if($district =="All"){
            $schl_list = $this->mongo_db->select ( array ('school_name') )->orderBy ( array ('school_name' => 1 ) )->get ( 'panacea_schools_list' );
        }
        else
        {
            $schl_list = $this->mongo_db->select ( array ('school_name' ) )->orderBy ( array ('school_name' => 1 ) )->where(array('district_name' => $district ))->get ('panacea_schools_list' );
        }       
        $this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

        $data = [];             
            switch ($bmi_type) {

        case 'Under Weight':              
                foreach ($schl_list as $scl) {
                    $uweightCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name" , $scl['school_name'])->whereLte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.5)->count($this->bmi_app_col_sw);
                    $saveData['school_name'] = $scl['school_name'];
                    $saveData['count'] =    $uweightCount;

                    if($saveData['count'] != 0){
                        array_push($data, $saveData);
                    }
                    
                }
                    return $data;
                    break;

        case 'Normal':        
                    foreach ($schl_list as $scl) {
                    $nweightCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name" , $scl['school_name'])->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.9, 24.9)->count($this->bmi_app_col_sw);
                    $saveData['school_name'] = $scl['school_name'];
                    $saveData['count'] =    $nweightCount;

                    if($saveData['count'] != 0){
                        array_push($data, $saveData);
                    }
                    
                }
                    return $data;
                    break;

        case 'Over weight':
                   foreach ($schl_list as $scl) {
                    $oweightCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name" , $scl['school_name'])->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 25, 29.9)->count($this->bmi_app_col_sw);
                    $saveData['school_name'] = $scl['school_name'];
                    $saveData['count'] =    $oweightCount;

                    if($saveData['count'] != 0){
                        array_push($data, $saveData);
                    }
                    
                }

                        return $data;
                        break;          

        case 'Obese':
                   foreach ($schl_list as $scl) {
                    $obweightCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name" , $scl['school_name'])->whereGte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 30)->count($this->bmi_app_col_sw);
                    $saveData['school_name'] = $scl['school_name'];
                    $saveData['count'] =    $obweightCount;

                    if($saveData['count'] != 0){
                        array_push($data, $saveData);
                    }
                    
                }

                        return $data;
                        break;          

                  default:
                        # code...
                        break;      
    
                    }
    }elseif ($user_type == "TTWREIS_HS" || $user_type == "TTWREIS_ADMIN") {

    	$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
        if($district =="All"){
            $schl_list = $this->mongo_db->select ( array ('school_name') )->orderBy ( array ('school_name' => 1 ) )->get ( 'ttwreis_schools_list' );
        }
        else
        {
            $schl_list = $this->mongo_db->select ( array ('school_name' ) )->orderBy ( array ('school_name' => 1 ) )->where(array('district_name' => $district ))->get ('ttwreis_schools_list' );
        }       
        $this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

        $data = [];             
            switch ($bmi_type) {

        case 'Under Weight':              
                foreach ($schl_list as $scl) {
                    $uweightCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name" , $scl['school_name'])->whereLte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.5)->count($this->bmi_app_col_tt);
                    $saveData['school_name'] = $scl['school_name'];
                    $saveData['count'] =    $uweightCount;

                    if($saveData['count'] != 0){
                        array_push($data, $saveData);
                    }
                    
                }
                    return $data;
                    break;

        case 'Normal':        
                    foreach ($schl_list as $scl) {
                    $nweightCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name" , $scl['school_name'])->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.9, 24.9)->count($this->bmi_app_col_tt);
                    $saveData['school_name'] = $scl['school_name'];
                    $saveData['count'] =    $nweightCount;

                    if($saveData['count'] != 0){
                        array_push($data, $saveData);
                    }
                    
                }
                    return $data;
                    break;

        case 'Over weight':
                   foreach ($schl_list as $scl) {
                    $oweightCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name" , $scl['school_name'])->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 25, 29.9)->count($this->bmi_app_col_tt);
                    $saveData['school_name'] = $scl['school_name'];
                    $saveData['count'] =    $oweightCount;

                    if($saveData['count'] != 0){
                        array_push($data, $saveData);
                    }
                    
                }

                        return $data;
                        break;          

        case 'Obese':
                   foreach ($schl_list as $scl) {
                    $obweightCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name" , $scl['school_name'])->whereGte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 30)->count($this->bmi_app_col_tt);
                    $saveData['school_name'] = $scl['school_name'];
                    $saveData['count'] =    $obweightCount;

                    if($saveData['count'] != 0){
                        array_push($data, $saveData);
                    }
                    
                }

                        return $data;
                        break;          

                  default:
                        # code...
                        break;      
    
                    }

    }elseif ($user_type == "BCWELFARE_HS" || $user_type == "BCWELFARE_ADMIN") {
    	$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
        if($district =="All"){
            $schl_list = $this->mongo_db->select ( array ('school_name') )->orderBy ( array ('school_name' => 1 ) )->get ( 'bc_welfare_schools_districts' );
        }
        else
        {
            $schl_list = $this->mongo_db->select ( array ('school_name' ) )->orderBy ( array ('school_name' => 1 ) )->where(array('district_name' => $district ))->get ('bc_welfare_schools_districts' );
        }       
        $this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

        $data = [];             
            switch ($bmi_type) {

        case 'Under Weight':              
                foreach ($schl_list as $scl) {
                    $uweightCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name" , $scl['school_name'])->whereLte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.5)->count($this->bmi_app_col_bc);
                    $saveData['school_name'] = $scl['school_name'];
                    $saveData['count'] =    $uweightCount;

                    if($saveData['count'] != 0){
                        array_push($data, $saveData);
                    }
                    
                }
                    return $data;
                    break;

        case 'Normal':        
                    foreach ($schl_list as $scl) {
                    $nweightCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name" , $scl['school_name'])->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.9, 24.9)->count($this->bmi_app_col_bc);
                    $saveData['school_name'] = $scl['school_name'];
                    $saveData['count'] =    $nweightCount;

                    if($saveData['count'] != 0){
                        array_push($data, $saveData);
                    }
                    
                }
                    return $data;
                    break;

        case 'Over weight':
                   foreach ($schl_list as $scl) {
                    $oweightCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name" , $scl['school_name'])->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 25, 29.9)->count($this->bmi_app_col_bc);
                    $saveData['school_name'] = $scl['school_name'];
                    $saveData['count'] =    $oweightCount;

                    if($saveData['count'] != 0){
                        array_push($data, $saveData);
                    }
                    
                }

                        return $data;
                        break;          

        case 'Obese':
                   foreach ($schl_list as $scl) {
                    $obweightCount = $this->mongo_db->where("doc_data.widget_data.school_details.School Name" , $scl['school_name'])->whereGte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 30)->count($this->bmi_app_col_bc);
                    $saveData['school_name'] = $scl['school_name'];
                    $saveData['count'] =    $obweightCount;

                    if($saveData['count'] != 0){
                        array_push($data, $saveData);
                    }
                    
                }

                        return $data;
                        break;          

                  default:
                        # code...
                        break;      
    
                    }

    } else{
            return "User Type Not Found";
        }

}

	/* Fetch Students for latest BMI */

	public function get_students_for_latest_submitted_bmi($user_type, $district, $school, $fetch_count, $bmi_type)
	{
		
		 if(preg_match("/PANACEA/i", $user_type))
		{
			if($district == "All" && $school == "All")
			{
				switch ($bmi_type) {

					case 'Under Weight':
						$count = $this->mongo_db->whereLte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.5)->count($this->bmi_app_col_sw);

						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$lte'=>18.5));

					//	array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										)
										
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_sw,
										'pipeline' => $pipeline 
								) );

											
						return $response;

					
						break;

					case 'Obese':

						
						$count = $this->mongo_db->whereGte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 30)->count($this->bmi_app_col_sw);

						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>30));

						//array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_sw,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					case 'Over weight':

						$count = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 25, 29.9)->count($this->bmi_app_col_sw);


						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>25, '$lte'=>29.9));

						//array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_sw,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;

					case 'Normal':

						$count = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.9, 24.9)->count($this->bmi_app_col_sw);


						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>18.9, '$lte'=>24.9));

						//array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_sw,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					
					default:
						# code...
						break;
				}

			}
			elseif ($district != "All" && $school == "All") {
				switch ($bmi_type) {

					case 'Under Weight':
						$count = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereLte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.5)->count($this->bmi_app_col_sw);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$lte'=>18.5));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_sw,
										'pipeline' => $pipeline 
								) );

											
						return $response;

					
						break;

					case 'Obese':

						
						$count = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereGte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 30)->count($this->bmi_app_col_sw);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>30));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_sw,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					case 'Over weight':

						$count = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 25, 29.9)->count($this->bmi_app_col_sw);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>25, '$lte'=>29.9));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_sw,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;

					case 'Normal':

						$count = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.9, 24.9)->count($this->bmi_app_col_sw);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>18.9, '$lte'=>24.9));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_sw,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					
					default:
						# code...
						break;
				}

			}
			elseif ($school != "All") {
				switch ($bmi_type) {

					case 'Under Weight':
						$count = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereLte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.5)->count($this->bmi_app_col_sw);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$lte'=>18.5));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => -1)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_sw,
										'pipeline' => $pipeline 
								) );

											
						return $response;

					
						break;

					case 'Obese':

						
						$count = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereGte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 30)->count($this->bmi_app_col_sw);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>30));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => -1)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_sw,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					case 'Over weight':

						$count = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 25, 29.9)->count($this->bmi_app_col_sw);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>25, '$lte'=>29.9));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => -1)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_sw,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;

					case 'Normal':

						$count = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.9, 24.9)->count($this->bmi_app_col_sw);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>18.9, '$lte'=>24.9));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => -1)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_sw,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					
					default:
						# code...
						break;
				}

			}
			
		}

		elseif ($user_type == "TTWREIS_HS" || $user_type == "TTWREIS_ADMIN") {
			if($district == "All" && $school == "All")
			{
				switch ($bmi_type) {

					case 'Under Weight':
						$count = $this->mongo_db->whereLte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.5)->count($this->bmi_app_col_tt);

						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$lte'=>18.5));

					//	array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;

					
						break;

					case 'Obese':
						
						$count = $this->mongo_db->whereGte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 30)->count($this->bmi_app_col_tt);

						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>30));

						//array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					case 'Over weight':

						$count = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 25, 29.9)->count($this->bmi_app_col_tt);


						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>25, '$lte'=>29.9));

						//array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;

					case 'Normal':

						$count = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.9, 24.9)->count($this->bmi_app_col_tt);


						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>18.9, '$lte'=>24.9));

						//array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					
					default:
						# code...
						break;
				}

			}
			elseif ($district != "All" && $school == "All") {
				switch ($bmi_type) {

					case 'Under Weight':
						$count = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereLte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.5)->count($this->bmi_app_col_tt);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$lte'=>18.5));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;

					
						break;

					case 'Obese':

						
						$count = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereGte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 30)->count($this->bmi_app_col_tt);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>30));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					case 'Over weight':

						$count = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 25, 29.9)->count($this->bmi_app_col_tt);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>25, '$lte'=>29.9));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;

					case 'Normal':

						$count = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.9, 24.9)->count($this->bmi_app_col_tt);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>18.9, '$lte'=>24.9));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					
					default:
						# code...
						break;
				}

			}
			elseif ($school != "All") {
				switch ($bmi_type) {

					case 'Under Weight':
						$count = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereLte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.5)->count($this->bmi_app_col_tt);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$lte'=>18.5));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;

					
						break;

					case 'Obese':

						
						$count = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereGte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 30)->count($this->bmi_app_col_tt);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>30));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					case 'Over weight':

						$count = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 25, 29.9)->count($this->bmi_app_col_tt);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>25, '$lte'=>29.9));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;

					case 'Normal':

						$count = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.9, 24.9)->count($this->bmi_app_col_tt);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>18.9, '$lte'=>24.9));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_tt,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					
					default:
						# code...
						break;
				}

			}

		}
		elseif ($user_type == "BCWELFARE_HS" || $user_type == "BCWELFARE_ADMIN") {
		if($district == "All" && $school == "All")
			{
				switch ($bmi_type) {

					case 'Under Weight':
						$count = $this->mongo_db->whereLte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.5)->count($this->bmi_app_col_bc);

						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$lte'=>18.5));

					//	array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;

					
						break;

					case 'Obese':

						
						$count = $this->mongo_db->whereGte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 30)->count($this->bmi_app_col_bc);

						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>30));

						//array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					case 'Over weight':

						$count = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 25, 29.9)->count($this->bmi_app_col_bc);


						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>25, '$lte'=>29.9));

						//array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;

					case 'Normal':

						$count = $this->mongo_db->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.9, 24.9)->count($this->bmi_app_col_bc);


						$and_merged_array = array();

						//$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>18.9, '$lte'=>24.9));

						//array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					
					default:
						# code...
						break;
				}

			}
			elseif ($district != "All" && $school == "All") {
				switch ($bmi_type) {

					case 'Under Weight':
						$count = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereLte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.5)->count($this->bmi_app_col_bc);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$lte'=>18.5));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;

					
						break;

					case 'Obese':

						
						$count = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereGte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 30)->count($this->bmi_app_col_bc);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>30));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					case 'Over weight':

						$count = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 25, 29.9)->count($this->bmi_app_col_bc);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>25, '$lte'=>29.9));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;

					case 'Normal':

						$count = $this->mongo_db->where("doc_data.widget_data.school_details.District", $district)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.9, 24.9)->count($this->bmi_app_col_bc);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.District"=>$district);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>18.9, '$lte'=>24.9));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					
					default:
						# code...
						break;
				}

			}
			elseif ($school != "All") {
				switch ($bmi_type) {

					case 'Under Weight':
						$count = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereLte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.5)->count($this->bmi_app_col_bc);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$lte'=>18.5));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;

					
						break;

					case 'Obese':

						
						$count = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereGte("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 30)->count($this->bmi_app_col_bc);

						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>30));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					case 'Over weight':

						$count = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 25, 29.9)->count($this->bmi_app_col_bc);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>25, '$lte'=>29.9));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;

					case 'Normal':

						$count = $this->mongo_db->where("doc_data.widget_data.school_details.School Name", $school)->whereBetween("doc_data.widget_data.page1.Student Details.BMI_latest.bmi", 18.9, 24.9)->count($this->bmi_app_col_bc);


						$and_merged_array = array();

						$scl_match = array("doc_data.widget_data.school_details.School Name"=>$school);

						$hb_match = array("doc_data.widget_data.page1.Student Details.BMI_latest.bmi"=>array('$gte'=>18.9, '$lte'=>24.9));

						array_push($and_merged_array, $scl_match);
						array_push($and_merged_array, $hb_match);

							$pipeline = [ 
										array (
												'$project' => array ( 
														"doc_data" => true,
													   
												) 
										),
										array(
											'$match' => array(
												'$and' => $and_merged_array
											)
										),
										array (
												'$skip' => intval($fetch_count)
										),
										array (
												'$limit' => 10
										),
										array(
											'$sort' => array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => 1)
										)
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->bmi_app_col_bc,
										'pipeline' => $pipeline 
								) );

											
						return $response;
						break;
					
					default:
						# code...
						break;
				}

			}

		}
		
		else{
			return "User Type Not Found";
		}
	}

	/* Admin APp API started here
		
		Here loading total value counts for current year
	*/

	public function get_total_counts_for_admin($user_type, $academic, $today_date)
	{
		if(isset($user_type) && !empty($user_type))
		{
			if(isset($academic) && !empty($academic)){
				$collection = $this->get_academic_year_wise_collection($academic, $user_type);
				//$request = $this-> get_start_end_date_for_requests_academic_year($academic);
			}else{
				return "Send Valid academic year";
			}
			
			if($user_type == "PANACEA_ADMIN")
			{
				/* Total Schools */
				$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
				$data['total_scls'] = $this->mongo_db->count ('panacea_schools_list');
				$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

				/*Total Students*/
				$data['total_studs'] = $this->mongo_db->count($collection);

				/* Total Requests*/
				$data['total_request'] = $this->mongo_db->count($this->health_request_col_panacea_hs);

				/*Today Requests */

				$data['Normal'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal'))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->whereLike('history.0.time',$today_date)->count($this->health_request_col_panacea_hs);

				$data['Emergency'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency'))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->whereLike('history.0.time',$today_date)->count($this->health_request_col_panacea_hs);

				$data['Chronic'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic'))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->whereLike('history.0.time',$today_date)->count($this->health_request_col_panacea_hs);

				return $data;

			}elseif ($user_type == "TTWREIS_ADMIN") {

				/* Total Schools */
				$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
				$data['total_scls'] = $this->mongo_db->count ('ttwreis_schools');
				$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

				/*Total Students*/
				$data['total_studs'] = $this->mongo_db->count($collection);

				/* Total Requests*/
				$data['total_request'] = $this->mongo_db->count($this->health_request_col_ttwreis_hs);

				/*Today Requests */

				$data['Normal'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal'))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->whereLike('history.0.time',$today_date)->count($this->health_request_col_ttwreis_hs);

				$data['Emergency'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency'))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->whereLike('history.0.time',$today_date)->count($this->health_request_col_ttwreis_hs);

				$data['Chronic'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic'))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->whereLike('history.0.time',$today_date)->count($this->health_request_col_ttwreis_hs);

				return $data;

			}elseif ($user_type == "BCWELFARE_ADMIN") {

				/* Total Schools */
				$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
				$data['total_scls'] = $this->mongo_db->count ('bc_welfare_schools');
				$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

				/*Total Students*/
				$data['total_studs'] = $this->mongo_db->count($collection);

				/* Total Requests*/
				$data['total_request'] = $this->mongo_db->count($this->health_request_col_bcwelfare_hs);

				/*Today Requests */

				$data['Normal'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal'))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->whereLike('history.0.time',$today_date)->count($this->health_request_col_bcwelfare_hs);

				$data['Emergency'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency'))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->whereLike('history.0.time',$today_date)->count($this->health_request_col_bcwelfare_hs);

				$data['Chronic'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic'))->whereNe('doc_data.widget_data.page2.Review Info.Status', "Cured")->whereLike('history.0.time',$today_date)->count($this->health_request_col_bcwelfare_hs);

				return $data;

			}
			
		}
		else
		{
			return "User Type Not Found";
		}
	}

	/* rhso counts */

	public function get_total_counts_for_rhso_rc_work_for_admin($user_type, $start_date, $end_date)
	{
		if($user_type == "PANACEA_ADMIN")
		{
			$data['hospital_visits'] = $this->mongo_db->where(array("history.last_stage.submitted_by" => array('$regex' => "rhso")))->whereBetween("history.last_stage.time", $start_date, $end_date)->count("field_officer_report");

			$data['school_visits'] = $this->mongo_db->whereBetween('Date', $start_date, $end_date)->count('tswreis_rhso_sanitation_data');
		}

		return $data;
	}

	public function get_school_and_hospital_submission_rhso_wise($user_type, $start_date, $end_date, $selected_option)
	{
		if($user_type == "PANACEA_ADMIN")
		{
			$final = [];
			if($selected_option == "hospital")
			{
				$hospital_match = $this->mongo_db->where(array("history.last_stage.submitted_by" => array('$regex' => "rhso")))->whereBetween("history.last_stage.time", $start_date, $end_date)->get("field_officer_report");

				foreach ($hospital_match as $data) {
					$names = $data['history']['last_stage']['submitted_by'];
					$email = str_replace('#', '@', $names);
					$this->mongo_db->switchDatabase($this->common_db ['common_db']);
					$dist = $this->mongo_db->select(array('dt_name'))->where('email', $email)->get('rhso_users');
					$this->mongo_db->switchDatabase($this->common_db['dsn']);
					array_push($final, $dist[0]['dt_name']);
				}

				$final_count = array_count_values($final);
				
				return $final_count;

			}
			else
			{
				$dists = [];
				$red_scl = $this->mongo_db->whereBetween('Date', $start_date, $end_date)->get('tswreis_rhso_sanitation_data');
				foreach ($red_scl as $datas) {
					$dName = $datas['District'];
					array_push($dists, $dName);
				}
				$getsdist = array_unique($dists);
				foreach ($getsdist as $data) {

					$schools['district'] = $data;
					$schools['red'] = $this->mongo_db->where(array('District'=> $schools['district'], 'history.status'=> "Red"))->whereBetween('Date', $start_date, $end_date)->count('tswreis_rhso_sanitation_data');
					$schools['orange'] = $this->mongo_db->where(array('District'=> $schools['district'], 'history.status'=> "Orange"))->whereBetween('Date', $start_date, $end_date)->count('tswreis_rhso_sanitation_data');
					$schools['green'] = $this->mongo_db->where(array('District'=> $schools['district'], 'history.status'=> "Green"))->whereBetween('Date', $start_date, $end_date)->count('tswreis_rhso_sanitation_data');
					$schools['no_status'] = $this->mongo_db->where(array('District'=> $schools['district'], 'history.status'=> ""))->whereBetween('Date', $start_date, $end_date)->count('tswreis_rhso_sanitation_data');
					
			   		array_push($final, $schools);
				}
				
			   return $final;
			}
			
		}
	}

	public function total_school_students_count($user_type, $school_name)
	{
		if(isset($user_type) && $user_type == "PANACEA_HS")
		{
			$school_count = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $school_name)->count($this->screening_app_col_sw_2021_2022);
		}elseif ($user_type == "TTWREIS_HS") {
			$school_count = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $school_name)->count($this->screening_app_col_tt_2021_2022);
		}elseif ($user_type == "BCWELFARE_HS") {
			$school_count = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $school_name)->count($this->screening_app_col_bc_2020_2021);
		}

		return $school_count;
	}

	public function get_absent_pie_schools_data($date = FALSE, $dt_name)
	{
		// Variables
		$all_schools               = array();
		$all_schools_district      = array();
		$all_schools_name      	   = array();
		
		$submitted_schools 	       = array();
		$submitted_school_district = array();
		$submitted_school_name     = array();
		$not_submitted_schools	   = array();
		$schools_data              = array();
		$not_submitted_dist        = array();
		
		$all_schools_mobile        = array();
		$all_schools_cpn      	   = array();
		$submitted_school_mob 	   = array();
		$submitted_school_person   = array();
		$not_submitted_school_mob 	   = array();
		$not_submitted_school_person   = array();
		
		if($dt_name == "All"){
			$schools_list = $this->get_all_schools();
		}else{
			$schools_list = $this->get_schools_with_district_name($dt_name);
		}


		foreach($schools_list as $school_data)
		{
			array_push($all_schools_district,$school_data['dt_name']);
			array_push($all_schools_name,$school_data['school_name']);
			$all_schools_mobile[$school_data['school_name']] = $school_data['school_mob'];
			$all_schools_cpn[$school_data['school_name']] = $school_data['contact_person_name'];
		}
		
		$all_schools['district'] = $all_schools_district; 
		$all_schools['school']   = $all_schools_name; 


		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		if($dt_name == "All"){
			$query = $this->mongo_db->select ( array (
				"doc_data.widget_data" 
		) )->whereLike ( 'history.last_stage.time', $today_date )->get ( $this->absent_app_col );

		}else{

			$query = $this->mongo_db->select ( array (
					"doc_data.widget_data" 
			) )->where('doc_data.widget_data.page1.Attendence Details.District', $dt_name)->whereLike ( 'history.last_stage.time', $today_date )->get ( $this->absent_app_col );
		}
		
		
		//log_message('debug','$schools_data=====get_absent_pie_schools_data=====716=='.print_r($query,true));
		//log_message('debug','$schools_data=====get_absent_pie_schools_data=====717=='.print_r($today_date,true));
		
		foreach ( $query as $doc ) {
			    if(!in_array($doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School'],$submitted_school_name))
				{
					array_push ( $submitted_school_district,$doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['District'] );
					array_push ( $submitted_school_name,$doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School'] );
					if(isset($all_schools_mobile[$doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School']])){
						array_push ( $submitted_school_mob,$all_schools_mobile[$doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School']] );
						array_push ( $submitted_school_person,$all_schools_cpn[$doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School']] );
					}else{
						array_push ( $submitted_school_mob,"" );
						array_push ( $submitted_school_person,"" );
					}
					
		        }
		}
		
		$submitted_schools['district']     = $submitted_school_district;
		$submitted_schools['school']       = $submitted_school_name;
		$submitted_schools['mobile']       = $submitted_school_mob;
		$submitted_schools['person_name']  = $submitted_school_person;
		
		$not_submitted_schools['district'] = array();
		$not_submitted_schools['school']   = array_values(array_diff($all_schools['school'],$submitted_schools['school']));
		foreach($not_submitted_schools['school'] as $index => $school_name)
		{
		   $dist_array    = explode(",",$school_name);
		   $dist_array[1] = strtolower($dist_array[1]);
		   array_push($not_submitted_dist,ucfirst($dist_array[1]));
		   
			if(isset($all_schools_mobile[$school_name])){
				array_push ( $not_submitted_school_mob,$all_schools_mobile[$school_name] );
				array_push ( $not_submitted_school_person,$all_schools_cpn[$school_name] );
			}else{
				array_push ( $not_submitted_school_mob,"" );
				array_push ( $not_submitted_school_person,"" );
			}
		   
		}
		$not_submitted_schools['district']   = $not_submitted_dist;
		$not_submitted_schools['mobile']       = $not_submitted_school_mob;
		$not_submitted_schools['person_name']  = $not_submitted_school_person;
		
		
		$schools_data['submitted']     		 = $submitted_schools;
		$schools_data['submitted_count']     = count($submitted_schools['school']);
		$schools_data['not_submitted'] 		 = $not_submitted_schools;
		$schools_data['not_submitted_count'] = count($not_submitted_schools['school']);
		
		//log_message('debug','$schools_data=====get_absent_pie_schools_data=====735=='.print_r($schools_data,true));
		//log_message('debug','$schools_data=====get_absent_pie_schools_data=====736=='.print_r(gettype($schools_data['submitted']),true));
		
		return $schools_data;
	}


	/*Power often*/

	public function district_level_verification_submission($doc_data)
	{
		$recom_status = $doc_data['membership_verification'];
		if(!empty($doc_data['doc_id']) && ($recom_status == "Yes")){

			$query = $this->mongo_db->insert('district_level_verified_data', $doc_data);

			if($query){
				$update_verified = $this->mongo_db->where('doc_properties.doc_id', $doc_data['doc_id'])->set(array('doc_properties.district_level_verification'=> 1))->update($this->poweroften_registration_col);

				 $shadow_update_verified = $this->mongo_db->where('doc_properties.doc_id', $doc_data['doc_id'])->set(array('doc_properties.district_level_verification'=> 1))->update($this->poweroften_registration_col_shadow);

				if($update_verified){
					return "Inserted Successfully, Application at DAR Team. Wait for call please";
				}else
				{
					return "Submission Failed";
				}
			}
		}else{
			
			$query = $this->mongo_db->insert('district_level_not_recommended_data', $doc_data);

			if($query){
				return "User in not recommended list";
			}else{
				return "Submission Failed";
			}
		}
		
	}

	public function get_district_people_for_notification($current_district)
	{
		$query = $this->mongo_db->select(array('doc_data.device_unique_number'))->whereLike('doc_data.district', $current_district)->get($this->poweroften_registration_col);
		$ids_array = [];
		if($query){
			foreach ($query as $ids) {

			
				$id = $ids['doc_data']['device_unique_number'];
				array_push($ids_array, $id);
			}

			return $ids_array;
		}else
		{
			return FALSE;
		}
	}

	public function save_notification_data($save_notify_array)
	{
		$query = $this->mongo_db->insert('save_sent_notifications_ids', $save_notify_array);

		return $query;
	}

	/*public function notify_accepted_person_data($data)
	{
		$query = $this->mongo_db->where('doc_properties_id', $data['needy_person_doc_id'])->set(array('help_acceptance' =>1, 'helping_person_details' => $data))->update("power_of_ten_emergency_calling");

		$getDist = $this->mongo_db->select(array('current_district'))->where('doc_properties_id', $data['needy_person_doc_id'])->get("power_of_ten_emergency_calling");

		$dist = $getDist[0]['current_district'];

		if($getDIst){

			return $dist;
		}else{
			return "District Not Found";
		}
	}*/

	public function vidya_nidhi_applying($data)
	{
		$query = $this->mongo_db->insert('vidya_nidhi_applications', $data);

		if($query){
			return TRUE;
		}else{
			return FALSE;
		}
	}


	public function submit_hs_note($data, $user_type)

    {

    	if($user_type == 'PANACEA_HS'){
         

          $query = $this->mongo_db->insert('panacea_ehr_notes',$data);

        }elseif ($user_type == 'TTWREIS_HS') {       

          $query = $this->mongo_db->insert('ttwreis_ehr_notes',$data);

        }elseif ($user_type == "BCWELFARE_HS"){
         

          $query = $this->mongo_db->insert('bc_welfare_ehr_notes',$data);

      }

      return $query;
       
    }

    public function submit_vaccination_ststus_model($data, $user_type)

    {

    	if($user_type == 'PANACEA_HS'){         

          $query = $this->mongo_db->insert('social_vaccination_status',$data);

        }elseif ($user_type == 'TTWREIS_HS') {       

          $query = $this->mongo_db->insert('tribal_vaccination_status',$data);

        }elseif ($user_type == "BCWELFARE_HS"){         

          $query = $this->mongo_db->insert('bc_vaccination_status',$data);

      }

      return $query;
       
    }




 function get_submitted_students_notes_modal($email,$date,$user_type)

  {

    $check_query = array('username' => str_replace("@", "#", $email));
    $total_month = substr($date, 0,-3);
    $unique_ids = array();
    $submitted_students = array();

  if($user_type == 'PANACEA_HS'){

    $query_info = $this->mongo_db->where($check_query)->orderBy(array('datetime' => -1))->get("panacea_ehr_notes");
      
        foreach ($query_info as $student_info) 
        {   
          $end_array = $student_info['datetime'];

          if(preg_match("/$total_month/i", $end_array))
          {
            $unique_id = $student_info['uid'];
            
            array_push($submitted_students, $student_info);         
          }

        } 

    $query['submitted_students'] = $submitted_students;
      
  }elseif ($user_type == 'TTWREIS_HS') {

    $query_info = $this->mongo_db->where($check_query)->orderBy(array('datetime' => -1))->get("ttwreis_ehr_notes");
        
        foreach ($query_info as $student_info) 
        {   
          $end_array = $student_info['datetime'];

          if(preg_match("/$total_month/i", $end_array))
          {
            $unique_id = $student_info['uid'];
            
            array_push($submitted_students, $student_info);         
          }

        } 

    $query['submitted_students'] = $submitted_students;

  }elseif ($user_type == "BCWELFARE_HS"){

    $query_info = $this->mongo_db->where($check_query)->orderBy(array('datetime' => -1))->get("bc_welfare_ehr_notes");
        
          foreach ($query_info as $student_info) 
          {   
            $end_array = $student_info['datetime'];

            if(preg_match("/$total_month/i", $end_array))
            {
              $unique_id = $student_info['uid'];
              
              array_push($submitted_students, $student_info);         
            } 

          } 

      $query['submitted_students'] = $submitted_students;

     }

     return $query;

  }

   function get_submitted_students_vaccination_status_modal($email,$date,$user_type)

  {

    $check_query = array('username' => str_replace("@", "#", $email));
    $total_month = substr($date, 0,-3);
    $unique_ids = array();
    $submitted_students = array();

  if($user_type == 'PANACEA_HS'){

    $query_info = $this->mongo_db->where($check_query)->orderBy(array('Submitted_Date' => -1))->get("social_vaccination_status");
      
        foreach ($query_info as $student_info) 
        {   
          $end_array = $student_info['Submitted_Date'];

          if(preg_match("/$total_month/i", $end_array))
          {
            $unique_id = $student_info['uid'];
            
            array_push($submitted_students, $student_info);         
          }

        } 

    $query['submitted_students'] = $submitted_students;
      
  }elseif ($user_type == 'TTWREIS_HS') {

    $query_info = $this->mongo_db->where($check_query)->orderBy(array('Submitted_Date' => -1))->get("tribal_vaccination_status");
        
        foreach ($query_info as $student_info) 
        {   
          $end_array = $student_info['Submitted_Date'];

          if(preg_match("/$total_month/i", $end_array))
          {
            $unique_id = $student_info['uid'];
            
            array_push($submitted_students, $student_info);         
          }

        } 

    $query['submitted_students'] = $submitted_students;

  }elseif ($user_type == "BCWELFARE_HS"){

    $query_info = $this->mongo_db->where($check_query)->orderBy(array('Submitted_Date' => -1))->get("bc_vaccination_status");
        
          foreach ($query_info as $student_info) 
          {   
            $end_array = $student_info['Submitted_Date'];

            if(preg_match("/$total_month/i", $end_array))
            {
              $unique_id = $student_info['uid'];
              
              array_push($submitted_students, $student_info);         
            } 

          } 

      $query['submitted_students'] = $submitted_students;

     }

     return $query;

  }

public function get_hs_notes_school_wise_count_modal($user_type, $district, $school,$today_date)

{
		 if(preg_match("/PANACEA/i", $user_type))
	{		 	

		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );

		if($district =="All"){

			$schl_list = $this->mongo_db->select ( array ('school_name') )->orderBy ( array ('school_name' => 1 ) )->get ( 'panacea_schools_list' );
		}

		else
		
		{
			$schl_list = $this->mongo_db->select ( array ('school_name'	) )->orderBy ( array ('school_name' => 1 ) )->where(array('district_name' => $district ))->get ('panacea_schools_list' );
		}		
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

		$data = [];
		foreach ($schl_list as $scl) {
		$notescount = $this->mongo_db->where("School_Name" , $scl['school_name'])->where(array("datetime"  => array('$regex' => $today_date)))->count("panacea_ehr_notes");
					$saveData['school_name'] = $scl['school_name'];
					$saveData['count'] = 	$notescount;

					if($saveData['count'] != 0){
						array_push($data, $saveData);
					}
					
				}
					return $data;

	}elseif ($user_type == "TTWREIS_HS" || $user_type == "TTWREIS_ADMIN")
		{

			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			if($district =="All"){
				$schl_list = $this->mongo_db->select ( array ('school_name') )->orderBy ( array ('school_name' => 1 ) )->get ( 'ttwreis_schools_list' );
			}
			else
			{
				$schl_list = $this->mongo_db->select ( array ('school_name'	) )->orderBy ( array ('school_name' => 1 ) )->where(array('district_name' => $district ))->get ('ttwreis_schools_list' );
			}		
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			
			$data = [];
			foreach ($schl_list as $scl) {
					$notescount = $this->mongo_db->where("School_Name" , $scl['school_name'])->where(array("datetime"  => array('$regex' => $today_date)))->count("ttwreis_ehr_notes");
					$saveData['school_name'] = $scl['school_name'];
					$saveData['count'] = 	$notescount;

					if($saveData['count'] != 0){
						array_push($data, $saveData);
					}
					
				}
					return $data;

		}elseif ($user_type == "BCWELFARE_HS" || $user_type == "BCWELFARE_ADMIN") 
			{

				$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
				if($district =="All"){
					$schl_list = $this->mongo_db->select ( array ('school_name') )->orderBy ( array ('school_name' => 1 ) )->get ( 'bc_welfare_schools_districts' );
				}
				else
				{
					$schl_list = $this->mongo_db->select ( array ('school_name'	) )->orderBy ( array ('school_name' => 1 ) )->where(array('district_name' => $district ))->get ('bc_welfare_schools_districts' );
				}		
				$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
				
				$data = [];	
				foreach ($schl_list as $scl) {
					$notescount = $this->mongo_db->where("School_Name" , $scl['school_name'])->where(array("datetime"  => array('$regex' => $today_date)))->count("bc_welfare_ehr_notes");
					$saveData['school_name'] = $scl['school_name'];
					$saveData['count'] = 	$notescount;

					if($saveData['count'] != 0){
						array_push($data, $saveData);
					}
					
				}
					return $data;

			}else
			{
            return "User Type Not Found";
       		 }

}


public function get_students_for_hs_notes_school_wise_modal($user_type, $district, $school, $today_date)
{

	if(isset($user_type) && preg_match("/PANACEA/i", $user_type))
		{	
			$studens = $this->mongo_db->where("School_Name" , $school)->where(array("datetime"  => array('$regex' => $today_date)))->get("panacea_ehr_notes");	
											
			    return $studens;			

		}else
		{
        return "User Type Not Found";
   		 }

}

/* Panaea CC users API's */

public function school_names_with_phone_numbers($user_type, $email)
{
	$phone_number = [];
	if(isset($user_type) && !empty($user_type)){
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		if($user_type == "TSWREIS_CC" || $user_type == "TSWREIS_FO" || preg_match("/PANACEA/i", $user_type)){
		$school_codes = $this->mongo_db->select(array("school_code","hs_mob", "hs_ph", "username"))->get("panacea_health_supervisors");
		foreach ($school_codes as $code) {
			
			$get_principal_no = $this->mongo_db->select(array("school_code","school_name","contact_person_name","school_ph","school_mob","district_name"))->where("school_code", $code['school_code'])->get("panacea_schools_list");

			
			$data['hs_name'] = $code["username"];
			$data['hs_mob1'] = $code["hs_mob"];
			$data['hs_mob2'] = $code["hs_ph"];
			if(!empty($get_principal_no)){
				$data['principal_name'] = $get_principal_no[0]["contact_person_name"];
				$data['principal_mob1'] = $get_principal_no[0]["school_ph"];
				$data['principal_mob2'] = $get_principal_no[0]["school_mob"];
				$data['school_name'] = $get_principal_no[0]['school_name'];
				$data['school_code'] = $get_principal_no[0]['school_code'];
				if(isset($get_principal_no[0]['district_name']) && !empty($get_principal_no[0]['district_name'])){
					$data['district_name'] = $get_principal_no[0]['district_name'];
				}
			}
			
			array_push($phone_number, $data);
		}
		}elseif ($user_type == "TTWREIS_CC"|| $user_type == "TTWREIS_FO") {
			$school_codes = $this->mongo_db->select(array("school_code","hs_mob", "hs_ph", "username"))->get("ttwreis_health_supervisors");
			foreach ($school_codes as $code) {
				
			$get_principal_no = $this->mongo_db->where("school_code", $code['school_code'])->select(array("contact_person_name","school_ph","school_mob","school_code","school_name","district_name"))->get("ttwreis_schools_list");
			if(isset($get_principal_no[0]) && !empty($get_principal_no[0])){
				$data['school_name'] = $get_principal_no[0]["school_name"];
				$data['school_code'] = $get_principal_no[0]["school_code"];
			}
			$data['hs_name'] = $code["username"];
			$data['hs_mob1'] = $code["hs_mob"];
			$data['hs_mob2'] = $code["hs_ph"];
			if(!empty($get_principal_no)){
				$data['principal_name'] = $get_principal_no[0]["contact_person_name"];
				$data['principal_mob1'] = $get_principal_no[0]["school_ph"];
				$data['principal_mob2'] = $get_principal_no[0]["school_mob"];
				$data['school_name'] = $get_principal_no[0]['school_name'];
				$data['school_code'] = $get_principal_no[0]['school_code'];
				if(isset($get_principal_no[0]['district_name']) && !empty($get_principal_no[0]['district_name'])){
					$data['district_name'] = $get_principal_no[0]['district_name'];
				}
				
			}

			array_push($phone_number, $data);
		}
	}
	$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

	return $phone_number;
	}
}

public function get_students_requests_data_with_phone_no($user_type, $district, $school, $start_date, $end_date, $fetch_count, $request_type)
{
	if(preg_match("/PANACEA/i", $user_type) || preg_match("/TSWREIS/i", $user_type)){
		$collection = $this->health_request_col_panacea_hs;
	}elseif (preg_match("/TTWREIS/i", $user_type)) {
		$collection = $this->health_request_col_ttwreis_hs;
	}elseif (preg_match("/BCWELFARE/i", $user_type)) {
		$collection = $this->health_request_col_bcwelfare_hs;
	}

	$requestsCount = $this->mongo_db->whereBetween("history.time", $start_date, $end_date)->count($collection);

	$and_merged_array = array();

	if($request_type == "Hospitalized"){
		$req_match = array("doc_data.widget_data.page2.Review Info.Status"=>$request_type, "doc_data.widget_data.page2.Review Info.Status"=>array('$ne'=>"Cured"), "doc_data.widget_data.page2.Review Info.Status"=>array('$ne'=>"Expired"));
	}else{
		$req_match = array("doc_data.widget_data.page2.Review Info.Request Type"=>$request_type, "doc_data.widget_data.page2.Review Info.Status"=>array('$ne'=>"Cured"), "doc_data.widget_data.page2.Review Info.Status"=>array('$ne'=>"Expired"));
	}

	if($district != "All" && $school =="All"){
		$dist_scl_match = array("doc_data.widget_data.page1.Student Info.District.field_ref"=>$district);
	}elseif ($school !="All") {
		$dist_scl_match = array("doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school);
	}
	
	$date_span = array("history.time"=>array('$gte'=>$start_date, '$lte'=>$end_date));
	//array_push($and_merged_array, $scl_match);
	array_push($and_merged_array, $req_match);
	array_push($and_merged_array, $date_span);

	if(isset($dist_scl_match) && !empty($dist_scl_match)){
		array_push($and_merged_array, $dist_scl_match);
	}

		$pipeline = [ 
					array (
							'$project' => array ( 
									"doc_data" => true,
									"doc_properties" => true,
									"history"=> true
								   
							) 
					),
					array(
						'$match' => array(
							'$and' => $and_merged_array
						)
					),
					array (
							'$skip' => intval($fetch_count)
					),
					array(
						'$sort' => array('history.time' => -1)
					),
					array (
							'$limit' => 10
					)
					
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $collection,
					'pipeline' => $pipeline 
			) );

		$documents;

		//Add phone numbers to respective students
		foreach ($response['result'] as $key => $value) {

			$parent_no = $this->mongo_db->select(array("doc_data.widget_data"))->where("doc_data.widget_data.page1.Personal Information.Hospital Unique ID", $value['doc_data']['widget_data']['page1']['Student Info']['Unique ID'])->get($this->screening_app_col_sw_2021_2022);
			
			if(isset($parent_no[0]["doc_data"]["widget_data"]["page1"]["Personal Information"]["Mobile"]["mob_num"])){
				$phone_numbers["Father_name"] = $parent_no[0]["doc_data"]["widget_data"]["page2"]["Personal Information"]["Father Name"];
				$phone_numbers["father_mobile_no"] = $parent_no[0]["doc_data"]["widget_data"]["page1"]["Personal Information"]["Mobile"]["mob_num"];
			}

			$split_id = explode("_", $value['doc_data']['widget_data']['page1']['Student Info']['Unique ID']);
			$school_code = intval($split_id[1]);

			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$hs_details = $this->mongo_db->select(array("school_code","hs_mob", "hs_ph", "username"))->where("school_code", $school_code)->get("panacea_health_supervisors");

			if(!empty($hs_details)){
				$phone_numbers["hs_name"] = $hs_details[0]["username"];
				$phone_numbers["hs_mob1"] = $hs_details[0]["hs_mob"];
				$phone_numbers["hs_mob2"] = $hs_details[0]["hs_ph"];
			}
			$get_principal_no = $this->mongo_db->select(array("contact_person_name","school_ph","school_mob"))->where("school_code", $school_code)->get("panacea_schools_list");

			if(!empty($get_principal_no)){
				$phone_numbers["principal_name"] = $get_principal_no[0]["contact_person_name"];
				$phone_numbers["principal_mob1"] = $get_principal_no[0]["school_ph"];
				$phone_numbers["principal_mob2"] = $get_principal_no[0]["school_mob"];
			}

			array_push($response['result']["$key"]['doc_data']['widget_data']['page1']['Student Info'], $phone_numbers);

			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		}
	return $response;
}

public function save_cc_user_call_recording($data, $user_type)
{
	if(preg_match("/PANACEA/i", $user_type) || preg_match("/TSWREIS/i", $user_type)){
		$query = $this->mongo_db->insert("cc_user_work_tracking", $data);
	}elseif (preg_match("/TTWREIS/i", $user_type)) {
		$query = $this->mongo_db->insert("cc_user_work_tracking_ttwreis", $data);
	}elseif(preg_match("/BCWELFARE/i", $user_type)){
		$query = $this->mongo_db->insert("cc_user_work_tracking_bcwelfare", $data);
	}
	//$query = $this->mongo_db->insert("cc_user_work_tracking", $data);
	
	if($query){
		return TRUE;
	}else{
		return FALSE;
	}
}
 
/* Get student with details */
public function get_student_history($unique_id, $user_type)
{
	if(preg_match("/PANACEA/i", $user_type) || preg_match("/TSWREIS/i", $user_type) || preg_match("/tswreis/i", $user_type)){
		$collection = $this->screening_app_col_sw_2021_2022;
	}elseif (preg_match("/TTWREIS/i", $user_type) || preg_match("/ttwreis/i", $user_type)) {
		$collection = $this->screening_app_col_tt_2021_2022;
	}elseif (preg_match("/BCWELFARE/i", $user_type) || preg_match("/bcwelfare/i", $user_type)) {
		$collection = $this->screening_app_col_bc_2021_2022;
	}elseif (preg_match("/PRIVATE_SCHOOLS/i", $user_type) || preg_match("/private_schools/i", $user_type)) {
		$collection = "private_schools_col_2021-2022";
	}

    $query = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id))->get($collection);
    return $query;
}

public function save_monthly_menstural_data($data){
	if(preg_match("/PANACEA/i", $data['user_type']) || preg_match("/TSWREIS/i", $data['user_type']) || preg_match("/tswreis/i", $data['user_type'])){

		$collection = "tswreis_monthly_menstural_data";

	}elseif (preg_match("/TTWREIS/i", $data['user_type']) || preg_match("/ttwreis/i", $data['user_type'])) {

		$collection = "ttwreis_monthly_menstural_data";

	}elseif (preg_match("/BCWELFARE/i", $data['user_type']) || preg_match("/bcwelfare/i", $data['user_type'])) {

		$collection = "bcwelfare_monthly_menstural_data";

	}elseif (preg_match("/PRIVATE_SCHOOLS/i", $data['user_type']) || preg_match("/private_schools/i", $data['user_type'])) {

		$collection = "privatescl_monthly_menstural_data";
	}

	$query = $this->mongo_db->insert($collection, $data);

	return $query;
}

public function get_menstural_last_submitted_date($data){

	if(preg_match("/PANACEA/i", $data['user_type']) || preg_match("/TSWREIS/i", $data['user_type']) || preg_match("/tswreis/i", $data['user_type'])){

		$collection = "tswreis_monthly_menstural_data";

	}elseif (preg_match("/TTWREIS/i", $data['user_type']) || preg_match("/ttwreis/i", $data['user_type'])) {

		$collection = "ttwreis_monthly_menstural_data";

	}elseif (preg_match("/BCWELFARE/i", $data['user_type']) || preg_match("/bcwelfare/i", $data['user_type'])) {

		$collection = "bcwelfare_monthly_menstural_data";

	}elseif (preg_match("/PRIVATE_SCHOOLS/i", $data['user_type']) || preg_match("/private_schools/i", $data['user_type'])) {

		$collection = "privatescl_monthly_menstural_data";
	}

	$query = $this->mongo_db->select(array('periodStartDate'))->where("uid", $data['uid'])->get($collection);
	
	return $query;	

}


/*********************** End Code here ***********************/
	
}
