<?php
ini_set ( 'memory_limit',"2G");
if (! defined ( 'BASEPATH' ))
	exit ( 'No direct script access allowed' );
class Tswreis_sports_common_model extends CI_Model {
	/**
	 * error message (uses lang file)
	 *
	 * @var string
	 */
	protected $errors;
	
	/**
	 * error start delimiter
	 *
	 * @var string
	 */
	protected $error_start_delimiter;
	
	/**
	 * error end delimiter
	 *
	 * @var string
	 */
	protected $error_end_delimiter;
	function __construct() {
		parent::__construct ();
		
		$this->load->config ( 'ion_auth', TRUE );
		$this->load->config ( 'mongodb', TRUE );
		
		// Initialize MongoDB collection names
		$this->collections = $this->config->item ( 'collections', 'ion_auth' );
		$this->_configvalue = $this->config->item ( 'default' );
		$this->common_db = $this->config->item ( 'default' );
		
		$this->store_salt = $this->config->item ( 'store_salt', 'ion_auth' );
		$this->salt_length = $this->config->item ( 'salt_length', 'ion_auth' );
		
		// Initialize hash method directives (Bcrypt)
		$this->hash_method = $this->config->item ( 'hash_method', 'ion_auth' );
		
		// $this->common_db = $this->config->item('default');
		
		$this->screening_app_col = "healthcare2016226112942701";
		$this->screening_app_col_screening = "healthcare2016226112942701_screening_final";
		
		$this->absent_app_col = "healthcare201651317373988";
		$this->bmi_app_col = "healthcare2017617145744625";
		$this->hb_app_col = "himglobin_report_col";
//		$this->hb_app_col = "himglobin_report_col_back_up-12-05-2019";

		$this->bmi_app_col_xl_import = "healthcare2017617145744625_XL_Import";
		$this->hb_app_col_xl_import = "himoglobin_report_col_XL_Import";
		//$this->bmi_app_col = "healthcare2017617145744625_11-01-2018";
		$this->request_app_col = "healthcare2016531124515424";
		$this->request_app_col_static_html = "healthcare2016531124515424_static_html";
		$this->sanitation_infrastructure_app_col = "";
		$this->sanitation_app_col = "healthcare2016111212310531";
		$this->sanitation_app_col_v2 = "healthcare2016111212310531_version_2";
		$this->sanitation_infra_app_col  = "healthcare20161114161842748";
		$this->notes_col = "panacea_ehr_notes";
		$this->today_date = date ( 'Y-m-d' );

		$this->family_health_col_2020_2021 = "panacea_family_health_2020-2021";

		// For 2020-2021 academic year collections
		$this->screening_app_col_sw_2020_2021 = "tswreis_screening_report_col_2020-2021";
		$this->screening_app_col_tt_2020_2021 = "ttwreis_screening_report_col_2020-2021";
		$this->screening_app_col_bc_2020_2021 = "bcwelfare_screening_report_col_2020-2021";
	}
	
	
	public function statescount() {
		$count = $this->mongo_db->count ( 'panacea_states' );
		return $count;
	}
	public function get_states($per_page, $page) {
		$offset = $per_page * ($page - 1);
		$query = $this->mongo_db->limit ( $per_page )->offset ( $offset )->get ( 'panacea_states' );
		return $query;
	}
	public function get_all_states() {
		$query = $this->mongo_db->get ( 'panacea_states' );
		return $query;
	}
	
	// =================================================
	public function distcount() {
		$count = $this->mongo_db->count ( 'panacea_district' );
		return $count;
	}
	public function get_district($per_page, $page) {
		$offset = $per_page * ($page - 1);
		$query = $this->mongo_db->limit ( $per_page )->offset ( $offset )->get ( 'panacea_district' );
		foreach ( $query as $distlist => $dist ) {
			$st_name = $this->mongo_db->where ( '_id', new MongoId ( $dist ['st_name'] ) )->get ( 'panacea_states' );
			if (isset ( $dist ['st_name'] )) {
				$query [$distlist] ['st_name'] = $st_name [0] ['st_name'];
			} else {
				$query [$distlist] ['st_name'] = "No state selected";
			}
		}
		return $query;
	}
	public function get_all_district($dt_name = "All") {
		if ($dt_name == "All") {
			$query = $this->mongo_db->orderBy ( array (
					'dt_name' => 1 
			) )->get ( 'panacea_district' );
		} else {
			$query = $this->mongo_db->where ( 'dt_name', $dt_name )->orderBy ( array (
					'dt_name' => 1 
			) )->get ( 'panacea_district' );
		}
		return $query;
	}


	public function get_dt_name_based_on_id($dt_name){
		//$query = $this->mongo_db->where('st_name', "$dt_name")->get('panacea_district');
		$query = $this->mongo_db->select('dt_name')->where ( '_id', new MongoId ( "$dt_name" ) )->get ( 'panacea_district' );
		 
		return $query;
	}
	public function health_supervisorscount() {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$count = $this->mongo_db->count ( $this->collections ['panacea_health_supervisors'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		return $count;
	}
	public function get_health_supervisors($per_page, $page) {
		$offset = $per_page * ($page - 1);
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->limit ( $per_page )->offset ( $offset )->get ( $this->collections ['panacea_health_supervisors'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		return $query;
	}
	public function create_health_supervisors($post) {
		$this->load->config ( 'ion_auth', TRUE );
		
		$email = strtolower ( $post ['health_supervisors_email'] );
		$password = $post ['health_supervisors_password'];
		
		// Check if email already exists
		if ($this->user_exists ( $email )) {
			$this->set_error ( 'account_creation_duplicate_email' );
			return FALSE;
		}
		
		// IP address
		$ip_address = $this->_prepare_ip ( $this->input->ip_address () );
		$salt = $this->store_salt ? $this->salt () : FALSE;
		$password = $this->hash_password ( $password, $salt );
		
		// New user document
		$data = array (
				"school_code" => intval($post ['school_code']),
				"hs_name" => $post ['health_supervisors_name'],
				"hs_mob" => $post ['health_supervisors_mob'],
				"hs_ph" => $post ['health_supervisors_ph'],
				"password" => $password,
				"email" => $email,
				"hs_addr" => $post ['health_supervisors_addr'],
				
				"username" => $post ['health_supervisors_name'],
				'ip_address' => $ip_address,
				'created_on' => time (),
				'registered_on' => date ( "Y-m-d" ),
				'last_login' => date ( "Y-m-d H:i:s" ),
				// 'active' => ($admin_manual_activation === FALSE ? 1 : 0),
				'active' => 1,
				'company' => $this->session->userdata ( "customer" )['company'] 
		);
		
		// Store salt in document?
		if ($this->store_salt) {
			$data ['salt'] = $salt;
		}
		
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->insert ( $this->collections ['panacea_health_supervisors'], $data );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		// Return new document _id or FALSE on failure
		return isset ( $query ) ? $query : FALSE;
	}
	
	// ///////////////////////////////////////////////////////////
	public function cc_users_count() {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$count = $this->mongo_db->count ( $this->collections ['panacea_cc'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		return $count;
	}
	public function get_cc_users($per_page, $page) {
		$offset = $per_page * ($page - 1);
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->limit ( $per_page )->offset ( $offset )->get ( $this->collections ['panacea_cc'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		return $query;
	}
	public function create_cc_user($post) {
		$this->load->config ( 'ion_auth', TRUE );
		
		$email = strtolower ( $post ['email'] );
		$password = $post ['password'];
		
		// Check if email already exists
		if ($this->cc_user_exists ( $email )) {
			$this->set_error ( 'account_creation_duplicate_email' );
			return FALSE;
		}
		
		// IP address
		$ip_address = $this->_prepare_ip ( $this->input->ip_address () );
		$salt = $this->store_salt ? $this->salt () : FALSE;
		$password = $this->hash_password ( $password, $salt );
		
		// New user document
		$data = array (
				"name" => $post ['cc_user_name'],
				"mobile_number" => $post ['cc_user_mob'],
				"phone_number" => $post ['cc_user_ph'],
				"password" => $password,
				"email" => $email,
				"company_address" => $post ['cc_user_addr'],
				
				"username" => $post ['cc_user_name'],
				'ip_address' => $ip_address,
				'created_on' => time (),
				'registered_on' => date ( "Y-m-d" ),
				'last_login' => date ( "Y-m-d H:i:s" ),
				// 'active' => ($admin_manual_activation === FALSE ? 1 : 0),
				'active' => 1,
				'company_name' => $this->session->userdata ( "customer" )['company'] 
		);
		
		// Store salt in document?
		if ($this->store_salt) {
			$data ['salt'] = $salt;
		}
		
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->insert ( $this->collections ['panacea_cc'], $data );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		// Return new document _id or FALSE on failure
		return isset ( $query ) ? $query : FALSE;
	}
	public function delete_cc_user($cc_id) {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->where ( array (
				"_id" => new MongoId ( $cc_id ) 
		) )->delete ( $this->collections ['panacea_cc'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		return $query;
	}
	
	// ////////////////////////////////////////////////////////////
	public function doctorscount() {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$count = $this->mongo_db->count ( $this->collections ['panacea_doctors'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		return $count;
	}
	public function get_doctors($per_page, $page) {
		$offset = $per_page * ($page - 1);
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->limit ( $per_page )->offset ( $offset )->get ( $this->collections ['panacea_doctors'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		return $query;
	}
	public function get_all_doctors() {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->get ( $this->collections ['panacea_doctors'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		return $query;
	}
	
	// ///////////////////////////////////////////////////////////////////
	public function schoolscount() {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$count = $this->mongo_db->count ( $this->collections ['panacea_schools'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		return $count;
	}
	public function get_schools($per_page, $page) {
		$offset = $per_page * ($page - 1);
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->limit ( $per_page )->offset ( $offset )->get ( $this->collections ['panacea_schools'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		foreach ( $query as $schools => $school ) {
			$dt_name = $this->mongo_db->where ( '_id', new MongoId ( $school ['dt_name'] ) )->get ( 'panacea_district' );
			if (isset ( $school ['dt_name'] )) {
				$query [$schools] ['dt_name'] = $dt_name [0] ['dt_name'];
			} else {
				$query [$schools] ['dt_name'] = "No state selected";
			}
		}
		return $query;
	}
	public function create_school($post) {
		$this->load->config ( 'ion_auth', TRUE );
		
		$email = strtolower ( $post ['school_email'] );
		$password = $post ['school_password'];
		
		// Check if email already exists
		if ($this->school_exists ( $email )) {
			$this->set_error ( 'account_creation_duplicate_email' );
			return FALSE;
		}
		
		// IP address
		$ip_address = $this->_prepare_ip ( $this->input->ip_address () );
		$salt = $this->store_salt ? $this->salt () : FALSE;
		$password = $this->hash_password ( $password, $salt );
		
		$data = array (
				"dt_name" => $post ['dt_name'],
				"school_code" => intval($post ['school_code']),
				"school_name" => $post ['school_name'],
				"school_addr" => $post ['school_addr'],
				"password" => $password,
				"email" => $email,
				"school_ph" => $post ['school_ph'],
				"school_mob" => $post ['school_mob'],
				"contact_person_name" => $post ['contact_person_name'],
				
				"username" => $post ['school_name'],
				'ip_address' => $ip_address,
				'created_on' => time (),
				'registered_on' => date ( "Y-m-d" ),
				'last_login' => date ( "Y-m-d H:i:s" ),
				// 'active' => ($admin_manual_activation === FALSE ? 1 : 0),
				'active' => 1,
				'company' => $this->session->userdata ( "customer" )['company'] 
		);
		// Store salt in document?
		if ($this->store_salt) {
			$data ['salt'] = $salt;
		}
		
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->insert ( $this->collections ['panacea_schools'], $data );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		// Return new document _id or FALSE on failure
		return isset ( $query ) ? $query : FALSE;
	}
	public function get_all_schools() {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->get ( $this->collections ['panacea_schools'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		foreach ( $query as $schools => $school ) {
			$dt_name = $this->mongo_db->where ( '_id', new MongoId ( $school ['dt_name'] ) )->get ( 'panacea_district' );
			if (isset ( $school ['dt_name'] )) {
				$query [$schools] ['dt_name'] = $dt_name [0] ['dt_name'];
			} else {
				$query [$schools] ['dt_name'] = "No state selected";
			}
		}
		return $query;
	}
	public function get_all_schools_student_type($type) 
	{
		if(!empty($type))
		{
			if($type == "Male")
			{		
				$regex = "B.,";
			}else if($type == "Female")
			{
				$regex = "G.,";
			}
			
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$query = $this->mongo_db->where(array('school_name' => array('$regex' => $regex)))->get ( $this->collections ['panacea_schools'] );
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			foreach ( $query as $schools => $school ) {
				$dt_name = $this->mongo_db->where ( '_id', new MongoId ( $school ['dt_name'] ) )->get ( 'panacea_district' );
				if (isset ( $school ['dt_name'] )) {
					$query [$schools] ['dt_name'] = $dt_name [0] ['dt_name'];
				} else {
					$query [$schools] ['dt_name'] = "No state selected";
				}
			}
			return $query;
		}else
		{
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$query = $this->mongo_db->get ( $this->collections ['panacea_schools'] );
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			foreach ( $query as $schools => $school ) {
				$dt_name = $this->mongo_db->where ( '_id', new MongoId ( $school ['dt_name'] ) )->get ( 'panacea_district' );
				if (isset ( $school ['dt_name'] )) {
					$query [$schools] ['dt_name'] = $dt_name [0] ['dt_name'];
				} else {
					$query [$schools] ['dt_name'] = "No state selected";
				}
			}
			return $query;
		}
		
	}
	public function classescount() {
		$count = $this->mongo_db->count ( 'panacea_classes' );
		return $count;
	}
	public function get_classes($per_page, $page,$unique_id=false)
	{
		/*$var = ["TSWRDCW ADILABAD(G),ADILABAD", "TSWRDCW ARMOOR(G),NIZAMABAD", "TSWRDCW BHONGIRI(G),YADADRI", "TSWRDCW JAGADGIRI GUTTA(G),MEDCHAL", "TSWRDCW KAMAREDDY(G),KAMAREDDY", "TSWRDCW KARIMNAGAR(G),KARIMNAGAR", "TSWRDCW KHAMMAM(G),KHAMMAM", "TSWRDCW KOTHAGUDEM(G),BHADRADRI", "TSWRDCW LBNAGAR(G),HYDERABAD", "TSWRDCW MAHABUBNAGAR(G),MAHABUBNAGAR", "TSWRDCW MANCHIRIAL(G),MANCHERIAL", "TSWRDCW MEDAK(G),MEDAK", "TSWRDCW NAGARKURNOOL(G),NAGARKURNOOL", "TSWRDCW NALGONDA(G),NALGONDA", "TSWRDCW NIRMAL(G),NIRMAL", "TSWRDCW NIZAMABAD(G),NIZAMABAD", "TSWRDCW SIDDIPET(G),SIDDIPET", "TSWRDCW SIRICILLA(G),RAJANNA", "TSWRDCW SURYAPET(G),SURYAPET", "TSWRDCW VIKARABAD(G),VIKARABAD", "TSWRDCW WANAPARTHY(G),WANAPARTHY", "TSWRDCW WARANGAL EAST(G),WARANGAL URBAN", "TSWRDCW WARANGAL WEST(G),WARANGAL URBAN", "TSWREIS ACHAMPETA(B),MAHABUBNAGAR", "TSWREIS ADAVIMALLELA(G),KHAMMAM", "TSWREIS ADILABAD(G),ADILABAD", "TSWREIS ALAIR(G),YADADRI", "TSWREIS ALAMPUR(B),MAHABUBNAGAR", "TSWREIS ALAMPUR(G),GADWAL", "TSWREIS ALWAL(B),SIDDIPET", "TSWREIS AMANGAL(G),RANGAREDDY", "TSWREIS ANDOL(G),SANGAREDDY", "TSWREIS ANNAPUREDDYPALLI(B),BHADRADRI", "TSWREIS ANUMULA(B),NALGONDA", "TSWREIS ARMOOR(G),NIZAMABAD", "TSWREIS ARMUR(B),NIZAMABAD", "TSWREIS ASIFABAD(B),KOMURAM BHEEM", "TSWREIS ATMAKUR(G),WARANGAL RURAL", "TSWREIS BALANAGAR(B),MAHABUBNAGAR", "TSWREIS BANSWADA(G),KAMAREDDY", "TSWREIS BANTWARAM(G),VIKARABAD", "TSWREIS BEJJANKI(G),SIDDIPET", "TSWREIS BELLAMPALLI(B),MANCHERIAL", "TSWREIS BELLAMPALLI(G),MANCHERIAL", "TSWREIS BHADRACHALAM(G),BHADRADRI", "TSWREIS BHAINSA(G),NIRMAL", "TSWREIS BHIKNOOR(B),KAMAREDDY", "TSWREIS BHONGIR(B),YADADRI", "TSWREIS BHUPALAPALLI(G),JAYASHANKAR", "TSWREIS BICHKUNDA(B),KAMAREDDY", "TSWREIS BIJINAPALLE(B),NAGARKURNOOL", "TSWREIS BOATH(G),ADILABAD", "TSWREIS BODHAN(B),NIZAMABAD", "TSWREIS BOINAPALLE(B),RAJANNA", "TSWREIS CHANDUR(B),NALGONDA", "TSWREIS CHENNUR(B),MANCHERIAL", "TSWREIS CHENNUR(G),MANCHERIAL", "TSWREIS CHERIAL(B),SIDDIPET", "TSWREIS CHEVELLA(G),RANGAREDDY", "TSWREIS CHILKUR(B),RANGAREDDY", "TSWREIS CHINNABONALA(G),RAJANNA", "TSWREIS CHINNAKODUR(B),SIDDIPET", "TSWREIS CHINTALAKUNTA(G),KARIMNAGAR", "TSWREIS CHITKUL(G),SANGAREDDY", "TSWREIS CHITYAL(G),JAYASHANKAR", "TSWREIS CHIVEMLA(B),SURYAPET", "TSWREIS CHOPPADANDI(G),KARIMNAGAR", "TSWREIS CHOUTUPPAL(G),YADADRI", "TSWREIS COE KARIMNAGAR(G),KARIMNAGAR", "TSWREIS DAMARAGIDDA(B),MAHABUBNAGAR", "TSWREIS DAMMAPET(B),BHADRADRI", "TSWREIS DANAVAIGUDEM(G),KHAMMAM", "TSWREIS DEVARAKADRA(B),MAHABUBNAGAR", "TSWREIS DEVARAKONDA(G),NALGONDA", "TSWREIS DHARMARAM(G),NIZAMABAD", "TSWREIS DHARMASAGAR(G),WARANGAL URBAN", "TSWREIS DOMAKONDA(G),KAMAREDDY", "TSWREIS DUBBAK(B),SIDDIPET", "TSWREIS DUGGONDI(G),WARANGAL RURAL", "TSWREIS EKLARA BIG(G),KAMAREDDY", "TSWREIS ELKATURTI(G),WARANGAL URBAN", "TSWREIS ETURNAGARAM(B),JAYASHANKAR", "TSWREIS G.V.GUDEM(G),NALGONDA", "TSWREIS GACHIBOWLI(B),RANGAREDDY", "TSWREIS GADWAL(B),GADWAL", "TSWREIS GAJWEL(G),SIDDIPET", "TSWREIS GHANPUR(B),JANGAON", "TSWREIS GHATTU(G),GADWAL", "TSWREIS GOLLAPALLE(B),JAGTIAL", "TSWREIS GOPALPET(G),WANAPARTHY", "TSWREIS GOWLIDODDI(G),RANGAREDDY", "TSWREIS GUNDLAPALLI(G),NALGONDA", "TSWREIS HASANPARTHY(G),WARANGAL URBAN", "TSWREIS HATNOORA JC(B),SANGAREDDY", "TSWREIS HATNOORA(B),SANGAREDDY", "TSWREIS HEAD OFFICE,HYDERABAD", "TSWREIS HUSNABAD(B),SIDDIPET", "TSWREIS HUZURABAD(G),KARIMNAGAR", "TSWREIS HUZURNAGAR(B),SURYAPET", "TSWREIS IBRAHIMPATNAM(B),RANGAREDDY", "TSWREIS ICHODA(B),ADILABAD", "TSWREIS IEEJA(B),GADWAL", "TSWREIS ILLANTHAKUNTA(G),RAJANNA", "TSWREIS JADCHERLA JC(G),MAHABUBNAGAR", "TSWREIS JAGADEVPUR(G),SIDDIPET", "TSWREIS JAGADGIRIGUTTA(G),MEDCHAL", "TSWREIS JAGTIAL(G),JAGTIAL", "TSWREIS JAJIREDDYGUDEM(G),SURYAPET", "TSWREIS JAKARAM(B),JAYASHANKAR", "TSWREIS JAM(G),NIRMAL", "TSWREIS JAMMIKUNTTA(B),KARIMNAGAR", "TSWREIS JANGAON(B),JANGAON", "TSWREIS JAYAPRAKASHNAGAR(B),MAHABUBNAGAR", "TSWREIS KADDAM(G),NIRMAL", "TSWREIS KAGAZNAGAR(G),KOMURAM BHEEM", "TSWREIS KALLUR(G),KHAMMAM", "TSWREIS KAMMADANAM(G),MAHABUBNAGAR", "TSWREIS KANDUKUR(B),RANGAREDDY", "TSWREIS KASIPET(B),MANCHERIAL", "TSWREIS KATANGUR(G),NALGONDA", "TSWREIS KATARAM(G),JAYASHANKAR", "TSWREIS KAULASNALA(G),KAMAREDDY", "TSWREIS KESAMUDRAM(G),MAHABUBABAD", "TSWREIS KHAMMAM JC(G),KHAMMAM", "TSWREIS KODANGAL(B),VIKARABAD", "TSWREIS KOHEDA(B),SIDDIPET", "TSWREIS KOLLAPUR(G),NAGARKURNOOL", "TSWREIS KONDAPAK(B),SIDDIPET", "TSWREIS KONDAPUR(B),SANGAREDDY", "TSWREIS KONDURGU(B),RANGAREDDY", "TSWREIS KORATLA(B),JAGTIAL", "TSWREIS KOTAPALLI(B),MANCHERIAL", "TSWREIS KOTHAGUDEM(B),BHADRADRI", "TSWREIS KOTHAKOTA(G),WANAPARTHY", "TSWREIS KULCHARAM(G),MEDAK", "TSWREIS KUSUMANCHI(G),KHAMMAM", "TSWREIS LINGAL(B),MAHABUBNAGAR", "TSWREIS LINGAMPET(G),KAMAREDDY", "TSWREIS LUXETTIPET(G),MANCHERIAL", "TSWREIS MADANAPURAM(B),WANAPARTHY", "TSWREIS MADDUR(G),MAHABUBNAGAR", "TSWREIS MADHIRA(G),KHAMMAM", "TSWREIS MADIKONDA(G),WARANGAL URBAN", "TSWREIS MAHABOOBABAD(G),MAHABUBABAD", "TSWREIS MAHADEVPUR(G),PEDDAPALLI", "TSWREIS MAHENDRAHILLS(G),HYDERABAD", "TSWREIS MAHESHWARAM(G),RANGAREDDY", "TSWREIS MAIDPALLY(B),JAGTIAL", "TSWREIS MAKTHAL(G),MAHABUBNAGAR", "TSWREIS MALKAJGIRI(G),MEDCHAL", "TSWREIS MALLAPUR(G),PEDDAPALLI", "TSWREIS MANAKONDURU(B),KARIMNAGAR", "TSWREIS MANCHERIAL(B),MANCHERIAL", "TSWREIS MANDAMARRI(G),MANCHERIAL", "TSWREIS MANNANUR(G),MAHABUBNAGAR", "TSWREIS MANOPAD(G),GADWAL", "TSWREIS MANTHANI(B),PEDDAPALLI", "TSWREIS MANUGURU(B),BHADRADRI", "TSWREIS MARICAL(G),MAHABUBNAGAR", "TSWREIS MARIPEDA(B),MAHABUBABAD", "TSWREIS MATTAMPALLI(G),SURYAPET", "TSWREIS MEDAK(G),MEDAK", "TSWREIS MEDCHAL(G),MEDCHAL", "TSWREIS METPALLE(G),JAGTIAL", "TSWREIS MIRYALAGUDA(B),NALGONDA", "TSWREIS MITTAPALLI(G),SIDDIPET", "TSWREIS MOMINPET(G),VIKARABAD", "TSWREIS MOOSARAMBAGH(G),HYDERABAD", "TSWREIS MOTHKUR(B),NALGONDA", "TSWREIS MUDHOLE(B),NIRMAL", "TSWREIS MUDIGONDA(B),KHAMMAM", "TSWREIS MULAKALAPALLI(G),BHADRADRI", "TSWREIS MULUG(G),JAYASHANKAR", "TSWREIS MULUGU(G),SIDDIPET", "TSWREIS MUNAGALA(B),SURYAPET", "TSWREIS MUSTHABAD(B),RAJANNA", "TSWREIS NADIGUDEM(G),SURYAPET", "TSWREIS NAGOLE(IIT LTCD),HYDERABAD", "TSWREIS NAKIREKAL(B),NALGONDA", "TSWREIS NAKREKAL(G),NALGONDA", "TSWREIS NALLAKANCHE(G),RANGAREDDY", "TSWREIS NALLAVAGU(B),SANGAREDDY", "TSWREIS NANDIMEDARAM(G),PEDDAPALLI", "TSWREIS NARAYANAKHED(B),SANGAREDDY", "TSWREIS NARAYANPET(G),MAHABUBNAGAR", "TSWREIS NARMAL(G),RAJANNA", "TSWREIS NARMETTA(G),JANGAON", "TSWREIS NARSAMPET(B),WARANGAL RURAL", "TSWREIS NARSIMHULAPETA(G),MAHABUBABAD", "TSWREIS NARSINGI(G),RANGAREDDY", "TSWREIS NAVIPET(G),NIZAMABAD", "TSWREIS NAZEERABAD(G),RANGAREDDY", "TSWREIS NELAKONDAPALLY(G),KHAMMAM", "TSWREIS NIDAMANOOR(G),NALGONDA", "TSWREIS NIRMAL(G),NIRMAL", "TSWREIS NIZAMABAD(G),NIZAMABAD", "TSWREIS NYALKAL(B),SANGAREDDY", "TSWREIS PALAKURTHI(G),JANGAON", "TSWREIS PALAVANCHA(G),BHADRADRI", "TSWREIS PARGI(B),VIKARABAD", "TSWREIS PARKAL(B),WARANGAL RURAL", "TSWREIS PARKAL(G),WARANGAL RURAL", "TSWREIS PARVATHAGIRI(G),WARANGAL RURAL", "TSWREIS PEDAPALLY(G),PEDDAPALLI", "TSWREIS PEDDAKOTHAPALLE(B),NAGARKURNOOL", "TSWREIS PEDDAMANDADI(G),WANAPARTHY", "TSWREIS PEDDAPALLI(B),PEDDAPALLI", "TSWREIS PEDDEMUL(B),VIKARABAD", "TSWREIS PEMBATLA(B),KARIMNAGAR", "TSWREIS POCHAMPADU(G),NIZAMABAD", "TSWREIS RAIKOTE(G),SANGAREDDY", "TSWREIS RAJAPET(B),YADADRI", "TSWREIS RAMAKKAPET(G),SIDDIPET", "TSWREIS RAMANNAPET(G),YADADRI", "TSWREIS RAMAYAMPET(G),MEDAK", "TSWREIS RAMIREDDY GUDEM(G),MAHABUBNAGAR", "TSWREIS RAYAPARTHI(G),WARANGAL RURAL", "TSWREIS REBBANA(G),KOMURAM BHEEM", "TSWREIS SANGAREDDY(G),SANGAREDDY", "TSWREIS SAROORNAGAR(G),RANGAREDDY", "TSWREIS SATHUPALLI(B),KHAMMAM", "TSWREIS SHAIKPET(B),HYDERABAD", "TSWREIS SHAMIRPET(B),MEDCHAL", "TSWREIS SHAMSHABAD(B),RANGAREDDY", "TSWREIS SHANKARPALLE(G),RANGAREDDY", "TSWREIS SIDDIPET RURAL(G),SIDDIPET", "TSWREIS SINGOOR(B),SANGAREDDY", "TSWREIS SIRICILLA(G),RAJANNA", "TSWREIS SIRPUR(B),KOMURAM BHEEM", "TSWREIS SIRPUR(G),KOMURAM BHEEM", "TSWREIS SIVAREDDYPET(B),VIKARABAD", "TSWREIS SUDDAPALLI(G),NIZAMABAD", "TSWREIS SURYAPET(G),SURYAPET", "TSWREIS TADKOL(G),KAMAREDDY", "TSWREIS TADWAI(G),KAMAREDDY", "TSWREIS TEKULAPALLY(G),KHAMMAM", "TSWREIS TELKAPALLI(G),MAHABUBNAGAR", "TSWREIS THIPPARTHI(B),NALGONDA", "TSWREIS THIRUMALAYAPALEM(B),KHAMMAM", "TSWREIS TOGUTTA(G),SIDDIPET", "TSWREIS TOOPRAN(G),MEDAK", "TSWREIS TORRUR(G),MAHABUBABAD", "TSWREIS TUNGATURTHI(G),SURYAPET", "TSWREIS UPPAL(B),MEDCHAL", "TSWREIS UPPALAWAI(B),KAMAREDDY", "TSWREIS UTKOOR(G),MAHABUBNAGAR", "TSWREIS VALIGONDA(G),YADADRI", "TSWREIS VANGOOR(G),NAGARKURNOOL", "TSWREIS VARGAL(B),SIDDIPET", "TSWREIS VEEPANAGANDLA(B),WANAPARTHY", "TSWREIS VELDANDA(G),NAGARKURNOOL", "TSWREIS VELPUR(B),NIZAMABAD", "TSWREIS VEMULAWADA(G),RAJANNA", "TSWREIS VIKARABAD(G),VIKARABAD", "TSWREIS WARANGAL WEST(G),WARANGAL URBAN", "TSWREIS WARDHANNAPET(B),WARANGAL RURAL", "TSWREIS WYRA(G),KHAMMAM", "TSWREIS YALAL(G),VIKARABAD", "TSWREIS YELLANDU(G),BHADRADRI", "TSWREIS YELLAREDDY(B),KAMAREDDY", "TSWREIS YERRUPALEM(G),KHAMMAM", "TSWREIS ZAFFERGADH(G),JANGAON", "TSWREIS ZAHIRABAD(G),SANGAREDDY"];
			//$var = ["TSWREIS ILLANTHAKUNTA(G),RAJANNA"];
		$hb_6_count = 0;
        $hb_7_8_count = 0;
        $hb_10_12_count = 0;
         $counts = array();
        $counts_1 = array();
        $counts_2 = array();
        foreach ($var as $school_name) {
			$hb_6_info = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.HB_values','doc_data.widget_data.school_details'))->where(array('doc_data.widget_data.school_details.School Name' => $school_name))->whereLte('doc_data.widget_data.page1.Student Details.HB_values.hb',8)->get('himglobin_report_col');
            if(!empty($hb_6_info))
            {
                unset($counts);
                $counts = array();
                foreach ($hb_6_info as $value)
                {
                    $end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
                    if($end_array['hb'] <= 8)
                    {                       
                        $school_name = $value['doc_data']['widget_data']['school_details']['School Name'];
                        $hb_6_count = $value;   
                        array_push($counts, $hb_6_count);                                       
                    }
                                        
                }
                $update = $this->mongo_db->where(array('School Details.School Name' => $school_name))->set(array('School Status.2019-02-28.HB.Severe' => intval(count($counts))))->update('get_schools_status_collection');  
                    
            }

            $hb_7_8_info = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.HB_values','doc_data.widget_data.school_details'))->where(array('doc_data.widget_data.school_details.School Name' => $school_name))->whereBetween('doc_data.widget_data.page1.Student Details.HB_values.hb',8,10)->get('himglobin_report_col');
            if(!empty($hb_7_8_info))
            {
                unset($counts_1);
                $counts_1 = array();
                foreach ($hb_7_8_info as $value)
                {
                    $end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
                    if($end_array['hb'] > 8 && $end_array['hb'] <= 10)
                    {                       
                        $school_name = $value['doc_data']['widget_data']['school_details']['School Name'];
                        $hb_7_8_count = $value; 
                        array_push($counts_1, $hb_7_8_count);                                               
                    }
                    
                }
                $update = $this->mongo_db->where(array('School Details.School Name' => $school_name))->set(array('School Status.2019-02-28.HB.Moderate' => intval(count($counts_1))))->update('get_schools_status_collection');          
            }

            $hb_10_12_info = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.HB_values','doc_data.widget_data.school_details'))->where(array('doc_data.widget_data.school_details.School Name' => $school_name))->whereBetween('doc_data.widget_data.page1.Student Details.HB_values.hb',10,12)->get('himglobin_report_col');
            if(!empty($hb_10_12_info))
            {
            	unset($counts_2);
                $counts_2 = array();
                foreach ($hb_10_12_info as $value)
                {
                    $end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
                    if($end_array['hb'] > 10 && $end_array['hb'] <= 12 )
                    {                       
                        $school_name = $value['doc_data']['widget_data']['school_details']['School Name'];
                        $hb_10_12_count = $value;   
                        array_push($counts_2, $hb_10_12_count);                                     
                    }
                    
                }
                
                $update = $this->mongo_db->where(array('School Details.School Name' => $school_name))->set(array('School Status.2019-02-28.HB.Mild' => intval(count($counts_2))))->update('get_schools_status_collection');          
            }
			
		}*/
		/*

			$bmi_15_28_info = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.BMI_values','doc_data.widget_data.school_details'))->where(array('doc_data.widget_data.school_details.School Name' => $school_name))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_values.bmi',15,28)->get('healthcare2017617145744625');
			if(!empty($bmi_15_28_info))
			{
				
				foreach ($bmi_15_28_info as $value)
				{
					$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
					if($end_array['bmi'] >= 15 && $end_array['bmi'] < 28)
					{						
						$school_name = $value['doc_data']['widget_data']['school_details']['School Name'];
						$bmi_15_28_count = $value;	
						array_push($counts_1, $bmi_15_28_count);												
					}
					
				}
				$update = $this->mongo_db->where(array('School Details.School Name' => $school_name))->set(array('School Status.2019-02-28.BMI.Over Weight' => count($counts_1)))->update('get_schools_status_collection');			
			}

			$bmi_28_info = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.BMI_values','doc_data.widget_data.school_details'))->where(array('doc_data.widget_data.school_details.School Name' => $school_name))->whereGte('doc_data.widget_data.page1.Student Details.BMI_values.bmi',28)->get('healthcare2017617145744625');
			if(!empty($bmi_28_info))
			{
				foreach ($bmi_28_info as $value)
				{
					$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
					if($end_array['bmi'] >= 28)
					{						
						$school_name = $value['doc_data']['widget_data']['school_details']['School Name'];
						$bmi_28_count = $value;	
						array_push($counts_2, $bmi_28_count);										
					}
					
				}
				
				$update = $this->mongo_db->where(array('School Details.School Name' => $school_name))->set(array('School Status.2019-02-28.BMI.Obese' => count($counts_2)))->update('get_schools_status_collection');			
			}
			
		}*/
		
		/*
		$unique_ids = ["BDD_52209_", "BDD_52210_", "BDD_52218_", "BDD_52219_", "BDD_52223_", "GDW_61445_", "GDW_61459_", "HYD_61601_", "HYD_61602_", "HYD_61604_", "JGTL_52001_", "KMM_52202_", "KMM_52207_", "KMM_52208_", "KMM_52211_", "KMM_52213_", "KMM_52214_", "KMM_52216_", "KMM_52220_", "KMM_52222_", "KMNR_52004_", "KMNR_52033_", "KMR_61816_", "MBBD_52111_", "MBBD_52125_", "MBNR_61405_", "MBNR_61406_", "MBNR_61408_", "MBNR_61412_", "MBNR_61413_", "MBNR_61442_", "MBNR_61454_", "MBNR_61457_", "MBNR_61461_", "MBNR_61462_", "MBNR_61464_", "MCRL_51922_", "MDCL_61511_", "MDCL_61520_", "MDCL_61524_", "MDK_61722_", "MDK_61734_", "NLG_62304_", "NLG_62306_", "NLG_62307_", "NLG_62316_", "NLG_62327_", "NML_51904_", "PDPL_52009_", "RJN_52012_", "RR_61502_", "RR_61505_", "RR_61509_", "SDPT_52005_", "SDPT_52006_", "SDPT_61731_", "SDPT_61733_", "SRD_61703_", "SRD_61709_", "SRD_61710_", "SRPT_62305_", "SRPT_62308_", "SRPT_62328_", "VKRD_61526_", "WGLR_52107_", "WGLR_52112_", "WGLR_52122_", "WGLU_52013_", "WNPY_61443_", "WNPY_61458_", "YDD_62329_", "YDR_62303_", "YDR_62309_", "YDR_62323_", "YDR_62325_"];

		$correct_ids = ["BDD_52209_", "BDD_52210_", "BDD_52218_", "BDD_52219_", "BDD_52223_", "GDW_61445_", "GDW_61459_", "HYD_61601_", "HYD_61602_", "HYD_61604_", "JGTL_52001_", "KMM_52202_", "KMM_52207_", "KMM_52208_", "KMM_52211_", "KMM_52213_", "KMM_52214_", "KMM_52216_", "KMM_52220_", "KMM_52222_", "KMNR_52004_", "KMNR_52033_", "KMR_61816_", "MBBD_52111_", "MBBD_52125_", "MBNR_61405_", "MBNR_61406_", "MBNR_61408_", "MBNR_61412_", "MBNR_61413_", "MBNR_61442_", "MBNR_61454_", "MBNR_61457_", "MBNR_61461_", "MBNR_61462_", "MBNR_61464_", "MCRL_51922_", "MDCL_61511_", "MDCL_61520_", "MDCL_61524_", "MDK_61722_", "MDK_61734_", "NLG_62304_", "NLG_62306_", "NLG_62307_", "NLG_62316_", "NLG_62327_", "NML_51904_", "PDPL_52009_", "RJN_52012_", "RR_61502_", "RR_61505_", "RR_61509_", "SDPT_52005_", "SDPT_52006_", "SDPT_61731_", "SDPT_61733_", "SRD_61703_", "SRD_61709_", "SRD_61710_", "SRPT_62305_", "SRPT_62308_", "SRPT_62328_", "VKRD_61526_", "WGLR_52107_", "WGLR_52112_", "WGLR_52122_", "WGLU_52013_", "WNPY_61443_", "WNPY_61458_", "YDD_62329_", "YDR_62303_", "YDR_62309_", "YDR_62323_", "YDR_62325_"];

		$new_schools_names = ["TSWREIS PALAVANCHA(G),BHADRADRI", "TSWREIS MULAKALAPALLI(G),BHADRADRI", "TSWREIS MANUGURU(B),BHADRADRI", "TSWREIS BHADRACHALAM(G),BHADRADRI", "TSWRDCW KOTHAGUDEM(G),BHADRADRI", "TSWREIS IEEJA(B),GADWAL", "TSWREIS GADWAL(B),GADWAL", "TSWREIS SHAIKPET(B),HYDERABAD", "TSWREIS MAHENDRAHILLS(G),HYDERABAD", "TSWREIS MOOSARAMBAGH(G),HYDERABAD", "TSWREIS MAIDPALLY(B),JAGTIAL", "TSWREIS WYRA(G),KHAMMAM", "TSWREIS NELAKONDAPALLY(G),KHAMMAM", "TSWREIS KHAMMAM JC(G),KHAMMAM", "TSWREIS ADAVIMALLELA(G),KHAMMAM", "TSWREIS DANAVAIGUDEM(G),KHAMMAM", "TSWREIS MUDIGONDA(B),KHAMMAM", "TSWREIS MUDIGONDA(B),KHAMMAM", "TSWREIS THIRUMALAYAPALEM(B),KHAMMAM", "TSWRDCW KHAMMAM(G),KHAMMAM", "TSWREIS CHINTALAKUNTA(G),KARIMNAGAR", "TSWRDCW KARIMNAGAR(G),KARIMNAGAR", "TSWREIS DOMAKONDA(G),KAMAREDDY", "TSWREIS TORRUR(G),MAHABUBABAD", "TSWREIS NARSIMHULAPETA(G),MAHABUBABAD", "TSWREIS RAMIREDDY GUDEM(G),MAHABUBNAGAR", "TSWREIS KAMMADANAM(G),MAHABUBNAGAR", "TSWREIS NARAYANPET(G),MAHABUBNAGAR", "TSWREIS JADCHERLA JC(G),MAHABUBNAGAR", "TSWREIS MARICAL(G),MAHABUBNAGAR", "TSWREIS ALAMPUR(B),MAHABUBNAGAR", "TSWREIS BALANAGAR(B),MAHABUBNAGAR", "TSWREIS MADDUR(G),MAHABUBNAGAR", "TSWREIS MAKTHAL(G),MAHABUBNAGAR", "TSWREIS DAMARAGIDDA(B),MAHABUBNAGAR", "TSWREIS DEVARAKADRA(B),MAHABUBNAGAR", "TSWREIS KOTAPALLI(B),MANCHERIAL", "TSWREIS MEDCHAL(G),MEDCHAL", "TSWREIS SHAMIRPET(B),MEDCHAL", "TSWREIS JAGADGIRIGUTTA(G),MEDCHAL", "TSWREIS KULCHARAM(G),MEDAK", "TSWRDCW MEDAK(G),MEDAK", "TSWREIS DEVARAKONDA(G),NALGONDA", "TSWREIS NAKREKAL(G),NALGONDA", "TSWREIS G.V.GUDEM(G),NALGONDA", "TSWREIS NAKIREKAL(B),NALGONDA", "TSWRDCW NALGONDA(G),NALGONDA", "TSWREIS MUDHOLE(B),NIRMAL", "TSWREIS MAHADEVPUR(G),PEDDAPALLI", "TSWREIS NARMAL(G),RAJANNA", "TSWREIS NARSINGI(G),RANGAREDDY", "TSWREIS GOWLIDODDI(G),RANGAREDDY", "TSWREIS NAZEERABAD(G),RANGAREDDY", "TSWREIS HUSNABAD(B),SIDDIPET", "TSWREIS KOHEDA(B),SIDDIPET", "TSWREIS CHINNAKODUR(B),SIDDIPET", "TSWRDCW SIDDIPET(G),SIDDIPET", "TSWREIS HATNOORA(B),SANGAREDDY", "TSWREIS SINGOOR(B),SANGAREDDY", "TSWREIS HATNOORA JC(B),SANGAREDDY", "TSWREIS SURYAPET(G),SURYAPET", "TSWREIS NADIGUDEM(G),SURYAPET", "TSWRDCW SURYAPET(G),SURYAPET", "TSWRDCW VIKARABAD(G),VIKARABAD", "TSWREIS NARSAMPET(B),WARANGAL RURAL", "TSWREIS RAYAPARTHI(G),WARANGAL RURAL", "TSWREIS ATMAKUR(G),WARANGAL RURAL", "TSWREIS ELKATURTI(G),WARANGAL URBAN", "TSWREIS GOPALPET(G),WANAPARTHY", "TSWREIS PEDDAMANDADI(G),WANAPARTHY", "TSWRDCW BHONGIRI(G),YADADRI", "TSWREIS RAJAPET(B),YADADRI", "TSWREIS RAMANNAPET(G),YADADRI", "TSWREIS CHOUTUPPAL(G),YADADRI", "TSWREIS VALIGONDA(G),YADADRI"];

		$districts = ["BHADRADRI", "BHADRADRI", "BHADRADRI", "BHADRADRI", "BHADRADRI", "GADWAL", "GADWAL", "HYDERABAD", "HYDERABAD", "HYDERABAD", "JAGTIAL", "KHAMMAM", "KHAMMAM", "KHAMMAM", "KHAMMAM", "KHAMMAM", "KHAMMAM", "KHAMMAM", "KHAMMAM", "KHAMMAM", "KARIMNAGAR", "KARIMNAGAR", "KAMAREDDY", "MAHABUBABAD", "MAHABUBABAD", "MAHABUBNAGAR", "MAHABUBNAGAR", "MAHABUBNAGAR", "MAHABUBNAGAR", "MAHABUBNAGAR", "MAHABUBNAGAR", "MAHABUBNAGAR", "MAHABUBNAGAR", "MAHABUBNAGAR", "MAHABUBNAGAR", "MAHABUBNAGAR", "MANCHERIAL", "MEDCHAL", "MEDCHAL", "MEDCHAL", "MEDAK", "MEDAK", "NALGONDA", "NALGONDA", "NALGONDA", "NALGONDA", "NALGONDA", "NIRMAL", "PEDDAPALLI", "RAJANNA", "RANGAREDDY", "RANGAREDDY", "RANGAREDDY", "SIDDIPET", "SIDDIPET", "SIDDIPET", "SIDDIPET", "SANGAREDDY", "SANGAREDDY", "SANGAREDDY", "SURYAPET", "SURYAPET", "SURYAPET", "VIKARABAD", "WARANGAL RURAL", "WARANGAL RURAL", "WARANGAL RURAL", "WARANGAL URBAN", "WANAPARTHY", "WANAPARTHY", "YADADRI", "YADADRI", "YADADRI", "YADADRI", "YADADRI"];


   for($ind_modi=0;$ind_modi <= count($unique_ids)-1;$ind_modi++){
	   
			 echo $ind_modi;
			echo "/////////////";
			echo $unique_ids[$ind_modi]; 
			
			$unique_id = $unique_ids[$ind_modi];
			$correct_id = $correct_ids[$ind_modi];
			//$old_school_name = $old_school_names[$ind_modi];
			$correct_school_name = $new_schools_names[$ind_modi];
			$district = $districts[$ind_modi];
			//$email = $emails[$ind_modi];
			//$new_email = $new_emails[$ind_modi];
			//$dt_name = $dt_names[$ind_modi];
			
		$query = $this->mongo_db->whereLike('doc_data.widget_data.page1.Student Details.Hospital Unique ID',$unique_id)->get($this->bmi_app_col );
		foreach ($query as $doc){
		if(isset($doc['doc_data']['widget_data']['page1']['Student Details']['Hospital Unique ID'])){
			$nlg_pos = strpos ( $doc['doc_data']['widget_data']['page1']['Student Details']['Hospital Unique ID'], $unique_id);
			
			if($nlg_pos !== false){
				$nlg_end = $nlg_pos + strlen ($unique_id);
				$unique_cut = substr($doc['doc_data']['widget_data']['page1']['Student Details']['Hospital Unique ID'],$nlg_end,strlen ($doc['doc_data']['widget_data']['page1']['Student Details']['Hospital Unique ID']));

				$new_id = $correct_id.$unique_cut;
				
		$doc['doc_data']['widget_data']['page1']['Student Details']['Hospital Unique ID'] = $new_id;
		$doc['doc_data']['school_details']['District'] = $district;
		$doc['doc_data']['school_details']['School Name'] = $correct_school_name;
		
		$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update($this->bmi_app_col  );
		//echo print_r($doc["_id"],true);
		//echo print_r($doc,true);
		//exit();
		}
		}
		}
		}
		*/
		/*$unique_id = "HYD_500004_";
		$correct_id = "HYD_50004_";
		//====================screening collection ==============
		$query = $this->mongo_db->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID',$unique_id)->get($this->screening_app_col );
		
		foreach ($query as $doc){
		if(isset($doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'])){
			$nlg_pos = strpos ( $doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'], $unique_id);
			echo print_r($doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'],true);
			
			if($nlg_pos !== false){
				$nlg_end = $nlg_pos + strlen ($unique_id);
				$unique_cut = substr($doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'],$nlg_end,strlen ($doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID']));
				
				$new_id = $correct_id.$unique_cut;
				//echo print_r($new_id,true);
				//exit();
		$doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'] = $new_id;
		//$doc['doc_data']['widget_data']['page2']['Personal Information']['School Name'] = $correct_school_name;
		//$doc['doc_data']['widget_data']['page2']['Personal Information']['District'] = $district;
		//echo print_r($doc,true);
		//exit();
		$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update($this->screening_app_col );
		//echo print_r($query,true);
		//echo print_r($doc,true);
		//exit();
		}
		}
		}*/
		
		//$this->unique_id_check($unique_id);
		
		//=======================================================START OF HS
		/*
		$school_id = 'jskr.52024.hs#gmail.com,wnpy.61458.hs#gmail.com,nml.51927.hs#gmail.com';
		$schoolObj = explode(",",$school_id);
		foreach($schoolObj as $id)
		{
			//================================================================== medical evaluation-=======================================================
			$app_coll = $id."_apps";
			$data = json_decode('{ "app_template" : { "pages" : { "1" : { "Personal Information" : { "Name" : { "type" : "text", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 1, "notify" : "true" }, "Mobile" : { "type" : "mobile", "minlength" : "10", "maxlength" : "10", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 2, "notify" : "false" }, "Hospital Unique ID" : { "type" : "text", "minlength" : "1", "maxlength" : "123", "required" : "TRUE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 3, "notify" : "false" }, "Date of Birth" : { "type" : "date", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 4, "notify" : "false" }, "Photo" : { "type" : "photo", "required" : "TRUE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 5, "upload" : { "allowed_types" : "*", "encrypt_name" : "TRUE", "max_size" : "5120", "min_size" : "1024" } }, "newline6" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 6 }, "newline7" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 7 }, "newline8" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 8 }, "newline9" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 9 }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 1 } } }, "2" : { "Personal Information" : { "AD No" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 10, "notify" : "false" }, "District" : { "type" : "text", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 11, "notify" : "false" }, "School Name" : { "type" : "text", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 12, "notify" : "false" }, "Class" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 13, "notify" : "false" }, "Section" : { "type" : "text", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 14, "notify" : "false" }, "Father Name" : { "type" : "text", "minlength" : "0", "maxlength" : "60", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 15, "notify" : "false" }, "Date of Exam" : { "type" : "date", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 16, "notify" : "false" }, "newline17" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 17 }, "newline18" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 18 }, "newline19" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 19 }, "newline20" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 20 }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 1 } } }, "3" : { "Physical Exam" : { "Height cms" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 1, "notify" : "false" }, "Weight kgs" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 2, "notify" : "false" }, "BMI%" : { "type" : "number", "minlength" : "0", "maxlength" : "60", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 3, "notify" : "false" }, "Pulse" : { "type" : "number", "minlength" : "0", "maxlength" : "60", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 4, "notify" : "false" }, "B P" : { "type" : "text", "minlength" : "0", "maxlength" : "60", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 5, "notify" : "false" }, "Blood Group" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 6, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "A+", "value" : "A+" }, { "label" : "A-", "value" : "A-" }, { "label" : "A1-", "value" : "A1-" }, { "label" : "A1+", "value" : "A1+" }, { "label" : "A1B-", "value" : "A1B-" }, { "label" : "A1B+", "value" : "A1B+" }, { "label" : "A2-", "value" : "A2-" }, { "label" : "A2+", "value" : "A2+" }, { "label" : "A2B-", "value" : "A2B-" }, { "label" : "A2B+", "value" : "A2B+" }, { "label" : "AB+", "value" : "AB+" }, { "label" : "AB-", "value" : "AB-" }, { "label" : "B-", "value" : "B-" }, { "label" : "B+", "value" : "B+" }, { "label" : "B1+", "value" : "B1+" }, { "label" : "O-", "value" : "O-" }, { "label" : "O+", "value" : "O+" } ] }, "H B" : { "type" : "text", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 7, "notify" : "false" }, "newline8" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 8 }, "newline9" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 9 }, "newline10" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 10 }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 2 } } }, "4" : { "Doctor Check Up" : { "Check the box if normal else describe abnormalities" : { "type" : "checkbox", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 1, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Neurologic", "value" : "Neurologic" }, { "label" : "H and N", "value" : "H and N" }, { "label" : "ENT", "value" : "ENT" }, { "label" : "Lymphatic", "value" : "Lymphatic" }, { "label" : "Heart", "value" : "Heart" }, { "label" : "Lungs", "value" : "Lungs" }, { "label" : "Abdomen", "value" : "Abdomen" }, { "label" : "Genitalia", "value" : "Genitalia" }, { "label" : "Skin", "value" : "Skin" } ] }, "Ortho" : { "type" : "checkbox", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 2, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Neck", "value" : "Neck" }, { "label" : "Shoulders", "value" : "Shoulders" }, { "label" : "Arms/Hands", "value" : "Arms/Hands" }, { "label" : "Hips", "value" : "Hips" }, { "label" : "Knees", "value" : "Knees" }, { "label" : "Feet", "value" : "Feet" } ] }, "Postural" : { "type" : "checkbox", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 3, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "No spinal Abnormality", "value" : "No spinal Abnormality" }, { "label" : "Spinal Abnormality", "value" : "Spinal Abnormality" }, { "label" : "Mild", "value" : "Mild" }, { "label" : "Marked", "value" : "Marked" }, { "label" : "Moderate", "value" : "Moderate" }, { "label" : "Referral Made", "value" : "Referral Made" } ] }, "Description" : { "type" : "textarea", "minlength" : "0", "maxlength" : "250", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 4, "notify" : "false" }, "Advice" : { "type" : "textarea", "minlength" : "0", "maxlength" : "250", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 5, "notify" : "false" }, "newline6" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 6 }, "newline7" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 7 }, "newline8" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 8 }, "newline9" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 9 }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 3 } } }, "5" : { "Doctor Check Up" : { "Defects at Birth" : { "type" : "checkbox", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 10, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Neural Tube Defect", "value" : "Neural Tube Defect" }, { "label" : "Down Syndrome", "value" : "Down Syndrome" }, { "label" : "Cleft Lip and Palate", "value" : "Cleft Lip and Palate" }, { "label" : "Talipes Club foot", "value" : "Talipes Club foot" }, { "label" : "Developmental Dysplasia of Hip", "value" : "Developmental Dysplasia of Hip" }, { "label" : "Congenital Cataract", "value" : "Congenital Cataract" }, { "label" : "Congenital Deafness", "value" : "Congenital Deafness" }, { "label" : "Congenital Heart Disease", "value" : "Congenital Heart Disease" }, { "label" : "Retinopathy of Prematurity", "value" : "Retinopathy of Prematurity" } ] }, "Deficencies" : { "type" : "checkbox", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 11, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Anaemia", "value" : "Anaemia" }, { "label" : "Vitamin Deficiency - Bcomplex", "value" : "Vitamin Deficiency - Bcomplex" }, { "label" : "Vitamin A Deficiency", "value" : "Vitamin A Deficiency" }, { "label" : "Vitamin D Deficiency", "value" : "Vitamin D Deficiency" }, { "label" : "SAM/stunting", "value" : "SAM/stunting" }, { "label" : "Goiter", "value" : "Goiter" }, { "label" : "Under Weight", "value" : "Under Weight" }, { "label" : "Normal Weight", "value" : "Normal Weight" }, { "label" : "Over Weight", "value" : "Over Weight" }, { "label" : "Obese", "value" : "Obese" } ] }, "Childhood Diseases" : { "type" : "checkbox", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 12, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Skin Conditions", "value" : "Skin Conditions" }, { "label" : "Otitis Media", "value" : "Otitis Media" }, { "label" : "Rheumatic Heart Disease", "value" : "Rheumatic Heart Disease" }, { "label" : "Asthma", "value" : "Asthma" }, { "label" : "Convulsive Disorders", "value" : "Convulsive Disorders" }, { "label" : "Hypothyroidism", "value" : "Hypothyroidism" }, { "label" : "Diabetes", "value" : "Diabetes" }, { "label" : "Epilepsy", "value" : "Epilepsy" } ] }, "N A D" : { "type" : "checkbox", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 13, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Yes", "value" : "Yes" } ] }, "Doctor Name and Reg No" : { "type" : "text", "minlength" : "", "maxlength" : "", "required" : "FALSE", "key" : "FALSE", "description" : "", "multilanguage" : "FALSE", "order" : 14 }, "newline15" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 15 }, "newline16" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 16 }, "newline17" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 17 }, "newline18" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 18 }, "newline19" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 19 }, "newline20" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 20 }, "newline21" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 21 }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 3 } } }, "6" : { "Screenings" : { "Detected Myopia Hypermetropia" : { "type" : "instruction", "required" : "FALSE", "key" : "TRUE", "instructions" : "Vision Screening", "description" : "", "multilanguage" : "FALSE", "order" : 1 }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 4 } }, "Without Glasses" : { "Right" : { "type" : "text", "minlength" : "0", "maxlength" : "60", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 1, "notify" : "false" }, "Left" : { "type" : "text", "minlength" : "0", "maxlength" : "60", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 2, "notify" : "false" }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 5 } }, "With Glasses" : { "Right" : { "type" : "text", "minlength" : "0", "maxlength" : "60", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 1, "notify" : "false" }, "Left" : { "type" : "text", "minlength" : "0", "maxlength" : "60", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 2, "notify" : "false" }, "newline3" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 3 }, "newline4" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 4 }, "newline5" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 5 }, "newline6" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 6 }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 6 } } }, "7" : { "Colour Blindness" : { "Right" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 1, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Yes", "value" : "Yes" }, { "label" : "No", "value" : "No" } ] }, "Left" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 2, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Yes", "value" : "Yes" }, { "label" : "No", "value" : "No" } ] }, "Description" : { "type" : "textarea", "minlength" : "0", "maxlength" : "250", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 3, "notify" : "false" }, "Referral Made" : { "type" : "checkbox", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 4, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Yes", "value" : "Yes" } ] }, "Docter Name and Reg No" : { "type" : "text", "minlength" : "", "maxlength" : "", "required" : "FALSE", "key" : "FALSE", "description" : "", "multilanguage" : "FALSE", "order" : 5 }, "newline6" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 6 }, "newline7" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 7 }, "newline8" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 8 }, "newline9" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 9 }, "newline10" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 10 }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 7 } } }, "8" : { " Auditory Screening" : { "Right" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 1, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Pass", "value" : "Pass" }, { "label" : "Fail", "value" : "Fail" } ] }, "Left" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 2, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Pass", "value" : "Pass" }, { "label" : "Fail", "value" : "Fail" } ] }, "Speech Screening" : { "type" : "checkbox", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 3, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Normal", "value" : "Normal" }, { "label" : "Delay", "value" : "Delay" }, { "label" : "Misarticulation", "value" : "Misarticulation" }, { "label" : "Fluency", "value" : "Fluency" }, { "label" : "Voice", "value" : "Voice" } ] }, "D D and disability" : { "type" : "checkbox", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 4, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Language Delay", "value" : "Language Delay" }, { "label" : "Behaviour Disorder", "value" : "Behaviour Disorder" } ] }, "Description" : { "type" : "textarea", "minlength" : "0", "maxlength" : "250", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 5, "notify" : "false" }, "Referral Made" : { "type" : "checkbox", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 6, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Yes", "value" : "Yes" } ] }, "Doctor Name and Reg No" : { "type" : "text", "minlength" : "", "maxlength" : "", "required" : "FALSE", "key" : "FALSE", "description" : "", "multilanguage" : "FALSE", "order" : 7 }, "newline8" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 8 }, "newline9" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 9 }, "newline10" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 10 }, "newline11" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 11 }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 8 } } }, "9" : { "Dental Check-up" : { "Oral Hygiene" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 1, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Good", "value" : "Good" }, { "label" : "Fair", "value" : "Fair" }, { "label" : "Poor", "value" : "Poor" } ] }, "Carious Teeth" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 2, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Yes", "value" : "Yes" }, { "label" : "No", "value" : "No" } ] }, "Flourosis" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 3, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Yes", "value" : "Yes" }, { "label" : "No", "value" : "No" } ] }, "Orthodontic Treatment" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 4, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Yes", "value" : "Yes" }, { "label" : "No", "value" : "No" } ] }, "Indication for extraction" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 5, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Yes", "value" : "Yes" }, { "label" : "No", "value" : "No" } ] }, "Result" : { "type" : "textarea", "minlength" : "0", "maxlength" : "250", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 6, "notify" : "false" }, "Referral Made" : { "type" : "checkbox", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 7, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Yes", "value" : "Yes" } ] }, "Doctor Name and Reg No" : { "type" : "text", "minlength" : "", "maxlength" : "", "required" : "FALSE", "key" : "FALSE", "description" : "", "multilanguage" : "FALSE", "order" : 8 }, "newline9" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 9 }, "newline10" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 10 }, "newline11" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 11 }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 9 } } } }, "permissions" : { "Stage Name1" : { "View_Permissions" : [ "Personal Information", "Physical Exam", "Doctor Check Up", "Screenings", "Without Glasses", "With Glasses", "Colour Blindness", " Auditory Screening", "Dental Check-up" ], "Edit_Permissions" : [ "Personal Information", "Physical Exam", "Doctor Check Up", "Screenings", "Without Glasses", "With Glasses", "Colour Blindness", " Auditory Screening", "Dental Check-up" ], "index" : 1 } }, "notification_parameters" : [ { "field" : "Name", "page" : "1", "section" : "Personal Information" } ], "application_header" : { "header_details" : { "companyname" : "Healthcare", "address" : "401s,secbad,india", "logo" : "" } } }, "app_id" : "healthcare2016226112942701", "app_description" : "for tswreis edit", "status" : "processed", "app_name" : "Medical Evaluation", "app_created" : "2016-10-05 13:46:08", "app_expiry" : "2018-01-25", "_version" : 2, "stages" : [ "Stage Name1" ], "created_by" : "tlstec.primary2@gmail.com", "use_profile_header" : "no", "blank_app" : "no" }',true);
			////log_message("debug","dataaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa".print_r($data,true));
			$this->mongo_db->insert ( $app_coll, $data );
			
			
			$app_coll = $id."_applist";
			$data = json_decode('{ "app_id" : "healthcare2016226112942701", "app_description" : "for tswreis edit", "app_name" : "Medical Evaluation", "app_created" : "2016-10-05 13:46:08" }',true);
			////log_message("debug","dataaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa".print_r($data,true));
			$this->mongo_db->insert ( $app_coll, $data );
			//====================================================================================================================================
			
			//==================================================================== Attendence app ===============================================
			
			$app_coll = $id."_apps";
			$data = json_decode('{ "app_template" : { "pages" : { "1" : { "Attendence Details" : { "District" : { "type" : "select", "size" : "1", "required" : "TRUE", "key" : "TRUE", "description" : "", "option_choose_one" : "TRUE", "with_translations" : "FALSE", "order" : 1, "multilanguage" : "FALSE", "notify" : "false", "options" : [  {  "text" : "ADILABAD",  "selected" : "TRUE",  "value" : "ADILABAD"  },  {  "text" : "BHADRADRI",  "selected" : "FALSE",  "value" : "BHADRADRI"  },  {  "text" : "GADWAL",  "selected" : "FALSE",  "value" : "GADWAL"  },  {  "text" : "HYDERABAD",  "selected" : "FALSE",  "value" : "HYDERABAD"  },  {  "text" : "JAGTIAL",  "selected" : "FALSE",  "value" : "JAGTIAL"  },  {  "text" : "JANGAON",  "selected" : "FALSE",  "value" : "JANGAON"  },  {  "text" : "JAYASHANKAR",  "selected" : "FALSE",  "value" : "JAYASHANKAR"  },  {  "text" : "KAMAREDDY",  "selected" : "FALSE",  "value" : "KAMAREDDY"  },   {  "text" : "KARIMNAGAR",  "selected" : "FALSE",  "value" : "KARIMNAGAR"  },  {  "text" : "KHAMMAM",  "selected" : "FALSE",  "value" : "KHAMMAM"  },  {  "text" : "KOMARAM BHEEM",  "selected" : "FALSE",  "value" : "KOMARAM BHEEM"  },  {  "text" : "MAHABUBABAD",  "selected" : "FALSE",  "value" : "MAHABUBABAD"  },  {  "text" : "MAHABUBNAGAR",  "selected" : "FALSE",  "value" : "MAHABUBNAGAR"  },  {  "text" : "MANCHERIAL",  "selected" : "FALSE",  "value" : "MANCHERIAL"  },  {  "text" : "MEDAK",  "selected" : "FALSE",  "value" : "MEDAK"  },  {  "text" : "MEDCHAL",  "selected" : "FALSE",  "value" : "MEDCHAL"  },  {  "text" : "NAGARKURNOOL",  "selected" : "FALSE",  "value" : "NAGARKURNOOL"  },   {  "text" : "NALGONDA",  "selected" : "FALSE",  "value" : "NALGONDA"  },  {  "text" : "NIRMAL",  "selected" : "FALSE",  "value" : "NIRMAL"  },  {  "text" : "NIZAMABAD",  "selected" : "FALSE",  "value" : "NIZAMABAD"  },  {  "text" : "PEDDAPALLI",  "selected" : "FALSE",  "value" : "PEDDAPALLI"  },  {  "text" : "RAJANNA SIRCILLA",  "selected" : "FALSE",  "value" : "RAJANNA SIRCILLA"  },  {  "text" : "RANGAREDDY",  "selected" : "FALSE",  "value" : "RANGAREDDY"  },  {  "text" : "SANGAREDDY",  "selected" : "FALSE",  "value" : "SANGAREDDY"  },  {  "text" : "SIDDIPET",  "selected" : "FALSE",  "value" : "SIDDIPET"  },  {  "text" : "SIDDIPET",  "selected" : "FALSE",  "value" : "SIDDIPET"  },  {  "text" : "SURYAPET",  "selected" : "FALSE",  "value" : "SURYAPET"  },  {  "text" : "VIKARABAD",  "selected" : "FALSE",  "value" : "VIKARABAD"  },  {  "text" : "WANAPARTHY",  "selected" : "FALSE",  "value" : "WANAPARTHY"  },  {  "text" : "WARANGAL RURAL",  "selected" : "FALSE",  "value" : "WARANGAL RURAL"  },  {  "text" : "WARANGAL URBAN",  "selected" : "FALSE",  "value" : "WARANGAL URBAN"  },  {  "text" : "YADADRI",  "selected" : "FALSE",  "value" : "YADADRI"  }  ] }, "Select School" : { "type" : "select", "size" : "1", "required" : "TRUE", "key" : "TRUE", "description" : "", "option_choose_one" : "TRUE", "with_translations" : "FALSE", "order" : 2, "multilanguage" : "FALSE", "notify" : "true", "options" : [  {  "text" : "TSWREIS ADILABAD(G),ADILABAD",  "selected" : "TRUE",  "value" : "TSWREIS ADILABAD(G),ADILABAD"  },  {  "text" : "TSWREIS BOATH(G),ADILABAD",  "selected" : "FALSE",  "value" : "TSWREIS BOATH(G),ADILABAD"  },  {  "text" : "TSWREIS ICHODA(B),ADILABAD",  "selected" : "FALSE",  "value" : "TSWREIS ICHODA(B),ADILABAD"  },  {  "text" : "TSWRDCW ADILABAD(G),ADILABAD",  "selected" : "FALSE",  "value" : "TSWRDCW ADILABAD(G),ADILABAD"  },  {  "text" : "TSWREIS ANNAPUREDDYPALLI(B),BHADRADRI",  "selected" : "FALSE",  "value" : "TSWREIS ANNAPUREDDYPALLI(B),BHADRADRI"  },  {  "text" : "TSWREIS BHADRACHALAM(G),BHADRADRI",  "selected" : "FALSE",  "value" : "TSWREIS BHADRACHALAM(G),BHADRADRI"  },  {  "text" : "TSWREIS DAMMAPET(B),BHADRADRI",  "selected" : "FALSE",  "value" : "TSWREIS DAMMAPET(B),BHADRADRI"  },  {  "text" : "TSWREIS KOTHAGUDEM(B),BHADRADRI",  "selected" : "FALSE",  "value" : "TSWREIS KOTHAGUDEM(B),BHADRADRI"  },  {  "text" : "TSWREIS MANUGURU(B),BHADRADRI",  "selected" : "FALSE",  "value" : "TSWREIS MANUGURU(B),BHADRADRI"  },  {  "text" : "TSWREIS MULKALAPALLY(G),BHADRADRI",  "selected" : "FALSE",  "value" : "TSWREIS MULKALAPALLY(G),BHADRADRI"  },  {  "text" : "TSWREIS PALAVANCHA(G),BHADRADRI",  "selected" : "FALSE",  "value" : "TSWREIS PALAVANCHA(G),BHADRADRI"  },  {  "text" : "TSWREIS YELLANDU(G),BHADRADRI",  "selected" : "FALSE",  "value" : "TSWREIS YELLANDU(G),BHADRADRI"  },  {  "text" : "TSWRDCW KOTHAGUDEM(G),BHADRADRI",  "selected" : "FALSE",  "value" : "TSWRDCW KOTHAGUDEM(G),BHADRADRI"  },  {  "text" : "TSWREIS ALAMPUR(G),GADWAL",  "selected" : "FALSE",  "value" : "TSWREIS ALAMPUR(G),GADWAL"  },  {  "text" : "TSWREIS ALAMPUR(B),GADWAL",  "selected" : "FALSE",  "value" : "TSWREIS ALAMPUR(B),GADWAL"  },  {  "text" : "TSWREIS GADWAL(B),GADWAL",  "selected" : "FALSE",  "value" : "TSWREIS GADWAL(B),GADWAL"  },  {  "text" : "TSWREIS GHATTU(G),GADWAL",  "selected" : "FALSE",  "value" : "TSWREIS GHATTU(G),GADWAL"  },  {  "text" : "TSWREIS IEEJA(B),GADWAL",  "selected" : "FALSE",  "value" : "TSWREIS IEEJA(B),GADWAL"  },  {  "text" : "TSWREIS MANOPAD(G),GADWAL",  "selected" : "FALSE",  "value" : "TSWREIS MANOPAD(G),GADWAL"  },  {  "text" : "TSWRDCW LBNAGAR(G),HYDERABAD",  "selected" : "FALSE",  "value" : "TSWRDCW LBNAGAR(G),HYDERABAD"  },  {  "text" : "TSWREIS MAHENDRAHILLS(G),HYDERABAD",  "selected" : "FALSE",  "value" : "TSWREIS MAHENDRAHILLS(G),HYDERABAD"  },  {  "text" : "TSWREIS MOOSARAMBAGH(G),HYDERABAD",  "selected" : "FALSE",  "value" : "TSWREIS MOOSARAMBAGH(G),HYDERABAD"  },  {  "text" : "TSWREIS SHAIKPET(B),HYDERABAD",  "selected" : "FALSE",  "value" : "TSWREIS SHAIKPET(B),HYDERABAD"  },    {  "text" : "TSWREIS GOLLAPALLE(B),JAGTIAL",  "selected" : "FALSE",  "value" : "TSWREIS GOLLAPALLE(B),JAGTIAL"  },  {  "text" : "TSWREIS JAGTIAL(G),JAGTIAL",  "selected" : "FALSE",  "value" : "TSWREIS JAGTIAL(G),JAGTIAL"  },  {  "text" : "TSWREIS KORATLA(B),JAGTIAL",  "selected" : "FALSE",  "value" : "TSWREIS KORATLA(B),JAGTIAL"  },  {  "text" : "TSWREIS MAIDPALLY(B),JAGTIAL",  "selected" : "FALSE",  "value" : "TSWREIS MAIDPALLY(B),JAGTIAL"  },  {  "text" : "TSWREIS METPALLE(G),JAGTIAL",  "selected" : "FALSE",  "value" : "TSWREIS METPALLE(G),JAGTIAL"  },  {  "text" : "TSWREIS GHANPUR(B),JANGAON",  "selected" : "FALSE",  "value" : "TSWREIS GHANPUR(B),JANGAON"  },  {  "text" : "TSWREIS JANGAON(B),JANGAON",  "selected" : "FALSE",  "value" : "TSWREIS JANGAON(B),JANGAON"  },  {  "text" : "TSWREIS NARMETTA(G),JANGAON",  "selected" : "FALSE",  "value" : "TSWREIS NARMETTA(G),JANGAON"  },  {  "text" : "TSWREIS PALAKURTHI(G),JANGAON",  "selected" : "FALSE",  "value" : "TSWREIS PALAKURTHI(G),JANGAON"  },  {  "text" : "TSWREIS ZAFFERGADH(G),JANGAON",  "selected" : "FALSE",  "value" : "TSWREIS ZAFFERGADH(G),JANGAON"  },  {  "text" : "TSWREIS BHUPALAPALLI(G),JAYASHANKAR",  "selected" : "FALSE",  "value" : "TSWREIS BHUPALAPALLI(G),JAYASHANKAR"  },  {  "text" : "TSWREIS CHITYAL(G),JAYASHANKAR",  "selected" : "FALSE",  "value" : "TSWREIS CHITYAL(G),JAYASHANKAR"  },  {  "text" : "TSWREIS ETURNAGARAM(B),JAYASHANKAR",  "selected" : "FALSE",  "value" : "TSWREIS ETURNAGARAM(B),JAYASHANKAR"  },  {  "text" : "TSWREIS JAKARAM(B),JAYASHANKAR",  "selected" : "FALSE",  "value" : "TSWREIS JAKARAM(B),JAYASHANKAR"  },  {  "text" : "TSWREIS KATARAM(G),JAYASHANKAR",  "selected" : "FALSE",  "value" : "TSWREIS KATARAM(G),JAYASHANKAR"  },  {  "text" : "TSWREIS MULUG(G),JAYASHANKAR",  "selected" : "FALSE",  "value" : "TSWREIS MULUG(G),JAYASHANKAR"  },  {  "text" : "TSWREIS BANSWADA(G),KAMAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS BANSWADA(G),KAMAREDDY"  },  {  "text" : "TSWREIS BHIKNOOR(B),KAMAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS BHIKNOOR(B),KAMAREDDY"  },  {  "text" : "TSWREIS BICHKUNDA(B),KAMAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS BICHKUNDA(B),KAMAREDDY"  },  {  "text" : "TSWREIS DOMAKONDA(B),KAMAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS DOMAKONDA(B),KAMAREDDY"  },  {  "text" : "TSWREIS EKLARA BIG(G),KAMAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS EKLARA BIG(G),KAMAREDDY"  },  {  "text" : "TSWREIS LINGAMPET(G),KAMAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS LINGAMPET(G),KAMAREDDY"  },  {  "text" : "TSWREIS KAULASNALA(G),KAMAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS KAULASNALA(G),KAMAREDDY"  },  {  "text" : "TSWREIS TADKOL(G),KAMAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS TADKOL(G),KAMAREDDY"  },   {  "text" : "TSWREIS TADWAI(G),KAMAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS TADWAI(G),KAMAREDDY"  },   {  "text" : "TSWREIS UPPALAWAI(B),KAMAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS UPPALAWAI(B),KAMAREDDY"  },  {  "text" : "TSWREIS YELLAREDDY(B),KAMAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS YELLAREDDY(B),KAMAREDDY"  },  {  "text" : "TSWRDCW KAMAREDDY(G),KAMAREDDY",  "selected" : "FALSE",  "value" : "TSWRDCW KAMAREDDY(G),KAMAREDDY"  },  {  "text" : "TSWREIS CHINTALAKUNTA(G),KARIMNAGAR",  "selected" : "FALSE",  "value" : "TSWREIS CHINTALAKUNTA(G),KARIMNAGAR"  },  {  "text" : "TSWREIS CHOPPADANDI(G),KARIMNAGAR",  "selected" : "FALSE",  "value" : "TSWREIS CHOPPADANDI(G),KARIMNAGAR"  },  {  "text" : "TSWREIS COE KARIMNAGAR(G),KARIMNAGAR",  "selected" : "FALSE",  "value" : "TSWREIS COE KARIMNAGAR(G),KARIMNAGAR"  },  {  "text" : "TSWREIS HUZURABAD(G),KARIMNAGAR",  "selected" : "FALSE",  "value" : "TSWREIS HUZURABAD(G),KARIMNAGAR"  },  {  "text" : "TSWREIS JAMMIKUNTA(B),KARIMNAGAR",  "selected" : "FALSE",  "value" : "TSWREIS JAMMIKUNTA(B),KARIMNAGAR"  },  {  "text" : "TSWREIS MANAKONDURU(B),KARIMNAGAR",  "selected" : "FALSE",  "value" : "TSWREIS MANAKONDURU(B),KARIMNAGAR"  },  {  "text" : "TSWREIS PEMBATLA(B),KARIMNAGAR",  "selected" : "FALSE",  "value" : "TSWREIS PEMBATLA(B),KARIMNAGAR"  },  {  "text" : "TSWRDCW KARIMNAGAR(G),KARIMNAGAR",  "selected" : "FALSE",  "value" : "TSWRDCW KARIMNAGAR(G),KARIMNAGAR"  },  {  "text" : "TSWREIS ADAVIMALLELA(G),KHAMMAM",  "selected" : "FALSE",  "value" : "TSWREIS ADAVIMALLELA(G),KHAMMAM"  },  {  "text" : "TSWREIS DANAVAIGUDEM(G),KHAMMAM",  "selected" : "FALSE",  "value" : "TSWREIS DANAVAIGUDEM(G),KHAMMAM"  },   {  "text" : "TSWREIS KALLUR(G),KHAMMAM",  "selected" : "FALSE",  "value" : "TSWREIS KALLUR(G),KHAMMAM"  },  {  "text" : "TSWRDCW KHAMMAM(G),KHAMMAM",  "selected" : "FALSE",  "value" : "TSWRDCW KHAMMAM(G),KHAMMAM"  },  {  "text" : "TSWREIS KHAMMAM JC(G),KHAMMAM",  "selected" : "FALSE",  "value" : "TSWREIS KHAMMAM JC(G),KHAMMAM"  },  {  "text" : "TSWREIS KUSUMANCHI(G),KHAMMAM",  "selected" : "FALSE",  "value" : "TSWREIS KUSUMANCHI(G),KHAMMAM"  },  {  "text" : "TSWREIS MADHIRA(G),KHAMMAM",  "selected" : "FALSE",  "value" : "TSWREIS MADHIRA(G),KHAMMAM"  },  {  "text" : "TSWREIS MUDIGONDA(B),KHAMMAM",  "selected" : "FALSE",  "value" : "TSWREIS MUDIGONDA(B),KHAMMAM"  },  {  "text" : "TSWREIS NELAKONDAPALLY(G),KHAMMAM",  "selected" : "FALSE",  "value" : "TSWREIS NELAKONDAPALLY(G),KHAMMAM"  },  {  "text" : "TSWREIS SATHUPALLI(B),KHAMMAM",  "selected" : "FALSE",  "value" : "TSWREIS SATHUPALLI(B),KHAMMAM"  },  {  "text" : "TSWREIS TEKULAPALLY(G),KHAMMAM",  "selected" : "FALSE",  "value" : "TSWREIS TEKULAPALLY(G),KHAMMAM"  },  {  "text" : "TSWREIS THIRUMALAYAPALEM(B),KHAMMAM",  "selected" : "FALSE",  "value" : "TSWREIS THIRUMALAYAPALEM(B),KHAMMAM"  },  {  "text" : "TSWREIS WYRA(G),KHAMMAM",  "selected" : "FALSE",  "value" : "TSWREIS WYRA(G),KHAMMAM"  },  {  "text" : "TSWREIS YERRUPALEM(G),KHAMMAM",  "selected" : "FALSE",  "value" : "TSWREIS YERRUPALEM(G),KHAMMAM"  },  {  "text" : "TSWREIS ASIFABAD(B),KOMARAMBHEEM",  "selected" : "FALSE",  "value" : "TSWREIS ASIFABAD(B),KOMARAMBHEEM"  },  {  "text" : "TSWREIS KAGAZNAGAR(G),KOMARAMBHEEM",  "selected" : "FALSE",  "value" : "TSWREIS KAGAZNAGAR(G),KOMARAMBHEEM"  },  {  "text" : "TTSWREIS REBBANA(G),KOMARAMBHEEM",  "selected" : "FALSE",  "value" : "TTSWREIS REBBANA(G),KOMARAMBHEEM"  },   {  "text" : "TSWREIS SIRPUR(G),KOMARAMBHEEM",  "selected" : "FALSE",  "value" : "TSWREIS SIRPUR(G),KOMARAMBHEEM"  },  {  "text" : "TSWREIS SIRPUR(B),KOMARAMBHEEM",  "selected" : "FALSE",  "value" : "TSWREIS SIRPUR(B),KOMARAMBHEEM"  },  {  "text" : "TSWREIS KESAMUDRAM(G),MAHABUBABAD",  "selected" : "FALSE",  "value" : "TSWREIS KESAMUDRAM(G),MAHABUBABAD"  },  {  "text" : "TSWREIS MAHABUBABAD(G),MAHABUBABAD",  "selected" : "FALSE",  "value" : "TSWREIS MAHABUBABAD(G),MAHABUBABAD"  },  {  "text" : "TSWREIS MARIPEDA(B),MAHABUBABAD",  "selected" : "FALSE",  "value" : "TSWREIS MARIPEDA(B),MAHABUBABAD"  },  {  "text" : "TSWREIS NARSIMHULAPETA(G),MAHABUBABAD",  "selected" : "FALSE",  "value" : "TSWREIS NARSIMHULAPETA(G),MAHABUBABAD"  },  {  "text" : "TSWREIS TORRUR(G),MAHABUBABAD",  "selected" : "FALSE",  "value" : "TSWREIS TORRUR(G),MAHABUBABAD"  },  {  "text" : "TSWREIS BALANAGAR(B),MAHABUBABAD",  "selected" : "FALSE",  "value" : "TSWREIS BALANAGAR(B),MAHABUBABAD"  },    {  "text" : "TSWREIS DAMARAGIDDA(B),MAHABUBNAGAR",  "selected" : "FALSE",  "value" : "TSWREIS DAMARAGIDDA(B),MAHABUBNAGAR"  },  {  "text" : "TSWREIS DEVARAKADRA(B),MAHABUBNAGAR",  "selected" : "FALSE",  "value" : "TSWREIS DEVARAKADRA(B),MAHABUBNAGAR"  },   {  "text" : "TSWREIS JADCHERLA JC(G),MAHABUBNAGAR",  "selected" : "FALSE",  "value" : "TSWREIS JADCHERLA JC(G),MAHABUBNAGAR"  },  {  "text" : "TSWREIS MADDUR(G),MAHABUBNAGAR",  "selected" : "FALSE",  "value" : "TSWREIS MADDUR(G),MAHABUBNAGAR"  },  {  "text" : "TSWREIS MAKTHAL(G),MAHABUBNAGAR",  "selected" : "FALSE",  "value" : "TSWREIS MAKTHAL(G),MAHABUBNAGAR"  }, {  "text" : "TSWREIS MARICAL(G),MAHABUBNAGAR",  "selected" : "FALSE",  "value" : "TSWREIS MARICAL(G),MAHABUBNAGAR"  },  {  "text" : "TSWREIS NAZEERABAD(G),MAHABUBNAGAR",  "selected" : "FALSE",  "value" : "TSWREIS NAZEERABAD(G),MAHABUBNAGAR"  },  {  "text" : "TSWREIS NARAYANPET(G),MAHABUBNAGAR",  "selected" : "FALSE",  "value" : "TSWREIS NARAYANPET(G),MAHABUBNAGAR"  },  {  "text" : "TSWREIS RAMIREDDY GUDEM(G),MAHABUBNAGAR",  "selected" : "FALSE",  "value" : "TSWREIS RAMIREDDY GUDEM(G),MAHABUBNAGAR"  },  {  "text" : "TSWREIS UTKOOR(G),MAHABUBNAGAR",  "selected" : "FALSE",  "value" : "TSWREIS UTKOOR(G),MAHABUBNAGAR"  },  {  "text" : "TSWRDCW MAHABUBNAGAR(G),MAHABUBNAGAR",  "selected" : "FALSE",  "value" : "TSWRDCW MAHABUBNAGAR(G),MAHABUBNAGAR"  },  {  "text" : "TSWREIS BELLAMPALLI(G),MANCHERIAL",  "selected" : "FALSE",  "value" : "TSWREIS BELLAMPALLI(G),MANCHERIAL"  },  {  "text" : "TSWREIS BELLAMPALLI(B),MANCHERIAL",  "selected" : "FALSE",  "value" : "TSWREIS BELLAMPALLI(B),MANCHERIAL"  },  {  "text" : "TSWREIS CHENNUR(G),MANCHERIAL",  "selected" : "FALSE",  "value" : "TSWREIS CHENNUR(G),MANCHERIAL"  },  {  "text" : "TSWREIS CHENNUR(B),MANCHERIAL",  "selected" : "FALSE",  "value" : "TSWREIS CHENNUR(B),MANCHERIAL"  },  {  "text" : "TSWREIS KASIPET(B),MANCHERIAL",  "selected" : "FALSE",  "value" : "TSWREIS KASIPET(B),MANCHERIAL"  },  {  "text" : "TSWREIS KOTAPALLI(B),MANCHERIAL",  "selected" : "FALSE",  "value" : "TSWREIS KOTAPALLI(B),MANCHERIAL"  },  {  "text" : "TSWREIS LUXETTIPET(G),MANCHERIAL",  "selected" : "FALSE",  "value" : "TSWREIS LUXETTIPET(G),MANCHERIAL"  },  {  "text" : "TSWREIS MANCHERIAL(B),MANCHERIAL",  "selected" : "FALSE",  "value" : "TSWREIS MANCHERIAL(B),MANCHERIAL"  },  {  "text" : "TSWREIS MANDAMARRI(G),MANCHERIAL",  "selected" : "FALSE",  "value" : "TSWREIS MANDAMARRI(G),MANCHERIAL"  },    {  "text" : "TSWRDCW MANCHERIAL(G),MANCHERIAL",  "selected" : "FALSE",  "value" : "TSWRDCW MANCHERIAL(G),MANCHERIAL"  },   {  "text" : "TSWREIS TOOPRAN(G),MEDAK",  "selected" : "FALSE",  "value" : "TSWREIS TOOPRAN(G),MEDAK"  },  {  "text" : "TSWREIS KULCHARAM(G),MEDAK",  "selected" : "FALSE",  "value" : "TSWREIS KULCHARAM(G),MEDAK"  },  {  "text" : "TSWREIS MEDAK(G),MEDAK",  "selected" : "FALSE",  "value" : "TSWREIS MEDAK(G),MEDAK"  },  {  "text" : "TSWREIS RAMAYAMPET(G),MEDAK",  "selected" : "FALSE",  "value" : "TSWREIS RAMAYAMPET(G),MEDAK"  },  {  "text" : "TSWRDCW MEDAK(G),MEDAK",  "selected" : "FALSE",  "value" : "TSWRDCW MEDAK(G),MEDAK"  },  {  "text" : "TSWREIS MALKAJGIRI(G),MEDCHAL",  "selected" : "FALSE",  "value" : "TSWREIS MALKAJGIRI(G),MEDCHAL"  },  {  "text" : "TSWREIS MEDCHAL(G),MEDCHAL",  "selected" : "FALSE",  "value" : "TSWREIS MEDCHAL(G),MEDCHAL"  },  {  "text" : "TSWREIS JAGADGIRIGUTTA(G),MEDCHAL",  "selected" : "FALSE",  "value" : "TSWREIS JAGADGIRIGUTTA(G),MEDCHAL"  },  {  "text" : "TSWREIS SHAMIRPET(B),MEDCHAL",  "selected" : "FALSE",  "value" : "TSWREIS SHAMIRPET(B),MEDCHAL"  },    {  "text" : "TSWREIS UPPAL(B),MEDCHAL",  "selected" : "FALSE",  "value" : "TSWREIS UPPAL(B),MEDCHAL"  },  {  "text" : "TSWRDCW JAGADGIRI GUTTA(G),MEDCHAL",  "selected" : "FALSE",  "value" : "TSWRDCW JAGADGIRI GUTTA(G),MEDCHAL"  },  {  "text" : "TSWREIS ACHAMPETA(B),NAGARKURNOOL",  "selected" : "FALSE",  "value" : "TSWREIS ACHAMPETA(B),NAGARKURNOOL"  },  {  "text" : "TSWREIS BIJINAPALLE(B),NAGARKURNOOL",  "selected" : "FALSE",  "value" : "TSWREIS BIJINAPALLE(B),NAGARKURNOOL"  },  {  "text" : "TSWREIS JAYAPRAKASHNAGAR(B),NAGARKURNOOL",  "selected" : "FALSE",  "value" : "TSWREIS JAYAPRAKASHNAGAR(B),NAGARKURNOOL"  },  {  "text" : "TSWREIS KOLLAPUR(G),NAGARKURNOOL",  "selected" : "FALSE",  "value" : "TSWREIS KOLLAPUR(G),NAGARKURNOOL"  },  {  "text" : "TSWREIS LINGAL(B),NAGARKURNOOL",  "selected" : "FALSE",  "value" : "TSWREIS LINGAL(B),NAGARKURNOOL"  },  {  "text" : "TSWREIS MANNANUR(G),NAGARKURNOOL",  "selected" : "FALSE",  "value" : "TSWREIS MANNANUR(G),NAGARKURNOOL"  },    {  "text" : "TSWREIS PEDDAKOTHAPALLE(B),NAGARKURNOOL",  "selected" : "FALSE",  "value" : "TSWREIS PEDDAKOTHAPALLE(B),NAGARKURNOOL"  },   {  "text" : "TSWREIS TELKAPALLI(G),NAGARKURNOOL",  "selected" : "FALSE",  "value" : "TSWREIS TELKAPALLI(G),NAGARKURNOOL"  },  {  "text" : "TSWREIS VELDANDA(G),NAGARKURNOOL",  "selected" : "FALSE",  "value" : "TSWREIS VELDANDA(G),NAGARKURNOOL"  },  {  "text" : "TSWREIS VANGOOR(G),NAGARKURNOOL",  "selected" : "FALSE",  "value" : "TSWREIS VANGOOR(G),NAGARKURNOOL"  },  {  "text" : "TSWRDCW NAGARKURNOOL(G),NAGARKURNOOL",  "selected" : "FALSE",  "value" : "TSWRDCW NAGARKURNOOL(G),NAGARKURNOOL"  },  {  "text" : "TSWREIS ANUMULA(B),NALGONDA",  "selected" : "FALSE",  "value" : "TSWREIS ANUMULA(B),NALGONDA"  },  {  "text" : "TSWREIS CHANDUR(B),NALGONDA",  "selected" : "FALSE",  "value" : "TSWREIS CHANDUR(B),NALGONDA"  },  {  "text" : "TSWREIS DEVARAKONDA(G),NALGONDA",  "selected" : "FALSE",  "value" : "TSWREIS DEVARAKONDA(G),NALGONDA"  },  {  "text" : "TSWREIS G.V.GUDEM(G),NALGONDA",  "selected" : "FALSE",  "value" : "TSWREIS G.V.GUDEM(G),NALGONDA"  },  {  "text" : "TSWREIS GUNDLAPALLI(G),NALGONDA",  "selected" : "FALSE",  "value" : "TSWREIS GUNDLAPALLI(G),NALGONDA"  },  {  "text" : "TSWREIS KATANGUR(G),NALGONDA",  "selected" : "FALSE",  "value" : "TSWREIS KATANGUR(G),NALGONDA"  },  {  "text" : "TSWREIS MIRYALAGUDA(B),NALGONDA",  "selected" : "FALSE",  "value" : "TSWREIS MIRYALAGUDA(B),NALGONDA"  },  {  "text" : "TSWREIS NAKREKAL(G),NALGONDA",  "selected" : "FALSE",  "value" : "TSWREIS NAKREKAL(G),NALGONDA"  },  {  "text" : "TSWREIS NAKIREKAL(B),NALGONDA",  "selected" : "FALSE",  "value" : "TSWREIS NAKIREKAL(B),NALGONDA"  },  {  "text" : "TSWREIS NIDAMANOOR(G),NALGONDA",  "selected" : "FALSE",  "value" : "TSWREIS NIDAMANOOR(G),NALGONDA"  },  {  "text" : "TSWREIS THIPPARTHI(B),NALGONDA",  "selected" : "FALSE",  "value" : "TSWREIS THIPPARTHI(B),NALGONDA"  },  {  "text" : "TSWRDCW NALGONDA(G),NALGONDA",  "selected" : "FALSE",  "value" : "TSWRDCW NALGONDA(G),NALGONDA"  },  {  "text" : "TSWREIS BHAINSA(G),NIRMAL",  "selected" : "FALSE",  "value" : "TSWREIS BHAINSA(G),NIRMAL"  },  {  "text" : "TSWREIS JAM(G),NIRMAL",  "selected" : "FALSE",  "value" : "TSWREIS JAM(G),NIRMAL"  },  {  "text" : "TSWREIS KADDAM(G),NIRMAL",  "selected" : "FALSE",  "value" : "TSWREIS KADDAM(G),NIRMAL"  },  {  "text" : "TSWREIS MUDHOLE(B),NIRMAL",  "selected" : "FALSE",  "value" : "TSWREIS MUDHOLE(B),NIRMAL"  },    {  "text" : "TSWREIS NIRMAL(G),NIRMAL",  "selected" : "FALSE",  "value" : "TSWREIS NIRMAL(G),NIRMAL"  },  {  "text" : "TSWRDCW NIRMAL(G),NIRMAL",  "selected" : "FALSE",  "value" : "TSWRDCW NIRMAL(G),NIRMAL"  },   {  "text" : "TSWREIS ARMOOR(B),NIZAMABAD",  "selected" : "FALSE",  "value" : "TSWREIS ARMOOR(B),NIZAMABAD"  },  {  "text" : "TSWREIS ARMOOR(G),NIZAMABAD",  "selected" : "FALSE",  "value" : "TSWREIS ARMOOR(G),NIZAMABAD"  },  {  "text" : "TSWREIS BODHAN(B),NIZAMABAD",  "selected" : "FALSE",  "value" : "TSWREIS BODHAN(B),NIZAMABAD"  },    {  "text" : "TSWREIS DHARMARAM(G),NIZAMABAD",  "selected" : "FALSE",  "value" : "TSWREIS DHARMARAM(G),NIZAMABAD"  },  {  "text" : "TSWREIS NAVIPET(G),NIZAMABAD",  "selected" : "FALSE",  "value" : "TSWREIS NAVIPET(G),NIZAMABAD"  },  {  "text" : "TSWREIS NIZAMABAD(G),NIZAMABAD",  "selected" : "FALSE",  "value" : "TSWREIS NIZAMABAD(G),NIZAMABAD"  },    {  "text" : "TSWREIS POCHAMPADU(G),NIZAMABAD",  "selected" : "FALSE",  "value" : "TSWREIS POCHAMPADU(G),NIZAMABAD"  },  {  "text" : "TSWREIS SUDDAPALLI(G),NIZAMABAD",  "selected" : "FALSE",  "value" : "TSWREIS SUDDAPALLI(G),NIZAMABAD"  },  {  "text" : "TSWREIS VELPUR(G),NIZAMABAD",  "selected" : "FALSE",  "value" : "TSWREIS VELPUR(G),NIZAMABAD"  },  {  "text" : "TSWRDCW ARMOOR(G),NIZAMABAD",  "selected" : "FALSE",  "value" : "TSWRDCW ARMOOR(G),NIZAMABAD"  },  {  "text" : "TSWRDCW NIZAMABAD(G),NIZAMABAD",  "selected" : "FALSE",  "value" : "TSWRDCW NIZAMABAD(G),NIZAMABAD"  },  {  "text" : "TSWREIS MAHADEVPUR(G),PEDDAPALLI",  "selected" : "FALSE",  "value" : "TSWREIS MAHADEVPUR(G),PEDDAPALLI"  },    {  "text" : "TSWREIS MALLAPUR(G),PEDDAPALLI",  "selected" : "FALSE",  "value" : "TSWREIS MALLAPUR(G),PEDDAPALLI"  },  {  "text" : "TSWREIS MANTHANI(B),PEDDAPALLI",  "selected" : "FALSE",  "value" : "TSWREIS MANTHANI(B),PEDDAPALLI"  },  {  "text" : "TSWREIS NANDIMEDARAM(G),PEDDAPALLI",  "selected" : "FALSE",  "value" : "TSWREIS NANDIMEDARAM(G),PEDDAPALLI"  },  {  "text" : "TSWREIS PEDAPALLY(G),PEDDAPALLI",  "selected" : "FALSE",  "value" : "TSWREIS PEDAPALLY(G),PEDDAPALLI"  },    {  "text" : "TSWREIS PEDDAPALLI(B),PEDDAPALLI",  "selected" : "FALSE",  "value" : "TSWREIS PEDDAPALLI(B),PEDDAPALLI"  },  {  "text" : "TSWREIS BOINAPALLE(B),RAJANNA",  "selected" : "FALSE",  "value" : "TSWREIS BOINAPALLE(B),RAJANNA"  },  {  "text" : "TSWREIS CHINNABONALA(G),RAJANNA",  "selected" : "FALSE",  "value" : "TSWREIS CHINNABONALA(G),RAJANNA"  },  {  "text" : "TSWREIS ILLANTHAKUNTA(G),RAJANNA",  "selected" : "FALSE",  "value" : "TSWREIS ILLANTHAKUNTA(G),RAJANNA"  },  {  "text" : "TSWREIS MUSTHABAD(B),RAJANNA",  "selected" : "FALSE",  "value" : "TSWREIS MUSTHABAD(B),RAJANNA"  },  {  "text" : "TSWREIS NARMAL(G),RAJANNA",  "selected" : "FALSE",  "value" : "TSWREIS NARMAL(G),RAJANNA"  },    {  "text" : "TSWREIS SIRICILLA(G),RAJANNA",  "selected" : "FALSE",  "value" : "TSWREIS SIRICILLA(G),RAJANNA"  },  {  "text" : "TSWREIS VEMULAWADA(G),RAJANNA",  "selected" : "FALSE",  "value" : "TSWREIS VEMULAWADA(G),RAJANNA"  },  {  "text" : "TSWRDCW SIRICILLA(G),RAJANNA",  "selected" : "FALSE",  "value" : "TSWRDCW SIRICILLA(G),RAJANNA"  },  {  "text" : "TSWREIS  AMANGAL(G),RANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS  AMANGAL(G),RANGAREDDY"  },  {  "text" : "TSWREIS CHEVELLA(G),RANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS CHEVELLA(G),RANGAREDDY"  },  {  "text" : "TSWREIS CHILKUR(B),RANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS CHILKUR(B),RANGAREDDY"  },  {  "text" : "TSWREIS GACHIBOWLI(B),RANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS GACHIBOWLI(B),RANGAREDDY"  },  {  "text" : "TSWREIS GOWLIDODDI(G),RANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS GOWLIDODDI(G),RANGAREDDY"  },  {  "text" : "TSWREIS NAGOLE(IIT),RANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS NAGOLE(IIT),RANGAREDDY"  },  {  "text" : "TSWREIS IBRAHIMPATNAM(B),RANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS IBRAHIMPATNAM(B),RANGAREDDY"  },  {  "text" : "TSWREIS KAMMADANAM(G),RANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS KAMMADANAM(G),RANGAREDDY"  },  {  "text" : "TSWREIS KANDUKUR(B),RANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS KANDUKUR(B),RANGAREDDY"  },  {  "text" : "TSWREIS KONDURGU(B),RANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS KONDURGU(B),RANGAREDDY"  },  {  "text" : "TSWREIS MAHESHWARAM(G),RANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS MAHESHWARAM(G),RANGAREDDY"  },  {  "text" : "TSWREIS NALLAKANCHE(G),RANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS NALLAKANCHE(G),RANGAREDDY"  },  {  "text" : "TSWREIS NARSINGI(G),RANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS NARSINGI(G),RANGAREDDY"  },  {  "text" : "TSWREIS SAROORNAGAR(G),RANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS SAROORNAGAR(G),RANGAREDDY"  },  {  "text" : "TSWREIS SHAMSHABAD(B),RANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS SHAMSHABAD(B),RANGAREDDY"  },  {  "text" : "TSWREIS SHANKARPALLE(G),RANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS SHANKARPALLE(G),RANGAREDDY"  },  {  "text" : "TSWREIS ANDOL(G),SANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS ANDOL(G),SANGAREDDY"  },  {  "text" : "TSWREIS CHITKUL(G),SANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS CHITKUL(G),SANGAREDDY"  },  {  "text" : "TSWREIS HATNOORA(B),SANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS HATNOORA(B),SANGAREDDY"  },  {  "text" : "TSWREIS HATNOORA JC(B),SANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS HATNOORA JC(B),SANGAREDDY"  },  {  "text" : "TSWREIS KONDAPUR(B),SANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS KONDAPUR(B),SANGAREDDY"  },  {  "text" : "TSWREIS NALLAVAGU(B),SANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS NALLAVAGU(B),SANGAREDDY"  },  {  "text" : "TSWREIS NARAYANAKHED(B),SANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS NARAYANAKHED(B),SANGAREDDY"  },  {  "text" : "TSWREIS NYALKAL(B),SANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS NYALKAL(B),SANGAREDDY"  },  {  "text" : "TSWREIS RAIKOTE(G),SANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS RAIKOTE(G),SANGAREDDY"  },  {  "text" : "TSWREIS SANGAREDDY(G),SANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS SANGAREDDY(G),SANGAREDDY"  },  {  "text" : "TSWREIS SINGOOR(B),SANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS SINGOOR(B),SANGAREDDY"  },  {  "text" : "TSWREIS ZAHIRABAD(G),SANGAREDDY",  "selected" : "FALSE",  "value" : "TSWREIS ZAHIRABAD(G),SANGAREDDY"  },   {  "text" : "TSWREIS ALWAL(G),SIDDIPET",  "selected" : "FALSE",  "value" : "TSWREIS ALWAL(G),SIDDIPET"  },  {  "text" : "TSWREIS BEJJANKI(G),SIDDIPET",  "selected" : "FALSE",  "value" : "TSWREIS BEJJANKI(G),SIDDIPET"  },  {  "text" : "TSWREIS CHERIAL(B),SIDDIPET",  "selected" : "FALSE",  "value" : "TSWREIS CHERIAL(B),SIDDIPET"  },  {  "text" : "TSWREIS CHINNAKODUR(B),SIDDIPET",  "selected" : "FALSE",  "value" : "TSWREIS CHINNAKODUR(B),SIDDIPET"  },  {  "text" : "TSWREIS DUBBAK(B),SIDDIPET",  "selected" : "FALSE",  "value" : "TSWREIS DUBBAK(B),SIDDIPET"  },  {  "text" : "TSWREIS GAJWEL(G),SIDDIPET",  "selected" : "FALSE",  "value" : "TSWREIS GAJWEL(G),SIDDIPET"  },  {  "text" : "TSWREIS HUSNABAD(B),SIDDIPET",  "selected" : "FALSE",  "value" : "TSWREIS HUSNABAD(B),SIDDIPET"  },  {  "text" : "TSWREIS JAGDEVPUR(G),SIDDIPET",  "selected" : "FALSE",  "value" : "TSWREIS JAGDEVPUR(G),SIDDIPET"  },  {  "text" : "TSWREIS KOHEDA(B),SIDDIPET",  "selected" : "FALSE",  "value" : "TSWREIS KOHEDA(B),SIDDIPET"  },  {  "text" : "TSWREIS KONDAPAK(B),SIDDIPET",  "selected" : "FALSE",  "value" : "TSWREIS KONDAPAK(B),SIDDIPET"  },  {  "text" : "TSWREIS MITTAPALLI(G),SIDDIPET",  "selected" : "FALSE",  "value" : "TSWREIS MITTAPALLI(G),SIDDIPET"  },  {  "text" : "TSWREIS MULUGU(G),SIDDIPET",  "selected" : "FALSE",  "value" : "TSWREIS MULUGU(G),SIDDIPET"  },  {  "text" : "TSWREIS RAMAKKAPET(G),SIDDIPET",  "selected" : "FALSE",  "value" : "TSWREIS RAMAKKAPET(G),SIDDIPET"  },   {  "text" : "TSWREIS SIDDIPET RURAL(G),SIDDIPET",  "selected" : "FALSE",  "value" : "TSWREIS SIDDIPET RURAL(G),SIDDIPET"  },  {  "text" : "TSWREIS TOGUTTA(G),SIDDIPET",  "selected" : "FALSE",  "value" : "TSWREIS TOGUTTA(G),SIDDIPET"  },  {  "text" : "TSWREIS VARGAL(B),SIDDIPET",  "selected" : "FALSE",  "value" : "TSWREIS VARGAL(B),SIDDIPET"  },  {  "text" : "TSWRDCW SIDDIPET(G),SIDDIPET",  "selected" : "FALSE",  "value" : "TSWRDCW SIDDIPET(G),SIDDIPET"  },  {  "text" : "TSWREIS CHIVEMLA(B),SURYAPET",  "selected" : "FALSE",  "value" : "TSWREIS CHIVEMLA(B),SURYAPET"  },  {  "text" : "TSWREIS HUZURNAGAR(B),SURYAPET",  "selected" : "FALSE",  "value" : "TSWREIS HUZURNAGAR(B),SURYAPET"  },  {  "text" : "TSWREIS JAJIREDDYGUDEM(G),SURYAPET",  "selected" : "FALSE",  "value" : "TSWREIS JAJIREDDYGUDEM(G),SURYAPET"  },  {  "text" : "TSWREIS MATTAMPALLI(G),SURYAPET",  "selected" : "FALSE",  "value" : "TSWREIS MATTAMPALLI(G),SURYAPET"  },  {  "text" : "TSWREIS MUNAGALA(B),SURYAPET",  "selected" : "FALSE",  "value" : "TSWREIS MUNAGALA(B),SURYAPET"  },  {  "text" : "TSWREIS NADIGUDEM(G),SURYAPET",  "selected" : "FALSE",  "value" : "TSWREIS NADIGUDEM(G),SURYAPET"  },  {  "text" : "TSWREIS SURYAPET(G),SURYAPET",  "selected" : "FALSE",  "value" : "TSWREIS SURYAPET(G),SURYAPET"  },  {  "text" : "TSWREIS TUNGATURTHI(G),SURYAPET",  "selected" : "FALSE",  "value" : "TSWREIS TUNGATURTHI(G),SURYAPET"  },  {  "text" : "TSWRDCW SURYAPETA(G),SURYAPET",  "selected" : "FALSE",  "value" : "TSWRDCW SURYAPETA(G),SURYAPET"  },  {  "text" : "TSWREIS BANTWARAM(G),VIKARABAD",  "selected" : "FALSE",  "value" : "TSWREIS BANTWARAM(G),VIKARABAD"  },  {  "text" : "TSWREIS KODANGAL(B),VIKARABAD",  "selected" : "FALSE",  "value" : "TSWREIS KODANGAL(B),VIKARABAD"  },  {  "text" : "TSWREIS MOMINPET(G),VIKARABAD",  "selected" : "FALSE",  "value" : "TSWREIS MOMINPET(G),VIKARABAD"  },  {  "text" : "TSWREIS PARGI(B),VIKARABAD",  "selected" : "FALSE",  "value" : "TSWREIS PARGI(B),VIKARABAD"  },  {  "text" : "TSWREIS  PEDDEMUL(B),VIKARABAD",  "selected" : "FALSE",  "value" : "TSWREIS  PEDDEMUL(B),VIKARABAD"  },  {  "text" : "TSWREIS SIVAREDDYPET(B),VIKARABAD",  "selected" : "FALSE",  "value" : "TSWREIS SIVAREDDYPET(B),VIKARABAD"  },  {  "text" : "TSWREIS VIKARABAD(G),VIKARABAD",  "selected" : "FALSE",  "value" : "TSWREIS VIKARABAD(G),VIKARABAD"  },  {  "text" : "TSWREIS YALAL(G),VIKARABAD",  "selected" : "FALSE",  "value" : "TSWREIS YALAL(G),VIKARABAD"  },  {  "text" : "TSWRDCW VIKARABAD(G),VIKARABAD",  "selected" : "FALSE",  "value" : "TSWRDCW VIKARABAD(G),VIKARABAD"  },  {  "text" : "TSWREIS GOPALPET(G),WANAPARTHY",  "selected" : "FALSE",  "value" : "TSWREIS GOPALPET(G),WANAPARTHY"  },  {  "text" : "TSWREIS KOTHAKOTA(G),WANAPARTHY",  "selected" : "FALSE",  "value" : "TSWREIS KOTHAKOTA(G),WANAPARTHY"  },  {  "text" : "TSWREIS MADANAPURAM(B),WANAPARTHY",  "selected" : "FALSE",  "value" : "TSWREIS MADANAPURAM(B),WANAPARTHY"  },  {  "text" : "TSWREIS PEDDAMANDADI(G),WANAPARTHY",  "selected" : "FALSE",  "value" : "TSWREIS PEDDAMANDADI(G),WANAPARTHY"  },  {  "text" : "TSWREIS VEEPANAGANDLA(B),WANAPARTHY",  "selected" : "FALSE",  "value" : "TSWREIS VEEPANAGANDLA(B),WANAPARTHY"  },  {  "text" : "TSWRDCW WANAPARTHY(G),WANAPARTHY",  "selected" : "FALSE",  "value" : "TSWRDCW WANAPARTHY(G),WANAPARTHY"  },  {  "text" : "TSWREIS ATMAKUR(G),WARANGAL RURAL",  "selected" : "FALSE",  "value" : "TSWREIS ATMAKUR(G),WARANGAL RURAL"  },  {  "text" : "TSWREIS DUGGONDI(G),WARANGAL RURAL",  "selected" : "FALSE",  "value" : "TSWREIS DUGGONDI(G),WARANGAL RURAL"  },  {  "text" : "TSWREIS NARSAMPET(B),WARANGAL RURAL",  "selected" : "FALSE",  "value" : "TSWREIS NARSAMPET(B),WARANGAL RURAL"  },  {  "text" : "TSWREIS PARKAL(G),WARANGAL RURAL",  "selected" : "FALSE",  "value" : "TSWREIS PARKAL(G),WARANGAL RURAL"  },  {  "text" : "TSWREIS PARKAL(B),WARANGAL RURAL",  "selected" : "FALSE",  "value" : "TSWREIS PARKAL(B),WARANGAL RURAL"  },  {  "text" : "TSWREIS PARVATHAGIRI(G),WARANGAL RURAL",  "selected" : "FALSE",  "value" : "TSWREIS PARVATHAGIRI(G),WARANGAL RURAL"  },  {  "text" : "TSWREIS RAYAPARTHI(G),WARANGAL RURAL",  "selected" : "FALSE",  "value" : "TSWREIS RAYAPARTHI(G),WARANGAL RURAL"  },  {  "text" : "TSWREIS WARDHANNAPET(B),WARANGAL RURAL",  "selected" : "FALSE",  "value" : "TSWREIS WARDHANNAPET(B),WARANGAL RURAL"  },  {  "text" : "TSWREIS DHARMASAGAR(G),WARANGAL URBAN",  "selected" : "FALSE",  "value" : "TSWREIS DHARMASAGAR(G),WARANGAL URBAN"  },  {  "text" : "TSWREIS ELKATURTI(G),WARANGAL URBAN",  "selected" : "FALSE",  "value" : "TSWREIS ELKATURTI(G),WARANGAL URBAN"  },  {  "text" : "TSWREIS HASANPARTHY(G),WARANGAL URBAN",  "selected" : "FALSE",  "value" : "TSWREIS HASANPARTHY(G),WARANGAL URBAN"  },  {  "text" : "TSWREIS MADIKONDA(G),WARANGAL URBAN",  "selected" : "FALSE",  "value" : "TSWREIS MADIKONDA(G),WARANGAL URBAN"  },   {  "text" : "TSWRDCW WARANGAL EAST(G),WARANGAL URBAN",  "selected" : "FALSE",  "value" : "TSWRDCW WARANGAL EAST(G),WARANGAL URBAN"  },  {  "text" : "TSWREIS WARANGAL WEST(G),WARANGAL URBAN",  "selected" : "FALSE",  "value" : "TSWREIS WARANGAL WEST(G),WARANGAL URBAN"  },  {  "text" : "TSWRDCW WARANGAL WEST(G),WARANGAL URBAN",  "selected" : "FALSE",  "value" : "TSWRDCW WARANGAL WEST(G),WARANGAL URBAN"  },  {  "text" : "TSWREIS ALAIR(G),YADADRI",  "selected" : "FALSE",  "value" : "TSWREIS ALAIR(G),YADADRI"  },  {  "text" : "TSWREIS BHONGIR(B),YADADRI",  "selected" : "FALSE",  "value" : "TSWREIS BHONGIR(B),YADADRI"  },  {  "text" : "TSWREIS CHOUTUPPAL(G),YADADRI",  "selected" : "FALSE",  "value" : "TSWREIS CHOUTUPPAL(G),YADADRI"  },  {  "text" : "TSWREIS MOTKUR(B),YADADRI",  "selected" : "FALSE",  "value" : "TSWREIS MOTKUR(B),YADADRI"  },  {  "text" : "TSWREIS RAJAPET(B),YADADRI",  "selected" : "FALSE",  "value" : "TSWREIS RAJAPET(B),YADADRI"  },  {  "text" : "TSWREIS RAMANNAPET(G),YADADRI",  "selected" : "FALSE",  "value" : "TSWREIS RAMANNAPET(G),YADADRI"  },  {  "text" : "TSWREIS VALIGONDA(G),YADADRI",  "selected" : "FALSE",  "value" : "TSWREIS VALIGONDA(G),YADADRI"  },  {  "text" : "TSWRDCW BHONGIR(G),YADADRI",  "selected" : "FALSE",  "value" : "TSWRDCW BHONGIR(G),YADADRI"  } ] }, "Attended" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "TRUE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 3, "notify" : "false" }, "Sick" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "TRUE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 4, "notify" : "false" }, "Sick UID" : { "type" : "textarea", "minlength" : "1", "maxlength" : "123", "required" : "TRUE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 5, "notify" : "false" }, "R2H" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "TRUE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 6, "notify" : "false" }, "R2H UID" : { "type" : "textarea", "minlength" : "1", "maxlength" : "123", "required" : "TRUE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 7, "notify" : "false" }, "Absent" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "TRUE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 8, "notify" : "false" }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 1 } } }, "2" : { "Attendence Details" : { "Absent UID" : { "type" : "textarea", "minlength" : "1", "maxlength" : "123", "required" : "TRUE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 9, "notify" : "false" }, "RestRoom" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "TRUE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 10, "notify" : "false" }, "RestRoom UID" : { "type" : "textarea", "minlength" : "1", "maxlength" : "123", "required" : "TRUE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 11, "notify" : "false" }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 1 } } } }, "permissions" : { "TSWREIS Attendance" : { "View_Permissions" : [ "Attendence Details" ], "Edit_Permissions" : [ "Attendence Details" ], "index" : 1 } }, "notification_parameters" : [ { "field" : "Select School", "page" : "1", "section" : "Attendence Details" } ], "application_header" : { "header_details" : { "companyname" : "Healthcare", "address" : "401s,secbad,india", "logo" : "" } } }, "app_id" : "healthcare201651317373988", "app_description" : "Attendance app for panacea", "status" : "processed", "app_name" : "Attendance app", "app_created" : "2016-10-27 11:46:23", "app_expiry" : "2017-02-15", "_version" : 15, "stages" : [ "TSWREIS Attendance" ], "created_by" : "tlstec.primary2@gmail.com", "use_profile_header" : "no", "blank_app" : "no" }',true);
			////log_message("debug","dataaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa".print_r($data,true));
			$this->mongo_db->insert ( $app_coll, $data );
			
			
			$app_coll = $id."_applist";
			$data = json_decode('{ "app_id" : "healthcare201651317373988", "app_description" : "Attendance app for panacea", "app_name" : "Attendance app", "app_created" : "2016-10-15 11:51:25" }',true);
			////log_message("debug","dataaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa".print_r($data,true));
			$this->mongo_db->insert ( $app_coll, $data );
			
			
			$app_coll = $id."_web_apps";
			$data = json_decode('{ "permissions" : { "TSWREIS Attendance" : { "View_Permissions" : [ "Attendence Details" ], "Edit_Permissions" : [ "Attendence Details" ], "index" : 1 } }, "app_id" : "healthcare201651317373988", "app_description" : "Attendance app for panacea", "status" : "new", "app_name" : "Attendance app", "app_created" : "2016-10-27 11:46:23", "app_expiry" : "2017-02-15", "application_header" : { "header_details" : { "companyname" : "Healthcare", "address" : "401s,secbad,india", "logo" : "" } }, "_version" : 15, "created_by" : "tlstec.primary2@gmail.com", "use_profile_header" : "no", "blank_app" : "no" }',true);
			////log_message("debug","dataaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa".print_r($data,true));
			$this->mongo_db->insert ( $app_coll, $data );
			
			//===================================================================================================================================
			
			
			//==================================================================== Health superiors request app ===============================================
			
			$app_coll = $id."_apps";
			$data = json_decode('{ "app_template" : { "pages" : { "1" : { "Student Info" : { "Unique ID" : { "type" : "retriever", "order" : 1, "coll_ref" : "healthcare2016226112942701", "field_ref" : "page1_Personal Information_Hospital Unique ID", "properties" : { "type" : "text", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 1, "notify" : "false", "parent" : "retriever" }, "retrieve_list" : [ "page1_Personal Information_Name", "page2_Personal Information_District", "page2_Personal Information_School Name", "page2_Personal Information_Class", "page2_Personal Information_Section" ] }, "Name" : { "type" : "mapper", "coll_ref" : "healthcare2016226112942701", "order" : 2, "field_ref" : "page1_Personal Information_Name", "properties" : { "type" : "text", "minlength" : "3", "maxlength" : "40", "required" : "TRUE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 2, "notify" : "true", "parent" : "mapper" } }, "District" : { "type" : "mapper", "coll_ref" : "healthcare2016226112942701", "order" : 2, "field_ref" : "page2_Personal Information_District", "properties" : { "type" : "text", "minlength" : "3", "maxlength" : "40", "required" : "TRUE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 2, "notify" : "true", "parent" : "mapper" } }, "School Name" : { "type" : "mapper", "coll_ref" : "healthcare2016226112942701", "order" : 3, "field_ref" : "page2_Personal Information_School Name", "properties" : { "type" : "text", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 3, "notify" : "false", "parent" : "mapper" } }, "Class" : { "type" : "mapper", "coll_ref" : "healthcare2016226112942701", "order" : 4, "field_ref" : "page2_Personal Information_Class", "properties" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 4, "notify" : "false", "parent" : "mapper" } }, "Section" : { "type" : "mapper", "coll_ref" : "healthcare2016226112942701", "order" : 5, "field_ref" : "page2_Personal Information_Section", "properties" : { "type" : "text", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 5, "notify" : "false", "parent" : "mapper" } }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 1 } }, "Problem Info" : { "Identifier" : { "type" : "checkbox", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 1, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Bites", "value" : "Bites" }, { "label" : "Body pains", "value" : "Body pains" }, { "label" : "Breath less ness", "value" : "Breath less ness" }, { "label" : "Burning micturition", "value" : "Burning micturition" }, { "label" : "Burning sensation in the chest", "value" : "Burning sensation in the chest" }, { "label" : "Chest pain", "value" : "Chest pain" }, { "label" : "Chickenpox", "value" : "Chickenpox" }, { "label" : "cold", "value" : "cold" }, { "label" : "Constipation", "value" : "Constipation" }, { "label" : "Cough", "value" : "Cough" }, { "label" : "Cracks feet", "value" : "Cracks feet" }, { "label" : "Cramps", "value" : "Cramps" }, { "label" : "Defective hearing", "value" : "Defective hearing" }, { "label" : "DeHydration", "value" : "DeHydration" }, { "label" : "Delayed periods", "value" : "Delayed periods" }, { "label" : "Dental problems", "value" : "Dental problems" }, { "label" : "Diarrhea", "value" : "Diarrhea" }, { "label" : "Discharge from ear", "value" : "Discharge from ear" }, { "label" : "Dyspepsia", "value" : "Dyspepsia" }, { "label" : "Ear pain", "value" : "Ear pain" }, { "label" : "Fever", "value" : "Fever" }, { "label" : "Frequent urination", "value" : "Frequent urination" }, { "label" : "Headache", "value" : "Headache" }, { "label" : "Indigestion", "value" : "Indigestion" }, { "label" : "Irregular periods", "value" : "Irregular periods" }, { "label" : "Others", "value" : "Others" } ] }, "newline3" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 3 }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 2 } } }, "2" : { "Problem Info" : { "Description" : { "type" : "textarea", "minlength" : "2", "maxlength" : "500", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 2, "notify" : "false" }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 3 } }, "Diagnosis Info" : { "Doctor Summary" : { "type" : "textarea", "minlength" : "2", "maxlength" : "500", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 1, "notify" : "false" }, "Doctor Advice" : { "type" : "select", "size" : "1", "required" : "FALSE", "key" : "TRUE", "description" : "", "option_choose_one" : "TRUE", "with_translations" : "FALSE", "order" : 2, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "text" : "Prescription", "selected" : "TRUE", "value" : "Prescription" }, { "text" : "Advice", "selected" : "FALSE", "value" : "Advice" }, { "text" : "Refer 2 Hospital", "selected" : "FALSE", "value" : "Refer 2 Hospital" } ] }, "Prescription" : { "type" : "textarea", "minlength" : "2", "maxlength" : "250", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 3, "notify" : "false" }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 4 } }, "Review Info" : { "Request Type" : { "type" : "select", "size" : "1", "required" : "FALSE", "key" : "TRUE", "description" : "", "option_choose_one" : "TRUE", "with_translations" : "FALSE", "order" : 1, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "text" : "Normal", "selected" : "TRUE", "value" : "Normal" }, { "text" : "Emergency", "selected" : "FALSE", "value" : "Emergency" }, { "text" : "Chronic", "selected" : "FALSE", "value" : "Chronic" } ] }, "Status" : { "type" : "select", "size" : "1", "required" : "FALSE", "key" : "TRUE", "description" : "", "option_choose_one" : "TRUE", "with_translations" : "FALSE", "order" : 2, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "text" : "Initiated", "selected" : "TRUE", "value" : "Initiated" }, { "text" : "Prescribed", "selected" : "FALSE", "value" : "Prescribed" }, { "text" : "Under Medication", "selected" : "FALSE", "value" : "Under Medication" }, { "text" : "Follow-up", "selected" : "FALSE", "value" : "Follow-up" }, { "text" : "Cured", "selected" : "FALSE", "value" : "Cured" }, { "text" : "Hospitalized", "selected" : "FALSE", "value" : "Hospitalized" } ] }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 5 } } } }, "permissions" : { "HS 1" : { "View_Permissions" : [ "Student Info", "Problem Info", "Review Info" ], "Edit_Permissions" : [ "Student Info", "Problem Info", "Review Info" ], "index" : 1 }, "HS 2" : { "View_Permissions" : [ "Student Info", "Problem Info", "Diagnosis Info", "Review Info" ], "Edit_Permissions" : [ "Student Info", "Problem Info", "Review Info" ], "index" : 3 } }, "notification_parameters" : [ { "field" : "Name", "page" : "1", "section" : "Student Info" } ], "application_header" : { "header_details" : { "companyname" : "Healthcare", "address" : "401s,\nsecbad,\nindia", "logo" : "" } } }, "app_id" : "healthcare2016531124515424", "app_description" : "App for health supervisor to initiate and continue requests", "status" : "processed", "app_name" : "Health Supervisor Request App", "app_created" : "2016-05-31 13:05:24", "app_expiry" : "2017-05-31", "_version" : 1, "stages" : [ "HS 1", "Doctor", "HS 2" ], "created_by" : "tlstec.primary2@gmail.com", "use_profile_header" : "no", "blank_app" : "no" }',true);
			////log_message("debug","dataaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa".print_r($data,true));
			$this->mongo_db->insert ( $app_coll, $data );
			
			
			$app_coll = $id."_applist";
			$data = json_decode('{ "app_id" : "healthcare2016531124515424", "app_description" : "App for health supervisor to initiate and continue requests", "app_name" : "Health Supervisor Request App", "app_created" : "2016-05-31 13:05:24" }',true);
			////log_message("debug","dataaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa".print_r($data,true));
			$this->mongo_db->insert ( $app_coll, $data );
			
			
			$app_coll = $id."_web_apps";
			$data = json_decode('{ "permissions" : { "HS 1" : { "View_Permissions" : [ "Student Info", "Problem Info", "Review Info" ], "Edit_Permissions" : [ "Student Info", "Problem Info", "Review Info" ], "index" : 1 }, "HS 2" : { "View_Permissions" : [ "Student Info", "Problem Info", "Diagnosis Info", "Review Info" ], "Edit_Permissions" : [ "Student Info", "Problem Info", "Review Info" ], "index" : 3 } }, "app_id" : "healthcare2016531124515424", "app_description" : "App for health supervisor to initiate and continue requests", "status" : "new", "app_name" : "Health Supervisor Request App", "app_created" : "2016-05-31 13:05:24", "app_expiry" : "2017-05-31", "application_header" : { "header_details" : { "companyname" : "Healthcare", "address" : "401s,\nsecbad,\nindia", "logo" : "" } }, "_version" : 1, "created_by" : "tlstec.primary2@gmail.com", "use_profile_header" : "no", "blank_app" : "no" }',true);
			////log_message("debug","dataaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa".print_r($data,true));
			$this->mongo_db->insert ( $app_coll, $data );
			
			//===================================================================================================================================
			
			//==================================================================== Sanitation infrastructure app ================================
			
			$app_coll = $id."_apps";
			$data = json_decode('{ "app_template" : { "pages" : { "1" : { "Dormitories" : { "Separate Dormitory" : { "type" : "radio", "required" : "TRUE", "key" : "TRUE", "description" : "", "order" : 1, "multilanguage" : "FALSE", "notify" : "true", "options" : [ { "label" : "Yes", "value" : "Yes" }, { "label" : "No", "value" : "No" } ] }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 1 } }, "Toilets" : { "Water Source" : { "type" : "text", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 1, "notify" : "false" }, "Note:-" : { "type" : "instruction", "required" : "FALSE", "key" : "TRUE", "instructions" : "in numbers", "description" : "", "multilanguage" : "FALSE", "order" : 2 }, "Buckets" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 3, "notify" : "false" }, "Mugs" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 4, "notify" : "false" }, "Dust Bins" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 5, "notify" : "false" }, "Soap" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 6, "notify" : "false" }, "Incinerator" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 7, "notify" : "false" }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 2 } } }, "2" : { "Hand Wash" : { "Note:-" : { "type" : "instruction", "required" : "FALSE", "key" : "TRUE", "instructions" : "in numbers", "description" : "", "multilanguage" : "FALSE", "order" : 1 }, "Dining Halls" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 2, "notify" : "false" }, "Kitchen" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 3, "notify" : "false" }, "Class Rooms" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 4, "notify" : "false" }, "Dormitories" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 5, "notify" : "false" }, "Kitchen consists of" : { "type" : "checkbox", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 6, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Gas facility", "value" : "Gas facility" }, { "label" : "Kerosene Stove", "value" : "Kerosene Stove" }, { "label" : "Made on wood", "value" : "Made on wood" } ] }, "newline7" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 7 }, "newline8" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 8 }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 3 } } }, "3" : { "Waste Management" : { "Note:-" : { "type" : "instruction", "required" : "FALSE", "key" : "TRUE", "instructions" : "Disposable Bins (in numbers)", "description" : "", "multilanguage" : "FALSE", "order" : 1 }, "Dining Halls" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 2, "notify" : "false" }, "Kitchen" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 3, "notify" : "false" }, "Class Rooms" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 4, "notify" : "false" }, "Dormitories" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 5, "notify" : "false" }, "newline6" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 6 }, "newline7" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 7 }, "newline8" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 8 }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 4 } } }, "4" : { "Water Facility" : { "Note:-" : { "type" : "instruction", "required" : "FALSE", "key" : "TRUE", "instructions" : "Availability of Water in Toiltes (in numbers)", "description" : "", "multilanguage" : "FALSE", "order" : 1 }, "Dining Halls" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 2, "notify" : "false" }, "Kitchen" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 3, "notify" : "false" }, "Class Rooms" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 4, "notify" : "false" }, "Dormitories" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 5, "notify" : "false" }, "Running water(number of taps)" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 6, "notify" : "false" }, "Store water" : { "type" : "number", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 7, "notify" : "false" }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 5 } } }, "5" : { "Dining Hall" : { "Note:-" : { "type" : "instruction", "required" : "FALSE", "key" : "TRUE", "instructions" : "Children sit on (in numbers)", "description" : "", "multilanguage" : "FALSE", "order" : 1 }, "Floor" : { "type" : "number", "minlength" : "1", "maxlength" : "10", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 2, "notify" : "false" }, "Table and Chairs" : { "type" : "number", "minlength" : "1", "maxlength" : "10", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 3, "notify" : "false" }, "Benches" : { "type" : "number", "minlength" : "1", "maxlength" : "10", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 4, "notify" : "false" }, "newline5" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 5 }, "newline6" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 6 }, "newline7" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 7 }, "newline8" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 8 }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 6 } } }, "6" : { "Declaration" : { "Note:-" : { "type" : "instruction", "required" : "FALSE", "key" : "TRUE", "instructions" : "I here by declare i would render all the responsibilities as mentioned above", "description" : "", "multilanguage" : "FALSE", "order" : 1 }, "Place" : { "type" : "text", "minlength" : "1", "maxlength" : "55", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 2, "notify" : "false" }, "Date" : { "type" : "date", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 3, "notify" : "false" }, "newline4" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 4 }, "newline5" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 5 }, "Signature" : { "type" : "text", "minlength" : "", "maxlength" : "", "required" : "FALSE", "key" : "FALSE", "description" : "", "multilanguage" : "FALSE", "order" : 6 }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 7 } } } }, "permissions" : { "Stage Name1" : { "View_Permissions" : [ "Dormitories", "Toilets", "Hand Wash", "Waste Management", "Water Facility", "Dining Hall", "Declaration" ], "Edit_Permissions" : [ "Dormitories", "Toilets", "Hand Wash", "Waste Management", "Water Facility", "Dining Hall", "Declaration" ], "index" : 1 } }, "notification_parameters" : [ { "field" : "Separate Dormitory", "page" : "1", "section" : "Dormitories" } ], "application_header" : { "header_details" : { "companyname" : "Healthcare", "address" : "401s,secbad,india", "logo" : "" } } }, "app_id" : "healthcare20161114161842748", "app_description" : "Sanitation Infrastructure Form", "status" : "processed", "app_name" : "Sanitation Infrastructure Form", "app_created" : "2016-11-14 13:04:48", "app_expiry" : "2020-05-21", "_version" : 3, "stages" : [ "Stage Name1" ], "created_by" : "tlstec.primary2@gmail.com", "use_profile_header" : "no", "blank_app" : "no" }',true);
			////log_message("debug","dataaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa".print_r($data,true));
			$this->mongo_db->insert ( $app_coll, $data );
			
			
			$app_coll = $id."_applist";
			$data = json_decode('{ "app_id" : "healthcare20161114161842748", "app_description" : "Sanitation Infrastructure Form", "app_name" : "Sanitation Infrastructure Form", "app_created" : "2016-11-14 11:35:59" }',true);
			////log_message("debug","dataaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa".print_r($data,true));
			$this->mongo_db->insert ( $app_coll, $data );
			
			
			$app_coll = $id."_web_apps";
			$data = json_decode('',true);
			////log_message("debug","dataaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa".print_r($data,true));
			//$this->mongo_db->insert ( $app_coll, $data );
			
			//===================================================================================================================================
			
			
			//==================================================================== Sanitation form app ==========================================
			
			$app_coll = $id."_apps";
			$data = json_decode('{ "app_template" : { "pages" : { "1" : { "Hand Wash" : { "Hand sanitizers/soap used" : { "type" : "radio", "required" : "TRUE", "key" : "TRUE", "description" : "", "order" : 1, "multilanguage" : "FALSE", "notify" : "true", "options" : [ { "label" : "Yes", "value" : "Yes" }, { "label" : "No", "value" : "No" } ] }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 1 } }, "Kitchen" : { "Food stored and served with tight containers" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 1, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Yes", "value" : "Yes" }, { "label" : "No", "value" : "No" } ] }, "Availabilities of storage of perishable products" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 2, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Yes", "value" : "Yes" }, { "label" : "No", "value" : "No" } ] }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 2 } } }, "2" : { "Cleanliness" : { "Dormitories" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 1, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Once", "value" : "Once" }, { "label" : "Twice", "value" : "Twice" }, { "label" : "Thrice", "value" : "Thrice" } ] }, "Kitchen" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 2, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Once", "value" : "Once" }, { "label" : "Twice", "value" : "Twice" }, { "label" : "Thrice", "value" : "Thrice" } ] }, "Dining Halls" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 3, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Once", "value" : "Once" }, { "label" : "Twice", "value" : "Twice" }, { "label" : "Thrice", "value" : "Thrice" } ] }, "Class Rooms" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 4, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Once", "value" : "Once" }, { "label" : "Twice", "value" : "Twice" }, { "label" : "Thrice", "value" : "Thrice" } ] }, "Sick Rooms" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 5, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Once", "value" : "Once" }, { "label" : "Twice", "value" : "Twice" }, { "label" : "Thrice", "value" : "Thrice" } ] }, "Staff Rooms" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 6, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Once", "value" : "Once" }, { "label" : "Twice", "value" : "Twice" }, { "label" : "Thrice", "value" : "Thrice" } ] }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 3 } } }, "3" : { "Cleanliness" : { "Water Tanks" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 7, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Once", "value" : "Once" }, { "label" : "Twice", "value" : "Twice" }, { "label" : "Thrice", "value" : "Thrice" } ] }, "Dust Bins" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 8, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Once", "value" : "Once" }, { "label" : "Twice", "value" : "Twice" }, { "label" : "Thrice", "value" : "Thrice" } ] }, "Toilets" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 9, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Once", "value" : "Once" }, { "label" : "Twice", "value" : "Twice" }, { "label" : "Thrice", "value" : "Thrice" } ] }, "Kitchen Utensils" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 10, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Once", "value" : "Once" }, { "label" : "Twice", "value" : "Twice" }, { "label" : "Thrice", "value" : "Thrice" } ] }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 3 } }, "Food" : { "Food prepared according to the days menu" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 1, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Yes", "value" : "Yes" }, { "label" : "No", "value" : "No" } ] }, "Kitchen staff wears gloves ans caps while serving" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 2, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Yes", "value" : "Yes" }, { "label" : "No", "value" : "No" } ] }, "Every meal is tasted by a staff members before serving" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 3, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Yes", "value" : "Yes" }, { "label" : "No", "value" : "No" } ] }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 4 } } }, "4" : { "Waste Management" : { "Separate dumping of Inorganic waste" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 1, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Yes", "value" : "Yes" }, { "label" : "No", "value" : "No" } ] }, "Separate dumping of Organic waste" : { "type" : "radio", "required" : "FALSE", "key" : "TRUE", "description" : "", "order" : 2, "multilanguage" : "FALSE", "notify" : "false", "options" : [ { "label" : "Yes", "value" : "Yes" }, { "label" : "No", "value" : "No" } ] }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 5 } }, "Declaration Information" : { "Declaration:" : { "type" : "instruction", "required" : "FALSE", "key" : "TRUE", "instructions" : "I here by declare i would render all the responsibilities as mentioned above", "description" : "", "multilanguage" : "FALSE", "order" : 1 }, "Place:" : { "type" : "text", "minlength" : "1", "maxlength" : "123", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 2, "notify" : "false" }, "Date:" : { "type" : "date", "required" : "FALSE", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 3, "notify" : "false" }, "newline4" : { "type" : "newline", "key" : "FALSE", "multilanguage" : "FALSE", "order" : 4 }, "Signature:" : { "type" : "text", "minlength" : "", "maxlength" : "", "required" : "FALSE", "key" : "FALSE", "description" : "", "multilanguage" : "FALSE", "order" : 5 }, "dont_use_this_name" : { "type" : "SBreak", "key" : "TRUE", "description" : "", "multilanguage" : "FALSE", "order" : 6 } } } }, "permissions" : { "Stage Name1" : { "View_Permissions" : [ "Hand Wash", "Kitchen", "Cleanliness", "Food", "Waste Management", "Declaration Information" ], "Edit_Permissions" : [ "Hand Wash", "Kitchen", "Cleanliness", "Food", "Waste Management", "Declaration Information" ], "index" : 1 } }, "notification_parameters" : [ { "field" : "Hand sanitizers/soap used", "page" : "1", "section" : "Hand Wash" } ], "application_header" : { "header_details" : { "companyname" : "Healthcare", "address" : "401s,secbad,india", "logo" : "" } } }, "app_id" : "healthcare2016111212310531", "app_description" : "Sanitation Form", "status" : "new", "app_name" : "Sanitation Report", "app_created" : "2017-01-21 14:57:24", "app_expiry" : "2020-06-19", "_version" : 4, "stages" : [ "Stage Name1" ], "created_by" : "tlstec.primary2@gmail.com", "use_profile_header" : "no", "blank_app" : "no" }',true);
			////log_message("debug","dataaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa".print_r($data,true));
			$this->mongo_db->insert ( $app_coll, $data );
			
			
			$app_coll = $id."_applist";
			$data = json_decode('{ "app_id" : "healthcare2016111212310531", "app_description" : "Sanitation Form", "app_name" : "Sanitation Form", "app_created" : "2016-11-14 12:31:08" }',true);
			////log_message("debug","dataaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa".print_r($data,true));
			$this->mongo_db->insert ( $app_coll, $data );
			
			
			$app_coll = $id."_web_apps";
			$data = json_decode('{ "permissions" : { "Stage Name1" : { "View_Permissions" : [ "Hand Wash", "Kitchen", "Cleanliness", "Food", "Waste Management", "Declaration Information" ], "Edit_Permissions" : [ "Hand Wash", "Kitchen", "Cleanliness", "Food", "Waste Management", "Declaration Information" ], "index" : 1 } }, "app_id" : "healthcare2016111212310531", "app_description" : "Sanitation Form", "status" : "new", "app_name" : "Sanitation Report", "app_created" : "2017-01-21 14:57:24", "app_expiry" : "2020-06-19", "application_header" : { "header_details" : { "companyname" : "Healthcare", "address" : "401s,secbad,india", "logo" : "" } }, "_version" : 4, "created_by" : "tlstec.primary2@gmail.com", "use_profile_header" : "no", "blank_app" : "no" }',true);
			////log_message("debug","dataaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa".print_r($data,true));
			$this->mongo_db->insert ( $app_coll, $data );
			
			//===================================================================================================================================
			
			
		} 
		
		//=======================================================
		*/
		//=======================================================
		
		
		//=========================start of modification======
		/*
		
		$unique_ids = ["KMNR_52031_","WGL_52124_","WGL_52123_","WGL_52127_","NZD_61819_","ADB_51930_","ADB_51924_","ADB_51923_","RR_61520_","RR_61521_","RR_61524_","RR_61525_","HYD_61607_","KMNR_52028_","KMNR_52029_","KMNR_52022_","KMNR_52034_","SMBD_61450_","SMBD_61516_","SMBD_61518_","SMBD_61455_","SMBD_61515_","MDK_61726_","MDK_61727_","MDK_61728_","MDK_61730_","MDK_61733_","RR_61514_","RR_61519_","WGL_52128_","WGL_52119_","WGL_52120_","WGL_52130_","WGL_52131_","KMNR_52014_","KMNR_52012_","KMNR_52010_","MDK_61705_","MDK_61701_","MDK_61703_","MDK_61710_","MDK_61704_","MDK_61706_","MDK_61713_","MDK_61714_","MDK_61717_","MDK_61709_","MDK_61723_","MDK_61719_","MDK_61702_","MDK_61716_","MDK_61718_","MDK_61707_","MDK_61724_","KMNR_52006_","KMNR_52005_","WGL_52109_","NLG_62305_","NLG_62302_","NLG_62308_","NLG_62312_","RR_61506_","RR_61501_","RR_61507_","RR_61508_","MBNR_61407_","MBNR_61443_","WGL_52107_","WGL_52108_","WGL_52102_","WGL_52112_","WGL_52118_","WGL_52104_","KMNR_52013_","NLG_62301_","NLG_62303_","NLG_62309_","NLG_62310_","KMM_52201_","KMM_52209_","KMM_52205_","KMM_52210_","KMM_52203_","KMNR_52001_","WGL_52114_","WGL_52101_","WGL_52106_","WGL_52116_","WGL_52103_","WGL_52113_","MBNR_61410_","ADB_51901_","ADB_51903_","ADB_51911_","ADB_51907_","ADB_51921_","ADB_51906_","ADB_51920_","ADB_51910_","ADB_51904_","ADB_51908_","ADB_51909_","ADB_51912_","KMNR_52009_","KMNR_52002_","KMNR_52011_","KMNR_52007_","KMNR_52008_","WGL_52111_","WGL_52105_","WGL_52115_","WGL_52117_","RR_61511_"];
		
		$correct_ids = ["JGTL_52031_","JGN_52124_","JSKR_52123_","JSKR_52127_","KMR_61819_","MCRL_51930_","MCRL_51924_","MCRL_51923_","MDCL_61520_","MDCL_61521_","MDCL_61524_","MDCL_61525_","MDCL_61607_","PDPL_52028_","RJN_52029_","RJN_52022_","RJN_52034_","RR_61450_","RR_61516_","RR_61518_","RR_61455_","RR_61515_","SDPT_61726_","SDPT_61727_","SDPT_61728_","SDPT_61730_","SDPT_61733_","VKRD_61514_","VKRD_61519_","WGLR_52128_","WGLU_52119_","WGLU_52120_","WGLU_52130_","WGLU_52131_","RJN_52014_","RJN_52012_","RJN_52010_","SRD_61705_","SRD_61701_","SRD_61703_","SRD_61710_","SRD_61704_","SRD_61706_","SRD_61713_","SRD_61714_","SRD_61717_","SRD_61709_","SRD_61723_","SDPT_61719_","SDPT_61702_","SDPT_61716_","SDPT_61718_","SDPT_61707_","SDPT_61724_","SDPT_52006_","SDPT_52005_","SDPT_52109_","SRPT_62305_","SRPT_62302_","SRPT_62308_","SRPT_62312_","VKRD_61506_","VKRD_61501_","VKRD_61507_","VKRD_61508_","WNPY_61407_","WNPY_61443_","WGLR_52107_","WGLR_52108_","WGLR_52102_","WGLR_52112_","WGLR_52118_","WGLU_52104_","WGLU_52013_","YDR_62301_","YDR_62303_","YDR_62309_","YDR_62310_","BDD_52201_","BDD_52209_","BDD_52205_","BDD_52210_","BDD_52203_","JGTL_52001_","JGN_52114_","JGN_52101_","JGN_52106_","JGN_52116_","JSKR_52103_","JSKR_52113_","GDW_61410_","KMB_51901_","KMB_51903_","KMB_51911_","MCRL_51907_","MCRL_51921_","MCRL_51906_","MCRL_51920_","MCRL_51910_","NML_51904_","NML_51908_","NML_51909_","NML_51912_","PDPL_52009_","PDPL_52002_","PDPL_52011_","PDPL_52007_","PDPL_52008_","MBBD_52111_","MBBD_52105_","MBBD_52115_","MBBD_52117_","MDCL_61511_"];
		
		$old_school_names = ["TSWREIS KORATLA(B),KARIMNAGAR","TSWREIS NARMETTA(G),WARANGAL","TSWREIS BHUPALAPALLI(G),WARANGAL","TSWREIS MULUG(G),WARANGAL","TSWREIS LINGAMPET(G),NIZAMABAD","TSWRDCW MANCHIRIAL(G),ADILABAD","TSWREIS KASIPET(B),ADILABAD","TSWREIS MANDAMARRI(G),ADILABAD","TSWREIS SHAMIRPET(B),RANGAREDDY","TSWREIS MALKAJGIRI(G),RANGAREDDY","TSWREIS JAGADGIRIGUTTA(G),RANGAREDDY","TSWREIS UPPAL(B),RANGAREDDY","TSWRDCW JAGADGIRI GUTTA(G),HYDERABAD","TSWREIS PEDDAPALLI(B),KARIMNAGAR","TSWREIS MUSTHABAD(B),KARIMNAGAR","TSWREIS ILLANTHAKUNTA(G),KARIMNAGAR","TSWRDCW SIRICILLA(G),KARIMNAGAR","TSWREIS AMANGAL(G),SHAMSHABAD","TSWREIS CHEVELLA(G),SHAMSHABAD","TSWREIS KANDUKUR(B),SHAMSHABAD","TSWREIS KONDURGU(B),SHAMSHABAD","TSWREIS SHANKARPALLE(G),SHAMSHABAD","TSWREIS GAJWEL(G),MEDAK","TSWREIS KONDAPAK(B),MEDAK","TSWREIS JAGADEVPUR(G),MEDAK","TSWREIS VARGAL(B),MEDAK","TSWRDCW SIDDIPET(G),MEDAK","TSWREIS BANTWARAM(G),RANGAREDDY","TSWREIS PEDDEMUL(B),RANGAREDDY","TSWREIS DUGGONDI(G),WARANGAL","TSWREIS DHARMASAGAR(G),WARANGAL","TSWREIS HASANPARTHY(G),WARANGAL","TSWRDCW WARANGAL EAST(G),WARANGAL","TSWRDCW WARANGAL WEST(G),WARANGAL","TSWREIS CHINNABONALA(G),KARIMNAGAR","TSWREIS NARMAL(G),KARIMNAGAR","TSWREIS SIRICILLA(G),KARIMNAGAR","TSWREIS CHITKUL(G),MEDAK","TSWREIS NALLAVAGU(B),MEDAK","TSWREIS HATNOORA(B),MEDAK","TSWREIS HATNOORA JC(B),MEDAK","TSWREIS NARAYANAKHED(B),MEDAK","TSWREIS SANGAREDDY(G),MEDAK","TSWREIS ZAHIRABAD(G),MEDAK","TSWREIS KONDAPUR(B),MEDAK","TSWREIS ANDOL(G),MEDAK","TSWREIS SINGOOR(B),MEDAK","TSWREIS RAIKOTE(G),MEDAK","TSWREIS MITTAPALLI(G),MEDAK","TSWREIS RAMAKKAPET(G),MEDAK","TSWREIS MULUGU(G),MEDAK","TSWREIS ALWAL(B),MEDAK","TSWREIS TOGUTTA(G),MEDAK","TSWREIS DUBBAK(B),SIDDIPET","TSWREIS KOHEDA(B),KARIMNAGAR","TSWREIS HUSNABAD(B),KARIMNAGAR","TSWREIS CHERIAL(B),WARANGAL","TSWREIS SURYAPET(G),NALGONDA","TSWREIS MATTAMPALLI(G),NALGONDA","TSWREIS NADIGUDEM(G),NALGONDA","TSWREIS TUNGATURTHI(G),NALGONDA","TSWREIS VIKARABAD(G),RANGAREDDY","TSWREIS PARGI(B),RANGAREDDY","TSWREIS SIVAREDDYPET(B),RANGAREDDY","TSWREIS YALAL(G),RANGAREDDY","TSWREIS MADANAPURAM(B),MAHABUBNAGAR","TSWREIS GOPALPET(G),MAHABUBNAGAR","TSWREIS NARSAMPET(B),WARANGAL","TSWREIS PARVATHAGIRI(G),WARANGAL","TSWREIS PARKAL(G),WARANGAL","TSWREIS RAYAPARTHI(G),WARANGAL","TSWREIS WARDHANNAPET(B),WARANGAL","TSWREIS MADIKONDA(G),WARANGAL","TSWREIS ELKATURTI(G),KARIMNAGAR","TSWREIS BHONGIR(B),NALGONDA","TSWREIS RAJAPET(B),NALGONDA","TSWREIS RAMANNAPET(G),NALGONDA","TSWREIS ALAIR(G),NALGONDA","TSWREIS ANNAPUREDDYPALLI(B),KHAMMAM","TSWREIS PALAVANCHA(G),KHAMMAM","TSWREIS KOTHAGUDEM(B),KHAMMAM","TSWREIS MULAKALAPALLI(G),KHAMMAM","TSWREIS DAMMAPET(B),KHAMMAM","TSWREIS MAIDPALLY(B),KARIMNAGAR","TSWREIS PALAKURTHI(G),WARANGAL","TSWREIS JANGAON(B),WARANGAL","TSWREIS GHANPUR(B),WARANGAL","TSWREIS ZAFFERGADH(G),WARANGAL","TSWREIS JAKARAM(B),WARANGAL","TSWREIS CHITYAL(G),WARANGAL","TSWREIS GHATTU(G),MAHABUBNAGAR","TSWREIS ASIFABAD(B),ADILABAD","TSWREIS SIRPUR(B),ADILABAD","TSWREIS SIRPUR(G),ADILABAD","TSWREIS CHENNUR(B),ADILABAD","TSWREIS CHENNUR(G),ADILABAD","TSWREIS LUXETTIPET(G),ADILABAD","TSWREIS BELLAMPALLI(B),ADILABAD","TSWREIS BELLAMPALLI(G),ADILABAD","TSWREIS MUDHOLE(B),ADILABAD","TSWREIS NIRMAL(G),ADILABAD","TSWREIS KADDAM(G),ADILABAD","TSWREIS JAM(G),ADILABAD","TSWREIS MAHADEVPUR(G),KARIMNAGAR","TSWREIS MALLAPUR(G),KARIMNAGAR","TSWREIS NANDIMEDARAM(G),KARIMNAGAR","TSWREIS PEDAPALLY(G),KARIMNAGAR","TSWREIS MANTHANI(B),KARIMNAGAR","TSWREIS TORRUR(G),WARANGAL","TSWREIS MAHABOOBABAD(G),WARANGAL","TSWREIS KESAMUDRAM(G),WARANGAL","TSWREIS MARIPEDA(B),WARANGAL","TSWREIS MEDCHEL(G),RANGAREDDY"];
		
		$new_schools_names = ["TSWREIS KORATLA(B),JAGTIAL","TSWREIS NARMETTA(G),JANGAON","TSWREIS BHUPALAPALLI(G),JAYASHANKAR","TSWREIS MULUG(G),JAYASHANKAR","TSWREIS LINGAMPET(G),KAMAREDDY","TSWRDCW MANCHIRIAL(G),MANCHERIAL","TSWREIS KASIPET(B),MANCHERIAL","TSWREIS MANDAMARRI(G),MANCHERIAL","TSWREIS SHAMIRPET(B),MEDCHAL","TSWREIS MALKAJGIRI(G),MEDCHAL","TSWREIS JAGADGIRIGUTTA(G),MEDCHAL","TSWREIS UPPAL(B),MEDCHAL","TSWRDCW JAGADGIRI GUTTA(G),MEDCHAL","TSWREIS PEDDAPALLI(B),PEDDAPALLI","TSWREIS MUSTHABAD(B),RAJANNA","TSWREIS ILLANTHAKUNTA(G),RAJANNA","TSWRDCW SIRICILLA(G),RAJANNA","TSWREIS AMANGAL(G),RANGAREDDY","TSWREIS CHEVELLA(G),RANGAREDDY","TSWREIS KANDUKUR(B),RANGAREDDY","TSWREIS KONDURGU(B),RANGAREDDY","TSWREIS SHANKARPALLE(G),RANGAREDDY","TSWREIS GAJWEL(G),SIDDIPET","TSWREIS KONDAPAK(B),SIDDIPET","TSWREIS JAGADEVPUR(G),SIDDIPET","TSWREIS VARGAL(B),SIDDIPET","TSWRDCW SIDDIPET(G),SIDDIPET","TSWREIS BANTWARAM(G),VIKARABAD","TSWREIS PEDDEMUL(B),VIKARABAD","TSWREIS DUGGONDI(G),WARANGAL RURAL","TSWREIS DHARMASAGAR(G),WARANGAL URBAN","TSWREIS HASANPARTHY(G),WARANGAL URBAN","TSWRDCW WARANGAL EAST(G),WARANGAL URBAN","TSWRDCW WARANGAL WEST(G),WARANGAL URBAN","TSWREIS CHINNABONALA(G),RAJANNA","TSWREIS NARMAL(G),RAJANNA","TSWREIS SIRICILLA(G),RAJANNA","TSWREIS CHITKUL(G),SANGAREDDY","TSWREIS NALLAVAGU(B),SANGAREDDY","TSWREIS HATNOORA(B),SANGAREDDY","TSWREIS HATNOORA JC(B),SANGAREDDY","TSWREIS NARAYANAKHED(B),SANGAREDDY","TSWREIS SANGAREDDY(G),SANGAREDDY","TSWREIS ZAHIRABAD(G),SANGAREDDY","TSWREIS KONDAPUR(B),SANGAREDDY","TSWREIS ANDOL(G),SANGAREDDY","TSWREIS SINGOOR(B),SANGAREDDY","TSWREIS RAIKOTE(G),SANGAREDDY","TSWREIS MITTAPALLI(G),SIDDIPET","TSWREIS RAMAKKAPET(G),SIDDIPET","TSWREIS MULUGU(G),SIDDIPET","TSWREIS ALWAL(B),SIDDIPET","TSWREIS TOGUTTA(G),SIDDIPET","TSWREIS DUBBAK(B),SIDDIPET","TSWREIS KOHEDA(B),SIDDIPET","TSWREIS HUSNABAD(B),SIDDIPET","TSWREIS CHERIAL(B),SIDDIPET","TSWREIS SURYAPET(G),SURYAPET","TSWREIS MATTAMPALLI(G),SURYAPET","TSWREIS NADIGUDEM(G),SURYAPET","TSWREIS TUNGATURTHI(G),SURYAPET","TSWREIS VIKARABAD(G),VIKARABAD","TSWREIS PARGI(B),VIKARABAD","TSWREIS SIVAREDDYPET(B),VIKARABAD","TSWREIS YALAL(G),VIKARABAD","TSWREIS MADANAPURAM(B),WANAPARTHY","TSWREIS GOPALPET(G),WANAPARTHY","TSWREIS NARSAMPET(B),WARANGAL RURAL","TSWREIS PARVATHAGIRI(G),WARANGAL RURAL","TSWREIS PARKAL(G),WARANGAL RURAL","TSWREIS RAYAPARTHI(G),WARANGAL RURAL","TSWREIS WARDHANNAPET(B),WARANGAL RURAL","TSWREIS MADIKONDA(G),WARANGAL URBAN","TSWREIS ELKATURTI(G),WARANGAL URBAN","TSWREIS BHONGIR(B),YADADRI","TSWREIS RAJAPET(B),YADADRI","TSWREIS RAMANNAPET(G),YADADRI","TSWREIS ALAIR(G),YADADRI","TSWREIS ANNAPUREDDYPALLI(B),BHADRADRI","TSWREIS PALAVANCHA(G),BHADRADRI","TSWREIS KOTHAGUDEM(B),BHADRADRI","TSWREIS MULAKALAPALLI(G),BHADRADRI","TSWREIS DAMMAPET(B),BHADRADRI","TSWREIS MAIDPALLY(B),JAGTIAL","TSWREIS PALAKURTHI(G),JANGAON","TSWREIS JANGAON(B),JANGAON","TSWREIS GHANPUR(B),JANGAON","TSWREIS ZAFFERGADH(G),JANGAON","TSWREIS JAKARAM(B),JAYASHANKAR","TSWREIS CHITYAL(G),JAYASHANKAR","TSWREIS GHATTU(G),GADWAL","TSWREIS ASIFABAD(B),KOMURAM BHEEM","TSWREIS SIRPUR(B),KOMURAM BHEEM","TSWREIS SIRPUR(G),KOMURAM BHEEM","TSWREIS CHENNUR(B),MANCHERIAL","TSWREIS CHENNUR(G),MANCHERIAL","TSWREIS LUXETTIPET(G),MANCHERIAL","TSWREIS BELLAMPALLI(B),MANCHERIAL","TSWREIS BELLAMPALLI(G),MANCHERIAL","TSWREIS MUDHOLE(B),NIRMAL","TSWREIS NIRMAL(G),NIRMAL","TSWREIS KADDAM(G),NIRMAL","TSWREIS JAM(G),NIRMAL","TSWREIS MAHADEVPUR(G),PEDDAPALLI","TSWREIS MALLAPUR(G),PEDDAPALLI","TSWREIS NANDIMEDARAM(G),PEDDAPALLI","TSWREIS PEDAPALLY(G),PEDDAPALLI","TSWREIS MANTHANI(B),PEDDAPALLI","TSWREIS TORRUR(G),MAHABUBABAD","TSWREIS MAHABOOBABAD(G),MAHABUBABAD","TSWREIS KESAMUDRAM(G),MAHABUBABAD","TSWREIS MARIPEDA(B),MAHABUBABAD","TSWREIS MEDCHEL(G),MEDCHEL"];
		
		$districts = ["JAGTIAL", "JANGAON", "JAYASHANKAR", "JAYASHANKAR", "KAMAREDDY", "MANCHERIAL", "MANCHERIAL", "MANCHERIAL", "MEDCHAL", "MEDCHAL", "MEDCHAL", "MEDCHAL", "MEDCHAL", "PEDDAPALLI", "RAJANNA", "RAJANNA", "RAJANNA", "RANGAREDDY", "RANGAREDDY", "RANGAREDDY", "RANGAREDDY", "RANGAREDDY", "SIDDIPET", "SIDDIPET", "SIDDIPET", "SIDDIPET", "SIDDIPET", "VIKARABAD", "VIKARABAD", "WARANGAL RURAL", "WARANGAL URBAN", "WARANGAL URBAN", "WARANGAL URBAN", "WARANGAL URBAN","RAJANNA", "RAJANNA", "RAJANNA", "SANGAREDDY", "SANGAREDDY", "SANGAREDDY", "SANGAREDDY", "SANGAREDDY", "SANGAREDDY", "SANGAREDDY", "SANGAREDDY", "SANGAREDDY", "SANGAREDDY", "SANGAREDDY", "SIDDIPET", "SIDDIPET", "SIDDIPET", "SIDDIPET", "SIDDIPET", "SIDDIPET", "SIDDIPET", "SIDDIPET", "SIDDIPET", "SURYAPET", "SURYAPET", "SURYAPET", "SURYAPET", "VIKARABAD", "VIKARABAD", "VIKARABAD", "VIKARABAD", "WANAPARTHY", "WANAPARTHY", "WARANGAL RURAL", "WARANGAL RURAL", "WARANGAL RURAL", "WARANGAL RURAL", "WARANGAL RURAL", "WARANGAL URBAN", "WARANGAL URBAN", "YADADRI", "YADADRI", "YADADRI", "YADADRI", "BHADRADRI", "BHADRADRI", "BHADRADRI", "BHADRADRI", "BHADRADRI", "JAGTIAL", "JANGAON", "JANGAON", "JANGAON", "JANGAON", "JAYASHANKAR", "JAYASHANKAR", "GADWAL", "KOMURAM BHEEM", "KOMURAM BHEEM", "KOMURAM BHEEM", "MANCHERIAL", "MANCHERIAL", "MANCHERIAL", "MANCHERIAL", "MANCHERIAL", "NIRMAL", "NIRMAL", "NIRMAL", "NIRMAL", "PEDDAPALLI", "PEDDAPALLI", "PEDDAPALLI", "PEDDAPALLI", "PEDDAPALLI", "MAHABUBABAD", "MAHABUBABAD", "MAHABUBABAD", "MAHABUBABAD", "MEDCHEL"];
		
		$emails = ["kmnr.52031.","wgl.52124.","wgl.52123.","wgl.52127.","nzd.61819.","adb.51930.","adb.51924.","adb.51923.","rr.61520.","rr.61521.","rr.61524.","rr.61525.","hyd.61607.","kmnr.52028.","kmnr.52029.","kmnr.52022.","kmnr.52034.","smbd.61450.","smbd.61516.","smbd.61518.","smbd.61455.","smbd.61515.","mdk.61726.","mdk.61727.","mdk.61728.","mdk.61730.","mdk.61733.","rr.61514.","rr.61519.","wgl.52128.","wgl.52119.","wgl.52120.","wgl.52130.","wgl.52131.","kmnr.52014.","kmnr.52012.","kmnr.52010.","mdk.61705.","mdk.61701.","mdk.61703.","mdk.61710.","mdk.61704.","mdk.61706.","mdk.61713.","mdk.61714.","mdk.61717.","mdk.61709.","mdk.61723.","mdk.61719.","mdk.61702.","mdk.61716.","mdk.61718.","mdk.61707.","mdk.61724.","kmnr.52006.","kmnr.52005.","wgl.52109.","nlg.62305.","nlg.62302.","nlg.62308.","nlg.62312.","rr.61506.","rr.61501.","rr.61507.","rr.61508.","mbnr.61407.","mbnr.61443.","wgl.52107.","wgl.52108.","wgl.52102.","wgl.52112.","wgl.52118.","wgl.52104.","kmnr.52013.","nlg.62301.","nlg.62303.","nlg.62309.","nlg.62310.","kmm.52201.","kmm.52209.","kmm.52205.","kmm.52210.","kmm.52203.","kmnr.52001.","wgl.52114.","wgl.52101.","wgl.52106.","wgl.52116.","wgl.52103.","wgl.52113.","mbnr.61410.","adb.51901.","adb.51903.","adb.51911.","adb.51907.","adb.51921.","adb.51906.","adb.51920.","adb.51910.","adb.51904.","adb.51908.","adb.51909.","adb.51912.","kmnr.52009.","kmnr.52002.","kmnr.52011.","kmnr.52007.","kmnr.52008.","wgl.52111.","wgl.52105.","wgl.52115.","wgl.52117.","rr.61511."];
		
		$new_emails = ["jgtl.52031.","jgn.52124.","jskr.52123.","jskr.52127.","kmr.61819.","mcrl.51930.","mcrl.51924.","mcrl.51923.","mdcl.61520.","mdcl.61521.","mdcl.61524.","mdcl.61525.","mdcl.61607.","pdpl.52028.","rjn.52029.","rjn.52022.","rjn.52034.","rr.61450.","rr.61516.","rr.61518.","rr.61455.","rr.61515.","sdpt.61726.","sdpt.61727.","sdpt.61728.","sdpt.61730.","sdpt.61733.","vkrd.61514.","vkrd.61519.","wglr.52128.","wglu.52119.","wglu.52120.","wglu.52130.","wglu.52131.","rjn.52014.","rjn.52012.","rjn.52010.","srd.61705.","srd.61701.","srd.61703.","srd.61710.","srd.61704.","srd.61706.","srd.61713.","srd.61714.","srd.61717.","srd.61709.","srd.61723.","sdpt.61719.","sdpt.61702.","sdpt.61716.","sdpt.61718.","sdpt.61707.","sdpt.61724.","sdpt.52006.","sdpt.52005.","sdpt.52109.","srpt.62305.","srpt.62302.","srpt.62308.","srpt.62312.","vkrd.61506.","vkrd.61501.","vkrd.61507.","vkrd.61508.","wnpy.61407.","wnpy.61443.","wglr.52107.","wglr.52108.","wglr.52102.","wglr.52112.","wglr.52118.","wglu.52104.","wglu.52013.","ydr.62301.","ydr.62303.","ydr.62309.","ydr.62310.","bdd.52201.","bdd.52209.","bdd.52205.","bdd.52210.","bdd.52203.","jgtl.52001.","jgn.52114.","jgn.52101.","jgn.52106.","jgn.52116.","jskr.52103.","jskr.52113.","gdw.61410.","kmb.51901.","kmb.51903.","kmb.51911.","mcrl.51907.","mcrl.51921.","mcrl.51906.","mcrl.51920.","mcrl.51910.","nml.51904.","nml.51908.","nml.51909.","nml.51912.","pdpl.52009.","pdpl.52002.","pdpl.52011.","pdpl.52007.","pdpl.52008.","mbbd.52111.","mbbd.52105.","mbbd.52115.","mbbd.52117.","mdcl.61511."];
		
		$dt_names = ["588aec373969286917f3e6f0","5874cdeb523f4a9257aa9546","5874caa8523f4a1d56aa9546","5874caa8523f4a1d56aa9546","5874ce0e523f4a9557aa9546","5874cf0f523f4a0658aa9546","5874cf0f523f4a0658aa9546","5874cf0f523f4a0658aa9546","5874d3d0523f4a125daa9546","5874d3d0523f4a125daa9546","5874d3d0523f4a125daa9546","5874d3d0523f4a125daa9546","5874d3d0523f4a125daa9546","58771b09523f4a4e4caa9546","58771b15523f4afc4baa9546","58771b15523f4afc4baa9546","58771b15523f4afc4baa9546","5732d8e4dbe7820a3d760e3b","5732d8e4dbe7820a3d760e3b","5732d8e4dbe7820a3d760e3b","5732d8e4dbe7820a3d760e3b","5732d8e4dbe7820a3d760e3b","58771b2c523f4a604caa9546","58771b2c523f4a604caa9546","58771b2c523f4a604caa9546","58771b2c523f4a604caa9546","58771b2c523f4a604caa9546","58771b46523f4a704caa9546","58771b46523f4a704caa9546","588b53fe396928932bf3e6f0","588b542d396928d709f3e6f5","588b542d396928d709f3e6f5","588b542d396928d709f3e6f5","588b542d396928d709f3e6f5","58771b15523f4afc4baa9546","58771b15523f4afc4baa9546","58771b15523f4afc4baa9546","58771b21523f4a344caa9546","58771b21523f4a344caa9546","58771b21523f4a344caa9546","58771b21523f4a344caa9546","58771b21523f4a344caa9546","58771b21523f4a344caa9546","58771b21523f4a344caa9546","58771b21523f4a344caa9546","58771b21523f4a344caa9546","58771b21523f4a344caa9546","58771b21523f4a344caa9546","58771b2c523f4a604caa9546","58771b2c523f4a604caa9546","58771b2c523f4a604caa9546","58771b2c523f4a604caa9546","58771b2c523f4a604caa9546","58771b2c523f4a604caa9546","58771b2c523f4a604caa9546","58771b2c523f4a604caa9546","58771b2c523f4a604caa9546","58771b37523f4aed4baa9546","58771b37523f4aed4baa9546","58771b37523f4aed4baa9546","58771b37523f4aed4baa9546","58771b46523f4a704caa9546","58771b46523f4a704caa9546","58771b46523f4a704caa9546","58771b46523f4a704caa9546","58771b51523f4a024caa9546","58771b51523f4a024caa9546","588b53fe396928932bf3e6f0","588b53fe396928932bf3e6f0","588b53fe396928932bf3e6f0","588b53fe396928932bf3e6f0","588b53fe396928932bf3e6f0","588b542d396928d709f3e6f5","588b542d396928d709f3e6f5","58771b68523f4a4d4caa9546","58771b68523f4a4d4caa9546","58771b68523f4a4d4caa9546","58771b68523f4a4d4caa9546","5874ca27523f4ab455aa9546","5874ca27523f4ab455aa9546","5874ca27523f4ab455aa9546","5874ca27523f4ab455aa9546","5874ca27523f4ab455aa9546","588aec373969286917f3e6f0","5874cdeb523f4a9257aa9546","5874cdeb523f4a9257aa9546","5874cdeb523f4a9257aa9546","5874cdeb523f4a9257aa9546","5874caa8523f4a1d56aa9546","5874caa8523f4a1d56aa9546","5874cad7523f4add55aa9546","5874ca64523f4ace55aa9546","5874ca64523f4ace55aa9546","5874ca64523f4ace55aa9546","5874cf0f523f4a0658aa9546","5874cf0f523f4a0658aa9546","5874cf0f523f4a0658aa9546","5874cf0f523f4a0658aa9546","5874cf0f523f4a0658aa9546","58771af9523f4a4c4caa9546","58771af9523f4a4c4caa9546","58771af9523f4a4c4caa9546","58771af9523f4a4c4caa9546","58771b09523f4a4e4caa9546","58771b09523f4a4e4caa9546","58771b09523f4a4e4caa9546","58771b09523f4a4e4caa9546","58771b09523f4a4e4caa9546","588b5618396928b11af3e6f9","588b5618396928b11af3e6f9","588b5618396928b11af3e6f9","588b5618396928b11af3e6f9","5874d3d0523f4a125daa9546"];
		
		//count($unique_ids)-1
		for($ind_modi=0;$ind_modi <= count($unique_ids)-1;$ind_modi++){
			echo $ind_modi;
			echo "/////////////";
			echo $unique_ids[$ind_modi];
			
			$unique_id = $unique_ids[$ind_modi];
			$correct_id = $correct_ids[$ind_modi];
			$old_school_name = $old_school_names[$ind_modi];
			$correct_school_name = $new_schools_names[$ind_modi];
			$district = $districts[$ind_modi];
			$email = $emails[$ind_modi];
			$new_email = $new_emails[$ind_modi];
			$dt_name = $dt_names[$ind_modi];
			
			//=======================tswreis_chronic_cases==================
			
			$query = $this->mongo_db->whereLike("school_name",$old_school_name)->get("tswreis_chronic_cases");
			foreach ($query as $doc){
				if(isset($doc['school_name'])){
					$doc['school_name'] = $correct_school_name;
					$doc['student_unique_id'] = str_replace($unique_id,$correct_id,$doc['student_unique_id']);
				}
				$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update("tswreis_chronic_cases");
			}
			
			//=========================================
			
		
		
		
		//====================screening collection ==============
		$query = $this->mongo_db->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID',$unique_id)->get($this->screening_app_col );
		foreach ($query as $doc){
		if(isset($doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'])){
			$nlg_pos = strpos ( $doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'], $unique_id);
			
			if($nlg_pos !== false){
				$nlg_end = $nlg_pos + strlen ($unique_id);
				$unique_cut = substr($doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'],$nlg_end,strlen ($doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID']));

				$new_id = $correct_id.$unique_cut;
				
		$doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'] = $new_id;
		$doc['doc_data']['widget_data']['page2']['Personal Information']['School Name'] = $correct_school_name;
		$doc['doc_data']['widget_data']['page2']['Personal Information']['District'] = $district;
		
		$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update($this->screening_app_col );
		//echo print_r($doc["_id"],true);
		//echo print_r($doc,true);
		//exit();
		}
		}
		}
		
		//shadow ==================================================
		$query = $this->mongo_db->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID',$unique_id)->get($this->screening_app_col."shadow" );
		foreach ($query as $doc){
		if(isset($doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'])){
			$nlg_pos = strpos ( $doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'], $unique_id);
			
			if($nlg_pos !== false){
				$nlg_end = $nlg_pos + strlen ($unique_id);
				$unique_cut = substr($doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'],$nlg_end,strlen ($doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID']));

				$new_id = $correct_id.$unique_cut;
				
		$doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'] = $new_id;
		$doc['doc_data']['widget_data']['page2']['Personal Information']['School Name'] = $correct_school_name;
		$doc['doc_data']['widget_data']['page2']['Personal Information']['District'] = $district;
		// echo print_r($doc["_id"],true);
		// echo print_r($doc,true);
		// exit();
		$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update($this->screening_app_col."shadow" );
		}
		}
		}

		//======================== request collection		
		
		$query = $this->mongo_db->whereLike('doc_data.widget_data.page1.Student Info.Unique ID',$unique_id)->get("healthcare2016531124515424");

		foreach ($query as $doc){
		if(isset($doc['doc_data']['widget_data']['page1']['Student Info']['Unique ID']))
		{
			$nlg_pos = strpos ( $doc['doc_data']['widget_data']['page1']['Student Info']['Unique ID'], $unique_id);
			
			if($nlg_pos == 0){
				$nlg_end = $nlg_pos + strlen ($unique_id);
				$unique_cut = substr($doc['doc_data']['widget_data']['page1']['Student Info']['Unique ID'],$nlg_end,strlen ($doc['doc_data']['widget_data']['page1']['Student Info']['Unique ID']));

				$new_id = $correct_id.$unique_cut;

		$doc['doc_data']['widget_data']['page1']['Student Info']['Unique ID'] = $new_id;
		}
		}
		
		if(isset($doc['history'][0]['submitted_by'])){		
			$doc['history'][0]['submitted_by'] = $new_email."hs#gmail";
		}
		
		if(isset($doc['history']["last_stage"]['submitted_by'])){	
			$doc['history']["last_stage"]['submitted_by'] = $new_email."hs#gmail.com";
		}
		
		if($doc['doc_data']['user_name'] == $email."hs#gmail.com")
		{	
			$doc['doc_data']['user_name'] = $new_email."hs#gmail.com";
		}
		
		$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update("healthcare2016531124515424");
		}
		
		//shadow ==========================================================
		$query = $this->mongo_db->whereLike('doc_data.widget_data.page1.Student Info.Unique ID',$unique_id)->get("healthcare2016531124515424_shadow");

		foreach ($query as $doc){
		if(isset($doc['doc_data']['widget_data']['page1']['Student Info']['Unique ID']))
		{
			$nlg_pos = strpos ( $doc['doc_data']['widget_data']['page1']['Student Info']['Unique ID'], $unique_id);
			
			if($nlg_pos == 0){
				$nlg_end = $nlg_pos + strlen ($unique_id);
				$unique_cut = substr($doc['doc_data']['widget_data']['page1']['Student Info']['Unique ID'],$nlg_end,strlen ($doc['doc_data']['widget_data']['page1']['Student Info']['Unique ID']));

				$new_id = $correct_id.$unique_cut;

		$doc['doc_data']['widget_data']['page1']['Student Info']['Unique ID'] = $new_id;
		}
		}
		
		if(isset($doc['history'][0]['submitted_by']) && ($doc['history'][0]['submitted_by'] == $email."hs#gmail.com")){		
			$doc['history'][0]['submitted_by'] = $new_email."hs#gmail";
		}
		
		if($doc['doc_data']['user_name'] == $email."hs#gmail.com")
		{	
			$doc['doc_data']['user_name'] = $new_email."hs#gmail.com";
		}
		
		$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update("healthcare2016531124515424_shadow");
		}
		

		//======================== attendence collection
		
		$query = $this->mongo_db->whereLike('doc_data.widget_data.page1.Attendence Details.Select School',$old_school_name)->get("healthcare201651317373988");
		
		foreach ($query as $doc){
		if(isset($doc['doc_data']['widget_data']['page1']['Attendence Details']['Select School']))
		{		
		$doc['doc_data']['widget_data']['page1']['Attendence Details']['Select School'] = $correct_school_name;
		$doc['doc_data']['widget_data']['page1']['Attendence Details']['District'] = $district;
		$doc['doc_data']['user_name'] = $new_email."hs#gmail.com";
		
		$doc['doc_data']['widget_data']['page1']['Attendence Details']['Sick UID'] = str_replace($unique_id,$correct_id,$doc['doc_data']['widget_data']['page1']['Attendence Details']['Sick UID']);
		$doc['doc_data']['widget_data']['page1']['Attendence Details']['R2H UID'] = str_replace($unique_id,$correct_id,$doc['doc_data']['widget_data']['page1']['Attendence Details']['R2H UID']);
		$doc['doc_data']['widget_data']['page2']['Attendence Details']['Absent UID'] = str_replace($unique_id,$correct_id,$doc['doc_data']['widget_data']['page2']['Attendence Details']['Absent UID']);
		$doc['doc_data']['widget_data']['page2']['Attendence Details']['RestRoom UID'] = str_replace($unique_id,$correct_id,$doc['doc_data']['widget_data']['page2']['Attendence Details']['RestRoom UID']);
		
		
		if(isset($doc['history']['last_stage']['submitted_by']))
		{	
			$doc['history']["last_stage"]['submitted_by'] = $new_email."hs#gmail.com";
		}
		$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update("healthcare201651317373988");
		}
		}
		
		//shadow ========================================
		$query = $this->mongo_db->whereLike('doc_data.widget_data.page1.Attendence Details.Select School',$old_school_name)->get("healthcare201651317373988_shadow");
		
		foreach ($query as $doc){
		if(isset($doc['doc_data']['widget_data']['page1']['Attendence Details']['Select School']))
		{
			
				
		$doc['doc_data']['widget_data']['page1']['Attendence Details']['Select School'] = $correct_school_name;
		$doc['doc_data']['widget_data']['page1']['Attendence Details']['District'] = $district;
		$doc['doc_data']['user_name'] = $new_email."hs#gmail.com";
		
		$doc['doc_data']['widget_data']['page1']['Attendence Details']['Sick UID'] = str_replace($unique_id,$correct_id,$doc['doc_data']['widget_data']['page1']['Attendence Details']['Sick UID']);
		$doc['doc_data']['widget_data']['page1']['Attendence Details']['R2H UID'] = str_replace($unique_id,$correct_id,$doc['doc_data']['widget_data']['page1']['Attendence Details']['R2H UID']);
		$doc['doc_data']['widget_data']['page2']['Attendence Details']['Absent UID'] = str_replace($unique_id,$correct_id,$doc['doc_data']['widget_data']['page2']['Attendence Details']['Absent UID']);
		$doc['doc_data']['widget_data']['page2']['Attendence Details']['RestRoom UID'] = str_replace($unique_id,$correct_id,$doc['doc_data']['widget_data']['page2']['Attendence Details']['RestRoom UID']);
		
		
		if((isset($doc['history'][0]['submitted_by'])) && ($doc['history'][0]['submitted_by'] == $email."hs#gmail.com"))
		{	
			$doc['history'][0]['submitted_by'] = $new_email."hs#gmail.com";
		}
		
		$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update("healthcare201651317373988_shadow");
		}
		}
		

		//======================== 'Sanitation report' collection
		
		$query = $this->mongo_db->whereLike('doc_data.widget_data.page4.School Information.School Name',$old_school_name)->get("healthcare2016111212310531" );
		foreach ($query as $doc){
		if(isset($doc['doc_data']['widget_data']['page4']['School Information']['School Name'])){
			$doc['doc_data']['widget_data']['page4']['School Information']['School Name'] = $correct_school_name;
			$doc['doc_data']['widget_data']['page4']['School Information']['District'] = $district;
		}
		
		if((isset($doc['history']['last_stage']['submitted_by'])) && ($doc['history']["last_stage"]['submitted_by'] == $email."hs#gmail.com")){
			$doc['history']["last_stage"]['submitted_by'] = $new_email."hs#gmail.com";
		}
		$doc['doc_data']['user_name'] = $new_email."hs#gmail.com";
		
		$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update("healthcare2016111212310531" );
		}
		
		
		//shadow =====================================================================
		$query = $this->mongo_db->whereLike('doc_data.widget_data.page4.School Information.School Name',$old_school_name)->get("healthcare2016111212310531_shadow" );
		foreach ($query as $doc){
		if(isset($doc['doc_data']['widget_data']['page4']['School Information']['School Name'])){
			$doc['doc_data']['widget_data']['page4']['School Information']['School Name'] = $correct_school_name;
			$doc['doc_data']['widget_data']['page4']['School Information']['District'] = $district;
		}
		
		if((isset($doc['history'][0]['submitted_by'])) && ($doc['history'][0]['submitted_by'] == $email."hs#gmail.com")){
			$doc['history'][0]['submitted_by'] = $new_email."hs#gmail.com";
		}
		$doc['doc_data']['user_name'] = $new_email."hs#gmail.com";
		
		$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update("healthcare2016111212310531_shadow" );
		}
		
		
		//======================== 'Sanitation infrastructure' collection
		
		$query = $this->mongo_db->whereLike('doc_data.widget_data.page6.School Information.School Name',$old_school_name)->get("healthcare20161114161842748" );
		foreach ($query as $doc){
		if(isset($doc['doc_data']['widget_data']['page6']['School Information']['School Name'])){
			$doc['doc_data']['widget_data']['page6']['School Information']['School Name'] = $correct_school_name;
			$doc['doc_data']['widget_data']['page6']['School Information']['District'] = $district;	
		}
		
		if((isset($doc['history']["last_stage"]['submitted_by'])) && ($doc['history']["last_stage"]['submitted_by'] == $email."hs#gmail.com")){
			$doc['history']["last_stage"]['submitted_by'] = $new_email."hs#gmail.com";
		}
		$doc['doc_data']['user_name'] = $new_email."hs#gmail.com";
		
		$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update("healthcare20161114161842748" );
		}
		
		
		//shadow =============================================================
		$query = $this->mongo_db->whereLike('doc_data.widget_data.page6.School Information.School Name',$old_school_name)->get("healthcare20161114161842748_shadow" );
		foreach ($query as $doc){
		if(isset($doc['doc_data']['widget_data']['page6']['School Information']['School Name'])){
			$doc['doc_data']['widget_data']['page6']['School Information']['School Name'] = $correct_school_name;
			$doc['doc_data']['widget_data']['page6']['School Information']['District'] = $district;
		}
		
		if((isset($doc['history'][0]['submitted_by'])) && ($doc['history'][0]['submitted_by'] == $email."hs#gmail.com")){
			$doc['history'][0]['submitted_by'] = $new_email."hs#gmail.com";
		}
		$doc['doc_data']['user_name'] = $new_email."hs#gmail.com";
		
		$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update("healthcare20161114161842748_shadow" );
		}
		
		
		//======================== panacea_ehr_notes collection
		
		$query = $this->mongo_db->whereLike('uid',$unique_id)->get("panacea_ehr_notes" );
		foreach ($query as $doc){
			if(isset($doc['uid']))
			{
				$nlg_pos = strpos ( $doc['uid'], $unique_id);
				
				if($nlg_pos == 0){
					$nlg_end = $nlg_pos + strlen ($unique_id);
					$unique_cut = substr($doc['uid'],$nlg_end,strlen ($doc['uid']));

					$new_id = $correct_id.$unique_cut;

			$doc['uid'] = $new_id;
			}
				$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update("panacea_ehr_notes" );
			}
		}
		
		//======================== panacea_messages collection
		
		$query = $this->mongo_db->whereLike('message',$unique_id)->get("panacea_messages" );
		foreach ($query as $doc){
		if(isset($doc['message'])){
			
			$doc['message'] = str_replace($unique_id,$correct_id,$doc['message']);
		
		$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update("panacea_messages" );
		}}
		
		
		//======================== panacea_health_supervisors collection
		
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->whereLike('email',$email)->get("panacea_health_supervisors" );
		foreach ($query as $doc){
		if(isset($doc['email'])){
			
			$doc['email'] = $new_email."hs@gmail.com";
			$doc['hs_addr'] = $correct_school_name;
		
		$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update("panacea_health_supervisors" );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		}
		}
		
		
		//======================== panacea_schools collection
		
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->whereLike('school_name',$old_school_name)->get("panacea_schools" );
		foreach ($query as $doc){
		if(isset($doc['school_name'])){
			
			$doc['school_name'] = $correct_school_name;
			$doc['username'] = $correct_school_name;
			$doc['school_addr'] = $correct_school_name;
			$doc['dt_name'] = $dt_name;
		
		$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update("panacea_schools" );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		}
		}
		
		//rename user collection================================================================
			$query = $this->mongo_db->get($email."hs#gmail.com_applist" );
			foreach ($query as $doc){
				$query = $this->mongo_db->insert ( $new_email."hs#gmail.com_applist", $doc );
			}
			$query = $this->mongo_db->dropCollection ( $email."hs#gmail.com_applist");
			
			$query = $this->mongo_db->get($email."hs#gmail.com_apps" );
			foreach ($query as $doc){
				$query = $this->mongo_db->insert ( $new_email."hs#gmail.com_apps", $doc );
			}
			$query = $this->mongo_db->dropCollection ( $email."hs#gmail.com_apps");
			
			$query = $this->mongo_db->get($email."hs#gmail.com_apps" );
			foreach ($query as $doc){
				$query = $this->mongo_db->insert ( $new_email."hs#gmail.com_apps", $doc );
			}
			$query = $this->mongo_db->dropCollection ( $email."hs#gmail.com_apps");
			
			$query = $this->mongo_db->get($email."hs#gmail.com_web_apps" );
			foreach ($query as $doc){
				$query = $this->mongo_db->insert ( $new_email."hs#gmail.com_web_apps", $doc );
			}
			$query = $this->mongo_db->dropCollection ( $email."hs#gmail.com_web_apps");
			
			$query = $this->mongo_db->get($email."hs#gmail.com_docs" );
			foreach ($query as $doc){
				if(isset($doc['notification_param']['Unique ID'])){
					$doc['notification_param']['Unique ID'] = str_replace($unique_id,$correct_id,$doc['notification_param']['Unique ID']);
				}
				$query = $this->mongo_db->insert ( $new_email."hs#gmail.com_docs", $doc );
			}
			$query = $this->mongo_db->dropCollection ( $email."hs#gmail.com_docs");
			
			$query = $this->mongo_db->get($email."hs#gmail.com_docs" );
			foreach ($query as $doc){
				if(isset($doc['notification_param']['Unique ID'])){
					$doc['notification_param']['Unique ID'] = str_replace($unique_id,$correct_id,$doc['notification_param']['Unique ID']);
				}
				$query = $this->mongo_db->insert ( $new_email."hs#gmail.com_docs", $doc );
			}
			$query = $this->mongo_db->dropCollection ( $email."hs#gmail.com_docs");
			
			$query = $this->mongo_db->get($email."hs#gmail.com_web_docs" );
			foreach ($query as $doc){
				if(isset($doc['notification_param']['Unique ID'])){
					$doc['notification_param']['Unique ID'] = str_replace($unique_id,$correct_id,$doc['notification_param']['Unique ID']);
				}
				$query = $this->mongo_db->insert ( $new_email."hs#gmail.com_web_docs", $doc );
			}
			$query = $this->mongo_db->dropCollection ( $email."hs#gmail.com_web_docs");
		//=============================================================
		
		//===========doctor collection
		
		$query = $this->mongo_db->where("from_user",$email."hs#gmail.com")->get("panacea.dr1#gmail.com_docs" );
			foreach ($query as $doc){
				if(isset($doc['notification_param']['Unique ID'])){
					$doc['notification_param']['Unique ID'] = str_replace($unique_id,$correct_id,$doc['notification_param']['Unique ID']);
				}
				$doc["from_user"] = $new_email."hs#gmail.com";
				$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update("panacea.dr1#gmail.com_docs" );
			}
			
		$query = $this->mongo_db->where("from_user",$email."hs#gmail.com")->get("panacea.dr2#gmail.com_docs" );
			foreach ($query as $doc){
				if(isset($doc['notification_param']['Unique ID'])){
					$doc['notification_param']['Unique ID'] = str_replace($unique_id,$correct_id,$doc['notification_param']['Unique ID']);
				}
				$doc["from_user"] = $new_email."hs#gmail.com";
				$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update("panacea.dr2#gmail.com_docs" );
			}
			
		$query = $this->mongo_db->where("from_user",$email."hs#gmail.com")->get("panacea.dr3#gmail.com_docs" );
			foreach ($query as $doc){
				if(isset($doc['notification_param']['Unique ID'])){
					$doc['notification_param']['Unique ID'] = str_replace($unique_id,$correct_id,$doc['notification_param']['Unique ID']);
				}
				$doc["from_user"] = $new_email."hs#gmail.com";
				$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update("panacea.dr3#gmail.com_docs" );
			}
			
		$query = $this->mongo_db->where("from_user",$email."hs#gmail.com")->get("panacea.dr4#gmail.com_docs" );
			foreach ($query as $doc){
				if(isset($doc['notification_param']['Unique ID'])){
					$doc['notification_param']['Unique ID'] = str_replace($unique_id,$correct_id,$doc['notification_param']['Unique ID']);
				}
				$doc["from_user"] = $new_email."hs#gmail.com";
				$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update("panacea.dr4#gmail.com_docs" );
			}
			
		$query = $this->mongo_db->where("from_user",$email."hs#gmail.com")->get("panacea.dr5#gmail.com_docs" );
			foreach ($query as $doc){
				if(isset($doc['notification_param']['Unique ID'])){
					$doc['notification_param']['Unique ID'] = str_replace($unique_id,$correct_id,$doc['notification_param']['Unique ID']);
				}
				$doc["from_user"] = $new_email."hs#gmail.com";
				$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update("panacea.dr5#gmail.com_docs" );
			}
			
		$query = $this->mongo_db->where("from_user",$email."hs#gmail.com")->get("panacea.dr6#gmail.com_docs" );
			foreach ($query as $doc){
				if(isset($doc['notification_param']['Unique ID'])){
					$doc['notification_param']['Unique ID'] = str_replace($unique_id,$correct_id,$doc['notification_param']['Unique ID']);
				}
				$doc["from_user"] = $new_email."hs#gmail.com";
				$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update("panacea.dr6#gmail.com_docs" );
			}
			
		$query = $this->mongo_db->where("from_user",$email."hs#gmail.com")->get("panacea.dr7#gmail.com_docs" );
			foreach ($query as $doc){
				if(isset($doc['notification_param']['Unique ID'])){
					$doc['notification_param']['Unique ID'] = str_replace($unique_id,$correct_id,$doc['notification_param']['Unique ID']);
				}
				$doc["from_user"] = $new_email."hs#gmail.com";
				$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update("panacea.dr7#gmail.com_docs" );
			}
		
		//============================
			
			
		}
		
		exit();
		
		*/

		//=========================end of modification========
		
		//======================================================= END OF HS
		
		$offset = $per_page * ($page - 1);
		$query = $this->mongo_db->limit ( $per_page )->offset ( $offset )->get ( 'panacea_classes' );
		return $query;
	}
	
	public function sectionscount() {
		$count = $this->mongo_db->count ( 'panacea_sections' );
		return $count;
	}
	public function get_sections($per_page, $page) {
		$offset = $per_page * ($page - 1);
		$query = $this->mongo_db->limit ( $per_page )->offset ( $offset )->get ( 'panacea_sections' );
		return $query;
	}
	public function symptomscount() {
		$count = $this->mongo_db->count ( 'panacea_symptoms' );
		return $count;
	}
	public function get_symptoms($per_page, $page) {
		$offset = $per_page * ($page - 1);
		$query = $this->mongo_db->limit ( $per_page )->offset ( $offset )->get ( 'panacea_symptoms' );
		return $query;
	}
	public function get_reports_ehr($ad_no) {
		$query = $this->mongo_db->select ( array (
				'doc_data.widget_data',
				'doc_data.chart_data',
				'doc_data.external_attachments',
				'history' 
		) )->whereLike ( "doc_data.widget_data.page2.Personal Information.AD No", $ad_no )->limit(700)->get ( $this->screening_app_col );
		if ($query) {
			$query_request = $this->mongo_db->where ( "doc_data.widget_data.page1.Student Info.Unique ID", $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'] )->get ( $this->request_app_col );
			$result ['screening'] = $query;
			$result ['request'] = $query_request;
			return $result;
		} else {
			$result ['screening'] = false;
			$result ['request'] = false;
			return $result;
		}
	}
	public function get_reports_ehr_uid($uid) {
		
		$query = $this->mongo_db->select ( array ('doc_data.widget_data','doc_data.chart_data','doc_data.external_attachments','history') )->whereLike ( "doc_data.widget_data.page1.Personal Information.Hospital Unique ID", $uid )->limit(700)->get ("tswreis_screening_report_col_2020-2021");
		if ($query) {
			$query_request = $this->mongo_db->orderBy(array("history.0.time"=>-1))->where ( "doc_data.widget_data.page1.Student Info.Unique ID", strtoupper($uid) )->get ( $this->request_app_col );
			
			if(count($query_request) > 0){
				foreach($query_request as $req_ind => $req){
					unset($query_request[$req_ind]['doc_data']["notes_data"]);
					$notes_data = $this->mongo_db->where ("req_doc_id", $req['doc_properties']['doc_id'])->get ( $this->collections['panacea_req_notes'] );
										
					if(count($notes_data) > 0){
						$query_request[$req_ind]['doc_data']['notes_data'] = $notes_data[0]['notes_data'];
					}
				}
				
			}


			$bmi_value_table_addto_ehr = $this->mongo_db->where("doc_data.widget_data.page1.Student Details.Hospital Unique ID", $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'])->get('healthcare2017617145744625');

			$hb_value_table_addto_ehr = $this->mongo_db->where("doc_data.widget_data.page1.Student Details.Hospital Unique ID", $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'])->get($this->hb_app_col);
			
			$query_notes = $this->mongo_db->where ( "uid", strtoupper($uid) )->get ( $this->notes_col );
			
			
			
			if(isset($query[0]['doc_data']['widget_data']['page2']['Personal Information']['School Name'])){
				$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
				$school_details = $this->mongo_db->where ( "school_name", $query[0]['doc_data']['widget_data']['page2']['Personal Information']['School Name'] )->get ( $this->collections ['panacea_schools'] );
				
				if(count($school_details) > 0){
					$query_hs = $this->mongo_db->where ( "school_code", $school_details[0]['school_code'] )->get ( $this->collections ['panacea_health_supervisors'] );
				}else{
					$query_hs[0] = false;
				}
				$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			}else{
				$query_hs[0] = false;
			}
			
			
			$result ['screening'] = $query;
			$result ['request'] = $query_request;
			$result ['notes'] = $query_notes;
			$result ['hs'] = $query_hs[0];
			$result ['BMI_report'] = $bmi_value_table_addto_ehr;
			$result ['hb_report'] = $hb_value_table_addto_ehr;
			return $result;
		} else {
			$result ['screening'] = false;
			$result ['request'] = false;
			$result ['notes'] = false;
			$result ['hs'] = false;
			$result ['BMI_report'] = false;
			$result ['hb_report'] = FALSE;
			return $result;
		}
	}

	public function get_reports_ehr_uid_new_html_static_hs($uid) {
		
		$query = $this->mongo_db->select ( array ('doc_data','history') )->whereLike ( "doc_data.widget_data.page1.Personal Information.Hospital Unique ID", $uid )->limit(700)->get ( $this->screening_app_col_sw_2020_2021 );
		
		if(empty($query))
		{
			$query = $this->mongo_db->select ( array ('doc_data','history') )->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $_id)->get ( 'other_classes_screening_data_2019-2020' );
		}
		if ($query) {
			$query_request = $this->mongo_db->orderBy(array("history.0.time"=>-1))->where ( "doc_data.widget_data.page1.Student Info.Unique ID", strtoupper($uid) )->get ($this->request_app_col_static_html);
			
			if(count($query_request) > 0){
				foreach($query_request as $req_ind => $req){
					unset($query_request[$req_ind]['doc_data']["notes_data"]);
					$notes_data = $this->mongo_db->where ("req_doc_id", $req['doc_properties']['doc_id'])->get ( $this->collections['panacea_req_notes'] );
										
					if(count($notes_data) > 0){
						$query_request[$req_ind]['doc_data']['notes_data'] = $notes_data[0]['notes_data'];
					}
				}
				
			}

			$bmi_value_table_addto_ehr = $this->mongo_db->where("doc_data.widget_data.page1.Student Details.Hospital Unique ID", $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'])->get('healthcare2017617145744625');

			$hb_value_table_addto_ehr = $this->mongo_db->where("doc_data.widget_data.page1.Student Details.Hospital Unique ID", $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'])->get($this->hb_app_col);
			
			$query_notes = $this->mongo_db->where ( "uid", strtoupper($uid) )->get ( $this->notes_col );
			
			 
			
			if(isset($query[0]['doc_data']['widget_data']['page2']['Personal Information']['School Name'])){
				$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
				$school_details = $this->mongo_db->where ( "school_name", $query[0]['doc_data']['widget_data']['page2']['Personal Information']['School Name'] )->get ( $this->collections ['panacea_schools'] );
				
				if(count($school_details) > 0){
					$query_hs = $this->mongo_db->where ( "school_code", $school_details[0]['school_code'] )->get ( $this->collections ['panacea_health_supervisors'] );
				}else{
					$query_hs[0] = false;
				}
				$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			}else{
				$query_hs[0] = false;
			}
			
			
			$result ['screening'] = $query;
			$result ['request'] = $query_request;
			$result ['notes'] = $query_notes;
			$result ['hs'] = $query_hs[0];
			$result ['BMI_report'] = $bmi_value_table_addto_ehr;
			$result ['hb_report'] = $hb_value_table_addto_ehr;
			return $result;
		} else {
			$result ['screening'] = false;
			$result ['request'] = false;
			$result ['notes'] = false;
			$result ['hs'] = false;
			$result ['BMI_report'] = false;
			$result ['hb_report'] = false;
			return $result;
		}
	}
	public function get_students_uid($uid) {
		$query = $this->mongo_db->select(array())->where ( "doc_data.widget_data.page1.Personal Information.Hospital Unique ID", $uid )->get ( $this->screening_app_col );//$this->screening_app_col
		if ($query) {
			
			return $query [0];
		} else {
			return false;
		}
	}
	public function get_students_uid_for_print($uid) {

		$final_output = array();
		$doc = array();
		$doc_old = array();
		$screeningInfo = $this->mongo_db->where ( "doc_data.widget_data.page1.Personal Information.Hospital Unique ID", $uid )->get ( $this->screening_app_col );
		if(empty($screeningInfo))
		{
			$screeningInfo = $this->mongo_db->where ( "doc_data.widget_data.page1.Personal Information.Hospital Unique ID", $uid )->get ( "healthcare2016226112942701_divided_passed_out" );
		}
	
					foreach ( $screeningInfo as $screening )
					{

						$unique_id = $screening ['doc_data'] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'];

						$doc = $this->mongo_db->where ( 'doc_data.widget_data.page1.Student Info.Unique ID', $unique_id )->get ( $this->request_app_col_static_html);
						$doc_old = $this->mongo_db->where ( 'doc_data.widget_data.page1.Student Info.Unique ID', $unique_id )->get ( $this->request_app_col);
						// echo print_r($doc_old, true); 
						/*if(empty($doc))
						{
							$doc_old = $this->mongo_db->where ( 'doc_data.widget_data.page1.Student Info.Unique ID', $unique_id )->get ( $this->request_app_col);
						}*/

							$info ['student_info'] = $screening;
							$info ['request_info'] = array_merge($doc, $doc_old);
							
							
						array_push ( $final_output, $info );
					}
		return $final_output;
	}
	public function create_diagnostic($post) {
		$data = array (
				"dt_name" => $post ['dt_name'],
				"diagnostic_code" => $post ['diagnostic_code'],
				"diagnostic_name" => $post ['diagnostic_name'],
				"diagnostic_ph" => $post ['diagnostic_ph'],
				"diagnostic_mob" => $post ['diagnostic_mob'],
				"diagnostic_addr" => $post ['diagnostic_addr'] 
		);
		$query = $this->mongo_db->insert ( 'panacea_diagnostics', $data );
		return $query;
	}
	public function create_hospital($post) {
		$data = array (
				"dt_name" => $post ['dt_name'],
				"hospital_code" => $post ['hospital_code'],
				"hospital_name" => $post ['hospital_name'],
				"hospital_ph" => $post ['hospital_ph'],
				"hospital_mob" => $post ['hospital_mob'],
				"hospital_addr" => $post ['hospital_addr'] 
		);
		$query = $this->mongo_db->insert ( 'panacea_hospitals', $data );
		return $query;
	}
	public function update_student_data($doc, $doc_id) {
		// $query = $this->mongo_db->where ( "_id", $doc_id )->set ( $doc )->update ( "naresh" );
		$query = $this->mongo_db->where ( "_id", $doc_id )->set ( $doc )->update ( $this->screening_app_col );		
		return $query;
	}
	public function studentscount() {
		$count = $this->mongo_db->count ( $this->screening_app_col_sw_2020_2021 );
		return $count;
	}

	public function passedouts_studentscount() {
		$count = $this->mongo_db->count ( "screening_report_col_2020-2021_passed_out" );
		return $count;
	}

	public function get_students($per_page, $page) {
		$offset = $per_page * ($page - 1);
		$query = $this->mongo_db->orderBy ( array (
				'doc_data.widget_data.page1.Personal Information.Name' => 1 
		) )->select ( array (
				"doc_data.widget_data" 
		) )->limit ( $per_page )->offset ( $page - 1 )->get ( $this->screening_app_col );
		return $query;
	}
	public function get_all_students() {
		ini_set ( 'memory_limit', '1G' );
		
		// $merged_array = array("doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array('$in'=>array("Over Weight","Under Weight")));
		$count = $this->mongo_db->count ( $this->screening_app_col );
		// //log_message("debug","cccccccccccccccccccccccccccccccccccccccc".print_r($count,true));
		$per_page = 1000;
		$loop = $count / $per_page;
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			// //log_message("debug","ppppppppppppppppppppppppppppppppppppppppp".print_r($page,true));
			// //log_message("debug","oooooooooooooooooooooooooooooooooooooooooo".print_r($offset,true));
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true 
							) 
					),
					// array('$match' => $merged_array)
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$result = array_merge ( $result, $response ['result'] );
			// //log_message("debug","response=====1643==".print_r($response,true));
			// //log_message("debug","response=====1643==".print_r(count($response['result']),true));
			// //log_message("debug","ppppppppppppppppppppppppppppppppppppppppp".print_r($result,true));
		}
		//
		// //log_message("debug","response=====1643==".print_r(count($response['result']),true));
		//log_message ( "debug", "fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff" . print_r ( $result, true ) );
		
		// $query = $this->mongo_db->select(array("doc_data.widget_data"))->get($this->screening_app_col);
		// return $query;
		return $result;
	}
	public function hospitalscount() {
		$count = $this->mongo_db->count ( 'panacea_hospitals' );
		return $count;
	}
	public function get_hospitals($per_page, $page) {
		$offset = $per_page * ($page - 1);
		$query = $this->mongo_db->limit ( $per_page )->offset ( $offset )->get ( 'panacea_hospitals' );
		foreach ( $query as $hospitals => $hospital ) {
			$dt_name = $this->mongo_db->where ( '_id', new MongoId ( $hospital ['dt_name'] ) )->get ( 'panacea_district' );
			if (isset ( $hospital ['dt_name'] )) {
				$query [$hospitals] ['dt_name'] = $dt_name [0] ['dt_name'];
			} else {
				$query [$hospitals] ['dt_name'] = "No state selected";
			}
		}
		
		return $query;
	}
	public function diagnosticscount() {
		$count = $this->mongo_db->count ( 'panacea_diagnostics' );
		return $count;
	}
	public function get_diagnostics($per_page, $page) {
		$offset = $per_page * ($page - 1);
		$query = $this->mongo_db->limit ( $per_page )->offset ( $offset )->get ( 'panacea_diagnostics' );
		foreach ( $query as $diagnostics => $dia ) {
			$dt_name = $this->mongo_db->where ( '_id', new MongoId ( $dia ['dt_name'] ) )->get ( 'panacea_district' );
			if (isset ( $dia ['dt_name'] )) {
				$query [$diagnostics] ['dt_name'] = $dt_name [0] ['dt_name'];
			} else {
				$query [$diagnostics] ['dt_name'] = "No state selected";
			}
		}
		return $query;
	}
	public function empcount() {
		$count = $this->mongo_db->count ( 'panacea_emp' );
		return $count;
	}
	public function get_emp($per_page, $page) {
		$offset = $per_page * ($page - 1);
		$query = $this->mongo_db->limit ( $per_page )->offset ( $offset )->get ( 'panacea_emp' );
		return $query;
	}
	public function insert_student_data($doc_data, $history, $doc_properties) {
		ini_set ( 'memory_limit', "2G" );
		// $query = $this->mongo_db->getWhere("naresh", array('doc_data.widget_data.page2.Personal Information.AD No' => $doc_data['widget_data']['page2']['Personal Information']['AD No'],'doc_data.widget_data.page2.Personal Information.School Name'=> $doc_data['widget_data']['page2']['Personal Information']['School Name']));
		$query = $this->mongo_db->getWhere ( $this->screening_app_col_sw_2020_2021, array (
				'doc_data.widget_data.page2.Personal Information.AD No' => $doc_data ['widget_data'] ['page2'] ['Personal Information'] ['AD No'],
				'doc_data.widget_data.page2.Personal Information.School Name' => $doc_data ['widget_data'] ['page2'] ['Personal Information'] ['School Name'] 
		) );
		
		// $query = $this->mongo_db->getWhere("form_data_sample_copy_1", array('doc_data.widget_data.page2.Physical Info.ID number' => $doc_data['widget_data']['page2']['Physical Info']['ID number'],'doc_data.widget_data.page2.Physical Info.School'=>'TSWRS/JC(G)-JADCHERLA'));
		
		$result = json_decode ( json_encode ( $query ), FALSE );
		if (! $result) {
			$form_data = array ();
			$form_data ['doc_data'] = $doc_data;
			$form_data ['doc_properties'] = $doc_properties;
			$form_data ['history'] = $history;
			
			// $this->mongo_db->insert("naresh",$form_data);
			
			$this->mongo_db->insert ( $this->screening_app_col_sw_2020_2021, $form_data );
			
			// $this->mongo_db->insert("form_data_sample_copy_1",$form_data);
		} else {
			$form_data = array ();
			$form_data ['doc_data'] = $doc_data;
			$form_data ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['AD No'] = $doc_data ['widget_data'] ['page2'] ['Personal Information'] ['AD No'] . 'A';
			$form_data ['doc_properties'] = $doc_properties;
			$form_data ['history'] = $history;
			
			// $this->mongo_db->insert("naresh",$form_data);
			$this->mongo_db->insert ( $this->screening_app_col_sw_2020_2021, $form_data );
			
			// $this->mongo_db->insert("form_data_sample_copy_1",$form_data);
		}
	}

	/*public function get_all_symptoms_identifier($date = false, $request_duration = "Daily", $dt_name = "All", $school_name = "All",$request_pie_status = "All")
	{
		$query = [ ];
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		$dates = $this->get_start_end_date ( $today_date, $request_duration );
		$query = $this->get_all_symptoms_docs_identifier ( $dates ['today_date'], $dates ['end_date'],false,$request_pie_status );
		log_message('error','query_report=============548'.print_r($query,TRUE));
		$doc_query = array ();
		if ($school_name == "All") {
			if ($dt_name != "All") {
				foreach ( $query as $doc ) {
					$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
					$screening_doc = $this->mongo_db->select ( array (
					'doc_data.widget_data.page2' 
					) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
					if (isset ( $screening_doc ) && ! empty ( $screening_doc ) && (count ( $screening_doc ) > 0)) {
						if (strtolower ( $screening_doc [0] ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['District'] ) == strtolower ( $dt_name )) {
							array_push ( $doc_query, $doc );
						}
					}
				}
				$query = $doc_query;
			} else {
			}
		} else {
			foreach ( $query as $doc ) {
				
				$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
				$screening_doc = $this->mongo_db->select ( array (
						'doc_data.widget_data.page2' 
				) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
				
				if (isset ( $screening_doc ) && ! empty ( $screening_doc ) && (count ( $screening_doc ) > 0)) {
					if (strtolower ( $screening_doc [0] ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['School Name'] ) == strtolower ( $school_name )) {
						array_push ( $doc_query, $doc );
						log_message('error','doc_query=============548'.print_r($doc_query,TRUE));
					}
				}
			}
			$query = $doc_query;
		}
		
		$prob_arr = [ ];
		foreach ( $query as $doc ) {
			
			$identifiers = $doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info']['Normal'];
			log_message('error'."identifier==============1418".print_r($identifiers,TRUE));
			/*foreach ($identifiers as $identifier){

				if (isset ( $prob_arr [$identifier] )) {
						$prob_arr [$identifier] ++;
					} else {
						$prob_arr [$identifier] = 1;
					}
																
			}*/
			/*if (isset ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] ['Identifier'] )) {
				$problems = $doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] ['Identifier'];
				foreach ( $problems as $problem ) {
					if (isset ( $prob_arr [$problem] )) {
						$prob_arr [$problem] ++;
					} else {
						$prob_arr [$problem] = 1;
					}
				}
			}
		}
		
		//log_message("debug","schooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo".print_r($prob_arr,true));
		$final_values = [ ];
		foreach ( $prob_arr as $prob => $count ) {
			//log_message("debug","schooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo".print_r($prob,true));
			//log_message("debug","ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc".print_r($count,true));
			$result ['label'] = $prob;
			$result ['value'] = $count;
			array_push ( $final_values, $result );
		}
		// ////log_message("debug","fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff".print_r($final_values,true));
		
		return $final_values;
	}*/

	public function get_all_symptoms_old_dash($date = false, $request_duration = "Monthly", $dt_name = "All", $school_name = "All") {
		$query = [ ];
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		$dates = $this->get_start_end_date ( $today_date, $request_duration );
		$query = $this->get_all_symptoms_docs_old_dash ( $dates ['today_date'], $dates ['end_date'] );
		
		$doc_query = array ();
		if ($school_name == "All") {
			if ($dt_name != "All") {
				foreach ( $query as $doc ) {
					//$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
					//$screening_doc = $this->mongo_db->select(array('doc_data.widget_data.page2'))->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
					if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['District'] ['field_ref']) == strtolower ( $dt_name )) {
							array_push ( $doc_query, $doc );
						}
					}
				}
				$query = $doc_query;
			} else {
			}
		} else {
			foreach ( $query as $doc ) {
				
				//$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
				//$screening_doc = $this->mongo_db->select(array('doc_data.widget_data.page2'))->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
				
				if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
					if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['School Name'] ['field_ref']) == strtolower ( $school_name )) {
						array_push ( $doc_query, $doc );
					}
				}
			}
			$query = $doc_query;
		}
		
		$prob_arr = [ ];
		foreach ( $query as $doc ) {
			if (isset ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] ['Identifier'] )) {
				$problems = $doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] ['Identifier'];
				foreach ( $problems as $problem ) {
					if (isset ( $prob_arr [$problem] )) {
						$prob_arr [$problem] ++;
					} else {
						$prob_arr [$problem] = 1;
					}
				}
			}
		}
		
		// //log_message("debug","schooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo".print_r($prob_arr,true));
		$final_values = [ ];
		foreach ( $prob_arr as $prob => $count ) {
			// //log_message("debug","schooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo".print_r($prob,true));
			// //log_message("debug","ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc".print_r($count,true));
			$result ['label'] = $prob;
			$result ['value'] = $count;
			array_push ( $final_values, $result );
		}
		// //log_message("debug","fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff".print_r($final_values,true));
		
		return $final_values;
	}

	public function get_all_symptoms($date = false, $request_duration = "Daily", $dt_name = "All", $school_name = "All",$request_pie_status = "All",$student_type = false,$student_age = false) {
		$query = [ ];
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		$dates = $this->get_start_end_date ( $today_date, $request_duration );
		$query = $this->get_all_symptoms_docs ( $dates ['today_date'], $dates ['end_date'],false,$request_pie_status,$student_type,$student_age );
		
		$doc_query = array ();
		if ($school_name == "All") {
			if ($dt_name != "All") {
				foreach ( $query as $doc ) {
					$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
					$screening_doc = $this->mongo_db->select ( array (
					'doc_data.widget_data.page2' 
					) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
					if (isset ( $screening_doc ) && ! empty ( $screening_doc ) && (count ( $screening_doc ) > 0)) {
						if (strtolower ( $screening_doc [0] ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['District'] ) == strtolower ( $dt_name )) {
							array_push ( $doc_query, $doc );
						}
					}
				}
				$query = $doc_query;
			} else {
			}
		} else {
			foreach ( $query as $doc ) {
				
				$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
				$screening_doc = $this->mongo_db->select ( array (
						'doc_data.widget_data.page2' 
				) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
				
				if (isset ( $screening_doc ) && ! empty ( $screening_doc ) && (count ( $screening_doc ) > 0)) {
					if (strtolower ( $screening_doc [0] ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['School Name'] ) == strtolower ( $school_name )) {
						array_push ( $doc_query, $doc );
					}
				}
			}
			$query = $doc_query;
		}
		
		$prob_arr = [ ];
		foreach ( $query as $doc ) {
			//log_message("debug","iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii".print_r($doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] ['Identifier'],true));
			if (isset ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] ['Identifier'] )) {
				$problems = $doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] ['Identifier'];
				foreach ( $problems as $problem ) {
					if (isset ( $prob_arr [$problem] )) {
						$prob_arr [$problem] ++;
					} else {
						$prob_arr [$problem] = 1;
					}
				}
			}
		}
		
		//log_message("debug","schooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo".print_r($prob_arr,true));
		$final_values = [ ];
		foreach ( $prob_arr as $prob => $count ) {
			//log_message("debug","schooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo".print_r($prob,true));
			//log_message("debug","ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc".print_r($count,true));
			$result ['label'] = $prob;
			$result ['value'] = $count;
			array_push ( $final_values, $result );
		}
		// ////log_message("debug","fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff".print_r($final_values,true));
		
		return $final_values;
	}
	
	public function get_absent_pie_schools_data($date = FALSE, $dt_name = "All")
	{
		// Variables
		$all_schools               = array();
		$all_schools_district      = array();
		$all_schools_name      	   = array();
		
		$submitted_schools 	       = array();
		$submitted_school_district = array();
		$submitted_school_name     = array();
		$not_submitted_schools	   = array();
		$schools_data              = array();
		$not_submitted_dist        = array();
		
		$all_schools_mobile        = array();
		$all_schools_cpn      	   = array();
		$submitted_school_mob 	   = array();
		$submitted_school_person   = array();
		$not_submitted_school_mob 	   = array();
		$not_submitted_school_person   = array();
		
		$schools_list = $this->get_all_schools();
		
		foreach($schools_list as $school_data)
		{
			array_push($all_schools_district,$school_data['dt_name']);
			array_push($all_schools_name,$school_data['school_name']);
			$all_schools_mobile[$school_data['school_name']] = $school_data['school_mob'];
			$all_schools_cpn[$school_data['school_name']] = $school_data['contact_person_name'];
		}
		
		$all_schools['district'] = $all_schools_district; 
		$all_schools['school']   = $all_schools_name; 
		
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		$query = $this->mongo_db->select ( array (
				"doc_data.widget_data" 
		) )->whereLike ( 'history.last_stage.time', $today_date )->get ( $this->absent_app_col );
		
		//log_message('debug','$schools_data=====get_absent_pie_schools_data=====716=='.print_r($query,true));
		//log_message('debug','$schools_data=====get_absent_pie_schools_data=====717=='.print_r($today_date,true));
		
		foreach ( $query as $doc ) {
			    if(!in_array($doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School'],$submitted_school_name))
				{
					array_push ( $submitted_school_district,$doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['District'] );
					array_push ( $submitted_school_name,$doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School'] );
					if(isset($all_schools_mobile[$doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School']])){
						array_push ( $submitted_school_mob,$all_schools_mobile[$doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School']] );
						array_push ( $submitted_school_person,$all_schools_cpn[$doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School']] );
					}else{
						array_push ( $submitted_school_mob,"" );
						array_push ( $submitted_school_person,"" );
					}
					
		        }
		}
		
		$submitted_schools['district']     = $submitted_school_district;
		$submitted_schools['school']       = $submitted_school_name;
		$submitted_schools['mobile']       = $submitted_school_mob;
		$submitted_schools['person_name']  = $submitted_school_person;
		
		$not_submitted_schools['district'] = array();
		$not_submitted_schools['school']   = array_values(array_diff($all_schools['school'],$submitted_schools['school']));
		foreach($not_submitted_schools['school'] as $index => $school_name)
		{
		   $dist_array    = explode(",",$school_name);
		   $dist_array[1] = strtolower($dist_array[1]);
		   array_push($not_submitted_dist,ucfirst($dist_array[1]));
		   
			if(isset($all_schools_mobile[$school_name])){
				array_push ( $not_submitted_school_mob,$all_schools_mobile[$school_name] );
				array_push ( $not_submitted_school_person,$all_schools_cpn[$school_name] );
			}else{
				array_push ( $not_submitted_school_mob,"" );
				array_push ( $not_submitted_school_person,"" );
			}
		   
		}
		$not_submitted_schools['district']   = $not_submitted_dist;
		$not_submitted_schools['mobile']       = $not_submitted_school_mob;
		$not_submitted_schools['person_name']  = $not_submitted_school_person;
		
		
		$schools_data['submitted']     		 = $submitted_schools;
		$schools_data['submitted_count']     = count($submitted_schools['school']);
		$schools_data['not_submitted'] 		 = $not_submitted_schools;
		$schools_data['not_submitted_count'] = count($not_submitted_schools['school']);
		
		//log_message('debug','$schools_data=====get_absent_pie_schools_data=====735=='.print_r($schools_data,true));
		//log_message('debug','$schools_data=====get_absent_pie_schools_data=====736=='.print_r(gettype($schools_data['submitted']),true));
		
		return $schools_data;
	}
	
	public function get_all_absent_data($date = FALSE, $dt_name = "All", $school_name = "All") {
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		$query = $this->mongo_db->select ( array (
				"doc_data.widget_data" 
		) )->whereLike ( 'history.last_stage.time', $today_date )->get ( $this->absent_app_col );

		$doc_query = array ();
		if ($school_name == "All") {
			if ($dt_name != "All") {
				foreach ( $query as $doc ) {
					if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['District'] ) == strtolower ( $dt_name )) {
						array_push ( $doc_query, $doc );
					}
				}
				$query = $doc_query;
			} else {
			}
		} else {
			foreach ( $query as $doc ) {
				
				if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School'] ) == strtolower ( $school_name )) {
					array_push ( $doc_query, $doc );
				}
			}
			$query = $doc_query;
			if(empty($query))
			{
				return FALSE;
			}
		}
		
		$absent = 0;
		$sick = 0;
		$restRoom = 0;
		$r2h = 0;
		// $attended = 0;
		foreach ( $query as $report ) {
			$absent = $absent + intval ( $report ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Absent'] );
			$sick = $sick + intval ( $report ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Sick'] );
			$restRoom = $restRoom + intval ( $report ['doc_data'] ['widget_data'] ['page2'] ['Attendence Details'] ['RestRoom'] );
			$r2h = $r2h + intval ( $report ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['R2H'] );
			// $attended = $attended + intval($report['doc_data']['widget_data']['page1']['Attendence Details']['Attended']);
		}
		
		$requests = [ ];
		
		// $request['label'] = 'ATTENDED';
		// $request['value'] = $attended;
		// array_push($requests,$request);
		
		$request ['label'] = 'ABSENT REPORT';
		$request ['value'] = $absent;
		array_push ( $requests, $request );
		
		/*$request ['label'] = 'SICK CUM ATTENDED';
		$request ['value'] = $sick;
		array_push ( $requests, $request );*/
		
		//$request ['label'] = 'REST ROOM IN MEDICATION';
		$request ['label'] = 'IN WELLNESS CENTER';
		$request ['value'] = $restRoom;
		array_push ( $requests, $request );
		
		$request ['label'] = 'REFER TO HOSPITAL';
		$request ['value'] = $r2h;
		array_push ( $requests, $request );
		
		return $requests;
			
		
	}
	
	
	public function get_all_sanitation_report_data($date = FALSE, $dt_name = "All", $school_name = "All") {
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		$query = $this->mongo_db->select ( array (
				"doc_data.widget_data" 
		) )->whereLike ( 'history.last_stage.time', $today_date )->get ($this->sanitation_report_app_col );
		
		$doc_query = array ();
		if ($school_name == "All") {
			if ($dt_name != "All") {
				foreach ( $query as $doc ) {
					if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page6'] ['School Information'] ['District'] ) == strtolower ( $dt_name )) {
						array_push ( $doc_query, $doc );
					}
				}
				$query = $doc_query;
			} else {
			}
		} else {
			foreach ( $query as $doc ) {
				
				if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page6'] ['School Information'] ['School Name'] ) == strtolower ( $school_name )) {
					array_push ( $doc_query, $doc );
				}
			}
			$query = $doc_query;
		}
		
		$handwash         = 0;
		$kitchen          = 0;
		$waste_management = 0;
		$cleanliness      = 0;
		$food             = 0;
		// $attended = 0;
		foreach ( $query as $report ) {
			$absent = $absent + intval ( $report ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Absent'] );
			$sick = $sick + intval ( $report ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Sick'] );
			$restRoom = $restRoom + intval ( $report ['doc_data'] ['widget_data'] ['page2'] ['Attendence Details'] ['RestRoom'] );
			$r2h = $r2h + intval ( $report ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['R2H'] );
			// $attended = $attended + intval($report['doc_data']['widget_data']['page1']['Attendence Details']['Attended']);
		}
		
		$requests = [ ];
		
		$request ['label'] = 'Handwash';
		$request ['value'] = $absent;
		array_push ( $requests, $request );
		
		$request ['label'] = 'Kitchen';
		$request ['value'] = $sick;
		array_push ( $requests, $request );
		
		$request ['label'] = 'Waste Management';
		$request ['value'] = $restRoom;
		array_push ( $requests, $request );
		
		$request ['label'] = 'Cleanliness';
		$request ['value'] = $r2h;
		array_push ( $requests, $request );
		
		$request ['label'] = 'Food';
		$request ['value'] = $r2h;
		array_push ( $requests, $request );
		
		return $requests;
	}
	
	public function drilldown_absent_to_districts($data, $date, $dt_name = "All", $school_name = "All") {
		$obj_data = json_decode ( $data, true );
		$type = $obj_data ['label'];
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		ini_set ( 'memory_limit', '1G' );
		switch ($type) {
			case "ABSENT REPORT" :
				
				ini_set ( 'memory_limit', '1G' );
				$query = $this->mongo_db->select ( array (
						"doc_data.widget_data" 
				) )->whereLike ( 'history.last_stage.time', $today_date )->get ( $this->absent_app_col );
				
				$doc_query = array ();
				if ($school_name == "All") 
				{
					if ($dt_name != "All") 
					{
						foreach ( $query as $doc ) 
						{
							if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['District'] ) == strtolower ( $dt_name )) 
							{
								array_push ( $doc_query, $doc );
							}
						}
						$query = $doc_query;
					} 
					else 
					{
						
					}
				} 
				else 
				{
					foreach ( $query as $doc ) 
					{
						
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School'] ) == strtolower ( $school_name )) 
						{
							array_push ( $doc_query, $doc );
						}
					}
					$query = $doc_query;
				}
				
				return $this->get_drilling_attendance_districts_prepare_pie_array ($query,"Absent");
				break;
			
			/*case "SICK CUM ATTENDED" :
				ini_set ( 'memory_limit', '1G' );
				$query = $this->mongo_db->select ( array (
						"doc_data.widget_data" 
				) )->whereLike ( 'history.last_stage.time', $today_date )->get ( $this->absent_app_col );
				
				$doc_query = array ();
				if ($school_name == "All") {
					if ($dt_name != "All") {
						foreach ( $query as $doc ) {
							if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['District'] ) == strtolower ( $dt_name )) {
								array_push ( $doc_query, $doc );
							}
						}
						$query = $doc_query;
					} else {
					}
				} else {
					foreach ( $query as $doc ) {
						
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School'] ) == strtolower ( $school_name )) {
							array_push ( $doc_query, $doc );
						}
					}
					$query = $doc_query;
				}
				
				return $this->get_drilling_attendance_districts_prepare_pie_array ($query,"Sick");
				break;*/
			
			case "IN WELLNESS CENTER" :
				
				ini_set ( 'memory_limit', '1G' );
				$query = $this->mongo_db->select ( array (
						"doc_data.widget_data" 
				) )->whereLike ( 'history.last_stage.time', $today_date )->get ( $this->absent_app_col );
				
				$doc_query = array ();
				if ($school_name == "All") {
					if ($dt_name != "All") {
						foreach ( $query as $doc ) {
							if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['District'] ) == strtolower ( $dt_name )) {
								array_push ( $doc_query, $doc );
							}
						}
						$query = $doc_query;
					} else {
					}
				} else {
					foreach ( $query as $doc ) {
						
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School'] ) == strtolower ( $school_name )) {
							array_push ( $doc_query, $doc );
						}
					}
					$query = $doc_query;
				}
				
				return $this->get_drilling_attendance_districts_prepare_pie_array ($query,"RestRoom");
				break;
			
			case "REFER TO HOSPITAL" :
				
				ini_set ( 'memory_limit', '1G' );
				$query = $this->mongo_db->select ( array (
						"doc_data.widget_data" 
				) )->whereLike ( 'history.last_stage.time', $today_date )->get ( $this->absent_app_col );
				
				$doc_query = array ();
				if ($school_name == "All") {
					if ($dt_name != "All") {
						foreach ( $query as $doc ) {
							if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['District'] ) == strtolower ( $dt_name )) {
								array_push ( $doc_query, $doc );
							}
						}
						$query = $doc_query;
					} else {
					}
				} else {
					foreach ( $query as $doc ) {
						
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School'] ) == strtolower ( $school_name )) {
							array_push ( $doc_query, $doc );
						}
					}
					$query = $doc_query;
				}
				
				return $this->get_drilling_attendance_districts_prepare_pie_array ($query,"R2H");
				break;
			
			default :
				;
				break;
		}
	}
	public function get_drilling_absent_schools($data, $date, $dt_name = "All", $school_name = "All") {
		$obj_data = json_decode ( $data, true );
		//log_message("error","aaaaaaaaaaaaasfsdadsvadsfvdfvfdvfdvfd".print_r($obj_data,true));
		ini_set ( 'memory_limit', '1G' );
		$type = $obj_data [0];
		$dist = strtolower ( $obj_data [1] );
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		// ////log_message("debug","tttttttttttttttttttttttttttttttttttttttttttttt".print_r($type,true));
		switch ($type) {
			case "ABSENT REPORT" :
				
				ini_set ( 'memory_limit', '1G' );
				$query = $this->mongo_db->select ( array (
						"doc_data.widget_data" 
				) )->whereLike ( 'history.last_stage.time', $today_date )->get ( $this->absent_app_col );
				
				$doc_query = array ();
				if ($school_name == "All") {
					if ($dt_name != "All") {
						foreach ( $query as $doc ) {
							if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['District'] ) == strtolower ( $dt_name )) {
								array_push ( $doc_query, $doc );
							}
						}
						$query = $doc_query;
					} else {
					}
				} else {
					foreach ( $query as $doc ) {
						
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School'] ) == strtolower ( $school_name )) {
							array_push ( $doc_query, $doc );
						}
					}
					$query = $doc_query;
				}
				
				return $this->get_drilling_absent_schools_prepare_pie_array ( $query, $dist,"Absent");
				
				break;
			/*case "SICK CUM ATTENDED" :
				
				ini_set ( 'memory_limit', '1G' );
				$query = $this->mongo_db->select ( array (
						"doc_data.widget_data" 
				) )->whereLike ( 'history.last_stage.time', $today_date )->get ( $this->absent_app_col );
				
				$doc_query = array ();
				if ($school_name == "All") {
					if ($dt_name != "All") {
						foreach ( $query as $doc ) {
							if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['District'] ) == strtolower ( $dt_name )) {
								array_push ( $doc_query, $doc );
							}
						}
						$query = $doc_query;
					} else {
					}
				} else {
					foreach ( $query as $doc ) {
						
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School'] ) == strtolower ( $school_name )) {
							array_push ( $doc_query, $doc );
						}
					}
					$query = $doc_query;
				}
				
				return $this->get_drilling_absent_schools_prepare_pie_array ( $query, $dist,"Sick");
				
				break;*/
			
			case "IN WELLNESS CENTER" :
				
				ini_set ( 'memory_limit', '1G' );
				$query = $this->mongo_db->select ( array (
						"doc_data.widget_data" 
				) )->whereLike ( 'history.last_stage.time', $today_date )->get ( $this->absent_app_col );
				$doc_query = array ();
				if ($school_name == "All") {
					if ($dt_name != "All") {
						foreach ( $query as $doc ) {
							if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['District'] ) == strtolower ( $dt_name )) {
								array_push ( $doc_query, $doc );
							}
						}
						$query = $doc_query;
					} else {
					}
				} else {
					foreach ( $query as $doc ) {
						
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School'] ) == strtolower ( $school_name )) {
							array_push ( $doc_query, $doc );
						}
					}
					$query = $doc_query;
				}
				
				return $this->get_drilling_absent_schools_prepare_pie_array ( $query, $dist,"RestRoom" );
				
				break;
			
			case "REFER TO HOSPITAL" :
				
				ini_set ( 'memory_limit', '1G' );
				$query = $this->mongo_db->select ( array (
						"doc_data.widget_data" 
				) )->whereLike ( 'history.last_stage.time', $today_date )->get ( $this->absent_app_col );
				$doc_query = array ();
				if ($school_name == "All") {
					if ($dt_name != "All") {
						foreach ( $query as $doc ) {
							if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['District'] ) == strtolower ( $dt_name )) {
								array_push ( $doc_query, $doc );
							}
						}
						$query = $doc_query;
					} else {
					}
				} else {
					foreach ( $query as $doc ) {
						
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School'] ) == strtolower ( $school_name )) {
							array_push ( $doc_query, $doc );
						}
					}
					$query = $doc_query;
				}
				
				return $this->get_drilling_absent_schools_prepare_pie_array ( $query, $dist,"R2H");
				
				break;
			
			default :
				;
				break;
		}
	}
	public function get_drilling_absent_students($data, $date, $dt_name = "All", $school_name = "All") {
		$obj_data = json_decode ( $data, true );
		$type = $obj_data ['0'];
		$school_name = strtolower ( $obj_data ['1'] );
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		ini_set ( 'memory_limit', '10G' );
		
		switch ($type) {
			case "ABSENT REPORT" :
				
				$query = $this->mongo_db->select ( array (
						"doc_data.widget_data" 
				) )->whereLike ( 'history.last_stage.time', $today_date )->get ( $this->absent_app_col );
				
				$doc_query = array ();
				if ($school_name == "All") {
					if ($dt_name != "All") {
						foreach ( $query as $doc ) {
							if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['District'] ) == strtolower ( $dt_name )) {
								array_push ( $doc_query, $doc );
							}
						}
						$query = $doc_query;
					} else {
					}
				} else {
					foreach ( $query as $doc ) {
						
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School'] ) == strtolower ( $school_name )) {
							array_push ( $doc_query, $doc );
						}
					}
					$query = $doc_query;
				}
				
				return $this->get_drilling_absent_students_prepare_pie_array ( $query, $school_name, $type );
				
				break;
			/*case "SICK CUM ATTENDED" :
			ini_set ( 'memory_limit', '5G' );
				$query = $this->mongo_db->select ( array (
						"doc_data.widget_data" 
				) )->whereLike ( 'history.last_stage.time', $today_date )->get ( $this->absent_app_col );
				
				$doc_query = array ();
				if ($school_name == "All") {
					if ($dt_name != "All") {
						foreach ( $query as $doc ) {
							if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['District'] ) == strtolower ( $dt_name )) {
								array_push ( $doc_query, $doc );
							}
						}
						$query = $doc_query;
					} else {
					}
				} else {
					foreach ( $query as $doc ) {
						
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School'] ) == strtolower ( $school_name )) {
							array_push ( $doc_query, $doc );
						}
					}
					$query = $doc_query;
				}
				
				return $this->get_drilling_absent_students_prepare_pie_array ( $query, $school_name, $type );
				
				break;*/
			
			case "IN WELLNESS CENTER" :
			ini_set ( 'memory_limit', '5G' );
				$query = $this->mongo_db->select ( array (
						"doc_data.widget_data" 
				) )->whereLike ( 'history.last_stage.time', $today_date )->get ( $this->absent_app_col );
				
				$doc_query = array ();
				if ($school_name == "All") {
					if ($dt_name != "All") {
						foreach ( $query as $doc ) {
							if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['District'] ) == strtolower ( $dt_name )) {
								array_push ( $doc_query, $doc );
							}
						}
						$query = $doc_query;
					} else {
					}
				} else {
					foreach ( $query as $doc ) {
						
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School'] ) == strtolower ( $school_name )) {
							array_push ( $doc_query, $doc );
						}
					}
					$query = $doc_query;
				}
				
				return $this->get_drilling_absent_students_prepare_pie_array ( $query, $school_name, $type );
				
				break;
			
			case "REFER TO HOSPITAL" :
			ini_set ( 'memory_limit', '5G' );
				$query = $this->mongo_db->select ( array (
						"doc_data.widget_data" 
				) )->whereLike ( 'history.last_stage.time', $today_date )->get ( $this->absent_app_col );
				
				$doc_query = array ();
				if ($school_name == "All") {
					if ($dt_name != "All") {
						foreach ( $query as $doc ) {
							if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['District'] ) == strtolower ( $dt_name )) {
								array_push ( $doc_query, $doc );
							}
						}
						$query = $doc_query;
					} else {
					}
				} else {
					foreach ( $query as $doc ) {
						
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School'] ) == strtolower ( $school_name )) {
							array_push ( $doc_query, $doc );
						}
					}
					$query = $doc_query;
				}
				
				return $this->get_drilling_absent_students_prepare_pie_array ( $query, $school_name, $type );
				
				break;
			
			default :
				;
				break;
		}
	}
	public function get_drilling_absent_students_docs($_id_array) {
		$docs = [ ];
		
		ini_set ( 'memory_limit', '512M' );
		
		foreach ( $_id_array as $_id ) {
			$query = $this->mongo_db->select ( array (
					'doc_data.widget_data.page1',
					'doc_data.widget_data.page2' 
			) )->where/* Like */ ( "doc_data.widget_data.page1.Personal Information.Hospital Unique ID", $_id )->get ( $this->screening_app_col );
			if ($query)
				array_push ( $docs, $query [0] );
		}
		//log_message('debug','drill_down_absent_to_students_load_ehr=====docs=====1356====='.print_r($docs,true));
		// ////log_message("debug","abbbbbbbbbbbbbbbbbbbbbbbbbb____________arrrrrrrrrrrrrrrrrrrrrrrrr".print_r($_id_array,true));
		// $query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_data.widget_data.page2'))->whereIn("doc_data.widget_data.page1.Personal Information.Hospital Unique ID", $_id_array)->get($this->screening_app_col);
		// ////log_message("debug","qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq".print_r($query,true));
		
		return $docs;
	}
	public function get_drilling_attendance_districts_prepare_pie_array($query,$category) {
		$requests = [ ];
		
		$dist_list = $this->get_all_district();
		
		$dist_arr = [ ];
		foreach ( $dist_list as $dist ) {
			array_push ( $dist_arr, $dist ['dt_name'] );
		}
		
		foreach ( $dist_arr as $districts ) 
		{
			$request ['label'] = $districts;
			$count = 0;
			if ($query) {
				foreach ( $query as $dist ) {
					if (isset ( $dist ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['District'] )) {
						if (strtolower ( $dist ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['District'] ) == strtolower ( $districts )) {
							//$count ++;
							if($category=="RestRoom")
							{
								$count = $count + (int) $dist ['doc_data'] ['widget_data'] ['page2'] ['Attendence Details'] [$category];
							}
							else
							{
								$count = $count + (int) $dist ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] [$category];
							}
							
						}
					}
				}
			}
			$request ['value'] = $count;
			array_push ( $requests, $request );
		}
		
		return $requests;
	}
	public function get_drilling_absent_schools_prepare_pie_array($query, $dist,$category) {
		// ////log_message("debug","2222222222222222222222222222222222222222222222222".print_r($query,true));
		$search_result = [ ];
		$count = 0;
		if ($query) {
			foreach ( $query as $doc ) {
				// ////log_message("debug","dddddddddddddddddddddddddddddddddddddddddddddddddd".print_r($doc,true));
				if (isset ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['District'] )) {
					if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['District'] ) == $dist) {
						array_push ( $search_result, $doc );
					}
				}
			}
			
			$request = [ ];
			foreach ( $search_result as $doc ) 
			{
				if($category=="RestRoom")
				{
					$request[$doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School']] = (int) $doc ['doc_data'] ['widget_data'] ['page2'] ['Attendence Details'] [$category];
				}
				else
				{
					$request[$doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School']] = (int) $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] [$category];
				}
			}
			
			
			$final_values = [ ];
			foreach ( $request as $school => $count ) 
			{
				$result ['label'] = $school;
				$result ['value'] = $count;
				array_push ( $final_values, $result );
			}
			
			
			
			return $final_values;
		}
	}
	public function get_drilling_absent_students_prepare_pie_array($query, $school_name, $type) {
		$search_result = [ ];
		$count = 0;
		if ($query) {
			foreach ( $query as $doc ) {
				////log_message("debug","dddddddddddddddddddddddddddddddddddddddddddddddddd".print_r($doc,true));
				if (isset ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School'] )) {
					if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School'] ) == $school_name) {
						array_push ( $search_result, $doc );
					}
				}
			}
			// ////log_message("debug","sssssssssssssssssssssssssssssssssssssssssssssssssssssssssss".print_r($search_result,true));
			$request = [ ];
			$UI_arr = [ ];
			foreach ( $search_result as $doc ) {
				switch ($type) {
					case "ABSENT REPORT" :
						$absent_id_arr = explode ( ",", $doc ['doc_data'] ['widget_data'] ['page2'] ['Attendence Details'] ['Absent UID'] );
						////log_message("debug","aaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbarrrrrrrrrrrrrrrrrrrrrrr".print_r($absent_id_arr,true));
						$UI_arr = array_merge ( $UI_arr, $absent_id_arr );
						////log_message("debug","mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm".print_r($UI_arr,true));
						
						break;
					/*case "SICK CUM ATTENDED" :
						
						$absent_id_arr = explode ( ",", $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Sick UID'] );
						// ////log_message("debug","aaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbarrrrrrrrrrrrrrrrrrrrrrr".print_r($absent_id_arr,true));
						$UI_arr = array_merge ( $UI_arr, $absent_id_arr );
						
						break;*/
					
					case "IN WELLNESS CENTER" :
						
						$absent_id_arr = explode ( ",", $doc ['doc_data'] ['widget_data'] ['page2'] ['Attendence Details'] ['RestRoom UID'] );
						// //log_message("debug","aaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbarrrrrrrrrrrrrrrrrrrrrrr".print_r($absent_id_arr,true));
						$UI_arr = array_merge ( $UI_arr, $absent_id_arr );
						
						break;
					
					case "REFER TO HOSPITAL" :
						
						$absent_id_arr = explode ( ",", $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['R2H UID'] );
						// //log_message("debug","aaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbarrrrrrrrrrrrrrrrrrrrrrr".print_r($absent_id_arr,true));
						$UI_arr = array_merge ( $UI_arr, $absent_id_arr );
						
						break;
					
					default :
						;
						break;
				}
			}
			
			return $UI_arr;
		}
	}

	/*public function get_all_symptoms_docs_identifier($start_date, $end_date, $id_for_school = false,$request_pie_status = "All") {
		ini_set ( 'max_execution_time', 0 );
		ini_set('memory_limit', '100G');
		//log_message('info','44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444.');
		if ($id_for_school) {
			$query = $this->mongo_db->whereIn ( "doc_data.widget_data.page1.Problem Info.Identifier", array (
					$id_for_school 
			) )->get ( $this->request_app_col );
		} else {
			$query = $this->mongo_db->select ( array (
					"doc_data.widget_data",
					"history" 
			) )->get ( $this->request_app_col );
		}
		
		$result = [ ];
		foreach ( $query as $doc ) {
			
			if($request_pie_status == "All"){
				if($doc['doc_data']['widget_data']['page2']['Review Info']['Status'] != "Cured"){
			
			foreach ( $doc ['history'] as $date ) {
				$time = $date ['time'];
				$start_date = "2018-09-02 00:00:00";
				$end_date = "2018-09-01 00:00:00";
				if (($time <= $start_date) && ($time >= $end_date)) {
					array_push ( $result, $doc );
				log_message('error',' $result=============2375'.print_r($result,TRUE));
					break;
				}
				}
			}
			}else if($request_pie_status == "Cured"){
				if($doc['doc_data']['widget_data']['page2']['Review Info']['Status'] == "Cured"){
			
			foreach ( $doc ['history'] as $date ) {
				$time = $date ['time'];
				
				if (($time <= $start_date) && ($time >= $end_date)) {
					array_push ( $result, $doc );
					break;
				}
				}
			}
			}
		}
		$query = $result;
		log_message('error','query_temp=============2394'.print_r($query,TRUE));
		return $query;
	}*/

	public function get_all_symptoms_docs_old_dash($start_date, $end_date, $id_for_school = false) {
		ini_set ( 'max_execution_time', 0 );
		if ($id_for_school) {
			$query = $this->mongo_db->whereIn ( "doc_data.widget_data.page1.Problem Info.Identifier", array (
					$id_for_school 
			) )->get ( $this->request_app_col );
		} else {
			$query = $this->mongo_db->select ( array (
					"doc_data.widget_data",
					"history" 
			) )->get ( $this->request_app_col );
		}
		
		$result = [ ];
		foreach ( $query as $doc ) {
			
			foreach ( $doc ['history'] as $date ) {
				$time = $date ['time'];
				
				if (($time <= $start_date) && ($time >= $end_date)) {
					array_push ( $result, $doc );
					break;
				}
			}
		}
		$query = $result;
		return $query;
	}

	public function get_all_symptoms_docs($start_date, $end_date, $id_for_school = false,$request_pie_status = "All",$student_type = false,$student_age = false) {
		ini_set ( 'max_execution_time', 0 );
		ini_set('memory_limit', '100G');
		
		if ($id_for_school) {
			$query = $this->mongo_db->whereIn ( "doc_data.widget_data.page1.Problem Info.Identifier", array (
					$id_for_school 
			) )->get ($this->request_app_col_static_html);//$this->request_app_col
		} else {
			if(isset($student_type) && !empty($student_type))
			{
				$search_query = array('doc_data.widget_data.page1.Student Info.Gender' => $student_type,'doc_data.widget_data.page1.Student Info.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));
				$query = $this->mongo_db->select ( array (
					"doc_data.widget_data",
					"history" 
				) )->where($search_query)->whereBetween('history.0.time',$end_date,$start_date)->get ($this->request_app_col_static_html );// $this->request_app_col
				
			}
			else
			{
				$search_query = array('doc_data.widget_data.page1.Student Info.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));
				$query = $this->mongo_db->select ( array (
					"doc_data.widget_data",
					"history" 
				) )->where($search_query)->whereBetween('history.0.time',$end_date,$start_date)->get ($this->request_app_col_static_html );// $this->request_app_col
				
			}
			
		}
		
		
		$result = [ ];
		foreach ( $query as $doc ) {
			//For Generate Request XL Sheets
			if($doc['doc_data']['widget_data']['page2']['Review Info']['Status'] == "Cured")
			{
				foreach ( $doc ['history'] as $date )
				{
					$time = $date ['time'];				
					if (($time <= $start_date) && ($time >= $end_date)) {
					array_push ( $result, $doc );					
					break;
					}
				}
			}

			if($request_pie_status == "All"){
				if($doc['doc_data']['widget_data']['page2']['Review Info']['Status'] != "Cured"){
			//array_push ( $result, $doc );
			foreach ( $doc ['history'] as $date ) {
				$time = $date ['time'];

				if (($time <= $start_date) && ($time >= $end_date)) {
					array_push ( $result, $doc );
					
					break;
				}
				}
			}
			}else if($request_pie_status == "Cured"){
				if($doc['doc_data']['widget_data']['page2']['Review Info']['Status'] == "Cured"){
			//array_push ( $result, $doc );					
			foreach ( $doc ['history'] as $date ) {
				$time = $date ['time'];				
				if (($time <= $start_date) && ($time >= $end_date)) {
					array_push ( $result, $doc );					
					break;
				}
				}
			}
			}
		}
		$query = $result;
		//echo print_r($query,true);exit();
		return $query;
	}
	public function get_start_end_date($today_date, $request_duration) {

		if ($request_duration == "Daily") {
			$date = new DateTime ( $today_date );
			$today_date = $date->format ( 'Y-m-d H:i:s' );
			$end_date = date ( "Y-m-d H:i:s", strtotime ( $today_date . "0 day" ) );
			$today_date = date ( "Y-m-d H:i:s", strtotime ( $today_date . "1 day" ) );
			//log_message("debug","today_date today_date======2165".print_r($today_date,true));
			//log_message("debug","end_date end_date======2166".print_r($end_date,true));
			$dates ['today_date'] = $today_date;
			$dates ['end_date'] = $end_date;
			return $dates;
		} else if ($request_duration == "Weekly") {
			$date = new DateTime ( $today_date );
			$today_date = $date->format ( 'Y-m-d H:i:s' );
			
			$end_date = date ( "Y-m-d H:i:s", strtotime ( $today_date . "-6 day" ) );
			$today_date = date ( "Y-m-d H:i:s", strtotime ( $today_date . "1 day" ) );
			$dates ['today_date'] = $today_date;
			$dates ['end_date'] = $end_date;
			return $dates;
		} else if ($request_duration == "Bi Weekly") {
			$date = new DateTime ( $today_date );
			$today_date = $date->format ( 'Y-m-d H:i:s' );
			
			$end_date = date ( "Y-m-d H:i:s", strtotime ( $today_date . "-13 day" ) );
			$today_date = date ( "Y-m-d H:i:s", strtotime ( $today_date . "1 day" ) );
			$dates ['today_date'] = $today_date;
			$dates ['end_date'] = $end_date;
			return $dates;
		} else if ($request_duration == "Monthly") {
			$date = new DateTime ( $today_date );
			$today_date = $date->format ( 'Y-m-d H:i:s' );
			
			$end_date = date ( "Y-m-d H:i:s", strtotime ( $today_date . "-1 month" ) );
			$end_date = date ( "Y-m-d H:i:s", strtotime ( $end_date . "1 day" ) );
			$today_date = date ( "Y-m-d H:i:s", strtotime ( $today_date . "1 day" ) );
			$dates ['today_date'] = $today_date;
			$dates ['end_date'] = $end_date;
			return $dates;
		} else if ($request_duration == "Bi Monthly") {
			$date = new DateTime ( $today_date );
			$today_date = $date->format ( 'Y-m-d H:i:s' );
			
			$end_date = date ( "Y-m-d H:i:s", strtotime ( $today_date . "-2 month" ) );
			$end_date = date ( "Y-m-d H:i:s", strtotime ( $end_date . "1 day" ) );
			$today_date = date ( "Y-m-d H:i:s", strtotime ( $today_date . "1 day" ) );
			$dates ['today_date'] = $today_date;
			$dates ['end_date'] = $end_date;
			return $dates;
		} else if ($request_duration == "Quarterly") {
			$date = new DateTime ( $today_date );
			$today_date = $date->format ( 'Y-m-d H:i:s' );
			
			$end_date = date ( "Y-m-d H:i:s", strtotime ( $today_date . "-3 month" ) );
			$end_date = date ( "Y-m-d H:i:s", strtotime ( $end_date . "1 day" ) );
			$today_date = date ( "Y-m-d H:i:s", strtotime ( $today_date . "1 day" ) );
			$dates ['today_date'] = $today_date;
			$dates ['end_date'] = $end_date;
			return $dates;
		} else if ($request_duration == "Half Yearly") {
			$date = new DateTime ( $today_date );
			$today_date = $date->format ( 'Y-m-d H:i:s' );
			
			$end_date = date ( "Y-m-d H:i:s", strtotime ( $today_date . "-6 month" ) );
			$end_date = date ( "Y-m-d H:i:s", strtotime ( $end_date . "1 day" ) );
			$today_date = date ( "Y-m-d H:i:s", strtotime ( $today_date . "1 day" ) );
			$dates ['today_date'] = $today_date;
			$dates ['end_date'] = $end_date;
			return $dates;
		}else if ($request_duration == "2015-16 Academic Year"){
			$today_date = "2016-05-31";
			$date = new DateTime ( $today_date );
			$today_date = $date->format ('Y-m-d H:i:s');
			$end_date = date ("Y-m-d H:i:s", strtotime ( $today_date . "-12 month"));
			$end_date = date ("Y-m-d H:i:s", strtotime ( $end_date . "1 day"));
			
			$dates ['today_date'] = $today_date;
			$dates ['end_date'] = $end_date;
			return $dates;
		}else if ($request_duration == "2016-17 Academic Year"){
			$today_date = "2017-05-31";
			$date = new DateTime ( $today_date );
			$today_date = $date->format ('Y-m-d H:i:s');
			$end_date = date ("Y-m-d H:i:s", strtotime ( $today_date . "-12 month"));
			$end_date = date ("Y-m-d H:i:s", strtotime ( $end_date . "1 day"));
			
			$dates ['today_date'] = $today_date;
			$dates ['end_date'] = $end_date;
			return $dates;
		}
		else if ($request_duration == "2017-18 Academic Year"){
			$today_date = "2018-05-31";
			$date = new DateTime ( $today_date );
			$today_date = $date->format ('Y-m-d H:i:s');
			$end_date = date ("Y-m-d H:i:s", strtotime ( $today_date . "-12 month"));
			$end_date = date ("Y-m-d H:i:s", strtotime ( $end_date . "1 day"));
			
			$dates ['today_date'] = $today_date;
			$dates ['end_date'] = $end_date;
			
			return $dates;
		}
		else if ($request_duration == "2018-19 Academic Year"){
			$today_date = "2019-05-31";
			$date = new DateTime ( $today_date );
			$today_date = $date->format ('Y-m-d H:i:s');
			$end_date = date ("Y-m-d H:i:s", strtotime ( $today_date . "-12 month"));
			$end_date = date ("Y-m-d H:i:s", strtotime ( $end_date . "1 day"));
			
			$dates ['today_date'] = $today_date;
			$dates ['end_date'] = $end_date;
			
			return $dates;
		}
		else if ($request_duration == "Yearly") {
			$end_date = "2018-06-01";
			$date = new DateTime ( $today_date );
			$today_date = $date->format ( 'Y-m-d H:i:s' );
			//$month = explode("-",$today_date);
			//$month_final = "-".$month[1]." month";
			$end_date = date ( "Y-m-d H:i:s", strtotime ( $end_date ) );
			//$end_date = date ( "Y-m-d H:i:s", strtotime ( $end_date . "1 day" ) );
			$today_date = date ( "Y-m-d H:i:s", strtotime ( $today_date . "1 day" ) );
			$dates ['today_date'] = $today_date;
			$dates ['end_date'] = $end_date;
			//echo print_r($dates,TRUE);exit();
			return $dates;
		}
	}

	public function get_all_requests_old_dash($date = false, $request_duration = "Yearly", $dt_name = "All", $school_name = "All") {
		$query = [ ];
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		//$dates = $this->get_start_end_date ( $today_date, $request_duration );
		
		$dates ['today_date'] = "2018-10-01";
		$dates ['end_date'] = "2016-01-01";
		$query = $this->get_all_symptoms_docs_old_dash ( $dates ['today_date'], $dates ['end_date'] );
		
		$doc_query = array ();
		if ($school_name == "All") {
			if ($dt_name != "All") {
				foreach ( $query as $doc ) {
					//$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
					//$screening_doc = $this->mongo_db->select(array('doc_data.widget_data.page2'))->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
					if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['District'] ['field_ref'] ) == strtolower ( $dt_name )) {
							array_push ( $doc_query, $doc );
						}
					}
				}
				$query = $doc_query;
			} else {
			}
		} else {
			foreach ( $query as $doc ) {
		
				//$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
				//$screening_doc = $this->mongo_db->select(array('doc_data.widget_data.page2'))->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
		
				if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
					if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['School Name'] ['field_ref']) == strtolower ( $school_name )) {
						array_push ( $doc_query, $doc );
					}
				}
			}
			$query = $doc_query;
		}
		
		// $query = $this->mongo_db->select(array("doc_data.widget_data","history"))->get($this->request_app_col);
		
		$device_initiated = 0;
		$web_initiated = 0;
		$prescribed = 0;
		$medication = 0;
		$followUp = 0;
		$cured = 0;
		// $attended = 0;
		
		$req_normal = 0;
		$req_emergency = 0;
		$req_chronic = 0;
		
		foreach ( $query as $report ) {
			$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
			if ($status == "Initiated") {
				if (isset ( $report ['history'] [0] ['submitted_user_type'] )) {
					$user_type = $report ['history'] [0] ['submitted_user_type'];
					if ($user_type == "CCUSER") {
						$web_initiated ++;
					} else {
						$device_initiated ++;
					}
				} else {
					$device_initiated ++;
				}
			} else if ($status == "Prescribed") {
				$prescribed ++;
			} else if ($status == "Under Medication") {
				$medication ++;
			} else if ($status == "Follow-up") {
				$followUp ++;
			} else if ($status == "Cured") {
				$cured ++;
			}
			
			$request_type = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Request Type'];
			if ($request_type == "Normal") {
				$req_normal ++;
			} else if ($request_type == "Emergency") {
				$req_emergency ++;
			} else if ($request_type == "Chronic") {
				$req_chronic ++;
			}
		}
		
		$requests = [ ];
		
		/*$request ['label'] = 'Device Initiated';
		$request ['value'] = $device_initiated;
		array_push ( $requests, $request );*/
		
		/*$request ['label'] = 'Web Initiated';
		$request ['value'] = $web_initiated;
		array_push ( $requests, $request );*/
		
		$request ['label'] = 'Prescribed';
		$request ['value'] = $prescribed;
		array_push ( $requests, $request );
		
		$request ['label'] = 'Under Medication';
		$request ['value'] = $medication;
		array_push ( $requests, $request );
		
		$request ['label'] = 'Follow-up';
		$request ['value'] = $followUp;
		array_push ( $requests, $request );
		
		$request ['label'] = 'Cured';
		$request ['value'] = $cured;
		array_push ( $requests, $request );
		
		$request ['label'] = 'Normal Req';
		$request ['value'] = $req_normal;
		array_push ( $requests, $request );
		
		$request ['label'] = 'Emergency Req';
		$request ['value'] = $req_emergency;
		array_push ( $requests, $request );
		
		$request ['label'] = 'Chronic Req';
		$request ['value'] = $req_chronic;
		array_push ( $requests, $request );
		
		return $requests;
	}
	public function get_all_requests($date = false, $request_duration = "Daily", $dt_name = "All", $school_name = "All",$request_pie_status = "All",$student_type = false,$student_age = false) {
		$query = [ ];
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		$dates = $this->get_start_end_date ( $today_date, $request_duration );
		$query = $this->get_all_symptoms_docs ( $dates ['today_date'], $dates ['end_date'],false,$request_pie_status,$student_type,$student_age );
		
		$doc_query = array ();
		if ($school_name == "All") {
			if ($dt_name != "All") {
				foreach ( $query as $doc ) {
					
					$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
					/*$screening_doc = $this->mongo_db->select ( array (
							'doc_data.widget_data.page2' 
					) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );*/
					$dist_code = explode("_", $unique_id);
					$doc = $this->mongo_db->select(array('dt_name'))->where('dt_code',$dist_code[0])->get('panacea_district');
					if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
						if (strtolower ( $doc [0] ['dt_name'] ) == strtolower ( $dt_name )) {
							array_push ( $doc_query, $doc );
						}
					}
				}
				$query = $doc_query;				
			} else {
			}
		} else {
			foreach ( $query as $doc ) {
				
				$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
				/*$screening_doc = $this->mongo_db->select ( array (
						'doc_data.widget_data.page2' 
				) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );*/
				$dist_codes = explode("_", $unique_id);
				$dist_code = intval($dist_codes[1]);
				if(isset($dist_code) && !empty($dist_code))
				{
					$this->mongo_db->switchDatabase($this->common_db['common_db']);
					$doc_data = $this->mongo_db->select(array('school_name'))->where('school_code',$dist_code)->get('panacea_schools');
					$this->mongo_db->switchDatabase($this->common_db['dsn']);
				}				
				if (isset ( $doc_data ) && ! empty ( $doc_data ) && (count ( $doc_data ) > 0)) {
					if (strtolower ( $doc_data [0] ['school_name'] ) == strtolower ( $school_name )) {
						array_push ( $doc_query, $doc );
					}
				}
			}
			$query = $doc_query;
		}
		// $query = $this->mongo_db->select(array("doc_data.widget_data","history"))->get($this->request_app_col);
		
		$device_initiated = 0;
		$web_initiated = 0;
		$screening_initiated = 0;
		$prescribed = 0;
		$medication = 0;
		$followUp = 0;
		$cured = 0;
		$hospitalized = 0;
		// $attended = 0;
		
		$req_normal = 0;
		$req_emergency = 0;
		$req_chronic = 0;
		//echo print_r(count($query),true);
		//exit();
		//log_message('error',"queryyyyyyyyyyyyyyyyyy======2627==panacea_common_model".print_r($query,TRUE));
		foreach ( $query as $report ) {
			//echo print_r($report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'],TRUE);exit();
			$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
			//log_message("debug","status status======2308".print_r($status,true));
			// if (isset ( $report ['history'] [0] ['submitted_user_type'] )) {
					// $user_type = $report ['history'] [0] ['submitted_user_type'];
					// if (($user_type == "CCUSER")) {
						// $web_initiated ++;
					// }else if(($user_type == "PADMIN")){
						// $screening_initiated ++;
					// } else {
						// $device_initiated ++;
					// }
				// } else {
					// $device_initiated ++;
				// }
			
			if ($status == "Initiated") {
				/*if (isset ( $report ['history'] [0] ['submitted_user_type'] )) {
					$user_type = $report ['history'] [0] ['submitted_user_type'];
					if (($user_type == "CCUSER")) {
						$web_initiated ++;
					}else if(($user_type == "PADMIN")){
						$screening_initiated ++;
					} else {
						$device_initiated ++;
					}
				} else {
					$device_initiated ++;
				}*/
			} else if ($status == "Prescribed") {
				$prescribed ++;
			} else if ($status == "Under Medication") {
				$medication ++;
			} else if ($status == "Follow-up") {
				$followUp ++;
			} else if ($status == "Cured") {
				$cured ++;
			} else if ($status == "Hospitalized") {
				$hospitalized ++;
			}
			
			$request_type = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Request Type'];
			if ($request_type == "Normal") {
				$req_normal ++;
				
			} else if ($request_type == "Emergency") {
				$req_emergency ++;
			} else if ($request_type == "Chronic") {
				$req_chronic ++;
			}
		}
		
		$requests = [ ];
		
		$request ['label'] = 'Device Initiated';
		$request ['value'] = $device_initiated;
		array_push ( $requests, $request );
		
		$request ['label'] = 'Web Initiated';
		$request ['value'] = $web_initiated;
		array_push ( $requests, $request );
		
		$request ['label'] = 'Screening Initiated';
		$request ['value'] = $screening_initiated;
		array_push ( $requests, $request );
		
		$request ['label'] = 'Prescribed';
		$request ['value'] = $prescribed;
		array_push ( $requests, $request );
		
		$request ['label'] = 'Under Medication';
		$request ['value'] = $medication;
		array_push ( $requests, $request );
		
		$request ['label'] = 'Follow-up';
		$request ['value'] = $followUp;
		array_push ( $requests, $request );
		
		$request ['label'] = 'Cured';
		$request ['value'] = $cured;
		array_push ( $requests, $request );
		
		$request ['label'] = 'Hospitalized';
		$request ['value'] = $hospitalized;
		array_push ( $requests, $request );
		
		$request ['label'] = 'Normal Req';
		$request ['value'] = $req_normal;
		array_push ( $requests, $request );
		
		$request ['label'] = 'Emergency Req';
		$request ['value'] = $req_emergency;
		array_push ( $requests, $request );
		
		$request ['label'] = 'Chronic Req';
		$request ['value'] = $req_chronic;
		array_push ( $requests, $request );
		
		return $requests;
	}
	

	//===============================
	public function get_all_requests_docs_old_dash($start_date, $end_date, $type = false, $dt_name = "All", $school_name = "All") 
	{
		if ($type == "Initiated") {
			$query = $this->mongo_db->where ( array (
					'doc_data.widget_data.page2.Review Info.Status' => $type 
			) )->get ( $this->request_app_col );
		} else if ($type == "Normal") {
			$query = $this->mongo_db->where ( array (
					'doc_data.widget_data.page2.Review Info.Request Type' => "Normal" 
			) )->get ( $this->request_app_col );
		} else if ($type == "Emergency") {
			$query = $this->mongo_db->where ( array (
					'doc_data.widget_data.page2.Review Info.Request Type' => "Emergency" 
			) )->get ( $this->request_app_col );
		} else if ($type == "Chronic") {
			$query = $this->mongo_db->where ( array (
					'doc_data.widget_data.page2.Review Info.Request Type' => "Chronic" 
			) )->get ( $this->request_app_col );
		} else {
			$query = $this->mongo_db->whereLike ( 'doc_data.widget_data.page2.Review Info.Status', $type )->get ( $this->request_app_col );
		}

		
		$doc_query = array ();
		if ($school_name == "All") {
			if ($dt_name != "All") {
				foreach ( $query as $doc ) {
					/*$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
					$screening_doc = $this->mongo_db->select(array('doc_data.widget_data.page2'))->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
					if (isset ( $screening_doc ) && ! empty ( $screening_doc ) && (count ( $screening_doc ) > 0)) {
						if (strtolower ( $screening_doc [0] ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['District'] ) == strtolower ( $dt_name )) {
							array_push ( $doc_query, $doc );
						}
					}*/					

					if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['District'] ['field_ref'] ) == strtolower ( $dt_name )) {
							array_push ( $doc_query, $doc );
						}
					}
				}
				$query = $doc_query;
			} else {
			}
		} else {
			foreach ( $query as $doc ) {
		
				/*$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
				$screening_doc = $this->mongo_db->select(array('doc_data.widget_data.page2'))->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
		
				if (isset ( $screening_doc ) && ! empty ( $screening_doc ) && (count ( $screening_doc ) > 0)) {
					if (strtolower ( $screening_doc [0] ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['School Name']) == strtolower ( $school_name )) {
						array_push ( $doc_query, $doc );
					}
				}*/
			
					if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['School Name'] ['field_ref'] ) == strtolower ( $school_name )) {
							array_push ( $doc_query, $doc );
						}
					}
			}
			$query = $doc_query;
		}
		
		$result = [ ];
		foreach ( $query as $doc ) {
			
			foreach ( $doc ['history'] as $date ) {
				$time = $date ['time'];

				if (($time <= $start_date) && ($time >= $end_date)) {
					array_push ( $result, $doc );
					break;
				}
			}
		}
		$query = $result;
		return $query;
	}
	// ======================================================================
	
		public function get_all_requests_docs($start_date, $end_date, $type = false, $dt_name = "All", $school_name = "All",$request_pie_status = "All") {
		
			//===============================================degfdvbdcvgsydugvuhysd
		//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvvvvvvvvv11111111111111111111111111111111111--".print_r($start_date,true));
		//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvvvvvvvvv11111111111111111111111111111111111--".print_r($end_date,true));
		
		if($request_pie_status == "All")
		{
			$and_merged_array_condition = array();
			if ($type == "Initiated") {
				
				$and_merged_array_condition = array (
					'doc_data.widget_data.page2.Review Info.Status' => $type,
					"doc_data.widget_data.page2.Review Info.Status" => array ('$ne' => "Cured")
				);
			}else if ($type == "Screening") {
				
				$and_merged_array_condition = array (
					'history.0.submitted_user_type' => "PADMIN",
					"doc_data.widget_data.page2.Review Info.Status" => array ('$ne' => "Cured")
				);
				
				
			} else if ($type == "Normal") {
				
				$and_merged_array_condition = array (
					'doc_data.widget_data.page2.Review Info.Request Type' => "Normal",
					"doc_data.widget_data.page2.Review Info.Status" => array ('$ne' => "Cured")				
				);
			} else if ($type == "Emergency") {
				
				$and_merged_array_condition = array (
					'doc_data.widget_data.page2.Review Info.Request Type' => "Emergency",
					"doc_data.widget_data.page2.Review Info.Status" => array ('$ne' => "Cured")
				);
				
				
			} else if ($type == "Chronic") {
				$and_merged_array_condition = array (
					'doc_data.widget_data.page2.Review Info.Request Type' => "Chronic",
					"doc_data.widget_data.page2.Review Info.Status" => array ('$ne' => "Cured")
				);
			} else {
				$and_merged_array_condition = array (
					'doc_data.widget_data.page2.Review Info.Status' => $type,
					"doc_data.widget_data.page2.Review Info.Status" => array ('$ne' => "Cured")
				);
				
			}
		}
		else if ($request_pie_status == "Cured"){
			
			$and_merged_array_condition = array();
			if ($type == "Initiated") {
				
				$and_merged_array_condition = array (
					'doc_data.widget_data.page2.Review Info.Status' => $type,
					"doc_data.widget_data.page2.Review Info.Status" => "Cured"
				);
			}else if ($type == "Screening") {
				
				$and_merged_array_condition = array (
					'history.0.submitted_user_type' => "PADMIN",
					"doc_data.widget_data.page2.Review Info.Status" => "Cured"
				);
				
				
			} else if ($type == "Normal") {
				
				$and_merged_array_condition = array (
					'doc_data.widget_data.page2.Review Info.Request Type' => "Normal",
					"doc_data.widget_data.page2.Review Info.Status" => "Cured"
				);
			} else if ($type == "Emergency") {
				
				$and_merged_array_condition = array (
					'doc_data.widget_data.page2.Review Info.Request Type' => "Emergency",
					"doc_data.widget_data.page2.Review Info.Status" => "Cured"
				);
				
				
			} else if ($type == "Chronic") {
				$and_merged_array_condition = array (
					'doc_data.widget_data.page2.Review Info.Request Type' => "Chronic",
					"doc_data.widget_data.page2.Review Info.Status" => "Cured"
				);
			} else {
				$and_merged_array_condition = array (
					'doc_data.widget_data.page2.Review Info.Status' => $type,
					"doc_data.widget_data.page2.Review Info.Status" => "Cured"
				);
				
			}
			
		}
		//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvvvvvvvvv11111111111111111111111111111111111--".print_r($and_merged_array_condition,true));
		
		$his_0_lte = array (
				"history.0.time" => array (
						'$lte' => $start_date 
				) 
		);
		$his_0_gte = array (
				"history.0.time" => array (
						'$gte' => $end_date 
				) 
		);
		$his_1_lte = array (
				"history.1.time" => array (
						'$lte' => $start_date 
				) 
		);
		$his_1_gte = array (
				"history.1.time" => array (
						'$gte' => $end_date 
				) 
		);
		$his_last_lte = array (
				"history.last_stage.time" => array (
						'$lte' => $start_date 
				) 
		);
		$his_last_gte = array (
				"history.last_stage.time" => array (
						'$gte' => $end_date 
				) 
		);
		
		//$and_merged_array_condition = array();
		$and_merged_array_0 = array();
		$and_merged_array_1 = array();
		$and_merged_array_last = array();
		
		array_push ( $and_merged_array_0, $his_0_lte );
		array_push ( $and_merged_array_0, $his_0_gte );
		array_push ( $and_merged_array_0, $and_merged_array_condition );
		
		
		array_push ( $and_merged_array_1, $his_1_lte );
		array_push ( $and_merged_array_1, $his_1_gte );
		array_push ( $and_merged_array_1, $and_merged_array_condition );

		array_push ( $and_merged_array_last, $his_last_lte );
		array_push ( $and_merged_array_last, $his_last_gte );
		array_push ( $and_merged_array_last, $and_merged_array_condition );
		
		
		// ////log_message("debug","response=====1665==".print_r($merged_array,true));
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$or' => array (
										array('$and' => $and_merged_array_0),
										array('$and' => $and_merged_array_1),
										array('$and' => $and_merged_array_last),
								)									
							) 
					)
			];
			
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->request_app_col_static_html,
					'pipeline' => $pipeline 
			) );
			//$this->request_app_col,
			//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvvvvvvvvv11111111111111111111111111111111111--".print_r($response,true));
			
			//=============================================vjhbdhdsuhyvsuyhvuyv
			$query = array();
			if($response['ok']){
				$query = $response["result"];
			}
			
		
		
		
		// if ($type == "Initiated") {
			// $query = $this->mongo_db->where ( array (
					// 'doc_data.widget_data.page2.Review Info.Status' => $type 
			// ) )->get ( $this->request_app_col );
		// }else if ($type == "Screening") {
			// $query = $this->mongo_db->where ( array (
					// 'history.0.submitted_user_type' => "PADMIN" 
			// ) )->get ( $this->request_app_col );
		// } else if ($type == "Normal") {
			// $query = $this->mongo_db->where ( array (
					// 'doc_data.widget_data.page2.Review Info.Request Type' => "Normal" 
			// ) )->get ( $this->request_app_col );
		// } else if ($type == "Emergency") {
			// $query = $this->mongo_db->where ( array (
					// 'doc_data.widget_data.page2.Review Info.Request Type' => "Emergency" 
			// ) )->get ( $this->request_app_col );
		// } else if ($type == "Chronic") {
			// $query = $this->mongo_db->where ( array (
					// 'doc_data.widget_data.page2.Review Info.Request Type' => "Chronic" 
			// ) )->get ( $this->request_app_col );
		// } else {
			// $query = $this->mongo_db->whereLike ( 'doc_data.widget_data.page2.Review Info.Status', $type )->get ( $this->request_app_col );
		// }
		
		$doc_query = array ();
		if ($school_name == "All") {
			if ($dt_name != "All") {
				foreach ( $query as $doc ) {
					/*$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
					$screening_doc = $this->mongo_db->select ( array (
							'doc_data.widget_data.page2' 
					) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
					if (isset ( $screening_doc ) && ! empty ( $screening_doc ) && (count ( $screening_doc ) > 0)) {
						if (strtolower ( $screening_doc [0] ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['District'] ) == strtolower ( $dt_name )) {
							array_push ( $doc_query, $doc );
						}
					}*/
					$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
					if(isset($unique_id) && !empty($unique_id))
					{
						if(strtolower($doc ['doc_data'] ['widget_data'] ['page1']['Student Info']['District']['field_ref']) == strtolower ( $dt_name ))
						{
							array_push ( $doc_query, $doc );
						}
					}


				}
				$query = $doc_query;
			} else {
			}
		} else {
			foreach ( $query as $doc ) {
				
				/*$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
				$screening_doc = $this->mongo_db->select ( array (
						'doc_data.widget_data.page2' 
				) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
				
				if (isset ( $screening_doc ) && ! empty ( $screening_doc ) && (count ( $screening_doc ) > 0)) {
					if (strtolower ( $screening_doc [0] ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['School Name'] ) == strtolower ( $school_name )) {
						array_push ( $doc_query, $doc );
					}
				}*/
				$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
					if(isset($unique_id) && !empty($unique_id))
					{
						if(strtolower($doc ['doc_data'] ['widget_data'] ['page1']['Student Info']['School Name']['field_ref']) == strtolower ( $dt_name ))
						{
							array_push ( $doc_query, $doc );
						}
					}
			}
			$query = $doc_query;
		}
		
		// $result = [ ];
		// foreach ( $query as $doc ) {
			
			// foreach ( $doc ['history'] as $date ) {
				// $time = $date ['time'];
				
				// if (($time <= $start_date) && ($time >= $end_date)) {
					// array_push ( $result, $doc );
					// break;
				// }
			// }
		// }
		//log_message("error","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvvvvvvvvv11111111111111111111111111111111111qqq--".print_r($query,true));
		//$query = $result;
		return $query;
	}
	
	
	public function get_all_requests_docs_old($start_date, $end_date, $type = false, $dt_name = "All", $school_name = "All",$request_pie_status = "All") {
		//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii");
		
		
		if ($type == "Initiated") {
			$query = $this->mongo_db->where ( array (
					'doc_data.widget_data.page2.Review Info.Status' => $type 
			) )->get ( $this->request_app_col );
		}else if ($type == "Screening") {
			$query = $this->mongo_db->where ( array (
					'history.0.submitted_user_type' => "PADMIN" 
			) )->get ( $this->request_app_col );
		} else if ($type == "Normal") {
			$query = $this->mongo_db->where ( array (
					'doc_data.widget_data.page2.Review Info.Request Type' => "Normal" 
			) )->get ( $this->request_app_col );
		} else if ($type == "Emergency") {
			$query = $this->mongo_db->where ( array (
					'doc_data.widget_data.page2.Review Info.Request Type' => "Emergency" 
			) )->get ( $this->request_app_col );
		} else if ($type == "Chronic") {
			$query = $this->mongo_db->where ( array (
					'doc_data.widget_data.page2.Review Info.Request Type' => "Chronic" 
			) )->get ( $this->request_app_col );
		} else {
			//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj");
			$query = $this->mongo_db->where ( 'doc_data.widget_data.page2.Review Info.Status', $type )->get ( $this->request_app_col );
		}
		//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvvvvv11111111111111111111111111111111111");
		$doc_query = array ();
		if ($school_name == "All") {
			//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvvaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
			if ($dt_name != "All") {
				//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvvbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb");
				foreach ( $query as $doc ) {
					//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvvcccccccccccccccccccccccccccccccccccccccccccccc");
					//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvv222222222222222222222222222222222222222");
					$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
					$screening_doc = $this->mongo_db->select ( array (
							'doc_data.widget_data.page2.Personal Information.District' 
					) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
					//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvvdddddddddddddddddddddddddddddddddddddddd");
					//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvvv33333333333333333333333333333333333333333");
					if (isset ( $screening_doc ) && ! empty ( $screening_doc ) && (count ( $screening_doc ) > 0)) {
						//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvveeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee");
						if (strtolower ( $screening_doc [0] ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['District'] ) == strtolower ( $dt_name )) {
							//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvvffffffffffffffffffffffffffffffffffffffffff");
							array_push ( $doc_query, $doc );
						}
					}
				}
				$query = $doc_query;
			} else {
				//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvv222222222222222222222222222222222222222");
			}
		} else {
			//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvvgggggggggggggggggggggggggggggggggggggg");
			foreach ( $query as $doc ) {
				//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvvhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh");
				////log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv33333333333333333333333333333");
				$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
				$screening_doc = $this->mongo_db->select ( array (
						'doc_data.widget_data.page2.Personal Information.School Name' 
				) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
				
				if (isset ( $screening_doc ) && ! empty ( $screening_doc ) && (count ( $screening_doc ) > 0)) {
					if (strtolower ( $screening_doc [0] ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['School Name'] ) == strtolower ( $school_name )) {
						array_push ( $doc_query, $doc );
					}
				}
			}
			$query = $doc_query;
		}
		//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvv33333333333333333333333333333333333333333333333");
		$result = [ ];
		foreach ( $query as $doc ) {
			//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvv44444444444444444444444444444444444444444444444444");
			foreach ( $doc ['history'] as $date ) {
				$time = $date ['time'];
				//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvv5555555555555555555555555555555555555555555555555");
				if (($time <= $start_date) && ($time >= $end_date)) {
					//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvv66666666666666666666666666666666666666666666");
					array_push ( $result, $doc );
					//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvv777777777777777777777777777777777777777777");
					break;
					//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvv8888888888888888888888888888888888888888888");
				}
				//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvv9999999999999999999999999999999999");
			}
		}
		//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk");
		$query = $result;
		return $query;
	}

	public function drilldown_request_to_districts_old_dash($data, $date = false, $request_duration = "Yearly", $dt_name = "All", $school_name = "All") {
		$obj_data = json_decode ( $data, true );
		$type = $obj_data ['label'];
		
		$query = [ ];
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		//$dates = $this->get_start_end_date ( $today_date, $request_duration );
		$dates ['today_date'] = "2018-10-01";
		$dates ['end_date'] = "2016-01-01";
		
		// ini_set('memory_limit', '512M');
		
		if ($type == "Device Initiated") {
			$query_temp = $this->get_all_requests_docs_old_dash ( $dates ['today_date'], $dates ['end_date'], "Initiated", $dt_name, $school_name );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				if (isset ( $report ['history'] [0] ['submitted_user_type'] )) {
					$user_type = $report ['history'] [0] ['submitted_user_type'];
					if ($user_type != "CCUSER") {
						array_push ( $query, $report );
					}
				} else {
					array_push ( $query, $report );
				}
			}
		} else if ($type == "Web Initiated") {
			$query_temp = $this->get_all_requests_docs_old_dash ( $dates ['today_date'], $dates ['end_date'], "Initiated", $dt_name, $school_name );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				
				if (isset ( $report ['history'] [0] ['submitted_user_type'] )) {
					$user_type = $report ['history'] [0] ['submitted_user_type'];
					if ($user_type == "CCUSER") {
						array_push ( $query, $report );
					}
				}
			}
		} else if ($type == "Normal Req") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->get($this->request_app_col);
			$query = $this->get_all_requests_docs_old_dash ( $dates ['today_date'], $dates ['end_date'], "Normal", $dt_name, $school_name );
		} else if ($type == "Emergency Req") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->get($this->request_app_col);
			$query = $this->get_all_requests_docs_old_dash ( $dates ['today_date'], $dates ['end_date'], "Emergency", $dt_name, $school_name );
		} else if ($type == "Chronic Req") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col);
			$query = $this->get_all_requests_docs_old_dash ( $dates ['today_date'], $dates ['end_date'], "Chronic", $dt_name, $school_name );
		} else {
			// $query = $this->mongo_db->whereLike('doc_data.widget_data.page2.Review Info.Status',$type)->get($this->request_app_col);
			$query = $this->get_all_requests_docs_old_dash ( $dates ['today_date'], $dates ['end_date'], $type, $dt_name, $school_name );
		}
		
		$dist_list = [ ];
		
		foreach ( $query as $request ) {
			
			$retrieval_list = array ();
			//$unique_id = $request ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
			//$doc = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
			
			if (isset ( $request ) && ! empty ( $request ) && (count ( $request ) > 0)) {
				$district = $request['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['District']['field_ref'];
				if (isset ( $dist_list [$district] )) {
					$dist_list [$district] ++;
				} else {
					$dist_list [$district] = 1;
				}
			}
		}
		
		$final_values = [ ];
		foreach ( $dist_list as $dicsts => $count ) {
			$result ['label'] = $dicsts;
			$result ['value'] = $count;
			array_push ( $final_values, $result );
		}
		
		return $final_values;
	}
	
	
	public function drilldown_request_to_districts($data, $date = false, $request_duration = "Daily", $dt_name = "All", $school_name = "All",$request_pie_status = "All",$student_type = false,$student_age = false) {
		//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn 2222222222222222222222222222222222222222222222222222222222");
		$obj_data = json_decode ( $data, true );
		$type = $obj_data ['label'];
				
		$query = [ ];
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		if(isset($student_age) && isset($student_type))
		{

		}else
		{

		}
		
		$dates = $this->get_start_end_date ( $today_date, $request_duration );
		$query_temp = $this->get_all_symptoms_docs ( $dates ['today_date'], $dates ['end_date'],false,$request_pie_status,$student_type,$student_age );
		//echo print_r($query_temp,true); exit();
		$doc_query = array ();
		if ($school_name == "All") {
			if ($dt_name != "All") {
				foreach ( $query_temp as $doc ) {
					$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
					/*$screening_doc = $this->mongo_db->select ( array (
							'doc_data.widget_data.page2' 
					) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );*/
					$dist_code = explode("_", $unique_id);
					$doc = $this->mongo_db->select(array('dt_name'))->where('dt_code',$dist_code[0])->get('panacea_district');
					if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
						if (strtolower ( $doc [0] ['dt_name']) == strtolower ( $dt_name )) {
							array_push ( $doc_query, $doc );
						}
					}
				}
				$query_temp = $doc_query;
			} else {
			}
		} else {
			foreach ( $query_temp as $doc ) {
				
				$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
				/*$screening_doc = $this->mongo_db->select ( array (
						'doc_data.widget_data.page2' 
				) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );*/
				$dist_code = explode("_", $unique_id);

				$this->mongo_db->switchDatabase($this->common_db['common_db']);
				$doc = $this->mongo_db->select(array('school_name'))->where('school_code',$dist_code[1])->get('panacea_schools');
				$this->mongo_db->switchDatabase($this->common_db['dsn']);

				if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
					if (strtolower ( $doc [0] ['school_name'] ) == strtolower ( $school_name )) {
						array_push ( $doc_query, $doc );
					}
				}
			}
			$query_temp = $doc_query;
		}
		
		if ($type == "Device Initiated") {
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
				
					if ($status == "Initiated") {
						
						if (isset ( $report ['history'] [0] ['submitted_user_type'] )) {
						$user_type = $report ['history'] [0] ['submitted_user_type'];
						if (($user_type == "CCUSER")) {
							//$web_initiated ++;
						} else {
							array_push ( $query, $report );
						}
					} else {
						array_push ( $query, $report );
					}	
				} 
			}
		
		} else if ($type == "Screening Initiated") {
			//$query_temp = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Screening", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {				
				
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
			
				if ($status == "Initiated") {
					if (isset ( $report ['history'] [0] ['submitted_user_type'] )) {
						$user_type = $report ['history'] [0] ['submitted_user_type'];
						if (($user_type == "CCUSER")) {
							//$web_initiated ++;
						}else if(($user_type == "PADMIN")){
							array_push ( $query, $report );
						} else {
							//$device_initiated ++;
						}
					} else {
						//$device_initiated ++;
					}
				}
				
			}
		} else if ($type == "Web Initiated") {
			//$query_temp = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Initiated", $dt_name, $school_name,$request_pie_status );
			$query = [ ];
			foreach ( $query_temp as $report ) {
				
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
				if ($status == "Initiated") {
					if (isset ( $report ['history'] [0] ['submitted_user_type'] )) {
						$user_type = $report ['history'] [0] ['submitted_user_type'];
						if (($user_type == "CCUSER")) {
							array_push ( $query, $report );							
						}else if(($user_type == "PADMIN")){
							//$screening_initiated ++;
						} else {
							//$device_initiated ++;
						}
					} else {
						//$device_initiated ++;
					}
				}
			}
		} else if ($type == "Normal Req") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Normal", $dt_name, $school_name,$request_pie_status );
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$request_type = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Request Type'];
				if ($request_type == "Normal") {
					array_push ( $query, $report );	
				}
			}	
		} else if ($type == "Emergency Req") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Emergency", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$request_type = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Request Type'];
				if ($request_type == "Emergency") {
					array_push ( $query, $report );	
				}
			}
			
			
			
		} else if ($type == "Chronic Req") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Chronic", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$request_type = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Request Type'];
				if ($request_type == "Chronic") {
					array_push ( $query, $report );	
				}
			}
			
			
		}else if ($type == "Prescribed") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Chronic", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
				if ($status == "Prescribed") {
					array_push ( $query, $report );	
				}
			}
			
			
		}else if ($type == "Under Medication") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Chronic", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
				if ($status == "Under Medication") {
					array_push ( $query, $report );	
				}
			}
			
			
		}else if ($type == "Follow-up") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Chronic", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
				if ($status == "Follow-up") {
					array_push ( $query, $report );	
				}
			}
			
			
		}else if ($type == "Cured") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Chronic", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
				if ($status == "Cured") {
					array_push ( $query, $report );	
				}
			}
			
			
		}else if ($type == "Hospitalized") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Chronic", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
				if ($status == "Hospitalized") {
					array_push ( $query, $report );	
				}
			}
			
			
		} else {
			// $query = $this->mongo_db->whereLike('doc_data.widget_data.page2.Review Info.Status',$type)->get($this->request_app_col);
			$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], $type, $dt_name, $school_name,$request_pie_status );
		}
		
		$dist_list = [ ];
		
		foreach ( $query as $request ) {
			
			$retrieval_list = array ();
			$unique_id = $request ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
			//$doc = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
			$dist_code = explode("_", $unique_id);
			$doc = $this->mongo_db->select(array('dt_name'))->where('dt_code',$dist_code[0])->get('panacea_district');
			if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
				$district = $doc [0] ["dt_name"];
				if (isset ( $dist_list [$district] )) {
					$dist_list [$district] ++;					
				} else {
					$dist_list [$district] = 1;
				}
			}
		}
		
		$final_values = [ ];
		foreach ( $dist_list as $dicsts => $count ) {
			$result ['label'] = $dicsts;
			$result ['value'] = $count;
			array_push ( $final_values, $result );
		}
		//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn 333333333333333333333333333333333333333333333333333333");
		return $final_values;
	}
	public function get_drilling_request_schools_old_dash($data, $date = false, $request_duration = "Yearly", $dt_name = "All", $school_name = "All") {
		$query = [ ];
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		//$dates = $this->get_start_end_date ( $today_date, $request_duration );
		$dates ['today_date'] = "2018-10-01";
		$dates ['end_date'] = "2016-01-01";

		$obj_data = json_decode ( $data, true );
		
		$type = $obj_data [0];
		$dist = strtolower ( $obj_data [1] );
		
		if ($type == "Device Initiated") {
			$query_temp = $this->get_all_requests_docs_old_dash ( $dates ['today_date'], $dates ['end_date'], "Initiated", $dt_name, $school_name );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				if (isset ( $report ['history'] [0] ['submitted_user_type'] )) {
					$user_type = $report ['history'] [0] ['submitted_user_type'];
					if ($user_type != "CCUSER") {
						array_push ( $query, $report );
					}
				} else {
					array_push ( $query, $report );
				}
			}
		} else if ($type == "Web Initiated") {
			$query_temp = $this->get_all_requests_docs_old_dash ( $dates ['today_date'], $dates ['end_date'], "Initiated", $dt_name, $school_name );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				
				if (isset ( $report ['history'] [0] ['submitted_user_type'] )) {
					$user_type = $report ['history'] [0] ['submitted_user_type'];
					if ($user_type == "CCUSER") {
						array_push ( $query, $report );
					}
				}
			}
		} else if ($type == "Normal Req") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->get($this->request_app_col);
			
			$query = $this->get_all_requests_docs_old_dash ( $dates ['today_date'], $dates ['end_date'], "Normal", $dt_name, $school_name );
			
		} else if ($type == "Emergency Req") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->get($this->request_app_col);
			$query = $this->get_all_requests_docs_old_dash ( $dates ['today_date'], $dates ['end_date'], "Emergency", $dt_name, $school_name );
		} else if ($type == "Chronic Req") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col);
			$query = $this->get_all_requests_docs_old_dash ( $dates ['today_date'], $dates ['end_date'], "Chronic", $dt_name, $school_name );
		} else {
			// $query = $this->mongo_db->whereLike('doc_data.widget_data.page2.Review Info.Status',$type)->get($this->request_app_col);
			$query = $this->get_all_requests_docs_old_dash ( $dates ['today_date'], $dates ['end_date'], $type, $dt_name, $school_name );
		}
		
		// ini_set('memory_limit', '512M');
		// $query = $this->mongo_db->whereLike('doc_data.widget_data.page2.Review Info.Status',$type)->get($this->request_app_col);
		
		$school_list = [ ];
		$matching_docs = [ ];
		
		foreach ( $query as $request ) {
			
			$retrieval_list = array ();
			//$unique_id = $request ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
			//$doc = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
			if (isset ( $request ) && ! empty ( $request ) && (count ( $request ) > 0)) {
				$district = $request ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['District']['field_ref'];
				if (strtolower ( $district ) == $dist) {
					array_push ( $matching_docs, $request );
				}
			}
		}
		
		foreach ( $matching_docs as $docs ) {
			
			$school_name = $docs ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['School Name']['field_ref'];
			if (isset ( $school_list [$school_name] )) {
				$school_list [$school_name] ++;
			} else {
				$school_list [$school_name] = 1;
			}
		}
		
		$final_values = [ ];
		foreach ( $school_list as $school => $count ) {
			$result ['label'] = $school;
			$result ['value'] = $count;
			array_push ( $final_values, $result );
		}
		
		return $final_values;
	}
	public function get_drilling_request_schools($data, $date = false, $request_duration = "Daily", $dt_name = "All", $school_name = "All",$request_pie_status = "All") {
		//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn 55555555555555555555555555555555555555555555555555555");
		$query = [ ];
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		$dates = $this->get_start_end_date ( $today_date, $request_duration );
		
		$obj_data = json_decode ( $data, true );
		
		$type = $obj_data [0];
		$dist = strtolower ( $obj_data [1] );
		
		$query_temp = $this->get_all_symptoms_docs ( $dates ['today_date'], $dates ['end_date'],false,$request_pie_status );
		
		$doc_query = array ();
		if ($school_name == "All") {
			if ($dt_name != "All") {
				foreach ( $query_temp as $doc ) {
					/*$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
					$screening_doc = $this->mongo_db->select ( array (
							'doc_data.widget_data.page2' 
					) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );*/
					if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['District'] ) == strtolower ( $dt_name )) {
							array_push ( $doc_query, $doc );
						}
					}
				}
				$query_temp = $doc_query;
			} else {
			}
		} else {
			foreach ( $query_temp as $doc ) {
				
				/*$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
				$screening_doc = $this->mongo_db->select ( array (
						'doc_data.widget_data.page2' 
				) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );*/
				
				if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
					if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['School Name'] ) == strtolower ( $school_name )) {
						array_push ( $doc_query, $doc );
					}
				}
			}
			$query_temp = $doc_query;
		}
		
		if ($type == "Device Initiated") {
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
				
					if ($status == "Initiated") {
						
						if (isset ( $report ['history'] [0] ['submitted_user_type'] )) {
						$user_type = $report ['history'] [0] ['submitted_user_type'];
						if (($user_type == "CCUSER")) {
							//$web_initiated ++;
						} else {
							array_push ( $query, $report );
						}
					} else {
						array_push ( $query, $report );
					}	
				} 
			}
		
		} else if ($type == "Screening Initiated") {
			//$query_temp = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Screening", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {				
				
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
			
				if ($status == "Initiated") {
					if (isset ( $report ['history'] [0] ['submitted_user_type'] )) {
						$user_type = $report ['history'] [0] ['submitted_user_type'];
						if (($user_type == "CCUSER")) {
							//$web_initiated ++;
						}else if(($user_type == "PADMIN")){
							array_push ( $query, $report );
						} else {
							//$device_initiated ++;
						}
					} else {
						//$device_initiated ++;
					}
				}
				
			}
		} else if ($type == "Web Initiated") {
			//$query_temp = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Initiated", $dt_name, $school_name,$request_pie_status );
			$query = [ ];
			foreach ( $query_temp as $report ) {
				
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
				if ($status == "Initiated") {
					if (isset ( $report ['history'] [0] ['submitted_user_type'] )) {
						$user_type = $report ['history'] [0] ['submitted_user_type'];
						if (($user_type == "CCUSER")) {
							array_push ( $query, $report );							
						}else if(($user_type == "PADMIN")){
							//$screening_initiated ++;
						} else {
							//$device_initiated ++;
						}
					} else {
						//$device_initiated ++;
					}
				}
			}
		} else if ($type == "Normal Req") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Normal", $dt_name, $school_name,$request_pie_status );
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$request_type = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Request Type'];
				if ($request_type == "Normal") {
					array_push ( $query, $report );	
				}
			}	
		} else if ($type == "Emergency Req") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Emergency", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$request_type = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Request Type'];
				if ($request_type == "Emergency") {
					array_push ( $query, $report );	
				}
			}
			
			
			
		} else if ($type == "Chronic Req") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Chronic", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$request_type = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Request Type'];
				if ($request_type == "Chronic") {
					array_push ( $query, $report );	
				}
			}
			
			
		}else if ($type == "Prescribed") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Chronic", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
				if ($status == "Prescribed") {
					array_push ( $query, $report );	
				}
			}
			
			
		}else if ($type == "Under Medication") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Chronic", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
				if ($status == "Under Medication") {
					array_push ( $query, $report );	
				}
			}
			
			
		}else if ($type == "Follow-up") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Chronic", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
				if ($status == "Follow-up") {
					array_push ( $query, $report );	
				}
			}
			
			
		}else if ($type == "Cured") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Chronic", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
				if ($status == "Cured") {
					array_push ( $query, $report );	
				}
			}
			
			
		}else if ($type == "Hospitalized") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Chronic", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
				if ($status == "Hospitalized") {
					array_push ( $query, $report );	
				}
			}
			
			
		} else {
			// $query = $this->mongo_db->whereLike('doc_data.widget_data.page2.Review Info.Status',$type)->get($this->request_app_col);
			$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], $type, $dt_name, $school_name,$request_pie_status );
		}
		
		$school_list = [ ];
		$matching_docs = [ ];
		
		foreach ( $query as $request ) {
			
			$retrieval_list = array ();
			$unique_id = $request ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
			$doc = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
			if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
				$district = $doc [0] ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['District'];
				if (strtolower ( $district ) == $dist) {
					array_push ( $matching_docs, $doc [0] );
				}
			}
		}
		
		foreach ( $matching_docs as $docs ) {
			$school_name = $docs ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['School Name'];
			if (isset ( $school_list [$school_name] )) {
				$school_list [$school_name] ++;
			} else {
				$school_list [$school_name] = 1;
			}
		}
		
		$final_values = [ ];
		foreach ( $school_list as $school => $count ) {
			$result ['label'] = $school;
			$result ['value'] = $count;
			array_push ( $final_values, $result );
		}
		//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn 666666666666666666666666666666666666666");
		return $final_values;
	}

	public function get_drilling_request_students_old_dash($data, $date = false, $request_duration = "Monthly", $dt_name = "All", $school_name = "All") {
		$query = [ ];
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		//$dates = $this->get_start_end_date ( $today_date, $request_duration );
		$dates ['today_date'] = "2018-10-01";
		$dates ['end_date'] = "2016-01-01";
		
		$obj_data = json_decode ( $data, true );
		// log_message("debug","ooooooooooooooooooooooooooooooooooooooooooooooooooooooo".print_r($obj_data,true));
		
		$type = $obj_data ['0'];
		$school_name = $obj_data ['1'];
		
		// log_message("debug","tttttttttttttttttttttttttttttttttttttttttttttt".print_r($type,true));
		
		if ($type == "Device Initiated") {
			$query_temp = $this->get_all_requests_docs_old_dash ( $dates ['today_date'], $dates ['end_date'], "Initiated", $dt_name, $school_name );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				if (isset ( $report ['history'] [0] ['submitted_user_type'] )) {
					$user_type = $report ['history'] [0] ['submitted_user_type'];
					if ($user_type != "CCUSER") {
						array_push ( $query, $report );
					}
				} else {
					array_push ( $query, $report );
				}
			}
		} else if ($type == "Web Initiated") {
			$query_temp = $this->get_all_requests_docs_old_dash ( $dates ['today_date'], $dates ['end_date'], "Initiated", $dt_name, $school_name );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				
				if (isset ( $report ['history'] [0] ['submitted_user_type'] )) {
					$user_type = $report ['history'] [0] ['submitted_user_type'];
					if ($user_type == "CCUSER") {
						array_push ( $query, $report );
					}
				}
			}
		} else if ($type == "Normal Req") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->get($this->request_app_col);
			$query = $this->get_all_requests_docs_old_dash ( $dates ['today_date'], $dates ['end_date'], "Normal", $dt_name, $school_name );
		} else if ($type == "Emergency Req") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->get($this->request_app_col);
			$query = $this->get_all_requests_docs_old_dash ( $dates ['today_date'], $dates ['end_date'], "Emergency", $dt_name, $school_name );
		} else if ($type == "Chronic Req") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col);
			$query = $this->get_all_requests_docs_old_dash ( $dates ['today_date'], $dates ['end_date'], "Chronic", $dt_name, $school_name );
		} else {
			// $query = $this->mongo_db->whereLike('doc_data.widget_data.page2.Review Info.Status',$type)->get($this->request_app_col);
			$query = $this->get_all_requests_docs_old_dash ( $dates ['today_date'], $dates ['end_date'], $type, $dt_name, $school_name );
		}
		
		// ini_set('memory_limit', '512M');
		// $query = $this->mongo_db->whereLike('doc_data.widget_data.page2.Review Info.Status',$type)->get($this->request_app_col);
		$student_list = [ ];
		$matching_docs = [ ];
		
		foreach ( $query as $request ) {
			
			$retrieval_list = array ();
			//$unique_id = $request ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
			//$doc = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
			if (isset ( $request ) && ! empty ( $request ) && count ( $request ) > 0) {
				$school = $request ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['School Name'] ['field_ref'];
				if ($school == $school_name) {
					//array_push ( $matching_docs, $doc [0] ['_id']->{'$id'} );
					array_push ( $matching_docs, $request ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID']);
				}
			}
		}
		return $matching_docs;
	}

	public function get_drilling_request_students($data, $date = false, $request_duration = "Daily", $dt_name = "All", $school_name = "All",$request_pie_status = "All") {
		//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn 8888888888888888888888888888888888888888888888888");
		$query = [ ];
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		$dates = $this->get_start_end_date ( $today_date, $request_duration );
		
		$obj_data = json_decode ( $data, true );
		// //log_message("debug","ooooooooooooooooooooooooooooooooooooooooooooooooooooooo".print_r($obj_data,true));
		
		$type = $obj_data ['0'];
		$school_name = $obj_data ['1'];
		
		// //log_message("debug","tttttttttttttttttttttttttttttttttttttttttttttt".print_r($type,true));
		
		$query_temp = $this->get_all_symptoms_docs ( $dates ['today_date'], $dates ['end_date'],false,$request_pie_status );
		
		$doc_query = array ();
		if ($school_name == "All") {
			if ($dt_name != "All") {
				foreach ( $query_temp as $doc ) {
					$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
					/*$screening_doc = $this->mongo_db->select ( array (
							'doc_data.widget_data.page2' 
					) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );*/
					/*$screening_doc = $this->mongo_db->select ( array (
							'doc_data.widget_data' 
					) )->where ( 'doc_data.widget_data.page1.Student Info.Unique ID', $unique_id )->get ( $this->request_app_col_static_html );*/
					if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['District'] ['field_ref'] ) == strtolower ( $dt_name )) {
							array_push ( $doc_query, $doc );
						}
					}
				}
				$query_temp = $doc_query;
			} else {
			}
		} else {
			foreach ( $query_temp as $doc ) {
				
				$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
				/*$screening_doc = $this->mongo_db->select ( array (
						'doc_data.widget_data.page2' 
				) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );*/
				/*$screening_doc = $this->mongo_db->select ( array (
							'doc_data.widget_data' 
					) )->where ( 'doc_data.widget_data.page1.Student Info.Unique ID', $unique_id )->get ( $this->request_app_col_static_html );*/
			if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
					if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['School Name'] ['field_ref'] ) == strtolower ( $school_name )) {
						array_push ( $doc_query, $doc );
					}
				}
			}
			$query_temp = $doc_query;
		}
		
		if ($type == "Device Initiated") {
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
				
					if ($status == "Initiated") {
						
						if (isset ( $report ['history'] [0] ['submitted_user_type'] )) {
						$user_type = $report ['history'] [0] ['submitted_user_type'];
						if (($user_type == "CCUSER")) {
							//$web_initiated ++;
						} else {
							array_push ( $query, $report );
						}
					} else {
						array_push ( $query, $report );
					}	
				} 
			}
		
		} else if ($type == "Screening Initiated") {
			//$query_temp = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Screening", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {				
				
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
			
				if ($status == "Initiated") {
					if (isset ( $report ['history'] [0] ['submitted_user_type'] )) {
						$user_type = $report ['history'] [0] ['submitted_user_type'];
						if (($user_type == "CCUSER")) {
							//$web_initiated ++;
						}else if(($user_type == "PADMIN")){
							array_push ( $query, $report );
						} else {
							//$device_initiated ++;
						}
					} else {
						//$device_initiated ++;
					}
				}
				
			}
		} else if ($type == "Web Initiated") {
			//$query_temp = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Initiated", $dt_name, $school_name,$request_pie_status );
			$query = [ ];
			foreach ( $query_temp as $report ) {
				
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
				if ($status == "Initiated") {
					if (isset ( $report ['history'] [0] ['submitted_user_type'] )) {
						$user_type = $report ['history'] [0] ['submitted_user_type'];
						if (($user_type == "CCUSER")) {
							array_push ( $query, $report );							
						}else if(($user_type == "PADMIN")){
							//$screening_initiated ++;
						} else {
							//$device_initiated ++;
						}
					} else {
						//$device_initiated ++;
					}
				}
			}
		} else if ($type == "Normal Req") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Normal", $dt_name, $school_name,$request_pie_status );
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$request_type = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Request Type'];
				if ($request_type == "Normal") {
					array_push ( $query, $report );	
				}
			}	
		} else if ($type == "Emergency Req") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Emergency", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$request_type = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Request Type'];
				if ($request_type == "Emergency") {
					array_push ( $query, $report );	
				}
			}
			
			
			
		} else if ($type == "Chronic Req") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Chronic", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$request_type = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Request Type'];
				if ($request_type == "Chronic") {
					array_push ( $query, $report );	
				}
			}
			
			
		}else if ($type == "Prescribed") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Chronic", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
				if ($status == "Prescribed") {
					array_push ( $query, $report );	
				}
			}
			
			
		}else if ($type == "Under Medication") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Chronic", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
				if ($status == "Under Medication") {
					array_push ( $query, $report );	
				}
			}
			
			
		}else if ($type == "Follow-up") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Chronic", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
				if ($status == "Follow-up") {
					array_push ( $query, $report );	
				}
			}
			
			
		}else if ($type == "Cured") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Chronic", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
				if ($status == "Cured") {
					array_push ( $query, $report );	
				}
			}
			
			
		}else if ($type == "Hospitalized") {
			// $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col);
			//$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], "Chronic", $dt_name, $school_name,$request_pie_status );
			
			$query = [ ];
			foreach ( $query_temp as $report ) {
				$status = $report ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Status'];
				if ($status == "Hospitalized") {
					array_push ( $query, $report );	
				}
			}
			
			
		} else {
			// $query = $this->mongo_db->whereLike('doc_data.widget_data.page2.Review Info.Status',$type)->get($this->request_app_col);
			$query = $this->get_all_requests_docs ( $dates ['today_date'], $dates ['end_date'], $type, $dt_name, $school_name,$request_pie_status );
		}
		
		// ini_set('memory_limit', '512M');
		// $query = $this->mongo_db->whereLike('doc_data.widget_data.page2.Review Info.Status',$type)->get($this->request_app_col);
		$student_list = [ ];
		$matching_docs = [ ];
		
		foreach ( $query as $request ) {
			//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn 9999999999999999999999999999999999999");
			$retrieval_list = array ();
			//$unique_id = $request ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
			//$doc = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
			if (isset ( $request ) && ! empty ( $request ) && count ( $request ) > 0) {
				//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
				$school = $request ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['School Name']['field_ref'];
				if ($school == $school_name) {
					//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb");
					array_push ( $matching_docs, $request ['doc_data']['widget_data']['page1']['Student Info']['Unique ID'] );
				}
			}
		}
		//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn ccccccccccccccccccccccccccccccccccccccccccccccccccccccc");
		return $matching_docs;
	}
	public function get_drilling_request_students_docs($_id_array) {
		
		//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee");
		$docs = [ ];
		//log_message ( "debug", "rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" . print_r ( $_id_array, true ) );
		if (isset ( $_id_array ) && ! empty ( $_id_array ) && count ( $_id_array ) > 0) {
		foreach ( $_id_array as $_id ) {
			/*$query = $this->mongo_db->select ( array (
					'doc_data.widget_data.page1',
					'doc_data.widget_data.page2' 
			) )->where ( "_id", new MongoID ( $_id ) )->get ( $this->screening_app_col );*/
			$query = $this->mongo_db->select ( array (
					'doc_data.widget_data.page1',
					'doc_data.widget_data.page2' 
			) )->where ( "doc_data.widget_data.page1.Student Info.Unique ID", $_id )->get ( $this->request_app_col_static_html );

			if(empty($query))
			{
				$query = $this->mongo_db->select ( array (
					'doc_data.widget_data.page1',
					'doc_data.widget_data.page2' 
				) )->where ( "_id", new MongoID ( $_id ) )->get ( $this->request_app_col_static_html );
			}
			array_push ( $docs, $query [0] );
			}
		}
		//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn ffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
		return $docs;
	}

	public function get_drilling_request_students_docs_old_dash($_id_array) {
		$docs = [ ];
		
		foreach ( $_id_array as $_id ) {
			/*$query = $this->mongo_db->select ( array (
					'doc_data.widget_data.page1',
					'doc_data.widget_data.page2' 
			) )->where ( "_id", new MongoID ( $_id ) )->get ( $this->screening_app_col );*/
			$query = $this->mongo_db->select ( array (
					'doc_data.widget_data.page1',
					'doc_data.widget_data.page2' 
			) )->where ( "doc_data.widget_data.page1.Personal Information.Hospital Unique ID",  $_id)->get ( $this->screening_app_col );
			if(empty($query))
			{
				$query = $this->mongo_db->select ( array (
					'doc_data.widget_data.page1',
					'doc_data.widget_data.page2' 
				) )->where ( "doc_data.widget_data.page1.Personal Information.Hospital Unique ID",  $_id)->get ( 'healthcare2016226112942701_divided_passed_out' );
			}
			if(isset($query[0]) && !empty($query[0]))
			{
				array_push ( $docs, $query [0] );
			}
		}
		return $docs;
	}
	
	// ----------------------------------------------------------------------
	
	// ===================================id=======================+==========================
	public function drilldown_identifiers_docs($start_date, $end_date, $type) {
		ini_set ( 'memory_limit', '10G' );
		$query = $this->mongo_db->whereIn ( "doc_data.widget_data.page1.Problem Info.Identifier", array (
				$type 
		) )->get ( $this->request_app_col );
		
		$result = [ ];
		foreach ( $query as $doc ) {
			
			foreach ( $doc ['history'] as $date ) {
				$time = $date ['time'];
				
				if (($time <= $start_date) && ($time >= $end_date)) {
					array_push ( $result, $doc );
					break;
				}
			}
		}
		$query = $result;
		
		return $query;
	}
	public function drilldown_identifiers_to_districts_old_dash($data, $date = false, $request_duration = "Monthly", $dt_name = "All", $school_name = "All") {
		ini_set ( 'max_execution_time', 0 );
		$query = [ ];
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		$obj_data = json_decode ( $data, true );
		$type = $obj_data ['label'];
		
		$dates ['today_date'] = "2018-10-01";
		$dates ['end_date'] = "2016-01-01";
		//$dates = $this->get_start_end_date ( $today_date, $request_duration );
		$query = $this->get_all_symptoms_docs_old_dash ( $dates ['today_date'], $dates ['end_date'], $type );
		
		$doc_query = array ();
		if ($school_name == "All") {
			if ($dt_name != "All") {
				foreach ( $query as $doc ) {
					//$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
					//$screening_doc = $this->mongo_db->select(array('doc_data.widget_data.page2'))->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );doc_data.widget_data.page1.Student Info.District.
					if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['District']['field_ref'] ) == strtolower ( $dt_name )) {
							array_push ( $doc_query, $doc );
						}
					}
				}
				$query = $doc_query;
			} else {
			}
		} else {
			foreach ( $query as $doc ) {
		
				//$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
				//$screening_doc = $this->mongo_db->select(array('doc_data.widget_data.page2'))->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
		
				if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
					if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['School Name']['field_ref']) == strtolower ( $school_name )) {
						array_push ( $doc_query, $doc );
					}
				}
			}
			$query = $doc_query;
		}
		
		// $query = $this->mongo_db->whereIn("doc_data.widget_data.page1.Problem Info.Identifier", array($type))->get($this->request_app_col);
		$dist_list = [ ];
		
		foreach ( $query as $identifiers ) {
			
			$retrieval_list = array ();
			//$unique_id = $identifiers ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
			//$doc = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
			// log_message("debug","dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd".print_r($doc,true));
			if (isset ( $identifiers) && (!empty ( $identifiers)) && (count ( $identifiers > 0))) {
				$district = $identifiers ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['District'] ['field_ref'];
				if (isset ( $dist_list [$district] )) {
					$dist_list [$district] ++;
				} else {
					$dist_list [$district] = 1;
				}
			}
		}
		
		$final_values = [ ];
		foreach ( $dist_list as $dicsts => $count ) {
			$result ['label'] = $dicsts;
			$result ['value'] = $count;
			array_push ( $final_values, $result );
		}
		
		return $final_values;
	}
	public function get_drilling_identifiers_schools_old_dash($data, $date = false, $request_duration = "Monthly", $dt_name = "All", $school_name = "All") {
		$query = [ ];
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		$obj_data = json_decode ( $data, true );
		
		$type = $obj_data [0];
		$dist = strtolower ( $obj_data [1] );

		$dates ['today_date'] = "2018-10-01";
		$dates ['end_date'] = "2016-01-01";

		//$dates = $this->get_start_end_date ( $today_date, $request_duration );
		$query = $this->get_all_symptoms_docs_old_dash ( $dates ['today_date'], $dates ['end_date'], $type );
		
		$doc_query = array ();
		if ($school_name == "All") {
			if ($dt_name != "All") {
				foreach ( $query as $doc ) {
					//$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
					//$screening_doc = $this->mongo_db->select(array('doc_data.widget_data.page2'))->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
					if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['District'] ['field_ref'] ) == strtolower ( $dt_name )) {
							array_push ( $doc_query, $doc );
						}
					}
				}
				$query = $doc_query;
			} else {
			}
		} else {
			foreach ( $query as $doc ) {
		
				//$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
				//$screening_doc = $this->mongo_db->select(array('doc_data.widget_data.page2'))->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
		
				if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
					if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['School Name'] ['field_ref']) == strtolower ( $school_name )) {
						array_push ( $doc_query, $doc );
					}
				}
			}
			$query = $doc_query;
		}
		
		// ini_set('memory_limit', '512M');
		// $query = $this->mongo_db->whereIn("doc_data.widget_data.page1.Problem Info.Identifier", array($type))->get($this->request_app_col);
		
		$school_list = [ ];
		$matching_docs = [ ];
		
		foreach ( $query as $request ) {
			
			$retrieval_list = array ();
			//$unique_id = $request ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
			//$doc = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
			if (isset ( $request ) && ! empty ( $request ) && (count ( $request ) > 0)) {
				$district = $request ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['District'] ['field_ref'];
				if (strtolower ( $district ) == strtolower ( $dist )) {
					array_push ( $matching_docs, $request );
				}
			}
		}
		
		foreach ( $matching_docs as $docs ) {
			$school_name = $docs ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['School Name'] ['field_ref'];
			if (isset ( $school_list [$school_name] )) {
				$school_list [$school_name] ++;
			} else {
				$school_list [$school_name] = 1;
			}
		}
		
		$final_values = [ ];
		foreach ( $school_list as $school => $count ) {
			$result ['label'] = $school;
			$result ['value'] = $count;
			array_push ( $final_values, $result );
		}
		
		return $final_values;
	}
	public function get_drilling_identifiers_students_old_dash($data, $date = false, $request_duration = "Monthly", $dt_name = "All", $school_name = "All") {
		$obj_data = json_decode ( $data, true );
		// log_message("debug","ooooooooooooooooooooooooooooooooooooooooooooooooooooooo".print_r($obj_data,true));
		
		$type = $obj_data ['0'];
		$school_name = $obj_data ['1'];
		
		// log_message("debug","tttttttttttttttttttttttttttttttttttttttttttttt".print_r($type,true));
		
		$query = [ ];
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}

		$dates ['today_date'] = "2018-10-01";
		$dates ['end_date'] = "2016-01-01";

		//$dates = $this->get_start_end_date ( $today_date, $request_duration );
		$query = $this->get_all_symptoms_docs_old_dash ( $dates ['today_date'], $dates ['end_date'], $type );
		
		$doc_query = array ();
		if ($school_name == "All") {
			if ($dt_name != "All") {
				foreach ( $query as $doc ) {
					//$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
					//$screening_doc = $this->mongo_db->select(array('doc_data.widget_data.page2'))->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
					if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['District'] ['field_ref'] ) == strtolower ( $dt_name )) {
							array_push ( $doc_query, $doc );
						}
					}
				}
				$query = $doc_query;
			} else {
			}
		} else {
			foreach ( $query as $doc ) {
		
				//$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
				//$screening_doc = $this->mongo_db->select(array('doc_data.widget_data.page2'))->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
		
				if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
					if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['School Name'] ['field_ref']) == strtolower ( $school_name )) {
						array_push ( $doc_query, $doc );
					}
				}
			}
			$query = $doc_query;
		}
		
		// ini_set('memory_limit', '512M');
		// $query = $this->mongo_db->whereIn("doc_data.widget_data.page1.Problem Info.Identifier", array($type))->get($this->request_app_col);
		
		$student_list = [ ];
		$matching_docs = [ ];
		
		foreach ( $query as $request ) {
			
			$retrieval_list = array ();
			//$unique_id = $request ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
			//$doc = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
			
			if (isset ( $request ) && ! empty ( $request ) && (count ( $request ) > 0)) {
				$school = $request  ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['School Name'] ['field_ref'];
				if ($school == $school_name) {
					array_push ( $matching_docs, $request['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'] );
				}
			}
		}
		
		return $matching_docs;
	}
	public function drilldown_identifiers_to_districts($data, $date = false, $request_duration = "Daily", $dt_name = "All", $school_name = "All",$request_pie_status = "All") {
		//log_message ( 'debug', 'drilldown_identifiers_to_districts==dddddddddddddddddddddddddddddddddddddddd----' . print_r ( $dt_name, true ) );
		//log_message ( 'debug', 'ssssssssssssssssssssssssssssssssssssssss----' . print_r ( $school_name, true ) );
		//log_message ( 'debug', 'dttttttttttttttttttttttttttttttttttttttt----' . print_r ( $data, true ) );
		ini_set ( 'max_execution_time', 0 );
		ini_set ( 'memory_limit', '10G' );
		$query = [ ];
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		$obj_data = json_decode ( $data, true );
		$type = $obj_data ['label'];
		
		//log_message ( 'debug', 'drilldown_identifiers_to_districts=====type----' . print_r ( $type, true ) );
		
		$dates = $this->get_start_end_date ( $today_date, $request_duration );
		$query = $this->get_all_symptoms_docs ( $dates ['today_date'], $dates ['end_date'], $type,$request_pie_status );
		
		//log_message ( 'debug', 'drilldown_identifiers_to_districts----query-----' . print_r ( $query, true ) );
		
		$doc_query = array ();
		if ($school_name == "All") {
			if ($dt_name != "All") {
				foreach ( $query as $doc ) {
					//$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
					//$screening_doc = $this->mongo_db->select ( array ('doc_data.widget_data.page2' 
					//) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
					if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['District'] ['field_ref'] ) == strtolower ( $dt_name )) {
							array_push ( $doc_query, $doc );
						}
					}
				}
				$query = $doc_query;
			} 
			else 
			{
				// ADDED BY SELVA
				foreach ($query as $doc ) {
					//$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
					//log_message ( 'debug', 'drilldown_identifiers_to_districts----unique_id-----' . print_r ( $unique_id, true ) );
					//$screening_doc = $this->mongo_db->select ( array ('doc_data.widget_data.page2' 
					//) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
					//log_message ( 'debug', 'drilldown_identifiers_to_districts----screening_doc-----' . print_r ( $screening_doc, true ) );
					if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
						
							array_push ( $doc_query, $doc );
					}
				}
				//log_message ( 'debug', 'drilldown_identifiers_to_districts----doc_query-----' . print_r ( $doc_query, true ) );
				$query = $doc_query;
			}
		} else {
			foreach ( $query as $doc ) {
				
				//$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
				//$screening_doc = $this->mongo_db->select (array('doc_data.widget_data.page2' 
				//) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
				
				if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
					if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['School Name'] ['field_ref'] ) == strtolower ( $school_name )) {
						array_push ( $doc_query, $doc );
					}
				}
			}
			$query = $doc_query;
		}
		
		// $query = $this->mongo_db->whereIn("doc_data.widget_data.page1.Problem Info.Identifier", array($type))->get($this->request_app_col);
		$dist_list = [ ];
		
		foreach ( $query as $identifiers ) {
			
			$retrieval_list = array ();
			//$unique_id = $identifiers ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
			//$doc = $this->mongo_db->where/*Like*/ ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
		    //log_message("debug","dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd".print_r($doc,true));
			//log_message("debug","dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd".print_r(count($doc),true));
			if (isset ( $identifiers ) && ! empty ( $identifiers ) && (count ( $identifiers ) > 0)) {
				$district = $identifiers ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['District'] ['field_ref'];
				if (isset ( $dist_list [$district] )) {
					$dist_list [$district] ++;
				} else {
					$dist_list [$district] = 1;
				}
			}
		}
		
		$final_values = [ ];
		foreach ( $dist_list as $dicsts => $count ) {
			$result ['label'] = $dicsts;
			$result ['value'] = $count;
			array_push ( $final_values, $result );
		}
		
		return $final_values;
	}
	public function get_drilling_identifiers_schools($data, $date = false, $request_duration = "Daily", $dt_name = "All", $school_name = "All",$request_pie_status = "All") {
		$query = [ ];
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		$obj_data = json_decode ( $data, true );
		
		$type = $obj_data [0];
		$dist = strtolower ( $obj_data [1] );
		//log_message('info','222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222.');
		$dates = $this->get_start_end_date ( $today_date, $request_duration );
		//log_message('info','333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333.');
		$query = $this->get_all_symptoms_docs ( $dates ['today_date'], $dates ['end_date'], $type,$request_pie_status );
		
		$doc_query = array ();
		if ($school_name == "All") {
			if ($dt_name != "All") {
				foreach ( $query as $doc ) {
					//$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
					//$screening_doc = $this->mongo_db->select ( array ('doc_data.widget_data.page2' 
					//) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
					if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['District'] ['field_ref'] ) == strtolower ( $dt_name )) {
							array_push ( $doc_query, $doc );
						}
					}
				}
				$query = $doc_query;
			} else {
			}
		} else {
			foreach ( $query as $doc ) {
				
				ini_set ( 'memory_limit', '100G' );
				//$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
				//$screening_doc = $this->mongo_db->select ( array ('doc_data.widget_data.page2' 
				//) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
				
				if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
					if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['School Name'] ['field_ref'] ) == strtolower ( $school_name )) {
						array_push ( $doc_query, $doc );
					}
				}
			}
			$query = $doc_query;
		}
		
		// ini_set('memory_limit', '512M');
		// $query = $this->mongo_db->whereIn("doc_data.widget_data.page1.Problem Info.Identifier", array($type))->get($this->request_app_col);
		
		$school_list = [ ];
		$matching_docs = [ ];
		
		foreach ( $query as $request ) {
			
			$retrieval_list = array ();
			//$unique_id = $request ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
			//$doc = $this->mongo_db->where( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
			if (isset ( $request ) && ! empty ( $request ) && (count ( $request ) > 0)) {
				$district = $request [0] ['doc_data'] ['widget_data'] ['page1'] ['Student'] ['District'] ['field_ref'];
				if (strtolower ( $district ) == strtolower ( $dist )) {
					array_push ( $matching_docs, $request );
				}
			}
		}
		
		foreach ( $matching_docs as $docs ) {
			$school_name = $docs ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['School Name'] ['field_ref'];
			if (isset ( $school_list [$school_name] )) {
				$school_list [$school_name] ++;
			} else {
				$school_list [$school_name] = 1;
			}
		}
		
		$final_values = [ ];
		foreach ( $school_list as $school => $count ) {
			$result ['label'] = $school;
			$result ['value'] = $count;
			array_push ( $final_values, $result );
		}
		//log_message('info','777777777777777777777777777777777777777777777777777777777777777777777777777777777.');
		return $final_values;
	}
	public function get_drilling_identifiers_students($data, $date = false, $request_duration = "Daily", $dt_name = "All", $school_name = "All",$request_pie_status = "All") {
		$obj_data = json_decode ( $data, true );
		// //log_message("debug","ooooooooooooooooooooooooooooooooooooooooooooooooooooooo".print_r($obj_data,true));
		
		$type = $obj_data ['0'];
		$school_name = $obj_data ['1'];
		
		// //log_message("debug","tttttttttttttttttttttttttttttttttttttttttttttt".print_r($type,true));
		
		$query = [ ];
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		$dates = $this->get_start_end_date ( $today_date, $request_duration );
		$query = $this->get_all_symptoms_docs ( $dates ['today_date'], $dates ['end_date'], $type,$request_pie_status );
		ini_set ( 'memory_limit', '100G' );
		$doc_query = array ();
		if ($school_name == "All") {
			if ($dt_name != "All") {
				foreach ( $query as $doc ) {
					//$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
					//$screening_doc = $this->mongo_db->select ( array ('doc_data.widget_data.page2' 
					//) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
					if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['District'] ['field_ref'] ) == strtolower ( $dt_name )) {
							array_push ( $doc_query, $doc );
						}
					}
				}
				$query = $doc_query;
			} else {
			}
		} else {
			foreach ( $query as $doc ) {
				
				//$unique_id = $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
				//$screening_doc = $this->mongo_db->select ( array ('doc_data.widget_data.page2' 
				//) )->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
				
				if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
					if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['School Name'] ) == strtolower ( $school_name )) {
						array_push ( $doc_query, $doc );
					}
				}
			}
			$query = $doc_query;
		}
		
		// ini_set('memory_limit', '512M');
		// $query = $this->mongo_db->whereIn("doc_data.widget_data.page1.Problem Info.Identifier", array($type))->get($this->request_app_col);
		
		$student_list = [ ];
		$matching_docs = [ ];
		
		foreach ( $query as $request ) {
			
			$retrieval_list = array ();
			//$unique_id = $request ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
			//$doc = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
			if (isset ( $request ) && ! empty ( $request ) && (count ( $request ) > 0)) {
				$school = $request ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['School Name'];
				if ($school == $school_name) {
					array_push ( $matching_docs, $request ['_id']->{'$id'} );
				}
			}
		}
		
		return $matching_docs;
	}

	public function get_drilling_identifiers_students_docs($_id_array)
	{
		$docs = [ ];
		
		foreach ( $_id_array as $_id ) {
			$query = $this->mongo_db->select ( array (
					'doc_data.widget_data.page1',
					'doc_data.widget_data.page2' 
			) )->where ( "_id", new MongoID ( $_id ) )->get ( $this->screening_app_col );
			array_push ( $docs, $query [0] );
		}
		return $docs;
	}
	public function get_drilling_identifiers_students_docs_old_dash($_id_array) {
		$docs = [ ];
		
		foreach ( $_id_array as $_id ) {
			
			$query = $this->mongo_db->select ( array (
					'doc_data.widget_data.page1',
					'doc_data.widget_data.page2' 
			) )->where ( "doc_data.widget_data.page1.Personal Information.Hospital Unique ID", $_id )->get ( $this->screening_app_col );
			//where ( "_id", new MongoID ( $_id ) )->get ( $this->screening_app_col );
			if(empty($query))
			{
				$query = $this->mongo_db->select ( array (
					'doc_data.widget_data.page1',
					'doc_data.widget_data.page2' 
				) )->where ( "doc_data.widget_data.page1.Personal Information.Hospital Unique ID", $_id )->get ( "healthcare2016226112942701_divided_passed_out");
			}
			if(isset($query[0]) && !empty($query[0]))
			{
				array_push ( $docs, $query [0] );
			}
		}
		return $docs;
	}
	
	// ===================================id=================================================
	private function screening_pie_data_for_stage1($dates) {
		// //log_message ( "debug", "innnnnnnnnnnnnnnnnnnnnnn stage 111111111111111111111111111111111--------------------" . print_r ( $dates, true ) );
		ini_set ( 'max_execution_time', 0 );
		// ============================================================stage 1 ==============================================
		
		$count = $this->mongo_db->count ( $this->screening_app_col );
		if ($count < 10000) {
			$per_page = $count;
			$loop = 2; // $count / $per_page;
		} else {
			$per_page = 10000;
			$loop = $count / $per_page;
		}
		
		$requests = [ ];
		
		$request ['label'] = 'Physical Abnormalities';
		// $query = $this->mongo_db->whereIn("doc_data.widget_data.page5.Doctor Check Up.Deficencies", array("Over Weight", "Under Weight"))->count($this->screening_app_col);
		
		$merged_array = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$in' => array (
								"Over Weight",
								"Under Weight" 
						) 
				) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
			// //log_message("debug","responseeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee=====1665==".print_r($response,true));
		}
		
		$request ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request ['label'] = 'General Abnormalities';
		
		// $search = array("doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array("Over Weight", "Under Weight"));
		// $query = $this->mongo_db->where(array("doc_data.widget_data.page5.Doctor Check Up.N A D" => array("Yes")))->count($this->screening_app_col);
		
		$merged_array = array ();
		$nad_exists = array (
				"doc_data.widget_data.page5.Doctor Check Up.N A D" => array (
						'$nin' => array (
								"Yes" 
						) 
				) 
		);
		$nad_not_yes = array (
				"doc_data.widget_data.page5.Doctor Check Up.N A D" => array (
						'$exists' => true 
				) 
		);
		
		$abnormalities_not_string = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$ne' => " " 
				) 
		);
		$ortho_not_string = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$ne' => " " 
				) 
		);
		$postural_not_string = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$ne' => " " 
				) 
		);
		$description_not_string = array (
				"doc_data.widget_data.page4.Doctor Check Up.Description" => array (
						'$ne' => "" 
				) 
		);
		$advice_not_string = array (
				"doc_data.widget_data.page4.Doctor Check Up.Advice" => array (
						'$ne' => "" 
				) 
		);
		$defects_not_string = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$ne' => " " 
				) 
		);
		$deficencles_not_string = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencles" => array (
						'$ne' => " " 
				) 
		);
		$childhood_not_string = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$ne' => " " 
				) 
		);
		$nad_not_string = array (
				"doc_data.widget_data.page5.Doctor Check Up.N A D" => array (
						'$ne' => " " 
				) 
		);
		$deficencies_not_string = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$ne' => " " 
				) 
		);
		
		array_push ( $merged_array, $nad_exists );
		array_push ( $merged_array, $nad_not_yes );
		
		array_push ( $merged_array, $abnormalities_not_string );
		array_push ( $merged_array, $ortho_not_string );
		array_push ( $merged_array, $postural_not_string );
		array_push ( $merged_array, $description_not_string );
		array_push ( $merged_array, $advice_not_string );
		array_push ( $merged_array, $defects_not_string );
		array_push ( $merged_array, $deficencles_not_string );
		array_push ( $merged_array, $childhood_not_string );
		array_push ( $merged_array, $nad_not_string );
		array_push ( $merged_array, $deficencies_not_string );
		
		// ////log_message("debug","response=====1665==".print_r($merged_array,true));
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		$request ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request ['label'] = 'Eye Abnormalities';
		// $search = array("doc_data.widget_data.page6.Without Glasses.Right" => "6/6", "doc_data.widget_data.page6.Without Glasses.Left" => "6/6", "doc_data.widget_data.page6.With Glasses.Right" => "", "doc_data.widget_data.page6.With Glasses.Left" => "", "doc_data.widget_data.page6.With Glasses.Right" => "6/6", "doc_data.widget_data.page6.With Glasses.Left" => "6/6", "doc_data.widget_data.page7.Colour Blindness.Right" => "No", "doc_data.widget_data.page7.Colour Blindness.Left" => "No", "doc_data.widget_data.page6" => array(),"doc_data.widget_data.page7" => array());
		// $query = $this->mongo_db->whereNe($search)->count($this->screening_app_col);
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$without_glass_left = array (
				"doc_data.widget_data.page6.Without Glasses.Left" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		$without_glass_right = array (
				"doc_data.widget_data.page6.Without Glasses.Right" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		$with_glass_left = array (
				"doc_data.widget_data.page6.With Glasses.Left" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		$with_glass_right = array (
				"doc_data.widget_data.page6.With Glasses.Right" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		$color_right = array (
				"doc_data.widget_data.page7.Colour Blindness.Right" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$color_left = array (
				"doc_data.widget_data.page7.Colour Blindness.Left" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		
		$page6_exists = array (
				"doc_data.widget_data.page6.With Glasses" => array (
						'$exists' => true 
				) 
		);
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $without_glass_left );
		array_push ( $or_merged_array, $without_glass_right );
		array_push ( $or_merged_array, $with_glass_left );
		array_push ( $or_merged_array, $with_glass_right );
		array_push ( $or_merged_array, $color_right );
		array_push ( $or_merged_array, $color_left );
		
		array_push ( $and_merged_array, $page6_exists );
		array_push ( $and_merged_array, $page7_exists );
		
		// ////log_message("debug","response=====1665==".print_r($merged_array,true));
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		// ////log_message("debug","response=====1748==".print_r($response,true));
		// ////log_message("debug","response=====1749==".print_r(count($response['result']),true));
		
		$request ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request ['label'] = 'Auditory Abnormalities';
		// $search = array("doc_data.widget_data.page8. Auditory Screening.Right" => "Pass", "doc_data.widget_data.page8. Auditory Screening.Left" => "Pass", "doc_data.widget_data.page8. Auditory Screening.Speech Screening" => array('Normal'), "doc_data.widget_data.page8" => array());
		// $query = $this->mongo_db->whereNe($search)->count($this->screening_app_col);
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$audi_right = array (
				"doc_data.widget_data.page8. Auditory Screening.Right" => array (
						'$nin' => array (
								"Pass",
								"",
								" " 
						) 
				) 
		);
		$audi_left = array (
				"doc_data.widget_data.page8. Auditory Screening.Left" => array (
						'$nin' => array (
								"Pass",
								"",
								" " 
						) 
				) 
		);
		$speech = array (
				"doc_data.widget_data.page8. Auditory Screening.Speech Screening" => array (
						'$nin' => array (
								"Normal",
								"",
								" ",
								[ ] 
						) 
				) 
		);
		
		$page8_exists = array (
				"doc_data.widget_data.page8. Auditory Screening" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $audi_right );
		array_push ( $or_merged_array, $audi_left );
		array_push ( $or_merged_array, $speech );
		
		array_push ( $and_merged_array, $page8_exists );
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		$request ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request ['label'] = 'Dental Abnormalities';
		// $search = array("doc_data.widget_data.page9.Dental Check-up.Oral Hygiene" => "Good", "doc_data.widget_data.page9.Dental Check-up.Carious Teeth" => "No", "doc_data.widget_data.page9.Dental Check-up.Flourosis" => "No","doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment" => "No","doc_data.widget_data.page9.Dental Check-up.Indication for extraction" => "No", "doc_data.widget_data.page9" => array());
		// $query = $this->mongo_db->whereNe($search)->count($this->screening_app_col);
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$oral_hygiene = array (
				"doc_data.widget_data.page9.Dental Check-up.Oral Hygiene" => array (
						'$nin' => array (
								"Good",
								"",
								" " 
						) 
				) 
		);
		$carious_teeth = array (
				"doc_data.widget_data.page9.Dental Check-up.Carious Teeth" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$flourosis = array (
				"doc_data.widget_data.page9.Dental Check-up.Flourosis" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$orthodontic = array (
				"doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$indication = array (
				"doc_data.widget_data.page9.Dental Check-up.Indication for extraction" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $oral_hygiene );
		array_push ( $or_merged_array, $carious_teeth );
		array_push ( $or_merged_array, $flourosis );
		array_push ( $or_merged_array, $orthodontic );
		array_push ( $or_merged_array, $indication );
		
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			// //log_message("debug","deeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee===".print_r($response,true));
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		$request ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		// //log_message("debug","pppppppppppppppppppppppppppppppp123=====".print_r($requests,true));
		
		return $requests;
		
		// ============================================================end of stage 1 =======================================
	}
	private function screening_pie_data_for_stage2($dates) {
		ini_set ( 'max_execution_time', 0 );
		ini_set ( 'memory_limit', '10G' );
		$count = $this->mongo_db->count ( $this->screening_app_col );
		if ($count < 10000) {
			$per_page = $count;
			$loop = 2; // $count / $per_page;
		} else {
			$per_page = 10000;
			$loop = $count / $per_page;
		}
		// ======================================================stage 2 =================================================
		
		// $query = $this->mongo_db->orderBy(array('doc_data.widget_data.page1.Personal Information.Name' => 1))->select(array("doc_data.widget_data"))->limit($per_page)->offset($page-1)->get($this->screening_app_col);
		
		$requests = [ ];
		
		$request = [ ];
		$request ['Physical Abnormalities'] ['label'] = 'Over Weight';
		// $query = $this->mongo_db->whereIn("doc_data.widget_data.page5.Doctor Check Up.Deficencies", array("Over Weight"))->count($this->screening_app_col);
		
		$merged_array = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$in' => array (
								"Over Weight" 
						) 
				) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		$request ['Physical Abnormalities'] ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request = [ ];
		$request ['Physical Abnormalities'] ['label'] = 'Under Weight';
		// $query = $this->mongo_db->whereIn("doc_data.widget_data.page5.Doctor Check Up.Deficencies", array("Under Weight"))->count($this->screening_app_col);
		
		$merged_array = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$in' => array (
								"Under Weight" 
						) 
				) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		$request ['Physical Abnormalities'] ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request = [ ];
		$request ["General Abnormalities"] ['label'] = 'General';
		// $query = $this->mongo_db->whereNe(array("doc_data.widget_data.page4" => array(), "doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array()))->count($this->screening_app_col);
		
		$and_merged_array = array ();
		
		$general_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$ne' => '' 
				) 
		);
		$general_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$ne' => ' ' 
				) 
		);
		$general_arr = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$ne' => [ ] 
				) 
		);
		
		$not_skin = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$nin' => array (
								"Skin" 
						) 
				) 
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $and_merged_array, $general_str_empty );
		array_push ( $and_merged_array, $general_str_space );
		array_push ( $and_merged_array, $general_arr );
		array_push ( $and_merged_array, $not_skin );
		array_push ( $and_merged_array, $page4_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		$request ["General Abnormalities"] ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request = [ ];
		$request ["General Abnormalities"] ['label'] = 'Skin';
		// $query = $this->mongo_db->whereNe(array("doc_data.widget_data.page4" => array(), "doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array()))->count($this->screening_app_col);
		
		$and_merged_array = array ();
		
		$merged_array = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$in' => array (
								"Skin" 
						) 
				) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		$request ["General Abnormalities"] ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request = [ ];
		$request ["General Abnormalities"] ['label'] = 'Ortho';
		// $query = $this->mongo_db->whereNe(array("doc_data.widget_data.page4" => array(), "doc_data.widget_data.page4.Doctor Check Up.Ortho" => array()))->count($this->screening_app_col);
		// $request['value'] = $query;
		
		$and_merged_array = array ();
		$ortho = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		
		$ortho_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$ne' => '' 
				) 
		);
		$ortho_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$ne' => ' ' 
				) 
		);
		$ortho_arr = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$ne' => [ ] 
				) 
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $and_merged_array, $ortho );
		array_push ( $and_merged_array, $ortho_str_empty );
		array_push ( $and_merged_array, $ortho_str_space );
		array_push ( $and_merged_array, $ortho_arr );
		array_push ( $and_merged_array, $page4_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		$request ["General Abnormalities"] ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request = [ ];
		$request ["General Abnormalities"] ['label'] = 'Postural';
		// $query = $this->mongo_db->whereNe(array("doc_data.widget_data.page4.Doctor Check Up.Postural" => array(), "doc_data.widget_data.page4" => array()))->count($this->screening_app_col);
		
		$and_merged_array = array ();
		
		$postural = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		
		$postural_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$ne' => '' 
				) 
		);
		$postural_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$ne' => ' ' 
				) 
		);
		$postural_arr = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$ne' => [ ] 
				) 
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $and_merged_array, $postural );
		array_push ( $and_merged_array, $postural_str_empty );
		array_push ( $and_merged_array, $postural_str_space );
		array_push ( $and_merged_array, $postural_arr );
		array_push ( $and_merged_array, $page4_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		$request ["General Abnormalities"] ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request = [ ];
		$request ["General Abnormalities"] ['label'] = 'Defects at Birth';
		
		// $query = $this->mongo_db->whereNe(array("doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array(), "doc_data.widget_data.page5" => array()))->count($this->screening_app_col);
		
		$and_merged_array = array ();
		
		$birth_defect = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		$page5_exists = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$exists' => true 
				) 
		);
		
		$birth_defect_str_empty = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$ne' => '' 
				) 
		);
		$birth_defect_str_space = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$ne' => ' ' 
				) 
		);
		$birth_defect_arr = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$ne' => [ ] 
				) 
		);
		
		array_push ( $and_merged_array, $birth_defect_str_empty );
		array_push ( $and_merged_array, $birth_defect_str_space );
		array_push ( $and_merged_array, $birth_defect_arr );
		
		array_push ( $and_merged_array, $birth_defect );
		array_push ( $and_merged_array, $page5_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		$request ["General Abnormalities"] ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request = [ ];
		$request ["General Abnormalities"] ['label'] = 'Deficencies';
		// $query = $this->mongo_db->whereNe(array("doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array(), "doc_data.widget_data.page5" => array()))->count($this->screening_app_col);
		// $request['value'] = $query;
		// array_push($requests,$request);
		$and_merged_array = array ();
		
		$deficencies = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		$page5_exists = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$exists' => true 
				) 
		);
		
		$deficencies_str_empty = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$ne' => '' 
				) 
		);
		$deficencies_str_space = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$ne' => ' ' 
				) 
		);
		$deficencies_arr = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$ne' => [ ] 
				) 
		);
		
		array_push ( $and_merged_array, $deficencies_str_empty );
		array_push ( $and_merged_array, $deficencies_str_space );
		array_push ( $and_merged_array, $deficencies_arr );
		
		array_push ( $and_merged_array, $deficencies );
		array_push ( $and_merged_array, $page5_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		$request ["General Abnormalities"] ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request = [ ];
		$request ["General Abnormalities"] ['label'] = 'Childhood Diseases';
		// $query = $this->mongo_db->whereNe(array("doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array(), "doc_data.widget_data.page5" => array()))->count($this->screening_app_col);
		// $request['value'] = $query;
		// array_push($requests,$request);
		
		$and_merged_array = array ();
		
		$childhood_diseases = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		$page5_exists = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$exists' => true 
				) 
		);
		
		$childhood_diseases_str_empty = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$ne' => '' 
				) 
		);
		$childhood_diseases_str_space = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$ne' => ' ' 
				) 
		);
		$childhood_diseases_arr = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$ne' => [ ] 
				) 
		);
		
		array_push ( $and_merged_array, $childhood_diseases_str_empty );
		array_push ( $and_merged_array, $childhood_diseases_str_space );
		array_push ( $and_merged_array, $childhood_diseases_arr );
		
		array_push ( $and_merged_array, $childhood_diseases );
		array_push ( $and_merged_array, $page5_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		$request ["General Abnormalities"] ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request = [ ];
		$request ["Eye Abnormalities"] ['label'] = 'Without Glasses';
		// $search = array("doc_data.widget_data.page6.Without Glasses.Right" => "", "doc_data.widget_data.page6.Without Glasses.Left" => "", "doc_data.widget_data.page6.Without Glasses.Right" => "6/6", "doc_data.widget_data.page6.Without Glasses.Left" => "6/6", "doc_data.widget_data.page6" => array());
		// $query = $this->mongo_db->orWhere($search)->count($this->screening_app_col);
		// $request['value'] = $query;
		// array_push($requests,$request);
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$without_glass_left = array (
				"doc_data.widget_data.page6.Without Glasses.Left" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		$without_glass_right = array (
				"doc_data.widget_data.page6.Without Glasses.Right" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		
		$page6_exists = array (
				"doc_data.widget_data.page6.Without Glasses" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $without_glass_left );
		array_push ( $or_merged_array, $without_glass_right );
		array_push ( $and_merged_array, $page6_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		$request ["Eye Abnormalities"] ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request = [ ];
		$request ["Eye Abnormalities"] ['label'] = 'With Glasses';
		// $search = array("doc_data.widget_data.page6.With Glasses.Right" => "", "doc_data.widget_data.page6.With Glasses.Left" => "", "doc_data.widget_data.page6.With Glasses.Right" => "6/6", "doc_data.widget_data.page6.With Glasses.Left" => "6/6", "doc_data.widget_data.page6" => array());
		// $query = $this->mongo_db->orWhere($search)->count($this->screening_app_col);
		// $request['value'] = $query;
		// array_push($requests,$request);
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$with_glass_left = array (
				"doc_data.widget_data.page6.With Glasses.Left" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		$with_glass_right = array (
				"doc_data.widget_data.page6.With Glasses.Right" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		
		$page6_exists = array (
				"doc_data.widget_data.page6.With Glasses" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $with_glass_left );
		array_push ( $or_merged_array, $with_glass_right );
		array_push ( $and_merged_array, $page6_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		$request ["Eye Abnormalities"] ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request = [ ];
		$request ["Eye Abnormalities"] ['label'] = 'Colour Blindness';
		// $search = array("doc_data.widget_data.page7.Colour Blindness.Right" => array("Yes"), "doc_data.widget_data.page7.Colour Blindness.Left" => array("Yes"));
		// $query = $this->mongo_db->orWhere($search)->count($this->screening_app_col);
		// $request['value'] = $query;
		// array_push($requests,$request);
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$color_right = array (
				"doc_data.widget_data.page7.Colour Blindness.Right" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$color_left = array (
				"doc_data.widget_data.page7.Colour Blindness.Left" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $color_right );
		array_push ( $or_merged_array, $color_left );
		array_push ( $and_merged_array, $page7_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		$request ["Eye Abnormalities"] ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request = [ ];
		$request ["Auditory Abnormalities"] ['label'] = 'Right Ear';
		// $search = array("doc_data.widget_data.page8. Auditory Screening.Right" => "Fail", "doc_data.widget_data.page8" => array());
		// $query = $this->mongo_db->orWhere($search)->count($this->screening_app_col);
		// $request['value'] = $query;
		// array_push($requests,$request);
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$audi_right = array (
				"doc_data.widget_data.page8. Auditory Screening.Right" => array (
						'$nin' => array (
								"Pass",
								"",
								" " 
						) 
				) 
		);
		$page8_exists = array (
				"doc_data.widget_data.page8. Auditory Screening" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $audi_right );
		
		array_push ( $and_merged_array, $page8_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		$request ["Auditory Abnormalities"] ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request = [ ];
		$request ["Auditory Abnormalities"] ['label'] = 'Left Ear';
		// $search = array("doc_data.widget_data.page8. Auditory Screening.Left" => "Fail", "doc_data.widget_data.page8" => array());
		// $query = $this->mongo_db->orWhere($search)->count($this->screening_app_col);
		// $request['value'] = $query;
		// array_push($requests,$request);
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$audi_left = array (
				"doc_data.widget_data.page8. Auditory Screening.Left" => array (
						'$nin' => array (
								"Pass",
								"",
								" " 
						) 
				) 
		);
		$page8_exists = array (
				"doc_data.widget_data.page8. Auditory Screening" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $audi_left );
		array_push ( $and_merged_array, $page8_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		$request ["Auditory Abnormalities"] ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request = [ ];
		$request ["Auditory Abnormalities"] ['label'] = 'Speech Screening';
		// $query = $this->mongo_db->whereInAll("doc_data.widget_data.page8. Auditory Screening.Speech Screening", array('Delay',"Misarticulation","Fluency","Voice"))->count($this->screening_app_col);
		// $request['value'] = $query;
		// array_push($requests,$request);
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$speech = array (
				"doc_data.widget_data.page8. Auditory Screening.Speech Screening" => array (
						'$nin' => array (
								"Normal",
								"",
								" ",
								[ ] 
						) 
				) 
		);
		
		$page8_exists = array (
				"doc_data.widget_data.page8. Auditory Screening" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $speech );
		
		array_push ( $and_merged_array, $page8_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		$request ["Auditory Abnormalities"] ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request = [ ];
		$request ["Dental Abnormalities"] ['label'] = 'Oral Hygiene - Fair';
		// $query = $this->mongo_db->whereNe("doc_data.widget_data.page9.Dental Check-up.Oral Hygiene","Good")->count($this->screening_app_col);
		// $request['value'] = $query;
		// array_push($requests,$request);
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$oral_hygiene = array (
				"doc_data.widget_data.page9.Dental Check-up.Oral Hygiene" => array (
						'$nin' => array (
								"Good",
								"Poor",
								"",
								" " 
						) 
				) 
		);
		
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $oral_hygiene );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		$request ["Dental Abnormalities"] ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request = [ ];
		$request ["Dental Abnormalities"] ['label'] = 'Oral Hygiene - Poor';
		// $query = $this->mongo_db->whereNe("doc_data.widget_data.page9.Dental Check-up.Oral Hygiene","Good")->count($this->screening_app_col);
		// $request['value'] = $query;
		// array_push($requests,$request);
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$oral_hygiene = array (
				"doc_data.widget_data.page9.Dental Check-up.Oral Hygiene" => array (
						'$nin' => array (
								"Good",
								"Fair",
								"",
								" " 
						) 
				) 
		);
		
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $oral_hygiene );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		$request ["Dental Abnormalities"] ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request = [ ];
		$request ["Dental Abnormalities"] ['label'] = 'Carious Teeth';
		// $query = $this->mongo_db->where("doc_data.widget_data.page9.Dental Check-up.Carious Teeth", "Yes")->count($this->screening_app_col);
		// $request['value'] = $query;
		// array_push($requests,$request);
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$carious_teeth = array (
				"doc_data.widget_data.page9.Dental Check-up.Carious Teeth" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $carious_teeth );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		$request ["Dental Abnormalities"] ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request = [ ];
		$request ["Dental Abnormalities"] ['label'] = 'Flourosis';
		// $query = $this->mongo_db->where("doc_data.widget_data.page9.Dental Check-up.Flourosis","Yes")->count($this->screening_app_col);
		// $request['value'] = $query;
		// array_push($requests,$request);
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$flourosis = array (
				"doc_data.widget_data.page9.Dental Check-up.Flourosis" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $flourosis );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		$request ["Dental Abnormalities"] ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request = [ ];
		$request ["Dental Abnormalities"] ['label'] = 'Orthodontic Treatment';
		// $query = $this->mongo_db->where("doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment","Yes")->count($this->screening_app_col);
		// $request['value'] = $query;
		// array_push($requests,$request);
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$orthodontic = array (
				"doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $orthodontic );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		$request ["Dental Abnormalities"] ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		$request = [ ];
		$request ["Dental Abnormalities"] ['label'] = 'Indication for extraction';
		// $query = $this->mongo_db->where("doc_data.widget_data.page9.Dental Check-up.Indication for extraction", "Yes")->count($this->screening_app_col);
		// $request['value'] = $query;
		// array_push($requests,$request);
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$indication = array (
				"doc_data.widget_data.page9.Dental Check-up.Indication for extraction" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $indication );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		$request ["Dental Abnormalities"] ['value'] = count ( $result );
		array_push ( $requests, $request );
		
		return $requests;
		
		// ======================================================end of stage 2===========================================
	}
	private function screening_pie_data_for_stage3($dates) {
		ini_set ( 'max_execution_time', 0 );
		
		$count = $this->mongo_db->count ( $this->screening_app_col );
		if ($count < 10000) {
			$per_page = $count;
			$loop = 2; // $count / $per_page;
		} else {
			$per_page = 10000;
			$loop = $count / $per_page;
		}
		// ======================================================stage 3 =================================================
		
		$requests = [ ];
		
		$merged_array = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$in' => array (
								"Over Weight" 
						) 
				) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		$request ["Over Weight"] = $this->get_drilling_screenings_districts_prepare_pie_array ( $result );
		
		// ==========================================================================================
		
		$merged_array = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$in' => array (
								"Under Weight" 
						) 
				) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		$request ["Under Weight"] = $this->get_drilling_screenings_districts_prepare_pie_array ( $result );
		
		// ========================================================================================
		
		$and_merged_array = array ();
		
		$general_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$ne' => '' 
				) 
		);
		$general_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$ne' => ' ' 
				) 
		);
		$general_arr = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$ne' => [ ] 
				) 
		);
		
		$not_skin = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$nin' => array (
								"Skin" 
						) 
				) 
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $and_merged_array, $general_str_empty );
		array_push ( $and_merged_array, $general_str_space );
		array_push ( $and_merged_array, $general_arr );
		array_push ( $and_merged_array, $not_skin );
		array_push ( $and_merged_array, $page4_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		$request ["General"] = $this->get_drilling_screenings_districts_prepare_pie_array ( $result );
		
		$and_merged_array = array ();
		
		$merged_array = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$in' => array (
								"Skin" 
						) 
				) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		$request ["Skin"] = $this->get_drilling_screenings_districts_prepare_pie_array ( $result );
		array_push ( $requests, $request );
		
		// ==============================================================================
		
		$and_merged_array = array ();
		$ortho = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$exists' => true 
				) 
		);
		
		$ortho_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$ne' => '' 
				) 
		);
		$ortho_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$ne' => ' ' 
				) 
		);
		$ortho_arr = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$ne' => [ ] 
				) 
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $and_merged_array, $ortho );
		array_push ( $and_merged_array, $ortho_str_empty );
		array_push ( $and_merged_array, $ortho_str_space );
		array_push ( $and_merged_array, $ortho_arr );
		array_push ( $and_merged_array, $page4_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		$request ["Ortho"] = $this->get_drilling_screenings_districts_prepare_pie_array ( $result );
		
		// ===========================================================================
		
		$and_merged_array = array ();
		
		$postural = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		$postural_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$ne' => '' 
				) 
		);
		$postural_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$ne' => ' ' 
				) 
		);
		$postural_arr = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$ne' => [ ] 
				) 
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $and_merged_array, $postural );
		array_push ( $and_merged_array, $postural_str_empty );
		array_push ( $and_merged_array, $postural_str_space );
		array_push ( $and_merged_array, $postural_arr );
		array_push ( $and_merged_array, $page4_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		$request ["Postural"] = $this->get_drilling_screenings_districts_prepare_pie_array ( $result );
		
		// ========================================================================
		
		$and_merged_array = array ();
		
		$birth_defect = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		$page5_exists = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$exists' => true 
				) 
		);
		
		$birth_defect_str_empty = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$ne' => '' 
				) 
		);
		$birth_defect_str_space = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$ne' => ' ' 
				) 
		);
		$birth_defect_arr = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$ne' => [ ] 
				) 
		);
		
		array_push ( $and_merged_array, $birth_defect_str_empty );
		array_push ( $and_merged_array, $birth_defect_str_space );
		array_push ( $and_merged_array, $birth_defect_arr );
		array_push ( $and_merged_array, $birth_defect );
		array_push ( $and_merged_array, $page5_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		$request ['Defects at Birth'] = $this->get_drilling_screenings_districts_prepare_pie_array ( $result );
		
		// ==============================================================================
		
		$and_merged_array = array ();
		
		$deficencies = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		$page5_exists = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$exists' => true 
				) 
		);
		
		$deficencies_str_empty = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$ne' => '' 
				) 
		);
		$deficencies_str_space = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$ne' => ' ' 
				) 
		);
		$deficencies_arr = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$ne' => [ ] 
				) 
		);
		
		array_push ( $and_merged_array, $deficencies_str_empty );
		array_push ( $and_merged_array, $deficencies_str_space );
		array_push ( $and_merged_array, $deficencies_arr );
		
		array_push ( $and_merged_array, $deficencies );
		array_push ( $and_merged_array, $page5_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		$request ['Deficencies'] = $this->get_drilling_screenings_districts_prepare_pie_array ( $result );
		
		// ===========================================================================================
		
		$and_merged_array = array ();
		
		$childhood_diseases = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		$page5_exists = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$exists' => true 
				) 
		);
		
		$childhood_diseases_str_empty = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$ne' => '' 
				) 
		);
		$childhood_diseases_str_space = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$ne' => ' ' 
				) 
		);
		$childhood_diseases_arr = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$ne' => [ ] 
				) 
		);
		
		array_push ( $and_merged_array, $childhood_diseases_str_empty );
		array_push ( $and_merged_array, $childhood_diseases_str_space );
		array_push ( $and_merged_array, $childhood_diseases_arr );
		array_push ( $and_merged_array, $childhood_diseases );
		array_push ( $and_merged_array, $page5_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		$request ['Childhood Diseases'] = $this->get_drilling_screenings_districts_prepare_pie_array ( $result );
		
		// ===================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$without_glass_left = array (
				"doc_data.widget_data.page6.Without Glasses.Left" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		$without_glass_right = array (
				"doc_data.widget_data.page6.Without Glasses.Right" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		
		$page6_exists = array (
				"doc_data.widget_data.page6.Without Glasses" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $without_glass_left );
		array_push ( $or_merged_array, $without_glass_right );
		array_push ( $and_merged_array, $page6_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		$request ['Without Glasses'] = $this->get_drilling_screenings_districts_prepare_pie_array ( $result );
		
		// =============================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$with_glass_left = array (
				"doc_data.widget_data.page6.With Glasses.Left" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		$with_glass_right = array (
				"doc_data.widget_data.page6.With Glasses.Right" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		
		$page6_exists = array (
				"doc_data.widget_data.page6.With Glasses" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $with_glass_left );
		array_push ( $or_merged_array, $with_glass_right );
		array_push ( $and_merged_array, $page6_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		$request ['With Glasses'] = $this->get_drilling_screenings_districts_prepare_pie_array ( $result );
		
		// ===================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$color_right = array (
				"doc_data.widget_data.page7.Colour Blindness.Right" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$color_left = array (
				"doc_data.widget_data.page7.Colour Blindness.Left" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $color_right );
		array_push ( $or_merged_array, $color_left );
		array_push ( $and_merged_array, $page7_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		$request ['Colour Blindness'] = $this->get_drilling_screenings_districts_prepare_pie_array ( $result );
		
		// ===========================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$audi_right = array (
				"doc_data.widget_data.page8. Auditory Screening.Right" => array (
						'$nin' => array (
								"Pass",
								"",
								" " 
						) 
				) 
		);
		$page8_exists = array (
				"doc_data.widget_data.page8. Auditory Screening" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $audi_right );
		
		array_push ( $and_merged_array, $page8_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		$request ['Right Ear'] = $this->get_drilling_screenings_districts_prepare_pie_array ( $result );
		
		// ==============================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$audi_left = array (
				"doc_data.widget_data.page8. Auditory Screening.Left" => array (
						'$nin' => array (
								"Pass",
								"",
								" " 
						) 
				) 
		);
		$page8_exists = array (
				"doc_data.widget_data.page8. Auditory Screening" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $audi_left );
		array_push ( $and_merged_array, $page8_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		$request ['Left Ear'] = $this->get_drilling_screenings_districts_prepare_pie_array ( $result );
		
		// ====================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$speech = array (
				"doc_data.widget_data.page8. Auditory Screening.Speech Screening" => array (
						'$nin' => array (
								"Normal",
								"",
								" ",
								[ ] 
						) 
				) 
		);
		
		$page8_exists = array (
				"doc_data.widget_data.page8. Auditory Screening" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $speech );
		
		array_push ( $and_merged_array, $page8_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		$request ['Speech Screening'] = $this->get_drilling_screenings_districts_prepare_pie_array ( $result );
		
		// =============================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$oral_hygiene = array (
				"doc_data.widget_data.page9.Dental Check-up.Oral Hygiene" => array (
						'$nin' => array (
								"Good",
								"Poor",
								"",
								" " 
						) 
				) 
		);
		
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $oral_hygiene );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		$request ["Oral Hygiene - Fair"] = $this->get_drilling_screenings_districts_prepare_pie_array ( $result );
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$oral_hygiene = array (
				"doc_data.widget_data.page9.Dental Check-up.Oral Hygiene" => array (
						'$nin' => array (
								"Good",
								"Fair",
								"",
								" " 
						) 
				) 
		);
		
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $oral_hygiene );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		$request ["Oral Hygiene - Poor"] = $this->get_drilling_screenings_districts_prepare_pie_array ( $result );
		
		// ==============================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$carious_teeth = array (
				"doc_data.widget_data.page9.Dental Check-up.Carious Teeth" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $carious_teeth );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		$request ["Carious Teeth"] = $this->get_drilling_screenings_districts_prepare_pie_array ( $result );
		
		// ==============================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$flourosis = array (
				"doc_data.widget_data.page9.Dental Check-up.Flourosis" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $flourosis );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		$request ["Flourosis"] = $this->get_drilling_screenings_districts_prepare_pie_array ( $result );
		
		// ==============================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$orthodontic = array (
				"doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $orthodontic );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		$request ["Orthodontic Treatment"] = $this->get_drilling_screenings_districts_prepare_pie_array ( $result );
		
		// ===========================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$indication = array (
				"doc_data.widget_data.page9.Dental Check-up.Indication for extraction" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $indication );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		$request ["Indication for extraction"] = $this->get_drilling_screenings_districts_prepare_pie_array ( $result );
		
		// ======================================================end of stage 3 ===========================================
		return $request;
	}
	private function screening_pie_data_for_stage4($dates) {
		ini_set ( 'max_execution_time', 0 );
		
		$dist_list = $this->get_all_district ();
		
		$count = $this->mongo_db->count ( $this->screening_app_col );
		if ($count < 10000) {
			$per_page = $count;
			$loop = 2; // $count / $per_page;
		} else {
			$per_page = 10000;
			$loop = $count / $per_page;
		}
		// ======================================================stage 3 =================================================
		
		$requests = [ ];
		
		$merged_array = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$in' => array (
								"Over Weight" 
						) 
				) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		// //log_message('debug','dddddddddddddddddddddddddddddddddddddddddddddddddddddddlist--------'.print_r($dist_list,true));
		foreach ( $dist_list as $dist ) {
			// //log_message('debug','ddddddddddddddddddddddddddddddddddddddd--------------'.print_r(strtolower($dist["dt_name"]),true));
			$request ["Over Weight"] [strtolower ( $dist ["dt_name"] )] = $this->get_drilling_screenings_schools_prepare_pie_array ( $result, strtolower ( $dist ["dt_name"] ) );
		}
		
		// ==========================================================================================
		
		$merged_array = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$in' => array (
								"Under Weight" 
						) 
				) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		foreach ( $dist_list as $dist ) {
			$request ["Under Weight"] [strtolower ( $dist ["dt_name"] )] = $this->get_drilling_screenings_schools_prepare_pie_array ( $result, strtolower ( $dist ["dt_name"] ) );
		}
		
		// ========================================================================================
		
		$and_merged_array = array ();
		
		$general_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$ne' => '' 
				) 
		);
		$general_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$ne' => ' ' 
				) 
		);
		$general_arr = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$ne' => [ ] 
				) 
		);
		
		$not_skin = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$nin' => array (
								"Skin" 
						) 
				) 
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $and_merged_array, $general_str_empty );
		array_push ( $and_merged_array, $general_str_space );
		array_push ( $and_merged_array, $general_arr );
		array_push ( $and_merged_array, $not_skin );
		array_push ( $and_merged_array, $page4_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		foreach ( $dist_list as $dist ) {
			$request ["General"] [strtolower ( $dist ["dt_name"] )] = $this->get_drilling_screenings_schools_prepare_pie_array ( $result, strtolower ( $dist ["dt_name"] ) );
		}
		
		$and_merged_array = array ();
		
		$merged_array = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$in' => array (
								"Skin" 
						) 
				) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		foreach ( $dist_list as $dist ) {
			$request ["Skin"] [strtolower ( $dist ["dt_name"] )] = $this->get_drilling_screenings_schools_prepare_pie_array ( $result, strtolower ( $dist ["dt_name"] ) );
		}
		
		// ==============================================================================
		
		$and_merged_array = array ();
		$ortho = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		
		$ortho_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$ne' => '' 
				) 
		);
		$ortho_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$ne' => ' ' 
				) 
		);
		$ortho_arr = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$ne' => [ ] 
				) 
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $and_merged_array, $ortho );
		array_push ( $and_merged_array, $ortho_str_empty );
		array_push ( $and_merged_array, $ortho_str_space );
		array_push ( $and_merged_array, $ortho_arr );
		array_push ( $and_merged_array, $page4_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		foreach ( $dist_list as $dist ) {
			$request ["Ortho"] [strtolower ( $dist ["dt_name"] )] = $this->get_drilling_screenings_schools_prepare_pie_array ( $result, strtolower ( $dist ["dt_name"] ) );
		}
		
		// ===========================================================================
		
		$and_merged_array = array ();
		
		$postural = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		$postural_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$ne' => '' 
				) 
		);
		$postural_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$ne' => ' ' 
				) 
		);
		$postural_arr = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$ne' => [ ] 
				) 
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $and_merged_array, $postural );
		array_push ( $and_merged_array, $postural_str_empty );
		array_push ( $and_merged_array, $postural_str_space );
		array_push ( $and_merged_array, $postural_arr );
		array_push ( $and_merged_array, $page4_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		foreach ( $dist_list as $dist ) {
			$request ["Postural"] [strtolower ( $dist ["dt_name"] )] = $this->get_drilling_screenings_schools_prepare_pie_array ( $result, strtolower ( $dist ["dt_name"] ) );
		}
		
		// ========================================================================
		
		$and_merged_array = array ();
		
		$birth_defect = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		$page5_exists = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$exists' => true 
				) 
		);
		
		$birth_defect_str_empty = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$ne' => '' 
				) 
		);
		$birth_defect_str_space = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$ne' => ' ' 
				) 
		);
		$birth_defect_arr = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$ne' => [ ] 
				) 
		);
		
		array_push ( $and_merged_array, $birth_defect_str_empty );
		array_push ( $and_merged_array, $birth_defect_str_space );
		array_push ( $and_merged_array, $birth_defect_arr );
		
		array_push ( $and_merged_array, $birth_defect );
		array_push ( $and_merged_array, $page5_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		foreach ( $dist_list as $dist ) {
			$request ['Defects at Birth'] [strtolower ( $dist ["dt_name"] )] = $this->get_drilling_screenings_schools_prepare_pie_array ( $result, strtolower ( $dist ["dt_name"] ) );
		}
		
		// ==============================================================================
		
		$and_merged_array = array ();
		
		$deficencies = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		$page5_exists = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$exists' => true 
				) 
		);
		
		$deficencies_str_empty = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$ne' => '' 
				) 
		);
		$deficencies_str_space = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$ne' => ' ' 
				) 
		);
		$deficencies_arr = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$ne' => [ ] 
				) 
		);
		
		array_push ( $and_merged_array, $deficencies_str_empty );
		array_push ( $and_merged_array, $deficencies_str_space );
		array_push ( $and_merged_array, $deficencies_arr );
		
		array_push ( $and_merged_array, $deficencies );
		array_push ( $and_merged_array, $page5_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		foreach ( $dist_list as $dist ) {
			$request ['Deficencies'] [strtolower ( $dist ["dt_name"] )] = $this->get_drilling_screenings_schools_prepare_pie_array ( $result, strtolower ( $dist ["dt_name"] ) );
		}
		
		// ===========================================================================================
		
		$and_merged_array = array ();
		
		$childhood_diseases = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		$page5_exists = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$exists' => true 
				) 
		);
		
		$childhood_diseases_str_empty = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$ne' => '' 
				) 
		);
		$childhood_diseases_str_space = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$ne' => ' ' 
				) 
		);
		$childhood_diseases_arr = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$ne' => [ ] 
				) 
		);
		
		array_push ( $and_merged_array, $childhood_diseases_str_empty );
		array_push ( $and_merged_array, $childhood_diseases_str_space );
		array_push ( $and_merged_array, $childhood_diseases_arr );
		
		array_push ( $and_merged_array, $childhood_diseases );
		array_push ( $and_merged_array, $page5_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $dist_list as $dist ) {
			$request ['Childhood Diseases'] [strtolower ( $dist ["dt_name"] )] = $this->get_drilling_screenings_schools_prepare_pie_array ( $result, strtolower ( $dist ["dt_name"] ) );
		}
		
		// ===================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$without_glass_left = array (
				"doc_data.widget_data.page6.Without Glasses.Left" => array (
						'$nin' => array (
								"6/6",
								"" 
						) 
				) 
		);
		$without_glass_right = array (
				"doc_data.widget_data.page6.Without Glasses.Right" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		
		$page6_exists = array (
				"doc_data.widget_data.page6.Without Glasses" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $without_glass_left );
		array_push ( $or_merged_array, $without_glass_right );
		array_push ( $and_merged_array, $page6_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $dist_list as $dist ) {
			$request ['Without Glasses'] [strtolower ( $dist ["dt_name"] )] = $this->get_drilling_screenings_schools_prepare_pie_array ( $result, strtolower ( $dist ["dt_name"] ) );
		}
		
		// =============================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$with_glass_left = array (
				"doc_data.widget_data.page6.With Glasses.Left" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		$with_glass_right = array (
				"doc_data.widget_data.page6.With Glasses.Right" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		
		$page6_exists = array (
				"doc_data.widget_data.page6.With Glasses" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $with_glass_left );
		array_push ( $or_merged_array, $with_glass_right );
		array_push ( $and_merged_array, $page6_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $dist_list as $dist ) {
			$request ['With Glasses'] [strtolower ( $dist ["dt_name"] )] = $this->get_drilling_screenings_schools_prepare_pie_array ( $result, strtolower ( $dist ["dt_name"] ) );
		}
		
		// ===================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$color_right = array (
				"doc_data.widget_data.page7.Colour Blindness.Right" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$color_left = array (
				"doc_data.widget_data.page7.Colour Blindness.Left" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $color_right );
		array_push ( $or_merged_array, $color_left );
		array_push ( $and_merged_array, $page7_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $dist_list as $dist ) {
			$request ['Colour Blindness'] [strtolower ( $dist ["dt_name"] )] = $this->get_drilling_screenings_schools_prepare_pie_array ( $result, strtolower ( $dist ["dt_name"] ) );
		}
		
		// ===========================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$audi_right = array (
				"doc_data.widget_data.page8. Auditory Screening.Right" => array (
						'$nin' => array (
								"Pass",
								"",
								" " 
						) 
				) 
		);
		$page8_exists = array (
				"doc_data.widget_data.page8. Auditory Screening" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $audi_right );
		
		array_push ( $and_merged_array, $page8_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $dist_list as $dist ) {
			$request ['Right Ear'] [strtolower ( $dist ["dt_name"] )] = $this->get_drilling_screenings_schools_prepare_pie_array ( $result, strtolower ( $dist ["dt_name"] ) );
		}
		
		// ==============================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$audi_left = array (
				"doc_data.widget_data.page8. Auditory Screening.Left" => array (
						'$nin' => array (
								"Pass",
								" ",
								"" 
						) 
				) 
		);
		$page8_exists = array (
				"doc_data.widget_data.page8. Auditory Screening" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $audi_left );
		array_push ( $and_merged_array, $page8_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $dist_list as $dist ) {
			$request ['Left Ear'] [strtolower ( $dist ["dt_name"] )] = $this->get_drilling_screenings_schools_prepare_pie_array ( $result, strtolower ( $dist ["dt_name"] ) );
		}
		
		// ====================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$speech = array (
				"doc_data.widget_data.page8. Auditory Screening.Speech Screening" => array (
						'$nin' => array (
								"Normal",
								"",
								" ",
								[ ] 
						) 
				) 
		);
		
		$page8_exists = array (
				"doc_data.widget_data.page8. Auditory Screening" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $speech );
		
		array_push ( $and_merged_array, $page8_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $dist_list as $dist ) {
			$request ['Speech Screening'] [strtolower ( $dist ["dt_name"] )] = $this->get_drilling_screenings_schools_prepare_pie_array ( $result, strtolower ( $dist ["dt_name"] ) );
		}
		
		// =============================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$oral_hygiene = array (
				"doc_data.widget_data.page9.Dental Check-up.Oral Hygiene" => array (
						'$nin' => array (
								"Good",
								"Poor",
								"",
								" " 
						) 
				) 
		);
		
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $oral_hygiene );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $dist_list as $dist ) {
			$request ["Oral Hygiene - Fair"] [strtolower ( $dist ["dt_name"] )] = $this->get_drilling_screenings_schools_prepare_pie_array ( $result, strtolower ( $dist ["dt_name"] ) );
		}
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$oral_hygiene = array (
				"doc_data.widget_data.page9.Dental Check-up.Oral Hygiene" => array (
						'$nin' => array (
								"Good",
								"Fair",
								"",
								" " 
						) 
				) 
		);
		
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $oral_hygiene );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $dist_list as $dist ) {
			$request ["Oral Hygiene - Poor"] [strtolower ( $dist ["dt_name"] )] = $this->get_drilling_screenings_schools_prepare_pie_array ( $result, strtolower ( $dist ["dt_name"] ) );
		}
		
		// ==============================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$carious_teeth = array (
				"doc_data.widget_data.page9.Dental Check-up.Carious Teeth" => array (
						'$nin' => array (
								"No",
								" ",
								"" 
						) 
				) 
		);
		
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $carious_teeth );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $dist_list as $dist ) {
			$request ["Carious Teeth"] [strtolower ( $dist ["dt_name"] )] = $this->get_drilling_screenings_schools_prepare_pie_array ( $result, strtolower ( $dist ["dt_name"] ) );
		}
		
		// ==============================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$flourosis = array (
				"doc_data.widget_data.page9.Dental Check-up.Flourosis" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $flourosis );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $dist_list as $dist ) {
			$request ["Flourosis"] [strtolower ( $dist ["dt_name"] )] = $this->get_drilling_screenings_schools_prepare_pie_array ( $result, strtolower ( $dist ["dt_name"] ) );
		}
		
		// ==============================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$orthodontic = array (
				"doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $orthodontic );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $dist_list as $dist ) {
			$request ["Orthodontic Treatment"] [strtolower ( $dist ["dt_name"] )] = $this->get_drilling_screenings_schools_prepare_pie_array ( $result, strtolower ( $dist ["dt_name"] ) );
		}
		
		// ===========================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$indication = array (
				"doc_data.widget_data.page9.Dental Check-up.Indication for extraction" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $indication );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $dist_list as $dist ) {
			$request ["Indication for extraction"] [strtolower ( $dist ["dt_name"] )] = $this->get_drilling_screenings_schools_prepare_pie_array ( $result, strtolower ( $dist ["dt_name"] ) );
		}
		
		// ======================================================end of stage 3 ===========================================
		return $request;
	}
	private function screening_pie_data_for_stage5($dates) {
		ini_set ( 'max_execution_time', 0 );
		ini_set('memory_limit','10G');
		
		$school_list = $this->get_all_schools ();
		// //log_message('debug','schhhhhhhhhhhhhhhhhhhhhhhhhhoooooooooooooooooooooooooooooolllllllll'.print_r($school_list,true));
		$count = $this->mongo_db->count ( $this->screening_app_col );
		$add_count = $count+100;
		if ($count < $add_count) {
			$per_page = $count;
			$loop = 2; // $count / $per_page;
		} else {
			$per_page = 5000;
			$loop = $count / $per_page;
		}
		// ======================================================stage 3 =================================================
		
		$requests = [ ];
		
		$merged_array = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$in' => array (
								"Over Weight" 
						) 
				) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			// //log_message('debug','schhhhhhhhhhhhhhhhhhhhhhhhhhoooooooooooooooooooooooooooooolllllllll'.print_r($school_name,true));
			$request ["Over Weight"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// ==========================================================================================
		
		$merged_array = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$in' => array (
								"Under Weight" 
						) 
				) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["Under Weight"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		// ========================================================================================
		$merged_array = array (
				"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						'$in' => array (
								"Obese" 
						) 
				) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			//echo print_r($response,true);
			//exit();
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["Obese"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// ========================================================================================
		
		$and_merged_array = array ();
		
		$general_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$ne' => '' 
				) 
		);
		$general_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$ne' => ' ' 
				) 
		);
		$general_arr = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$ne' => [ ] 
				) 
		);
		
		$not_skin = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$nin' => array (
								"Skin" 
						) 
				) 
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $and_merged_array, $general_str_empty );
		array_push ( $and_merged_array, $general_str_space );
		array_push ( $and_merged_array, $general_arr );
		array_push ( $and_merged_array, $not_skin );
		array_push ( $and_merged_array, $page4_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		foreach ( $school_list as $school_name ) {
			$request ["General"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		$and_merged_array = array ();
		
		$merged_array = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$in' => array (
								"Skin" 
						) 
				) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		foreach ( $school_list as $school_name ) {
			$request ["Skin"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		//===============================================================================
		
				//==============================================================================
		$and_merged_array = array ();
		
		$description_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Description" => array (
						'$ne' => ''
				)
		);
		$description_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Description" => array (
						'$ne' => ' '
				)
		);
		
		$advice_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Advice" => array (
						'$ne' => ''
				)
		);
		$advice_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Advice" => array (
						'$ne' => ' '
				)
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
						'$exists' => true
				)
		);
		
		array_push ( $and_merged_array, $description_str_empty );
		array_push ( $and_merged_array, $description_str_space );
		array_push ( $and_merged_array, $advice_str_empty );
		array_push ( $and_merged_array, $advice_str_space );
		array_push ( $and_merged_array, $page4_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [
			array (
					'$match' => array (
							'$and' => $and_merged_array
					)
			),
			array (
					'$project' => array (
							"doc_data.widget_data" => true,
							"history" => true
					)
			),
			array (
					'$limit' => $offset
			),
			array (
					'$skip' => $offset - $per_page
			)
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
		
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
						
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
				
			$result = array_merge ( $result, $temp_result );
		}
		foreach ( $school_list as $school_name ) {
			$request ["Others(Description/Advice)"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// ==============================================================================
		
		$and_merged_array = array ();
		$ortho = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		
		$ortho_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$ne' => '' 
				) 
		);
		$ortho_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$ne' => ' ' 
				) 
		);
		$ortho_arr = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$ne' => [ ] 
				) 
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $and_merged_array, $ortho );
		array_push ( $and_merged_array, $ortho_str_empty );
		array_push ( $and_merged_array, $ortho_str_space );
		array_push ( $and_merged_array, $ortho_arr );
		array_push ( $and_merged_array, $page4_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["Ortho"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// ===========================================================================
		
		$and_merged_array = array ();
		
		$postural = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		$postural_str_empty = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$ne' => '' 
				) 
		);
		$postural_str_space = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$ne' => ' ' 
				) 
		);
		$postural_arr = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$ne' => [ ] 
				) 
		);
		
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $and_merged_array, $postural );
		array_push ( $and_merged_array, $postural_str_empty );
		array_push ( $and_merged_array, $postural_str_space );
		array_push ( $and_merged_array, $postural_arr );
		array_push ( $and_merged_array, $page4_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["Postural"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// ========================================================================
		
		$and_merged_array = array ();
		
		$birth_defect = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		$page5_exists = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$exists' => true 
				) 
		);
		
		$birth_defect_str_empty = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$ne' => '' 
				) 
		);
		$birth_defect_str_space = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$ne' => ' ' 
				) 
		);
		$birth_defect_arr = array (
				"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (
						'$ne' => [ ] 
				) 
		);
		
		array_push ( $and_merged_array, $birth_defect_str_empty );
		array_push ( $and_merged_array, $birth_defect_str_space );
		array_push ( $and_merged_array, $birth_defect_arr );
		
		array_push ( $and_merged_array, $birth_defect );
		array_push ( $and_merged_array, $page5_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ['Defects at Birth'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// ==============================================================================
		
		// $and_merged_array = array ();
		
		// $deficencies = array (
				// "doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						// '$not' => array (
								// '$size' => 0 
						// ) 
				// ) 
		// );
		// $page5_exists = array (
				// "doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						// '$exists' => true 
				// ) 
		// );
		
		// $deficencies_str_empty = array (
				// "doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						// '$ne' => '' 
				// ) 
		// );
		// $deficencies_str_space = array (
				// "doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						// '$ne' => ' ' 
				// ) 
		// );
		// $deficencies_arr = array (
				// "doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
						// '$ne' => [ ] 
				// ) 
		// );
		
		// array_push ( $and_merged_array, $deficencies_str_empty );
		// array_push ( $and_merged_array, $deficencies_str_space );
		// array_push ( $and_merged_array, $deficencies_arr );
		
		// array_push ( $and_merged_array, $deficencies );
		// array_push ( $and_merged_array, $page5_exists );
		
		// $result = [ ];
		// for($page = 1; $page < $loop; $page ++) {
			// $offset = $per_page * ($page);
			// $pipeline = [ 
					// array (
							// '$match' => array (
									// '$and' => $and_merged_array 
							// ) 
					// ),
					// array (
							// '$project' => array (
									// "doc_data.widget_data" => true,
									// "history" => true 
							// ) 
					// ),
					// array (
							// '$limit' => $offset 
					// ),
					// array (
							// '$skip' => $offset - $per_page 
					// ) 
			// ];
			// $response = $this->mongo_db->command ( array (
					// 'aggregate' => $this->screening_app_col,
					// 'pipeline' => $pipeline 
			// ) );
			
			// $temp_result = [ ];
			// foreach ( $response ['result'] as $doc ) {
				// foreach ( $doc ['history'] as $date ) {
					// $time = $date ['time'];
					// if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						// array_push ( $temp_result, $doc );
						// break;
					// }
				// }
			// }
			// $result = array_merge ( $result, $temp_result );
		// }
		
		// foreach ( $school_list as $school_name ) {
			// $request ['Deficencies'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		// }
		
		//======================Deficencies divided into further parts=================================
		
		$merged_array = array (
			"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
					'$in' => array (
							"Anaemia" 
					) 
			) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["Anaemia"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		$merged_array = array (
			"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
					'$in' => array (
							"Vitamin Deficiency - Bcomplex" 
					) 
			) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["Vitamin Deficiency - Bcomplex"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		$merged_array = array (
			"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
					'$in' => array (
							"Vitamin A Deficiency" 
					) 
			) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["Vitamin A Deficiency"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
				$merged_array = array (
			"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
					'$in' => array (
							"Vitamin Deficiency - Bcomplex" 
					) 
			) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["Vitamin Deficiency - Bcomplex"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		$merged_array = array (
			"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
					'$in' => array (
							"Vitamin D Deficiency" 
					) 
			) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["Vitamin D Deficiency"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		
				$merged_array = array (
			"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
					'$in' => array (
							"Vitamin Deficiency - Bcomplex" 
					) 
			) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["Vitamin Deficiency - Bcomplex"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		$merged_array = array (
			"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
					'$in' => array (
							"SAM/stunting" 
					) 
			) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["SAM/stunting"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
				$merged_array = array (
			"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
					'$in' => array (
							"Vitamin Deficiency - Bcomplex" 
					) 
			) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["Vitamin Deficiency - Bcomplex"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		$merged_array = array (
			"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
					'$in' => array (
							"Goiter" 
					) 
			) 
		);
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $merged_array 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["Goiter"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		//======================Deficencies divided into further parts=================================
		
		// ===========================================================================================
		
		$and_merged_array = array ();
		
		$childhood_diseases = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$not' => array (
								'$size' => 0 
						) 
				) 
		);
		$page5_exists = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$exists' => true 
				) 
		);
		
		$childhood_diseases_str_empty = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$ne' => '' 
				) 
		);
		$childhood_diseases_str_space = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$ne' => ' ' 
				) 
		);
		$childhood_diseases_arr = array (
				"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (
						'$ne' => [ ] 
				) 
		);
		
		array_push ( $and_merged_array, $childhood_diseases_str_empty );
		array_push ( $and_merged_array, $childhood_diseases_str_space );
		array_push ( $and_merged_array, $childhood_diseases_arr );
		
		array_push ( $and_merged_array, $childhood_diseases );
		array_push ( $and_merged_array, $page5_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ['Childhood Diseases'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// ===================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$without_glass_left = array (
				"doc_data.widget_data.page6.Without Glasses.Left" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		$without_glass_right = array (
				"doc_data.widget_data.page6.Without Glasses.Right" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		
		$page6_exists = array (
				"doc_data.widget_data.page6.Without Glasses" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $without_glass_left );
		array_push ( $or_merged_array, $without_glass_right );
		array_push ( $and_merged_array, $page6_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ['Without Glasses'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// =============================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$with_glass_left = array (
				"doc_data.widget_data.page6.With Glasses.Left" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		$with_glass_right = array (
				"doc_data.widget_data.page6.With Glasses.Right" => array (
						'$nin' => array (
								"6/6",
								"",
								" " 
						) 
				) 
		);
		
		$page6_exists = array (
				"doc_data.widget_data.page6.With Glasses" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $with_glass_left );
		array_push ( $or_merged_array, $with_glass_right );
		array_push ( $and_merged_array, $page6_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ['With Glasses'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// ===================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$color_right = array (
				"doc_data.widget_data.page7.Colour Blindness.Right" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$color_left = array (
				"doc_data.widget_data.page7.Colour Blindness.Left" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $color_right );
		array_push ( $or_merged_array, $color_left );
		array_push ( $and_merged_array, $page7_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ['Colour Blindness'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		// ===========================================================================
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$eye_lids = array (
				"doc_data.widget_data.page7.Colour Blindness.Eye Lids" => array (
						'$nin' => array (
								"Normal",
								"",
								" " 
						) 
				) 
		);		
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness.Eye Lids" => array (
						'$exists' => true 
				) 
		);
		
		
		array_push ( $or_merged_array, $eye_lids );
		array_push ( $and_merged_array, $page7_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}

		foreach ( $school_list as $school_name ) {
			$request ['Eye Lids'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		//============================================
		// ===================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$conjunctiva = array (
				"doc_data.widget_data.page7.Colour Blindness.Conjunctiva" => array (
						'$nin' => array (
								"Normal",
								"",
								" " 
						) 
				) 
		);		
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness.Conjunctiva" => array (
						'$exists' => true 
				) 
		);

		array_push ( $or_merged_array, $conjunctiva );
		array_push ( $and_merged_array, $page7_exists );
		
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ['Conjunctiva'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		
		// ===================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$cornea = array (
				"doc_data.widget_data.page7.Colour Blindness.Cornea" => array (
						'$nin' => array (
								"Normal",
								"",
								" " 
						) 
				) 
		);		
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness.Cornea" => array (
						'$exists' => true 
				) 
		);
		
		
		array_push ( $or_merged_array, $cornea );
		array_push ( $and_merged_array, $page7_exists );
	
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ['Cornea'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
	
		// ===================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$pupil = array (
				"doc_data.widget_data.page7.Colour Blindness.Pupil" => array (
						'$nin' => array (
								"Normal",
								"",
								" " 
						) 
				) 
		);		
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness.Pupil" => array (
						'$exists' => true 
				) 
		);
		
		
		array_push ( $or_merged_array, $pupil );
		array_push ( $and_merged_array, $page7_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ['Pupil'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
	
		// ===================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$wearing_spectacles = array (
				"doc_data.widget_data.page7.Colour Blindness.Wearing Spectacles" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);		
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness.Wearing Spectacles" => array (
						'$exists' => true 
				) 
		);
		
		
		array_push ( $or_merged_array, $wearing_spectacles );
		array_push ( $and_merged_array, $page7_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ['Wearing Spectacles'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		
		// ===================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$subjective_refraction = array (
				"doc_data.widget_data.page7.Colour Blindness.Subjective Refraction" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);		
		
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness.Subjective Refraction" => array (
						'$exists' => true 
				) 
		);
		
		
		
		array_push ( $or_merged_array, $subjective_refraction );
		array_push ( $and_merged_array, $page7_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ['Subjective Refraction'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		//===========================================================
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$audi_right = array (
				"doc_data.widget_data.page8. Auditory Screening.Right" => array (
						'$nin' => array (
								"Pass",
								"",
								" " 
						) 
				) 
		);
		$page8_exists = array (
				"doc_data.widget_data.page8. Auditory Screening" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $audi_right );
		
		array_push ( $and_merged_array, $page8_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ['Right Ear'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// ==============================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$audi_left = array (
				"doc_data.widget_data.page8. Auditory Screening.Left" => array (
						'$nin' => array (
								"Pass",
								"",
								" " 
						) 
				) 
		);
		$page8_exists = array (
				"doc_data.widget_data.page8. Auditory Screening" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $audi_left );
		array_push ( $and_merged_array, $page8_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ['Left Ear'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		// ====================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$speech = array (
				"doc_data.widget_data.page8. Auditory Screening.Speech Screening" => array (
						'$nin' => array (
								"Normal",
								"",
								" ",
								[ ] 
						) 
				) 
		);
		
		$page8_exists = array (
				"doc_data.widget_data.page8. Auditory Screening" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $speech );
		
		array_push ( $and_merged_array, $page8_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ['Speech Screening'] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// =============================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$oral_hygiene = array (
				"doc_data.widget_data.page9.Dental Check-up.Oral Hygiene" => array (
						'$nin' => array (
								"Good",
								"Poor",
								"",
								" " 
						) 
				) 
		);
		
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $oral_hygiene );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["Oral Hygiene - Fair"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$oral_hygiene = array (
				"doc_data.widget_data.page9.Dental Check-up.Oral Hygiene" => array (
						'$nin' => array (
								"Good",
								"Fair",
								"",
								" " 
						) 
				) 
		);
		
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $oral_hygiene );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["Oral Hygiene - Poor"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// ==============================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$carious_teeth = array (
				"doc_data.widget_data.page9.Dental Check-up.Carious Teeth" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $carious_teeth );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["Carious Teeth"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// ==============================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$flourosis = array (
				"doc_data.widget_data.page9.Dental Check-up.Flourosis" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $flourosis );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["Flourosis"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// ==============================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$orthodontic = array (
				"doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $orthodontic );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["Orthodontic Treatment"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		
		// ===========================================================================================
		
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$indication = array (
				"doc_data.widget_data.page9.Dental Check-up.Indication for extraction" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $indication );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["Indication for extraction"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
//====================================================================
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$indication = array (
				"doc_data.widget_data.page9.Dental Check-up.Root Canal Treatment" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up.Root Canal Treatment" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $indication );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["Root Canal Treatment"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
//===============================================================
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$indication = array (
				"doc_data.widget_data.page9.Dental Check-up.CROWNS" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up.CROWNS" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $indication );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["CROWNS"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		//===========================================================
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$indication = array (
				"doc_data.widget_data.page9.Dental Check-up.Fixed Partial Denture" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up.Fixed Partial Denture" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $indication );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["Fixed Partial Denture"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		//=======================================================
		$and_merged_array = array ();
		$or_merged_array = array ();
		
		$indication = array (
				"doc_data.widget_data.page9.Dental Check-up.Curettage" => array (
						'$nin' => array (
								"No",
								"",
								" " 
						) 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up.Curettage" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $or_merged_array, $indication );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
		for($page = 1; $page < $loop; $page ++) {
			$offset = $per_page * ($page);
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array,
									'$or' => $or_merged_array 
							) 
					),
					array (
							'$limit' => $offset 
					),
					array (
							'$skip' => $offset - $per_page 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			$temp_result = [ ];
			foreach ( $response ['result'] as $doc ) {
				
				foreach ( $doc ['history'] as $date ) {
					$time = $date ['time'];
					
					if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
						array_push ( $temp_result, $doc );
						break;
					}
				}
			}
			
			$result = array_merge ( $result, $temp_result );
		}
		
		foreach ( $school_list as $school_name ) {
			$request ["Curettage"] [base64_encode( strtolower ( $school_name ['school_name']) )] = $this->get_drilling_screenings_students_prepare_pie_array ( $result, strtolower ( $school_name ['school_name'] ) );
		}
		// ======================================================end of stage 3 ===========================================
		return $request;
	}
	public function update_screening_collection($date, $screening_duration) {
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		//Creating analytics For Year wise
		if ($screening_duration != "Yearly"){
			$get_year = explode(" ",$screening_duration);
			$year = $get_year[0];
		}
		else
		{
			$get_year = explode("-",$today_date);
			$year = $get_year[0];
		}
		
		$dates = $this->get_start_end_date ( $today_date, $screening_duration ); // "Daily" ); //
		
		//log_message ( "debug", "datesssssssssssssssssssssssssssssssss--------------------" . print_r ( $dates, true ) );
		// ===================================stage1================================================
		for($init_date = $dates ['today_date']; $init_date >= $dates ['end_date'];) {
			//log_message ( "debug", "iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii--------------------" . print_r ( $init_date, true ) );
			//log_message ( "debug", "eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee--------------------" . print_r ( $dates ['end_date'], true ) );
			$query = $this->mongo_db->where ( array (
					'pie_data.date' => $init_date 
			) )->count ( "healthcare2016226112942701_screening_final_".$year );
			
			$end_date = date ( "Y-m-d H:i:s", strtotime ( $init_date . "-1 day" ) );
			
			$temp_dates ['today_date'] = $init_date;
			$temp_dates ['end_date'] = $end_date;
			
			
			// $temp_dates = $this->get_start_end_date ( $init_date, "Daily" );
			
			if ($query == 0) {
				
				$pie_data = array (
						"pie_data" => array (
								'date' => $init_date 
						) 
				);
				
				$requests = $this->screening_pie_data_for_stage5 ( $temp_dates );
				$pie_data ['pie_data'] ['stage5_pie_vales'] = $requests;
				
				$requests = $this->screening_pie_data_for_stage4_new ( $requests );
				$pie_data ['pie_data'] ['stage4_pie_vales'] = $requests;
				
				$requests = $this->screening_pie_data_for_stage3_new ( $requests );
				$pie_data ['pie_data'] ['stage3_pie_vales'] = $requests;
				
				$requests = $this->screening_pie_data_for_stage2_new ( $requests );
				$pie_data ['pie_data'] ['stage2_pie_vales'] = $requests;
				
				//log_message ( "debug", "before stagesssssssssssssssssssssssssss--------------------" );
				$requests = $this->screening_pie_data_for_stage1_new ( $requests );
				$pie_data ['pie_data'] ['stage1_pie_vales'] = $requests;
				
				$this->mongo_db->insert ( "healthcare2016226112942701_screening_final_".$year, $pie_data );
				//log_message ( "debug", "tttttttttttttttttttttttttttttttttttttttttttttttttttttttt" . print_r ( $init_date, true ) );
				
			}
			$init_date = $end_date;
		}
		
		// ===================================stage1 end============================================
		
		// ============================================================stage 2===============================================
		
		// ============================================================end of stage 2 =======================================
		
		// ===================================================insert into db=================================================
	}
	public function update_screening_collection1($date, $screening_duration) {
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		$dates = $this->get_start_end_date ( $today_date, $screening_duration ); // "Daily" ); //
		//log_message ( "debug", "datesssssssssssssssssssssssssssssssss--------------------" . print_r ( $dates, true ) );
		// ===================================stage1================================================
		for($init_date = $dates ['today_date']; $init_date >= $dates ['end_date'];) {
			//log_message ( "debug", "iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii--------------------" . print_r ( $init_date, true ) );
			//log_message ( "debug", "eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee--------------------" . print_r ( $dates ['end_date'], true ) );
			$query = $this->mongo_db->where ( array (
					'pie_data.date' => $init_date 
			) )->count ( $this->screening_app_col_screening );
			
			$end_date = date ( "Y-m-d H:i:s", strtotime ( $init_date . "-1 day" ) );
			
			$temp_dates ['today_date'] = $init_date;
			$temp_dates ['end_date'] = $end_date;
			
			// $temp_dates = $this->get_start_end_date ( $init_date, "Daily" );
			
			if ($query == 0) {
				
				$pie_data = array (
						"pie_data" => array (
								'date' => $init_date 
						) 
				);
				//log_message ( "debug", "before stagesssssssssssssssssssssssssss--------------------" );
				$requests = $this->screening_pie_data_for_stage1 ( $temp_dates );
				$pie_data ['pie_data'] ['stage1_pie_vales'] = $requests;
				
				$requests = $this->screening_pie_data_for_stage2 ( $temp_dates );
				$pie_data ['pie_data'] ['stage2_pie_vales'] = $requests;
				
				$requests = $this->screening_pie_data_for_stage3 ( $temp_dates );
				$pie_data ['pie_data'] ['stage3_pie_vales'] = $requests;
				
				$requests = $this->screening_pie_data_for_stage4 ( $temp_dates );
				$pie_data ['pie_data'] ['stage4_pie_vales'] = $requests;
				
				$requests = $this->screening_pie_data_for_stage5 ( $temp_dates );
				$pie_data ['pie_data'] ['stage5_pie_vales'] = $requests;
				
				$this->mongo_db->insert ( $this->screening_app_col_screening, $pie_data );
				//log_message ( "debug", "tttttttttttttttttttttttttttttttttttttttttttttttttttttttt" . print_r ( $init_date, true ) );
			}
			$init_date = $end_date;
		}
		
		// ===================================stage1 end============================================
		
		// ============================================================stage 2===============================================
		
		// ============================================================end of stage 2 =======================================
		
		// ===================================================insert into db=================================================
	}
	public function get_last_screening_update($date=false ,$today_date,$screening_duration = "Yearly") {
		
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		if ($screening_duration != "Yearly"){
			$get_year = explode(" ",$screening_duration);
			$year = $get_year[0];
		}
		else
		{
			$get_year = explode("-",$today_date);
			$year = $get_year[0];
		}
		
		$query = $this->mongo_db->limit ( 1 )->orderBy ( array (
				'pie_data.date' => - 1 
		) )->select ( 'pie_data.date' )->get ( 'healthcare2016226112942701_screening_final_'.$year );
		
		if (isset ( $query ) && ! empty ( $query ) && (count ( $query ) > 0)) {
			return "Last update on : " . substr ( $query [0] ['pie_data'] ['date'], 0, 10 );
		} else {
			return "No updates yet.";
		}
	}
	public function get_all_screenings($date = false, $screening_duration = "Yearly") {
		if ($date) {
			$today_date = $date;
			//$today_date = "2018-01-01";
		} else {
			$today_date = $this->today_date;
			//$today_date = "2018-01-01";
		}	

			
		if ($screening_duration != "Yearly")
		{
			$get_year = explode(" ",$screening_duration);
			$year = $get_year[0];
		}
		else
		{
			$get_year = explode("-",$today_date);
			//$get_year = explode("-","2018-01-01");
			$year = $get_year[0];
		}
		
		if($year == "2018-19")
		{
			$year = "2019";
		}
		
		//ini_set ( 'memory_limit', '10G' );
				// $query = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name',"TSWREIS SANGAREDDY(G),MEDAK")->get($this->screening_app_col);
				// $array = [];
				// foreach ($query as $doc){
						// if((isset($doc['doc_data']['widget_data']['page5']['Doctor Check Up'])) && is_array($doc['doc_data']['widget_data']['page5']['Doctor Check Up'])){
							
							// array_push($array,$doc['history']['last_stage']['time']);			
				// }}
				// array_unique($array);
				// //log_message('debug','dtaesssssssssssssssssssssssssssssssssssssssssssssssss======='.print_r($array,true));
		
		
				 /* ini_set ( 'memory_limit', '10G' );
				$query = $this->mongo_db->get($this->screening_app_col);
				foreach ($query as $doc){
				if(isset($doc['doc_data']['widget_data']['page3']['Physical Exam']['Height cms'])){
					if(isset($doc['doc_data']['widget_data']['page3']['Physical Exam']['Weight kgs'])){
						if(isset($doc['doc_data']['widget_data']['page5']['Doctor Check Up'])){
							if(($doc['doc_data']['widget_data']['page3']['Physical Exam']['Height cms'] > 0) && ($doc['doc_data']['widget_data']['page3']['Physical Exam']['Height cms'] != "") && ($doc['doc_data']['widget_data']['page3']['Physical Exam']['Weight kgs'] > 0) && ($doc['doc_data']['widget_data']['page3']['Physical Exam']['Weight kgs'] != "")){
							$height = ($doc['doc_data']['widget_data']['page3']['Physical Exam']['Height cms']/100);
							$weight = $doc['doc_data']['widget_data']['page3']['Physical Exam']['Weight kgs'];
							
							$bmi = ($weight / ($height * $height));
							$bmi    = round($bmi,1);
							$doc['doc_data']['widget_data']['page3']['Physical Exam']['BMI%'] = $bmi;
							
						 if ($bmi <= 18.5) 
						  {
							 if((isset($doc['doc_data']['widget_data']['page5']['Doctor Check Up']['Deficencies'])) && is_array($doc['doc_data']['widget_data']['page5']['Doctor Check Up']['Deficencies'])){
								 $search = array_search ( "Under Weight" , $doc['doc_data']['widget_data']['page5']['Doctor Check Up']['Deficencies'] );
								 if($search === false){
								 //}else{
									 array_push($doc['doc_data']['widget_data']['page5']['Doctor Check Up']['Deficencies'], "Under Weight");
								 }
							 }else{
								 $doc['doc_data']['widget_data']['page5']['Doctor Check Up']['Deficencies'] = [];
								 array_push($doc['doc_data']['widget_data']['page5']['Doctor Check Up']['Deficencies'], "Under Weight");
							 }
							 //==================================
							 $search = array_search ( "Over Weight" , $doc['doc_data']['widget_data']['page5']['Doctor Check Up']['Deficencies'] );
								 if($search === false){
								 }else{
									 unset($doc['doc_data']['widget_data']['page5']['Doctor Check Up']['Deficencies'][$search]);
								 }
							 //==================================
						  } 
						  else if ($bmi >= 18.5 && $bmi <= 24.9) 
						  { 
							//$normal++;
						  }
						  else
						  {
							  if((isset($doc['doc_data']['widget_data']['page5']['Doctor Check Up']['Deficencies'])) && is_array($doc['doc_data']['widget_data']['page5']['Doctor Check Up']['Deficencies'])){
								 $search = array_search ( "Over Weight" , $doc['doc_data']['widget_data']['page5']['Doctor Check Up']['Deficencies'] );
								 if($search === false){
								 //}else{
									 array_push($doc['doc_data']['widget_data']['page5']['Doctor Check Up']['Deficencies'], "Over Weight");
								 }
							 }else{
								 $doc['doc_data']['widget_data']['page5']['Doctor Check Up']['Deficencies'] = [];
								 array_push($doc['doc_data']['widget_data']['page5']['Doctor Check Up']['Deficencies'], "Over Weight");
							 }
							 //==================================
							 $search = array_search ( "Under Weight" , $doc['doc_data']['widget_data']['page5']['Doctor Check Up']['Deficencies'] );
								 if($search === false){
								 }else{
									 unset($doc['doc_data']['widget_data']['page5']['Doctor Check Up']['Deficencies'][$search]);
								 }
							 //==================================
							 //==================================
							 $search = array_search ( "Over weight" , $doc['doc_data']['widget_data']['page5']['Doctor Check Up']['Deficencies'] );
								 if($search === false){
								 }else{
									 unset($doc['doc_data']['widget_data']['page5']['Doctor Check Up']['Deficencies'][$search]);
								 }
							 //==================================
						  }
						  ////log_message('debug','searchingdoccccccccccccccccccccccccccccccccc======='.print_r($doc['doc_data']['widget_data'],true));
				$query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update($this->screening_app_col);
				}}}}}   */
				
				
				// ini_set ( 'memory_limit', '10G' );
				// $query = $this->mongo_db->get($this->screening_app_col);
				// foreach ($query as $doc){
						// if((isset($doc['doc_data']['widget_data']['page5']['Doctor Check Up'])) && (isset($doc['doc_data']['widget_data']['page4']['Doctor Check Up'])) && (isset($doc['doc_data']['widget_data']['page6']['With Glasses'])) && (isset($doc['doc_data']['widget_data']['page6']['Without Glasses'])) && (isset($doc['doc_data']['widget_data']['page7']['Colour Blindness'])) && (isset($doc['doc_data']['widget_data']['page7'][' Auditory Screening'])) && (isset($doc['doc_data']['widget_data']['page8']['Dental Check-up']))){
							// $doc['doc_data']['widget_data']['page3'] = [];
						  
				// $query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update($this->screening_app_col);
				// }}
		
		$dates = $this->get_start_end_date ( $today_date, $screening_duration );
		// ================================================== for generated analytics
		//echo print_r($dates, true); exit();
		ini_set ( 'memory_limit', '10G' );
		$pie_data = $this->mongo_db->select ( array ('pie_data.stage1_pie_vales' ) )->whereBetween ( 'pie_data.date', $dates ['end_date'], $dates ['today_date'] )->get ( 'healthcare2016226112942701_screening_final_'.$year);
		
		$requests ['Physical Abnormalities'] = 0;
		$requests ['General Abnormalities'] = 0;
		$requests ['Eye Abnormalities'] = 0;
		$requests ['Auditory Abnormalities'] = 0;
		$requests ['Dental Abnormalities'] = 0;
		
		foreach ( $pie_data as $each_pie ) {
			
			$requests ['Physical Abnormalities'] = $requests ['Physical Abnormalities'] + $each_pie ['pie_data'] ['stage1_pie_vales'] [0] ['value'];
			$requests ['General Abnormalities'] = $requests ['General Abnormalities'] + $each_pie ['pie_data'] ['stage1_pie_vales'] [1] ['value'];
			$requests ['Eye Abnormalities'] = $requests ['Eye Abnormalities'] + $each_pie ['pie_data'] ['stage1_pie_vales'] [2] ['value'];
			$requests ['Auditory Abnormalities'] = $requests ['Auditory Abnormalities'] + $each_pie ['pie_data'] ['stage1_pie_vales'] [3] ['value'];
			$requests ['Dental Abnormalities'] = $requests ['Dental Abnormalities'] + $each_pie ['pie_data'] ['stage1_pie_vales'] [4] ['value'];
		}
		
		$result = [ ];
		foreach ( $requests as $request => $req_value ) {
			$req ['label'] = $request;
			$req ['value'] = $req_value;
			array_push ( $result, $req );
		}
		return $result;
		
		// ===============================================
		// $pie_data = [];
		// for($init_date = $dates ['today_date']; $init_date >= $dates ['end_date'];) {
		
		// $end_date = date ( "Y-m-d H:i:s", strtotime ( $init_date . "-1 day" ) );
		
		// $temp_dates ['today_date'] = $init_date;
		// $temp_dates ['end_date'] = $end_date;
		
		// $requests = $this->screening_pie_data_for_stage1 ( $temp_dates );
		// $temp_pie['pie_data'] ['stage1_pie_vales'] = $requests;
		// array_push($pie_data,$temp_pie);
		
		// $init_date = $end_date;
		// }
		// //log_message("debug","ppppppppppppppppppppppppppppppppscreenenenenene=====".print_r($pie_data,true));
		
		// $requests ['Physical Abnormalities'] = 0;
		// $requests ['General Abnormalities'] = 0;
		// $requests ['Eye Abnormalities'] = 0;
		// $requests ['Auditory Abnormalities'] = 0;
		// $requests ['Dental Abnormalities'] = 0;
		
		// foreach ( $pie_data as $each_pie ) {
		
		// $requests ['Physical Abnormalities'] = $requests ['Physical Abnormalities'] + $each_pie ['pie_data'] ['stage1_pie_vales'] [0] ['value'];
		// $requests ['General Abnormalities'] = $requests ['General Abnormalities'] + $each_pie ['pie_data'] ['stage1_pie_vales'] [1] ['value'];
		// $requests ['Eye Abnormalities'] = $requests ['Eye Abnormalities'] + $each_pie ['pie_data'] ['stage1_pie_vales'] [2] ['value'];
		// $requests ['Auditory Abnormalities'] = $requests ['Auditory Abnormalities'] + $each_pie ['pie_data'] ['stage1_pie_vales'] [3] ['value'];
		// $requests ['Dental Abnormalities'] = $requests ['Dental Abnormalities'] + $each_pie ['pie_data'] ['stage1_pie_vales'] [4] ['value'];
		// }
		
		// $result = [ ];
		// foreach ( $requests as $request => $req_value ) {
		// $req ['label'] = $request;
		// $req ['value'] = $req_value;
		// array_push ( $result, $req );
		// }
		// return $result;
	}
	//Presently using API in web side
	public function get_drilling_screenings_abnormalities($data, $date = false, $screening_duration = "Yearly") {
		if ($date) {
			$today_date = $date;
			//$today_date = "2018-01-01";
		} else {
			$today_date = $this->today_date;
			//$today_date = "2018-01-01";
		}
		
		if ($screening_duration != "Yearly"){
			$get_year = explode(" ",$screening_duration);
			$year = $get_year[0];
			//echo print_r($year,TRUE);exit();
		}
		else
		{
			$get_year = explode("-",$today_date);
			//$get_year = "2018-01-01";
			$year = $get_year[0];
		}
		if($year == "2018-19")
		{
			$year = "2019";
		}
		
		if($year == "2019")
		{
			$obj_data = json_decode ( $data, true );
			$type = $obj_data ['label'];
			
			$dates = $this->get_start_end_date ( $today_date, $screening_duration );
			ini_set ( 'memory_limit', '10G' );
			$pie_data = $this->mongo_db->select ( array ('pie_data.stage2_pie_vales') )->whereBetween ( 'pie_data.date', $dates ['end_date'], $dates ['today_date'] )->get ( 'healthcare2016226112942701_screening_final_'.$year );
			
			switch ($type) 
			{
				case "Physical Abnormalities" :
					
					$requests = [ ];
					
					$request ['label'] = 'Over Weight';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [0] ['Physical Abnormalities'] ['value'];
					}
					
					array_push ( $requests, $request );
					
					$request ['label'] = 'Under Weight';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [1] ['Physical Abnormalities'] ['value'];
					}
					
					array_push ( $requests, $request );
					
					$request ['label'] = 'Obese';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [2] ['Physical Abnormalities'] ['value'];
					}
					
					array_push ( $requests, $request );
					
					return $requests;
					break;
				
				case "General Abnormalities" :
					
					$requests = [ ];
					
					$request ['label'] = 'General';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [3] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Skin';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [4] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Others(Description/Advice)';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [5] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Ortho';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [6] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Postural';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [7] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Defects at Birth';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [8] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					// $request ['label'] = 'Deficencies';
					// $request ['value'] = 0;
					
					// foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						// $request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [8] ['General Abnormalities'] ['value'];
					// }
					// array_push ( $requests, $request );
					
					//==========================================Deficencies divided
					
					$request ['label'] = 'Anaemia';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [9] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Vitamin Deficiency - Bcomplex';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [10] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					
					$request ['label'] = 'Vitamin A Deficiency';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [11] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					
					$request ['label'] = 'Vitamin D Deficiency';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [12] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					
					$request ['label'] = 'SAM/stunting';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [13] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					
					$request ['label'] = 'Goiter';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [14] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					//==========================================Deficencies divided
					
					$request ['label'] = 'Childhood Diseases';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [15] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					return $requests;
					break;
				
				case "Eye Abnormalities" :
					$requests = [ ];
					
					$request ['label'] = 'Without Glasses';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [16] ['Eye Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'With Glasses';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [17] ['Eye Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Colour Blindness';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [18] ['Eye Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Eye Lids';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [19] ['Eye Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );

					$request ['label'] = 'Conjunctiva';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [20] ['Eye Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );

					$request ['label'] = 'Cornea';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [21] ['Eye Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );

					$request ['label'] = 'Pupil';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [22] ['Eye Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );

					$request ['label'] = 'Wearing Spectacles';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [23] ['Eye Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );

					$request ['label'] = 'Subjective Refraction';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [24] ['Eye Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );

					
					return $requests;
					break;
				
				case "Auditory Abnormalities" :
					$requests = [ ];
					
					$request ['label'] = 'Right Ear';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [25] ['Auditory Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Left Ear';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [26] ['Auditory Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Speech Screening';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [27] ['Auditory Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					return $requests;
					break;
				
				case "Dental Abnormalities" :
					$requests = [ ];
					
					$request ['label'] = 'Oral Hygiene - Fair';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [28] ['Dental Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Oral Hygiene - Poor';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [29] ['Dental Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Carious Teeth';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [30] ['Dental Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Flourosis';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [31] ['Dental Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Orthodontic Treatment';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [32] ['Dental Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Indication for extraction';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [33] ['Dental Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );

					$request ['label'] = 'Root Canal Treatment';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [34] ['Dental Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );

					$request ['label'] = 'CROWNS';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [35] ['Dental Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );

					$request ['label'] = 'Fixed Partial Denture';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [36] ['Dental Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );

					$request ['label'] = 'Curettage';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [33] ['Dental Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					return $requests;
					break;
				
				default :
					break;
			}

		}else
		{
			$obj_data = json_decode ( $data, true );
			$type = $obj_data ['label'];
		
			$dates = $this->get_start_end_date ( $today_date, $screening_duration );
			ini_set ( 'memory_limit', '10G' );
			$pie_data = $this->mongo_db->select ( array (
					'pie_data.stage2_pie_vales' 
			) )->whereBetween ( 'pie_data.date', $dates ['end_date'], $dates ['today_date'] )->get ( 'healthcare2016226112942701_screening_final_'.$year );
		
			switch ($type) 
			{
				case "Physical Abnormalities" :
					
					$requests = [ ];
					
					$request ['label'] = 'Over Weight';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [0] ['Physical Abnormalities'] ['value'];
					}
					
					array_push ( $requests, $request );
					
					$request ['label'] = 'Under Weight';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [1] ['Physical Abnormalities'] ['value'];
					}
					
					array_push ( $requests, $request );
					
					$request ['label'] = 'Obese';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [2] ['Physical Abnormalities'] ['value'];
					}
					
					array_push ( $requests, $request );
					
					return $requests;
					break;
				
				case "General Abnormalities" :
					
					$requests = [ ];
					
					$request ['label'] = 'General';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [3] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Skin';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [4] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Others(Description/Advice)';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [5] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Ortho';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [6] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Postural';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [7] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Defects at Birth';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [8] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					// $request ['label'] = 'Deficencies';
					// $request ['value'] = 0;
					
					// foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						// $request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [8] ['General Abnormalities'] ['value'];
					// }
					// array_push ( $requests, $request );
					
					//==========================================Deficencies divided
					
					$request ['label'] = 'Anaemia';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [9] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Vitamin Deficiency - Bcomplex';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [10] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					
					$request ['label'] = 'Vitamin A Deficiency';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [11] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					
					$request ['label'] = 'Vitamin D Deficiency';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [12] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					
					$request ['label'] = 'SAM/stunting';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [13] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					
					$request ['label'] = 'Goiter';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [14] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					//==========================================Deficencies divided
					
					$request ['label'] = 'Childhood Diseases';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [15] ['General Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					return $requests;
					break;
				
				case "Eye Abnormalities" :
					$requests = [ ];
					
					$request ['label'] = 'Without Glasses';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [16] ['Eye Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'With Glasses';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [17] ['Eye Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Colour Blindness';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [18] ['Eye Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					case "Auditory Abnormalities" :
					$requests = [ ];
					
					$request ['label'] = 'Right Ear';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [19] ['Auditory Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Left Ear';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [20] ['Auditory Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Speech Screening';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [21] ['Auditory Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					return $requests;
					break;
				
				case "Dental Abnormalities" :
					$requests = [ ];
					
					$request ['label'] = 'Oral Hygiene - Fair';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [22] ['Dental Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Oral Hygiene - Poor';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [23] ['Dental Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Carious Teeth';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [24] ['Dental Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Flourosis';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [25] ['Dental Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Orthodontic Treatment';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [26] ['Dental Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					$request ['label'] = 'Indication for extraction';
					$request ['value'] = 0;
					
					foreach ( $pie_data as $each_pie ) {
						// //log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
						$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_vales'] [27] ['Dental Abnormalities'] ['value'];
					}
					array_push ( $requests, $request );
					
					return $requests;
					break;
				
				default :
					break;
			}
	}

		
	}
	public function get_drilling_screenings_abnormalities1($data, $date = false, $screening_duration = "Yearly") {
		// $query = $this->mongo_db->orderBy(array('doc_data.widget_data.page1.Personal Information.Name' => 1))->select(array("doc_data.widget_data"))->limit($per_page)->offset($page-1)->get($this->screening_app_col);
		$obj_data = json_decode ( $data, true );
		
		$type = $obj_data ['label'];
		
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		$dates = $this->get_start_end_date ( $today_date, $screening_duration );
		
		ini_set ( 'memory_limit', '1G' );
		
		$count = $this->mongo_db->count ( $this->screening_app_col );
		// ////log_message("debug","cccccccccccccccccccccccccccccccccccccccc".print_r($count,true));
		if ($count < 10000) {
			$per_page = $count;
			$loop = 2; // $count / $per_page;
		} else {
			$per_page = 10000;
			$loop = $count / $per_page;
		}
		
		switch ($type) {
			case "Physical Abnormalities" :
				$requests = [ ];
				$request ['label'] = 'Over Weight';
				// $query = $this->mongo_db->whereIn("doc_data.widget_data.page5.Doctor Check Up.Deficencies", array("Over Weight"))->count($this->screening_app_col);
				
				$merged_array = array (
						"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
								'$in' => array (
										"Over Weight" 
								) 
						) 
				);
				
				$result = [ ];
				for($page = 1; $page < $loop; $page ++) {
					$offset = $per_page * ($page);
					$pipeline = [ 
							array (
									'$project' => array (
											"doc_data.widget_data" => true,
											"history" => true 
									) 
							),
							array (
									'$match' => $merged_array 
							),
							array (
									'$limit' => $offset 
							),
							array (
									'$skip' => $offset - $per_page 
							) 
					];
					$response = $this->mongo_db->command ( array (
							'aggregate' => $this->screening_app_col,
							'pipeline' => $pipeline 
					) );
					$temp_result = [ ];
					foreach ( $response ['result'] as $doc ) {
						
						foreach ( $doc ['history'] as $date ) {
							$time = $date ['time'];
							
							if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
								array_push ( $temp_result, $doc );
								break;
							}
						}
					}
					
					$result = array_merge ( $result, $temp_result );
				}
				
				$request ['value'] = count ( $result );
				array_push ( $requests, $request );
				
				$request ['label'] = 'Under Weight';
				// $query = $this->mongo_db->whereIn("doc_data.widget_data.page5.Doctor Check Up.Deficencies", array("Under Weight"))->count($this->screening_app_col);
				
				$merged_array = array (
						"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (
								'$in' => array (
										"Under Weight" 
								) 
						) 
				);
				
				$result = [ ];
				for($page = 1; $page < $loop; $page ++) {
					$offset = $per_page * ($page);
					$pipeline = [ 
							array (
									'$project' => array (
											"doc_data.widget_data" => true,
											"history" => true 
									) 
							),
							array (
									'$match' => $merged_array 
							),
							array (
									'$limit' => $offset 
							),
							array (
									'$skip' => $offset - $per_page 
							) 
					];
					$response = $this->mongo_db->command ( array (
							'aggregate' => $this->screening_app_col,
							'pipeline' => $pipeline 
					) );
					$temp_result = [ ];
					foreach ( $response ['result'] as $doc ) {
						
						foreach ( $doc ['history'] as $date ) {
							$time = $date ['time'];
							
							if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
								array_push ( $temp_result, $doc );
								break;
							}
						}
					}
					
					$result = array_merge ( $result, $temp_result );
				}
				
				$request ['value'] = count ( $result );
				array_push ( $requests, $request );
				
				return $requests;
				break;
			case "General Abnormalities" :
				$requests = [ ];
				$request ['label'] = 'General';
				// $query = $this->mongo_db->whereNe(array("doc_data.widget_data.page4" => array(), "doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array()))->count($this->screening_app_col);
				
				$and_merged_array = array ();
				
				$general_str_empty = array (
						"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
								'$ne' => '' 
						) 
				);
				$general_str_space = array (
						"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
								'$ne' => ' ' 
						) 
				);
				$general_arr = array (
						"doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => array (
								'$ne' => array () 
						) 
				);
				
				$page4_exists = array (
						"doc_data.widget_data.page4.Doctor Check Up" => array (
								'$exists' => true 
						) 
				);
				
				array_push ( $and_merged_array, $general_str_empty );
				array_push ( $and_merged_array, $general_str_space );
				array_push ( $and_merged_array, $general_arr );
				array_push ( $and_merged_array, $page4_exists );
				
				$result = [ ];
				for($page = 1; $page < $loop; $page ++) {
					$offset = $per_page * ($page);
					$pipeline = [ 
							array (
									'$match' => array (
											'$and' => $and_merged_array 
									) 
							),
							array (
									'$project' => array (
											"doc_data.widget_data" => true,
											"history" => true 
									) 
							),
							array (
									'$limit' => $offset 
							),
							array (
									'$skip' => $offset - $per_page 
							) 
					];
					$response = $this->mongo_db->command ( array (
							'aggregate' => $this->screening_app_col,
							'pipeline' => $pipeline 
					) );
					$temp_result = [ ];
					foreach ( $response ['result'] as $doc ) {
						
						foreach ( $doc ['history'] as $date ) {
							$time = $date ['time'];
							
							if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
								array_push ( $temp_result, $doc );
								break;
							}
						}
					}
					
					$result = array_merge ( $result, $temp_result );
				}
				
				$request ['value'] = count ( $result );
				array_push ( $requests, $request );
				
				$request ['label'] = 'Ortho';
				// $query = $this->mongo_db->whereNe(array("doc_data.widget_data.page4" => array(), "doc_data.widget_data.page4.Doctor Check Up.Ortho" => array()))->count($this->screening_app_col);
				// $request['value'] = $query;
				
				$and_merged_array = array ();
				
				$ortho = array (
						"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
								'$not' => array (
										'$size' => 0 
								) 
						) 
				);
				
				$page4_exists = array (
						"doc_data.widget_data.page4.Doctor Check Up.Ortho" => array (
								'$exists' => true 
						) 
				);
				
				array_push ( $and_merged_array, $ortho );
				array_push ( $and_merged_array, $page4_exists );
				
				$result = [ ];
				for($page = 1; $page < $loop; $page ++) {
					$offset = $per_page * ($page);
					$pipeline = [ 
							array (
									'$match' => array (
											'$and' => $and_merged_array 
									) 
							),
							array (
									'$project' => array (
											"doc_data.widget_data" => true,
											"history" => true 
									) 
							),
							array (
									'$limit' => $offset 
							),
							array (
									'$skip' => $offset - $per_page 
							) 
					];
					
					$response = $this->mongo_db->command ( array (
							'aggregate' => $this->screening_app_col,
							'pipeline' => $pipeline 
					) );
					$temp_result = [ ];
					foreach ( $response ['result'] as $doc ) {
						
						foreach ( $doc ['history'] as $date ) {
							$time = $date ['time'];
							
							if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
								array_push ( $temp_result, $doc );
								break;
							}
						}
					}
					
					$result = array_merge ( $result, $temp_result );
				}
				
				$request ['value'] = count ( $result );
				array_push ( $requests, $request );
				
				$request ['label'] = 'Postural';
				// $query = $this->mongo_db->whereNe(array("doc_data.widget_data.page4.Doctor Check Up.Postural" => array(), "doc_data.widget_data.page4" => array()))->count($this->screening_app_col);
				
				$and_merged_array = array ();
				
				$postural = array (
						"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
								'$not' => array (
										'$size' => 0 
								) 
						) 
				);
				
				$page4_exists = array (
						"doc_data.widget_data.page4.Doctor Check Up.Postural" => array (
								'$exists' => true 
						) 
				);
				
				array_push ( $and_merged_array, $postural );
				array_push ( $and_merged_array, $page4_exists );
				
				$result = [ ];
				for($page = 1; $page < $loop; $page ++) {
					$offset = $per_page * ($page);
					$pipeline = [ 
							array (
									'$match' => array (
											'$and' => $and_merged_array 
									) 
							),
							array (
									'$project' => array (
											"doc_data.widget_data" => true,
											"history" => true 
									) 
							),
							array (
									'$limit' => $offset 
							),
							array (
									'$skip' => $offset - $per_page 
							) 
					];
					
					$response = $this->mongo_db->command ( array (
							'aggregate' => $this->screening_app_col,
							'pipeline' => $pipeline 
					) );
					$temp_result = [ ];
					foreach ( $response ['result'] as $doc ) {
						
						foreach ( $doc ['history'] as $date ) {
							$time = $date ['time'];
							
							if (($time <= $dates ['today_date']) && ($time >= $dates ['end_date'])) {
								array_push ( $temp_result, $doc );
								break;
							}
						}
					}
					
					$result = array_merge ( $result, $temp_result );
				}
				
				$request ['value'] = count ( $result );
				array_push ( $requests, $request );
				
				$request ['label'] = 'Defects at Birth';
				$query = $this->mongo_db->whereNe ( array (
						"doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => array (),
						"doc_data.widget_data.page5" => array () 
				) )->count ( $this->screening_app_col );
				$request ['value'] = $query;
				array_push ( $requests, $request );
				
				$request ['label'] = 'Deficencies';
				$query = $this->mongo_db->whereNe ( array (
						"doc_data.widget_data.page5.Doctor Check Up.Deficencies" => array (),
						"doc_data.widget_data.page5" => array () 
				) )->count ( $this->screening_app_col );
				$request ['value'] = $query;
				array_push ( $requests, $request );
				
				$request ['label'] = 'Childhood Diseases';
				$query = $this->mongo_db->whereNe ( array (
						"doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => array (),
						"doc_data.widget_data.page5" => array () 
				) )->count ( $this->screening_app_col );
				$request ['value'] = $query;
				array_push ( $requests, $request );
				
				return $requests;
				break;
			case "Eye Abnormalities" :
				$requests = [ ];
				
				$request ['label'] = 'Without Glasses';
				$search = array (
						"doc_data.widget_data.page6.Without Glasses.Right" => "",
						"doc_data.widget_data.page6.Without Glasses.Left" => "",
						"doc_data.widget_data.page6.Without Glasses.Right" => "6/6",
						"doc_data.widget_data.page6.Without Glasses.Left" => "6/6",
						"doc_data.widget_data.page6" => array () 
				);
				$query = $this->mongo_db->orWhere ( $search )->count ( $this->screening_app_col );
				$request ['value'] = $query;
				array_push ( $requests, $request );
				
				$request ['label'] = 'With Glasses';
				$search = array (
						"doc_data.widget_data.page6.With Glasses.Right" => "",
						"doc_data.widget_data.page6.With Glasses.Left" => "",
						"doc_data.widget_data.page6.With Glasses.Right" => "6/6",
						"doc_data.widget_data.page6.With Glasses.Left" => "6/6",
						"doc_data.widget_data.page6" => array () 
				);
				$query = $this->mongo_db->orWhere ( $search )->count ( $this->screening_app_col );
				$request ['value'] = $query;
				array_push ( $requests, $request );
				
				$request ['label'] = 'Colour Blindness';
				$search = array (
						"doc_data.widget_data.page7.Colour Blindness.Right" => array (
								"Yes" 
						),
						"doc_data.widget_data.page7.Colour Blindness.Left" => array (
								"Yes" 
						) 
				);
				$query = $this->mongo_db->orWhere ( $search )->count ( $this->screening_app_col );
				$request ['value'] = $query;
				array_push ( $requests, $request );
				
				return $requests;
				break;
			case "Auditory Abnormalities" :
				$requests = [ ];
				
				$request ['label'] = 'Right Ear';
				$search = array (
						"doc_data.widget_data.page8. Auditory Screening.Right" => "Fail",
						"doc_data.widget_data.page8" => array () 
				);
				$query = $this->mongo_db->orWhere ( $search )->count ( $this->screening_app_col );
				$request ['value'] = $query;
				array_push ( $requests, $request );
				
				$request ['label'] = 'Left Ear';
				$search = array (
						"doc_data.widget_data.page8. Auditory Screening.Left" => "Fail",
						"doc_data.widget_data.page8" => array () 
				);
				$query = $this->mongo_db->orWhere ( $search )->count ( $this->screening_app_col );
				$request ['value'] = $query;
				array_push ( $requests, $request );
				
				$request ['label'] = 'Speech Screening';
				
				$query = $this->mongo_db->whereInAll ( "doc_data.widget_data.page8. Auditory Screening.Speech Screening", array (
						'Delay',
						"Misarticulation",
						"Fluency",
						"Voice" 
				) )->count ( $this->screening_app_col );
				$request ['value'] = $query;
				array_push ( $requests, $request );
				
				return $requests;
				break;
			case "Dental Abnormalities" :
				$requests = [ ];
				
				$request ['label'] = 'Oral Hygiene';
				$query = $this->mongo_db->whereNe ( "doc_data.widget_data.page9.Dental Check-up.Oral Hygiene", "Good" )->count ( $this->screening_app_col );
				$request ['value'] = $query;
				array_push ( $requests, $request );
				
				$request ['label'] = 'Carious Teeth';
				$query = $this->mongo_db->where ( "doc_data.widget_data.page9.Dental Check-up.Carious Teeth", "Yes" )->count ( $this->screening_app_col );
				$request ['value'] = $query;
				array_push ( $requests, $request );
				
				$request ['label'] = 'Flourosis';
				$query = $this->mongo_db->where ( "doc_data.widget_data.page9.Dental Check-up.Flourosis", "Yes" )->count ( $this->screening_app_col );
				$request ['value'] = $query;
				array_push ( $requests, $request );
				
				$request ['label'] = 'Orthodontic Treatment';
				$query = $this->mongo_db->where ( "doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment", "Yes" )->count ( $this->screening_app_col );
				$request ['value'] = $query;
				array_push ( $requests, $request );
				
				$request ['label'] = 'Indication for extraction';
				$query = $this->mongo_db->where ( "doc_data.widget_data.page9.Dental Check-up.Indication for extraction", "Yes" )->count ( $this->screening_app_col );
				$request ['value'] = $query;
				array_push ( $requests, $request );
				
				return $requests;
				break;
			
			default :
				;
				break;
		}
	}
	//Presently using API in web side
	public function get_drilling_screenings_districts($data, $date = false, $screening_duration = "Yearly") {
		if ($date) {
			$today_date = $date;
			//$today_date = "2018-01-01";
		} else {
			$today_date = $this->today_date;
			//$today_date = "2018-01-01";
		}
		
		if ($screening_duration != "Yearly"){
			$get_year = explode(" ",$screening_duration);
			$year = $get_year[0];
		}
		else
		{
			$get_year = explode("-",$today_date);
			$year = $get_year[0];
		}
		if($year== "2018-19"){

			$year = "2019";
		}
		
		$dates = $this->get_start_end_date ( $today_date, $screening_duration );
		
		$pie_data = $this->mongo_db->select ( array ('pie_data.stage3_pie_vales') )->whereBetween ( 'pie_data.date', $dates ['end_date'], $dates ['today_date'] )->get ( 'healthcare2016226112942701_screening_final_'.$year );		

		$obj_data = json_decode ( $data, true );
		$type = $obj_data ['label'];
		switch ($type) {
			case "Over Weight" :
				
				// $query = $this->mongo_db->where("doc_data.widget_data.page2.Personal Information.District","Nalgonda")->get($this->screening_app_col);
				// foreach ($query as $doc){
				
				// $doc['doc_data']['widget_data']['page2']['Personal Information']['District'] = "Nalgonda";
				
				// $query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update($this->screening_app_col);
				//log_message ( "debug", "iiiiiiiiiiiiiinnnnnnnnnnncapssssssssssssssss========================" );
				
				// }
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Over Weight"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Under Weight" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Under Weight"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
				
				case "Obese" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Obese"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "General" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["General"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Skin" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Skin"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
				
			case "Others(Description/Advice)" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Others(Description/Advice)"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Ortho" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Ortho"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Postural" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Postural"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Defects at Birth" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Defects at Birth"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			// case "Deficencies" :
				
				// $requests = [ ];
				// foreach ( $pie_data as $each_pie ) {
					// $requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Deficencies"] );
				// }
				
				// $request = [ ];
				// foreach ( $requests as $doc ) {
					// if (isset ( $request [$doc ['label']] )) {
						// $request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					// } else {
						// $request [$doc ['label']] = $doc ['value'];
					// }
				// }
				
				// $final_values = [ ];
				// foreach ( $request as $dist => $count ) {
					// $result ['label'] = $dist;
					// $result ['value'] = $count;
					// array_push ( $final_values, $result );
				// }
				
				// return $final_values;
				// break;
				
				//========================================Deficencies divided
				
			case "Anaemia" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Anaemia"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
				
			case "Vitamin Deficiency - Bcomplex" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Vitamin Deficiency - Bcomplex"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
				
				
			case "Vitamin A Deficiency" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Vitamin A Deficiency"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
				
			case "Vitamin D Deficiency" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Vitamin D Deficiency"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "SAM/stunting" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["SAM/stunting"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
				
			case "Goiter" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Goiter"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
				
				//========================================Deficencies divided
			
			case "Childhood Diseases" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Childhood Diseases"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Without Glasses" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Without Glasses"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "With Glasses" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["With Glasses"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Colour Blindness" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Colour Blindness"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;

			case "Eye Lids" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Eye Lids"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
				
			case "Conjunctiva" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Conjunctiva"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
				
			case "Cornea" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Cornea"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
				
			case "Pupil" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Pupil"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
				
								
			case "Wearing Spectacles" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Wearing Spectacles"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
				
			case "Subjective Refraction" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Subjective Refraction"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
					
			case "Right Ear" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Right Ear"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Left Ear" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Left Ear"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Speech Screening" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Speech Screening"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Oral Hygiene - Fair" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Oral Hygiene - Fair"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Oral Hygiene - Poor" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Oral Hygiene - Poor"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Carious Teeth" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Carious Teeth"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Flourosis" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Flourosis"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Orthodontic Treatment" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Orthodontic Treatment"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Indication for extraction" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Indication for extraction"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;

				case "Root Canal Treatment" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Root Canal Treatment"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;

				case "CROWNS" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["CROWNS"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;

				case "Fixed Partial Denture" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Fixed Partial Denture"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;

				case "Curettage" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_vales'] ["Curettage"] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			default :
				;
				break;
		}
	}
	public function get_drilling_screenings_districts1($data) {
		// $query = $this->mongo_db->orderBy(array('doc_data.widget_data.page1.Personal Information.Name' => 1))->select(array("doc_data.widget_data"))->limit($per_page)->offset($page-1)->get($this->screening_app_col);
		$obj_data = json_decode ( $data, true );
		
		$type = $obj_data ['label'];
		switch ($type) {
			case "Over Weight" :
				
				$query = $this->mongo_db->select ( array (
						"doc_data.widget_data" 
				) )->whereIn ( "doc_data.widget_data.page5.Doctor Check Up.Deficencies", array (
						"Over Weight" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_districts_prepare_pie_array ( $query );
				break;
			
			case "Under Weight" :
				
				ini_set ( 'memory_limit', '512M' );
				
				// $query = $this->mongo_db->get($this->screening_app_col);
				// $chk =0;
				// $id=1000;
				// foreach ($query as $doc){
				// if(isset($doc['doc_data']['widget_data']['page8'][' Auditory Screening']['D D and disablity'])){
				// $doc['doc_data']['widget_data']['page8'][' Auditory Screening']['D D and disability'] = $doc['doc_data']['widget_data']['page8'][' Auditory Screening']['D D and disablity'];
				// unset($doc['doc_data']['widget_data']['page8'][' Auditory Screening']['D D and disablity']);
				// $query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update($this->screening_app_col);
				// }
				
				// $doc['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'] = 'MBNR_1423101_'.$id;
				// $query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update($this->screening_app_col);
				// $chk++;
				// $id++;
				
				// }
				// ////log_message("debug","chhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhkkkkkkkkkkkkkkkkkkkkkkkk".print_r($chk,true));
				
				// $query = $this->mongo_db->where("doc_data.widget_data.page2.Personal Information.School Name","TSWRS-CHITKUL,MEDAK")->get($this->screening_app_col);
				// foreach ($query as $doc){
				
				// $doc['doc_data']['widget_data']['page2']['Personal Information']['School Name'] = "TSWREIS CHITKUL(G),MEDAK";
				
				// $query = $this->mongo_db->where("_id", new MongoID($doc["_id"]))->set($doc)->update($this->screening_app_col);
				// ////log_message("debug","iiiiiiiiiiiiiinnnnnnnnnnncapssssssssssssssss========================");
				
				// }
				
				$query = $this->mongo_db->select ( array (
						"doc_data.widget_data" 
				) )->whereIn ( "doc_data.widget_data.page5.Doctor Check Up.Deficencies", array (
						"Under Weight" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_districts_prepare_pie_array ( $query );
				
				break;
			
			case "General" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereNotIn ( "doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities", array (
						"Neurologic",
						"H and N",
						"ENT",
						"Lymphatic",
						"Heart",
						"Lungs",
						"Genitalia",
						"Skin" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_districts_prepare_pie_array ( $query );
				
				break;
			
			case "Ortho" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereNotIn ( "doc_data.widget_data.page4.Doctor Check Up.Ortho", array (
						"Neck",
						"Shoulders",
						"Arms/Hands",
						"Hips",
						"Knees",
						"Feet" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_districts_prepare_pie_array ( $query );
				
				break;
			
			case "Postural" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereNotIn ( "doc_data.widget_data.page4.Doctor Check Up.Postural", array (
						"No spinal Abnormality",
						"Spinal Abnormality",
						"Mild",
						"Marked",
						"Moderate" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_districts_prepare_pie_array ( $query );
				
				break;
			
			case "Defects at Birth" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereNotIn ( "doc_data.widget_data.page5.Doctor Check Up.Defects at Birth", array (
						"Neural Tube Defect",
						"Down Syndrome",
						"Cleft Lip and Palate",
						"Talipes Club foot",
						"Developmental Dysplasia of Hip",
						"Congenital Cataract",
						"Congenital Deafness",
						"Congenital Heart Disease",
						"Retinopathy of Prematurity" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_districts_prepare_pie_array ( $query );
				
				break;
			
			case "Deficencies" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereNotIn ( "doc_data.widget_data.page5.Doctor Check Up.Deficencies", array (
						"Anaemia",
						"Vitamin Deficiency - Bcomplex",
						"Vitamin A Deficiency",
						"Vitamin D Deficiency",
						"SAM/stunting",
						"Goiter",
						"Under Weight",
						"Over Weight",
						"Obese" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_districts_prepare_pie_array ( $query );
				
				break;
			
			case "Childhood Diseases" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereNotIn ( "doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases", array (
						"Skin Conditions",
						"Otitis Media",
						"Rheumatic Heart Disease",
						"Asthma",
						"Convulsive Disorders",
						"Hypothyroidism",
						"Diabetes",
						"Epilepsy" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_districts_prepare_pie_array ( $query );
				
				break;
			
			case "Without Glasses" :
				ini_set ( 'memory_limit', '512M' );
				$search = array (
						"doc_data.widget_data.page6.Without Glasses.Right" => "6/6",
						"doc_data.widget_data.page6.Without Glasses.Left" => "6/6" 
				);
				$query = $this->mongo_db->whereNe ( $search )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_districts_prepare_pie_array ( $query );
				
				break;
			
			case "With Glasses" :
				ini_set ( 'memory_limit', '512M' );
				$search = array (
						"doc_data.widget_data.page6.With Glasses.Right" => "",
						"doc_data.widget_data.page6.With Glasses.Left" => "",
						"doc_data.widget_data.page6.With Glasses.Right" => "6/6",
						"doc_data.widget_data.page6.With Glasses.Left" => "6/6" 
				);
				$query = $this->mongo_db->whereNe ( $search )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_districts_prepare_pie_array ( $query );
				
				break;
			
			case "Colour Blindness" :
				ini_set ( 'memory_limit', '512M' );
				$search = array (
						"doc_data.widget_data.page7.Colour Blindness.Right" => "No",
						"doc_data.widget_data.page7.Colour Blindness.Left" => "No" 
				);
				$query = $this->mongo_db->whereNe ( $search )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_districts_prepare_pie_array ( $query );
				
				break;
			
			case "Right Ear" :
				ini_set ( 'memory_limit', '512M' );
				$search = array (
						"doc_data.widget_data.page8. Auditory Screening.Right" => "Fail" 
				);
				$query = $this->mongo_db->where ( $search )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_districts_prepare_pie_array ( $query );
				
				break;
			
			case "Left Ear" :
				ini_set ( 'memory_limit', '512M' );
				$search = array (
						"doc_data.widget_data.page8. Auditory Screening.Left" => "Fail" 
				);
				$query = $this->mongo_db->where ( $search )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_districts_prepare_pie_array ( $query );
				
				break;
			
			case "Speech Screening" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereInAll ( "doc_data.widget_data.page8. Auditory Screening.Speech Screening", array (
						'Delay',
						"Misarticulation",
						"Fluency",
						"Voice" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_districts_prepare_pie_array ( $query );
				
				break;
			
			case "Oral Hygiene" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereNe ( "doc_data.widget_data.page9.Dental Check-up.Oral Hygiene", "Good" )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_districts_prepare_pie_array ( $query );
				
				break;
			
			case "Carious Teeth" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->where ( "doc_data.widget_data.page9.Dental Check-up.Carious Teeth", "Yes" )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_districts_prepare_pie_array ( $query );
				
				break;
			
			case "Flourosis" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->where ( "doc_data.widget_data.page9.Dental Check-up.Flourosis", "Yes" )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_districts_prepare_pie_array ( $query );
				
				break;
			
			case "Orthodontic Treatment" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->where ( "doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment", "Yes" )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_districts_prepare_pie_array ( $query );
				
				break;
			
			case "Indication for extraction" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->where ( "doc_data.widget_data.page9.Dental Check-up.Indication for extraction", "Yes" )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_districts_prepare_pie_array ( $query );
				
				break;
			
			default :
				;
				break;
		}
	}
	//Presently using API in web side
	public function get_drilling_screenings_schools($data, $date = false, $screening_duration = "Yearly") {
		if ($date) {
			//$today_date = "2018-01-01";
			$today_date = $date;
		} else {
			//$today_date = "2018-01-01";
			$today_date = $this->today_date;
		}
		
		if ($screening_duration != "Yearly"){
			$get_year = explode(" ",$screening_duration);
			$year = $get_year[0];
		}
		else
		{
			$get_year = explode("-",$today_date);
			$year = $get_year[0];
		}

		if($year== "2018-19"){
			
			$year = "2019";
		}

		$dates = $this->get_start_end_date ( $today_date, $screening_duration );
		
		$pie_data = $this->mongo_db->select ( array (
				'pie_data.stage4_pie_vales' 
		) )->whereBetween ( 'pie_data.date', $dates ['end_date'], $dates ['today_date'] )->get ( 'healthcare2016226112942701_screening_final_'.$year );
		
		$obj_data = json_decode ( $data, true );
		$type = $obj_data ['0'];
		$dist = strtolower ( $obj_data ['1'] );
		switch ($type) {
			case "Over Weight" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Over Weight"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Over Weight"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Under Weight" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Under Weight"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Under Weight"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
				
				case "Obese" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Obese"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Obese"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "General" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["General"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["General"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Skin" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Skin"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Skin"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
				
			case "Others(Description/Advice)" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Others(Description/Advice)"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Others(Description/Advice)"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Ortho" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Ortho"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Ortho"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Postural" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Postural"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Postural"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Defects at Birth" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Defects at Birth"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Defects at Birth"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			// case "Deficencies" :
				
				// $requests = [ ];
				// foreach ( $pie_data as $each_pie ) {
					// if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Deficencies"] [strtolower ( $dist )] != null)
						// $requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Deficencies"] [strtolower ( $dist )] );
				// }
				
				// $request = [ ];
				// foreach ( $requests as $doc ) {
					// if (isset ( $request [$doc ['label']] )) {
						// $request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					// } else {
						// $request [$doc ['label']] = $doc ['value'];
					// }
				// }
				
				// $final_values = [ ];
				// foreach ( $request as $dist => $count ) {
					// $result ['label'] = $dist;
					// $result ['value'] = $count;
					// array_push ( $final_values, $result );
				// }
				
				// return $final_values;
				// break;
				
			//=================================Deficencies divided====================
			
			case "Anaemia" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Anaemia"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Anaemia"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
				
			case "Vitamin Deficiency - Bcomplex" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Vitamin Deficiency - Bcomplex"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Vitamin Deficiency - Bcomplex"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
				
			case "Vitamin A Deficiency" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Vitamin A Deficiency"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Vitamin A Deficiency"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Vitamin D Deficiency" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Vitamin D Deficiency"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Vitamin D Deficiency"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "SAM/stunting" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["SAM/stunting"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["SAM/stunting"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
				
			case "Goiter" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Goiter"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Goiter"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			//=================================Deficencies divided====================
			
			case "Childhood Diseases" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Childhood Diseases"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Childhood Diseases"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Without Glasses" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Without Glasses"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Without Glasses"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "With Glasses" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["With Glasses"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["With Glasses"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Colour Blindness" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Colour Blindness"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Colour Blindness"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			case "Eye Lids" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Eye Lids"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Eye Lids"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			case "Conjunctiva" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Conjunctiva"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Conjunctiva"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			case "Cornea" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Cornea"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Cornea"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			case "Pupil" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Pupil"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Pupil"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			case "Wearing Spectacles" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Wearing Spectacles"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Wearing Spectacles"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			case "Subjective Refraction" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Subjective Refraction"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Subjective Refraction"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;						
			
			case "Right Ear" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Right Ear"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Right Ear"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Left Ear" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Left Ear"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Left Ear"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Speech Screening" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Speech Screening"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Speech Screening"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Oral Hygiene - Fair" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Oral Hygiene - Fair"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Oral Hygiene - Fair"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Oral Hygiene - Poor" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Oral Hygiene - Poor"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Oral Hygiene - Poor"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Carious Teeth" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Carious Teeth"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Carious Teeth"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Flourosis" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Flourosis"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Flourosis"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Orthodontic Treatment" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Orthodontic Treatment"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Orthodontic Treatment"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			case "Indication for extraction" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Indication for extraction"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Indication for extraction"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;

				case "Root Canal Treatment" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Root Canal Treatment"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Root Canal Treatment"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;

				case "CROWNS" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["CROWNS"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["CROWNS"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;

				case "Fixed Partial Denture" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Fixed Partial Denture"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Fixed Partial Denture"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;

				case "Curettage" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage4_pie_vales'] ["Curettage"] [strtolower ( $dist )] != null)
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage4_pie_vales'] ["Curettage"] [strtolower ( $dist )] );
				}
				
				$request = [ ];
				foreach ( $requests as $doc ) {
					if (isset ( $request [$doc ['label']] )) {
						$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
					} else {
						$request [$doc ['label']] = $doc ['value'];
					}
				}
				
				$final_values = [ ];
				foreach ( $request as $dist => $count ) {
					$result ['label'] = $dist;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
				
				return $final_values;
				break;
			
			default :
				;
				break;
		}
	}
	public function get_drilling_screenings_schools1($data) {
		$obj_data = json_decode ( $data, true );
		// //log_message("debug","ooooooooooooooooooooooooooooooooooooooooooooooooooooooo".print_r($obj_data,true));
		
		$type = $obj_data ['0'];
		$dist = strtolower ( $obj_data ['1'] );
		switch ($type) {
			case "Over Weight" :
				
				$query = $this->mongo_db->select ( array (
						"doc_data.widget_data" 
				) )->whereIn ( "doc_data.widget_data.page5.Doctor Check Up.Deficencies", array (
						"Over Weight" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_schools_prepare_pie_array ( $query, $dist );
				
				break;
			
			case "Under Weight" :
				
				$query = $this->mongo_db->select ( array (
						"doc_data.widget_data" 
				) )->whereIn ( "doc_data.widget_data.page5.Doctor Check Up.Deficencies", array (
						"Under Weight" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_schools_prepare_pie_array ( $query, $dist );
				
				break;
			
			case "General" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereNotIn ( "doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities", array (
						"Neurologic",
						"H and N",
						"ENT",
						"Lymphatic",
						"Heart",
						"Lungs",
						"Genitalia",
						"Skin" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_schools_prepare_pie_array ( $query, $dist );
				
				break;
			
			case "Ortho" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereNotIn ( "doc_data.widget_data.page4.Doctor Check Up.Ortho", array (
						"Neck",
						"Shoulders",
						"Arms/Hands",
						"Hips",
						"Knees",
						"Feet" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_schools_prepare_pie_array ( $query, $dist );
				
				break;
			
			case "Postural" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereNotIn ( "doc_data.widget_data.page4.Doctor Check Up.Postural", array (
						"No spinal Abnormality",
						"Spinal Abnormality",
						"Mild",
						"Marked",
						"Moderate" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_schools_prepare_pie_array ( $query, $dist );
				
				break;
			
			case "Defects at Birth" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereNotIn ( "doc_data.widget_data.page5.Doctor Check Up.Defects at Birth", array (
						"Neural Tube Defect",
						"Down Syndrome",
						"Cleft Lip and Palate",
						"Talipes Club foot",
						"Developmental Dysplasia of Hip",
						"Congenital Cataract",
						"Congenital Deafness",
						"Congenital Heart Disease",
						"Retinopathy of Prematurity" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_schools_prepare_pie_array ( $query, $dist );
				
				break;
			
			case "Deficencies" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereNotIn ( "doc_data.widget_data.page5.Doctor Check Up.Deficencies", array (
						"Anaemia",
						"Vitamin Deficiency - Bcomplex",
						"Vitamin A Deficiency",
						"Vitamin D Deficiency",
						"SAM/stunting",
						"Goiter",
						"Under Weight",
						"Over Weight",
						"Obese" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_schools_prepare_pie_array ( $query, $dist );
				
				break;
			
			case "Childhood Diseases" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereNotIn ( "doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases", array (
						"Skin Conditions",
						"Otitis Media",
						"Rheumatic Heart Disease",
						"Asthma",
						"Convulsive Disorders",
						"Hypothyroidism",
						"Diabetes",
						"Epilepsy" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_schools_prepare_pie_array ( $query, $dist );
				
				break;
			
			case "Without Glasses" :
				ini_set ( 'memory_limit', '512M' );
				$search = array (
						"doc_data.widget_data.page6.Without Glasses.Right" => "6/6",
						"doc_data.widget_data.page6.Without Glasses.Left" => "6/6" 
				);
				$query = $this->mongo_db->whereNe ( $search )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_schools_prepare_pie_array ( $query, $dist );
				
				break;
			
			case "With Glasses" :
				ini_set ( 'memory_limit', '512M' );
				$search = array (
						"doc_data.widget_data.page6.With Glasses.Right" => "",
						"doc_data.widget_data.page6.With Glasses.Left" => "",
						"doc_data.widget_data.page6.With Glasses.Right" => "6/6",
						"doc_data.widget_data.page6.With Glasses.Left" => "6/6" 
				);
				$query = $this->mongo_db->whereNe ( $search )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_schools_prepare_pie_array ( $query, $dist );
				
				break;
			
			case "Colour Blindness" :
				ini_set ( 'memory_limit', '512M' );
				$search = array (
						"doc_data.widget_data.page7.Colour Blindness.Right" => "No",
						"doc_data.widget_data.page7.Colour Blindness.Left" => "No" 
				);
				$query = $this->mongo_db->whereNe ( $search )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_schools_prepare_pie_array ( $query, $dist );
				
				break;
			
			case "Right Ear" :
				ini_set ( 'memory_limit', '512M' );
				$search = array (
						"doc_data.widget_data.page8. Auditory Screening.Right" => "Fail" 
				);
				$query = $this->mongo_db->where ( $search )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_schools_prepare_pie_array ( $query, $dist );
				
				break;
			
			case "Left Ear" :
				ini_set ( 'memory_limit', '512M' );
				$search = array (
						"doc_data.widget_data.page8. Auditory Screening.Left" => "Fail" 
				);
				$query = $this->mongo_db->where ( $search )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_schools_prepare_pie_array ( $query, $dist );
				
				break;
			
			case "Speech Screening" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereInAll ( "doc_data.widget_data.page8. Auditory Screening.Speech Screening", array (
						'Delay',
						"Misarticulation",
						"Fluency",
						"Voice" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_schools_prepare_pie_array ( $query, $dist );
				
				break;
			
			case "Oral Hygiene" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereNe ( "doc_data.widget_data.page9.Dental Check-up.Oral Hygiene", "Good" )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_schools_prepare_pie_array ( $query, $dist );
				
				break;
			
			case "Carious Teeth" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->where ( "doc_data.widget_data.page9.Dental Check-up.Carious Teeth", "Yes" )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_schools_prepare_pie_array ( $query, $dist );
				
				break;
			
			case "Flourosis" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->where ( "doc_data.widget_data.page9.Dental Check-up.Flourosis", "Yes" )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_schools_prepare_pie_array ( $query, $dist );
				
				break;
			
			case "Orthodontic Treatment" :
				ini_set ( 'memory_limit', '512M' );
				// $search = array("doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment" => "No");
				$query = $this->mongo_db->where ( "doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment", "Yes" )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_schools_prepare_pie_array ( $query, $dist );
				
				break;
			
			case "Indication for extraction" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->where ( "doc_data.widget_data.page9.Dental Check-up.Indication for extraction", "Yes" )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_schools_prepare_pie_array ( $query, $dist );
				
				break;
			
			default :
				;
				break;
		}
	}
	//Presently using API in web side
	public function get_drilling_screenings_students($data, $date = false, $screening_duration = "Yearly") {
		ini_set ( 'memory_limit', '1G' );
		if ($date) {
			//$today_date = "2018-01-01";
			$today_date = $date;
		} else {
			//$today_date = "2018-01-01";
			$today_date = $this->today_date;
		}
		
		if ($screening_duration != "Yearly"){
			$get_year = explode(" ",$screening_duration);
			$year = $get_year[0];
		}
		else
		{
			$get_year = explode("-",$today_date);
			$year = $get_year[0];
		}

		
		if($year== "2018-19"){
			
			$year = "2019";
		}
		
		$dates = $this->get_start_end_date ( $today_date, $screening_duration );
		
		$pie_data = $this->mongo_db->select ( array (
				'pie_data.stage5_pie_vales' 
		) )->whereBetween ( 'pie_data.date', $dates ['end_date'], $dates ['today_date'] )->get ( 'healthcare2016226112942701_screening_final_'.$year );
		
		$obj_data = json_decode ( $data, true );
		$type = $obj_data ['0'];
		$school_name = strtolower ( $obj_data ['1'] );
		//log_message ( "debug", "obbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbjjjjjjjjjjjjj" . print_r ( $school_name, true ) );
		switch ($type) {
			case "Over Weight" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Over Weight"] [base64_encode($school_name) ] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Over Weight"] [base64_encode($school_name)] )) {
						//log_message("debug","pieeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee".print_r($each_pie,true));
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Over Weight"] [base64_encode($school_name)] );
					}
				}
				
				return $requests;
				break;
			
			case "Under Weight" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Under Weight"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Under Weight"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Under Weight"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
				
				case "Obese" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Obese"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Obese"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Obese"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			
			case "General" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["General"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["General"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["General"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			
			case "Skin" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Skin"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Skin"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Skin"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			
			case "Others(Description/Advice)" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Others(Description/Advice)"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Others(Description/Advice)"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Others(Description/Advice)"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			
			case "Ortho" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Ortho"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Ortho"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Ortho"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			
			case "Postural" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Postural"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Postural"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Postural"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			
			case "Defects at Birth" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Defects at Birth"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Defects at Birth"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Defects at Birth"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			
			// case "Deficencies" :
				
				// $requests = [ ];
				// foreach ( $pie_data as $each_pie ) {
					// if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Deficencies"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Deficencies"] [base64_encode($school_name)] ))
						// $requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Deficencies"] [base64_encode($school_name)] );
				// }
				
				// return $requests;
				// break;
				
			//==========================================Deficencies divided================
			
			case "Anaemia" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Anaemia"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Anaemia"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Anaemia"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
				
			case "Vitamin Deficiency - Bcomplex" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Vitamin Deficiency - Bcomplex"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Vitamin Deficiency - Bcomplex"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Vitamin Deficiency - Bcomplex"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
				
			case "Vitamin A Deficiency" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Vitamin A Deficiency"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Vitamin A Deficiency"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Vitamin A Deficiency"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
				
			case "Vitamin D Deficiency" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Vitamin D Deficiency"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Vitamin D Deficiency"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Vitamin D Deficiency"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			
			case "SAM/stunting" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["SAM/stunting"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["SAM/stunting"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["SAM/stunting"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
				
			case "Goiter" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Goiter"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Goiter"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Goiter"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			
			//==========================================Deficencies divided================
			
			case "Childhood Diseases" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Childhood Diseases"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Childhood Diseases"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Childhood Diseases"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			
			case "Without Glasses" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Without Glasses"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Without Glasses"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Without Glasses"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			
			case "With Glasses" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["With Glasses"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["With Glasses"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["With Glasses"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			
			case "Colour Blindness" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Colour Blindness"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Colour Blindness"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Colour Blindness"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;

			case "Eye Lids" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Eye Lids"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Eye Lids"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Eye Lids"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
				
			case "Conjunctiva" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Conjunctiva"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Conjunctiva"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Conjunctiva"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			case "Cornea" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Cornea"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Cornea"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Cornea"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			case "Pupil" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Pupil"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Pupil"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Pupil"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			case "Wearing Spectacles" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Wearing Spectacles"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Wearing Spectacles"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Wearing Spectacles"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			case "Subjective Refraction" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Subjective Refraction"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Subjective Refraction"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Subjective Refraction"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;						
			
			case "Right Ear" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Right Ear"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Right Ear"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Right Ear"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			
			case "Left Ear" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Left Ear"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Left Ear"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Left Ear"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			
			case "Speech Screening" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Speech Screening"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Speech Screening"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Speech Screening"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			
			case "Oral Hygiene - Fair" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Oral Hygiene - Fair"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Oral Hygiene - Fair"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Oral Hygiene - Fair"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			
			case "Oral Hygiene - Poor" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Oral Hygiene - Poor"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Oral Hygiene - Poor"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Oral Hygiene - Poor"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			
			case "Carious Teeth" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Carious Teeth"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Carious Teeth"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Carious Teeth"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			
			case "Flourosis" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Flourosis"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Flourosis"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Flourosis"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			
			case "Orthodontic Treatment" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Orthodontic Treatment"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Orthodontic Treatment"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Orthodontic Treatment"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			
			case "Indication for extraction" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Indication for extraction"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Indication for extraction"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Indication for extraction"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;

				case "Root Canal Treatment" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Root Canal Treatment"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Root Canal Treatment"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Root Canal Treatment"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;

				case "CROWNS" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["CROWNS"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["CROWNS"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["CROWNS"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;

				case "Fixed Partial Denture" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Fixed Partial Denture"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Fixed Partial Denture"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Fixed Partial Denture"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;

				case "Curettage" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage5_pie_vales'] ["Curettage"] [base64_encode($school_name)] != null && is_array ( $each_pie ['pie_data'] ['stage5_pie_vales'] ["Curettage"] [base64_encode($school_name)] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage5_pie_vales'] ["Curettage"] [base64_encode($school_name)] );
				}
				
				return $requests;
				break;
			
			default :
				;
				break;
		}
	}
	public function get_drilling_screenings_students1($data) {
		$obj_data = json_decode ( $data, true );
		// //log_message("debug","ooooooooooooooooooooooooooooooooooooooooooooooooooooooo".print_r($obj_data,true));
		
		$type = $obj_data ['0'];
		$school_name = strtolower ( $obj_data ['1'] );
		switch ($type) {
			case "Over Weight" :
				
				$query = $this->mongo_db->select ( array (
						"_id",
						"doc_data.widget_data" 
				) )->whereIn ( "doc_data.widget_data.page5.Doctor Check Up.Deficencies", array (
						"Over Weight" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_students_prepare_pie_array ( $query, $school_name );
				
				break;
			
			case "Under Weight" :
				
				$query = $this->mongo_db->select ( array (
						"doc_data.widget_data" 
				) )->whereIn ( "doc_data.widget_data.page5.Doctor Check Up.Deficencies", array (
						"Under Weight" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_students_prepare_pie_array ( $query, $school_name );
				
				break;
			
			case "General" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereNotIn ( "doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities", array (
						"Neurologic",
						"H and N",
						"ENT",
						"Lymphatic",
						"Heart",
						"Lungs",
						"Genitalia",
						"Skin" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_students_prepare_pie_array ( $query, $school_name );
				
				break;
			
			case "Ortho" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereNotIn ( "doc_data.widget_data.page4.Doctor Check Up.Ortho", array (
						"Neck",
						"Shoulders",
						"Arms/Hands",
						"Hips",
						"Knees",
						"Feet" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_students_prepare_pie_array ( $query, $school_name );
				
				break;
			
			case "Postural" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereNotIn ( "doc_data.widget_data.page4.Doctor Check Up.Postural", array (
						"No spinal Abnormality",
						"Spinal Abnormality",
						"Mild",
						"Marked",
						"Moderate" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_students_prepare_pie_array ( $query, $school_name );
				
				break;
			
			case "Defects at Birth" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereNotIn ( "doc_data.widget_data.page5.Doctor Check Up.Defects at Birth", array (
						"Neural Tube Defect",
						"Down Syndrome",
						"Cleft Lip and Palate",
						"Talipes Club foot",
						"Developmental Dysplasia of Hip",
						"Congenital Cataract",
						"Congenital Deafness",
						"Congenital Heart Disease",
						"Retinopathy of Prematurity" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_students_prepare_pie_array ( $query, $school_name );
				
				break;
			
			case "Deficencies" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereNotIn ( "doc_data.widget_data.page5.Doctor Check Up.Deficencies", array (
						"Anaemia",
						"Vitamin Deficiency - Bcomplex",
						"Vitamin A Deficiency",
						"Vitamin D Deficiency",
						"SAM/stunting",
						"Goiter",
						"Under Weight",
						"Over Weight",
						"Obese" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_students_prepare_pie_array ( $query, $school_name );
				
				break;
			
			case "Childhood Diseases" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereNotIn ( "doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases", array (
						"Skin Conditions",
						"Otitis Media",
						"Rheumatic Heart Disease",
						"Asthma",
						"Convulsive Disorders",
						"Hypothyroidism",
						"Diabetes",
						"Epilepsy" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_students_prepare_pie_array ( $query, $school_name );
				
				break;
			
			case "Without Glasses" :
				ini_set ( 'memory_limit', '512M' );
				$search = array (
						"doc_data.widget_data.page6.Without Glasses.Right" => "6/6",
						"doc_data.widget_data.page6.Without Glasses.Left" => "6/6" 
				);
				$query = $this->mongo_db->whereNe ( $search )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_students_prepare_pie_array ( $query, $school_name );
				
				break;
			
			case "With Glasses" :
				ini_set ( 'memory_limit', '512M' );
				$search = array (
						"doc_data.widget_data.page6.With Glasses.Right" => "",
						"doc_data.widget_data.page6.With Glasses.Left" => "",
						"doc_data.widget_data.page6.With Glasses.Right" => "6/6",
						"doc_data.widget_data.page6.With Glasses.Left" => "6/6" 
				);
				$query = $this->mongo_db->whereNe ( $search )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_students_prepare_pie_array ( $query, $school_name );
				
				break;
			
			case "Colour Blindness" :
				ini_set ( 'memory_limit', '512M' );
				$search = array (
						"doc_data.widget_data.page7.Colour Blindness.Right" => "No",
						"doc_data.widget_data.page7.Colour Blindness.Left" => "No" 
				);
				$query = $this->mongo_db->whereNe ( $search )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_students_prepare_pie_array ( $query, $school_name );
				
				break;
			
			case "Right Ear" :
				ini_set ( 'memory_limit', '512M' );
				$search = array (
						"doc_data.widget_data.page8. Auditory Screening.Right" => "Fail" 
				);
				$query = $this->mongo_db->where ( $search )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_students_prepare_pie_array ( $query, $school_name );
				
				break;
			
			case "Left Ear" :
				ini_set ( 'memory_limit', '512M' );
				$search = array (
						"doc_data.widget_data.page8. Auditory Screening.Left" => "Fail" 
				);
				$query = $this->mongo_db->where ( $search )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_students_prepare_pie_array ( $query, $school_name );
				
				break;
			
			case "Speech Screening" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereInAll ( "doc_data.widget_data.page8. Auditory Screening.Speech Screening", array (
						'Delay',
						"Misarticulation",
						"Fluency",
						"Voice" 
				) )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_students_prepare_pie_array ( $query, $school_name );
				
				break;
			
			case "Oral Hygiene" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->whereNe ( "doc_data.widget_data.page9.Dental Check-up.Oral Hygiene", "Good" )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_students_prepare_pie_array ( $query, $school_name );
				
				break;
			
			case "Carious Teeth" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->where ( "doc_data.widget_data.page9.Dental Check-up.Carious Teeth", "Yes" )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_students_prepare_pie_array ( $query, $school_name );
				
				break;
			
			case "Flourosis" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->where ( "doc_data.widget_data.page9.Dental Check-up.Flourosis", "Yes" )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_students_prepare_pie_array ( $query, $school_name );
				
				break;
			
			case "Orthodontic Treatment" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->where ( "doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment", "Yes" )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_students_prepare_pie_array ( $query, $school_name );
				
				break;
			
			case "Indication for extraction" :
				ini_set ( 'memory_limit', '512M' );
				$query = $this->mongo_db->where ( "doc_data.widget_data.page9.Dental Check-up.Indication for extraction", "Yes" )->get ( $this->screening_app_col );
				
				return $this->get_drilling_screenings_students_prepare_pie_array ( $query, $school_name );
				
				break;
			
			default :
				;
				break;
		}
	}
	public function get_drilling_screenings_districts_prepare_pie_array($query) {
		$requests = [ ];
		
		$dist_list = $this->get_all_district ();
		
		$dist_arr = [ ];
		foreach ( $dist_list as $dist ) {
			array_push ( $dist_arr, $dist ['dt_name'] );
		}
		
		foreach ( $dist_arr as $districts ) {
			$request ['label'] = $districts;
			$count = 0;
			if ($query) {
				foreach ( $query as $dist ) {
					if (isset ( $dist ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['District'] )) {
						if (strtolower ( $dist ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['District'] ) == strtolower ( $districts )) {
							$count ++;
						}
					}
				}
			}
			$request ['value'] = $count;
			array_push ( $requests, $request );
		}
		
		return $requests;
	}
	public function get_drilling_screenings_schools_prepare_pie_array($query, $dist) {
		$search_result = [ ];
		$count = 0;
		if ($query) {
			foreach ( $query as $doc ) {
				if (isset ( $doc ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['District'] )) {
					if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['District'] ) == $dist) {
						array_push ( $search_result, $doc );
					}
				}
			}
			$request = [ ];
			foreach ( $search_result as $doc ) {
				if (isset ( $request [$doc ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['School Name']] )) {
					$request [$doc ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['School Name']] ++;
				} else {
					$request [$doc ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['School Name']] = 1;
				}
			}
			
			//log_message ( "debug", "schooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo" . print_r ( $request, true ) );
			$final_values = [ ];
			foreach ( $request as $school => $count ) {
				//log_message ( "debug", "schooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo" . print_r ( $school, true ) );
				//log_message ( "debug", "ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc" . print_r ( $count, true ) );
				$result ['label'] = $school;
				$result ['value'] = $count;
				array_push ( $final_values, $result );
			}
			
			//log_message ( "debug", "fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff" . print_r ( $final_values, true ) );
			
			return $final_values;
		}
	}
	public function get_drilling_screenings_students_prepare_pie_array($query, $school_name) {
		$search_result = [ ];
		$count = 0;
		if ($query) {
			foreach ( $query as $doc ) {
				if (isset ( $doc ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['School Name'] )) {
					if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['School Name'] ) == $school_name) {
						array_push ( $search_result, $doc ['_id']->{'$id'} );
					}
				}
			}
			
			return $search_result;
		}
	}
	public function get_drilling_screenings_students_docs($_id_array) {
		$docs = [ ];
		ini_set ( 'memory_limit', '10G' );
		foreach ( $_id_array as $_id ) {
			$query = $this->mongo_db->select(array("doc_data.widget_data"))->where ( "_id", new MongoID ( $_id ) )->get ($this->request_app_col_static_html );//$this->screening_app_col );
			
			if (isset ( $query [0] ))
				array_push ( $docs, $query [0] );
		}

		return $docs;
	}
	public function drill_down_screening_to_students_load_ehr_doc($_id) {
		if(!preg_match('/_/i', $_id))
		{
			$query = $this->mongo_db->select ( array ('doc_data','history') )->where ( "_id", new MongoID ( $_id ) )->get ( "tswreis_screening_report_col_2020-2021" );

			if(empty($query) && !isset($query))
			{			
				$query = $this->mongo_db->select(array('doc_data','history'))->where ( "_id", new MongoID ( $_id ) )->get( 'other_classes_screening_data_2019-2020' );
				//$query = $this->mongo_db->select(array('doc_data','history'))->where('doc_data.widget_data.page1.Personal Information.Hospital Unique ID',$_id)->get('healthcare2016226112942701_divided_passed_out');
			}
		}else
		{
			$query = $this->mongo_db->select(array('doc_data','history'))->where('doc_data.widget_data.page1.Personal Information.Hospital Unique ID',$_id)->get("tswreis_screening_report_col_2020-2021");
			if(empty($query) && !isset($query))
			{			
				//$query = $this->mongo_db->select(array('doc_data','history'))->where ( "_id", new MongoID ( $_id ) )->get( 'healthcare2016226112942701_divided_passed_out' );
				$query = $this->mongo_db->select(array('doc_data','history'))->where('doc_data.widget_data.page1.Personal Information.Hospital Unique ID',$_id)->get('other_classes_screening_data_2019-2020');
			}
		}	
		
		$unique_id = $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'];	
		$array_merge_recursive = array();	
		
		//whereLike( "doc_data.widget_data.page1.Personal Information.Hospital Unique ID", $_id )
		if ($query) {
			$query_request = $this->mongo_db->select(array("doc_data.widget_data","doc_data.notes_data","doc_data.external_attachments","doc_properties","history"))->orderBy(array("history.0.time"=> -1))->where( "doc_data.widget_data.page1.Student Info.Unique ID", $unique_id )->get ( $this->request_app_col_static_html );
			
			/*if(empty($query_request))
			{
				$query_request = $this->mongo_db->select(array("doc_data.widget_data","doc_data.notes_data","doc_data.external_attachments","doc_properties","history"))->orderBy(array("history.0.time"=> -1))->where( "doc_data.widget_data.page1.Student Info.Unique ID", $unique_id )->get ( $this->request_app_col );
			}*/
			$query_request_old_dash = $this->mongo_db->select(array("doc_data.widget_data","doc_data.notes_data","doc_data.external_attachments","doc_properties","history"))->orderBy(array("history.0.time"=> -1))->where( "doc_data.widget_data.page1.Student Info.Unique ID", $unique_id )->get ( $this->request_app_col );
			
			if(count($query_request) > 0){
				foreach($query_request as $req_ind => $req){
					unset($query_request[$req_ind]['doc_data']["notes_data"]);
					$notes_data = $this->mongo_db->whereLike ("req_doc_id", new MongoId($req['_id']))->get ( $this->collections['panacea_req_notes'] );
					
					
					if(count($notes_data) > 0){
						$query_request[$req_ind]['doc_data']['notes_data'] = $notes_data[0]['notes_data'];
					}
				}
				
			}
			$bmi_value_table_addto_ehr = $this->mongo_db->where("doc_data.widget_data.page1.Student Details.Hospital Unique ID", $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'])->get('healthcare2017617145744625');
            

            $hb_value_table_addto_ehr = $this->mongo_db->where("doc_data.widget_data.page1.Student Details.Hospital Unique ID", $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'])->get($this->hb_app_col);
			
			$query_notes = $this->mongo_db->orderBy(array('datetime' => 1))->where ( "uid", $unique_id )->get ( $this->notes_col );
			//log_message("debug","EHR======notes".print_r($query_notes,true));
			$unique_id = explode("_", $unique_id);
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			//$school_details = $this->mongo_db->where ( "school_name", $query[0]['doc_data']['widget_data']['page2']['Personal Information']['School Name'] )->get ( $this->collections ['panacea_schools'] );
			$query_hs = $this->mongo_db->where ( "school_code", intval($unique_id[1]) )->get ( $this->collections ['panacea_health_supervisors'] );
			$hs_details = "";
			if(!empty($query_hs) && isset($query_hs))
			{
				$hs_details = $query_hs[0];
			}else
			{
				$query_hs = $this->mongo_db->where ( "school_code", $unique_id[1] )->get ( $this->collections ['panacea_health_supervisors'] );
				$hs_details = $query_hs[0];
			}
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			
			$result ['screening'] = $query;
			$result ['request'] = array_merge_recursive($query_request, $query_request_old_dash);
			$result ['notes'] = $query_notes;
			$result ['hs'] = $hs_details;
			$result ['BMI_report'] = $bmi_value_table_addto_ehr;
            $result ['hb_report'] = $hb_value_table_addto_ehr;
			//log_message("debug","result ==========notes".print_r($result ['notes'],true));
			return $result;
		} else {
			$result ['screening'] = false;
			$result ['request'] = false;
			$result ['notes'] = false;
			$result ['hs'] = false;
			$result ['BMI_report'] = false;
            $result ['hb_report'] = false;
			return $result;
		}
	}
	public function drill_down_screening_to_students_doc($_id) {
		$query = $this->mongo_db->select ( array (
				'doc_data.widget_data',
				'doc_data.chart_data',
				'doc_data.external_attachments',
				'history' 
		) )->where ( "_id", new MongoID ( $_id ) )->get ( $this->screening_app_col );
		if ($query) {
			
			return $query;
		} else {
			
			return false;
		}
	}
	
	// *************************************************
	
	/**
	 * Helper: Prepares IP address string for database insertion.
	 *
	 * @return string
	 */
	protected function _prepare_ip($ip_address) {
		return $ip_address;
	}
	public function user_exists($email = FALSE) {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->where ( array (
				'email' => $email 
		) )->get ( $this->collections ['panacea_health_supervisors'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		
		if ($query !== array ()) {
			return TRUE;
		} else {
			return FALSE;
		}
	}
	public function cc_user_exists($email = FALSE) {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->where ( array (
				'email' => $email 
		) )->get ( $this->collections ['panacea_cc'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		
		if ($query !== array ()) {
			return TRUE;
		} else {
			return FALSE;
		}
	}
	public function school_exists($email = FALSE) {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->where ( array (
				'email' => $email 
		) )->get ( $this->collections ['panacea_schools'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		
		if ($query !== array ()) {
			return TRUE;
		} else {
			return FALSE;
		}
	}
	public function doctor_exists($email = FALSE) {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->where ( array (
				'email' => $email 
		) )->get ( $this->collections ['panacea_doctors'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		
		if ($query !== array ()) {
			return TRUE;
		} else {
			return FALSE;
		}
	}
	
	/**
	 * Sets an error message
	 */
	public function set_error($error) {
		$this->errors [] = $error;
		return $error;
	}
	
	/**
	 * Applies delimiters and returns themed errors
	 */
	public function errors() {
		$_output = '';
		foreach ( $this->errors as $error ) {
			$error_lang = $this->lang->line ( $error ) ? $this->lang->line ( $error ) : '##' . $error . '##';
			$_output .= $this->error_start_delimiter . $error_lang . $this->error_end_delimiter;
		}
		
		return $_output;
	}
	
	// ------------------------------------------------------------------------
	
	/**
	 * Return errors as an array, langified or not
	 */
	public function errors_array($langify = TRUE) {
		if ($langify) {
			$_output = array ();
			foreach ( $this->errors as $error ) {
				$errorLang = $this->lang->line ( $error ) ? $this->lang->line ( $error ) : '##' . $error . '##';
				$_output [] = $this->error_start_delimiter . $errorLang . $this->error_end_delimiter;
			}
			return $_output;
		} else {
			return $this->errors;
		}
	}
	
	/**
	 * Generates a random salt value.
	 */
	public function salt() {
		return substr ( md5 ( uniqid ( rand (), true ) ), 0, $this->salt_length );
	}
	
	/**
	 * Hashes the password to be stored in the database.
	 */
	public function hash_password($password, $salt = FALSE, $use_sha1_override = FALSE) {
		if (empty ( $password )) {
			return FALSE;
		}
		
		// Bcrypt
		if ($use_sha1_override === FALSE && $this->hash_method == 'bcrypt') {
			return $this->bcrypt->hash ( $password );
		}
		
		if ($this->store_salt && $salt) {
			return sha1 ( $password . $salt );
		} else {
			$salt = $this->salt ();
			return $salt . substr ( sha1 ( $salt . $password ), 0, - $this->salt_length );
		}
	}
	public function get_schools_by_dist_id($dist_id) {
		if ($dist_id == "All") {
			ini_set ( 'memory_limit', '10G' );
			// $query = $this->mongo_db->select ( array ( 'doc_data.widget_data.page1', 'doc_data.widget_data.page2' ) )->orderBy(array('Hospital Unique ID' => 1))->get ( $this->screening_app_col );
			
			//ini_set ( 'memory_limit', '1G' );
			$count = $this->mongo_db->count ( $this->screening_app_col );
			if ($count < 10000) {
				$per_page = $count;
				$loop = 2; // $count / $per_page;
			} else {
				$per_page = 10000;
				$loop = $count / $per_page;
			}
			
			$result = [ ];
			for($page = 1; $page < $loop; $page ++) {
				$offset = $per_page * ($page);
				$pipeline = [ 
						array (
								'$project' => array (
										"doc_data.widget_data.page1" => true,
										"doc_data.widget_data.page2" => true 
								) 
						),
						array (
								'$limit' => $offset 
						),
						array (
								'$skip' => $offset - $per_page 
						) 
				];
				$response = $this->mongo_db->command ( array (
						'aggregate' => $this->screening_app_col,
						'pipeline' => $pipeline 
				) );
				$result = array_merge ( $result, $response ['result'] );
			}
			return $result;
		} else {
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$query = $this->mongo_db->select ( array (
					'school_name',
					'school_code',
					'school_mob',
					'contact_person_name' 
			) )->orderBy ( array (
					'school_name' => 1 
			) )->where ( 'dt_name', $dist_id )->get ( $this->collections ['panacea_schools'] );
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			return $query;
		}
	}

	public function get_schools_by_district_name($dist_id)
	{
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$query = $this->mongo_db->select ( array (
					'school_name'
					 
			) )->orderBy ( array (
					'school_name' => 1 
			) )->where ( 'district_name', $dist_id )->get ('panacea_schools_bkp_copy');
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			return $query;

	}
	public function get_students_by_school_name($school_name, $dist_name, $academic_year) {
		if ($school_name == "All") {
			// //log_message("debug","111111111111111111111111111111111111111".print_r(strtoupper($dist_name),true));
			ini_set ( 'memory_limit', '10G' );
			// $query = $this->mongo_db->select ( array ( 'doc_data.widget_data.page1', 'doc_data.widget_data.page2' ) )->orderBy(array('Hospital Unique ID' => 1))->where ( "doc_data.widget_data.page2.Personal Information.District", strtoupper($dist_name) )->get ( $this->screening_app_col );
			//ini_set ( 'memory_limit', '1G' );
			$count = $this->mongo_db->count ( $academic_year );
			if ($count < 10000) {
				$per_page = $count;
				$loop = 2; // $count / $per_page;
			} else {
				$per_page = 10000;
				$loop = $count / $per_page;
			}
			
			$merged_array = array (
					"doc_data.widget_data.page2.Personal Information.District" => strtoupper ( $dist_name ) 
			);
			
			$result = [ ];
			for($page = 1; $page < $loop; $page ++) {
				$offset = $per_page * ($page);
				$pipeline = [ 
						array (
								'$project' => array (
										"doc_data.widget_data.page1" => true,
										"doc_data.widget_data.page2" => true 
								) 
						),
						array (
								'$match' => $merged_array 
						),
						array (
								'$limit' => $offset 
						),
						array (
								'$skip' => $offset - $per_page 
						) 
				];
				$response = $this->mongo_db->command ( array (
						'aggregate' => $academic_year,
						'pipeline' => $pipeline 
				) );
				
				$result = array_merge ( $result, $response ['result'] );
			}
			
			return $result;
		} else {
			ini_set ( 'max_execution_time', 0 );
			//log_message ( "debug", "22222222222222222222222222222222222222" . print_r ( $school_name, true ) );
			$query = $this->mongo_db->select ( array (
					'doc_data.widget_data.page1',
					'doc_data.widget_data.page2',
					'doc_properties' 
			) )->orderBy ( array (
					'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1 
			) )->where ( 'doc_data.widget_data.page2.Personal Information.School Name', $school_name )->get ( $academic_year );
			return $query;
		}
	}
public function get_students_by_school_name_cc_user($school_name, $dist_name) {
		if ($school_name == "All") {
			// //log_message("debug","111111111111111111111111111111111111111".print_r(strtoupper($dist_name),true));
			ini_set ( 'memory_limit', '10G' );
			// $query = $this->mongo_db->select ( array ( 'doc_data.widget_data.page1', 'doc_data.widget_data.page2' ) )->orderBy(array('Hospital Unique ID' => 1))->where ( "doc_data.widget_data.page2.Personal Information.District", strtoupper($dist_name) )->get ( $this->screening_app_col );
			//ini_set ( 'memory_limit', '1G' );
			$count = $this->mongo_db->count ( $this->screening_app_col_sw_2020_2021 );
			if ($count < 10000) {
				$per_page = $count;
				$loop = 2; // $count / $per_page;
			} else {
				$per_page = 10000;
				$loop = $count / $per_page;
			}
			
			$merged_array = array (
					"doc_data.widget_data.page2.Personal Information.District" => strtoupper ( $dist_name ) 
			);
			
			$result = [ ];
			for($page = 1; $page < $loop; $page ++) {
				$offset = $per_page * ($page);
				$pipeline = [ 
						array (
								'$project' => array (
										"doc_data.widget_data.page1" => true,
										"doc_data.widget_data.page2" => true 
								) 
						),
						array (
								'$match' => $merged_array 
						),
						array (
								'$limit' => $offset 
						),
						array (
								'$skip' => $offset - $per_page 
						) 
				];
				$response = $this->mongo_db->command ( array (
						'aggregate' => $this->screening_app_col_sw_2020_2021,
						'pipeline' => $pipeline 
				) );
				
				$result = array_merge ( $result, $response ['result'] );
			}
			
			return $result;
		} else {
			ini_set ( 'max_execution_time', 0 );
			//log_message ( "debug", "22222222222222222222222222222222222222" . print_r ( $school_name, true ) );
			$query = $this->mongo_db->select ( array (
					'doc_data.widget_data.page1',
					'doc_data.widget_data.page2' 
			) )->orderBy ( array (
					'doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1 
			) )->where ( 'doc_data.widget_data.page2.Personal Information.School Name', $school_name )->get ( $this->screening_app_col_sw_2020_2021 );
			return $query;
		}
	}
	
	public function get_reported_schools_count_by_dist_name($dist_id, $date) {
		$query = $this->mongo_db->select ( array (
				"doc_data.widget_data" 
		) )->whereLike ( 'history.last_stage.time', $date )->get ( $this->absent_app_col );
		
		$count = 0;
		$r2h = 0;
		$sick = 0;
		foreach ( $query as $report ) {
			if (strtolower ( $report ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['District'] ) === strtolower ( $dist_id )) {
				$count ++;
				$sick = $sick + intval ( $report ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Sick'] );
				$sick = $sick + intval ( $report ['doc_data'] ['widget_data'] ['page2'] ['Attendence Details'] ['RestRoom'] );
				
				$r2h = $r2h + intval ( $report ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['R2H'] );
			}
		}
		$data ['count'] = $count;
		$data ['sick'] = $sick;
		$data ['r2h'] = $r2h;
		
		return $data;
	}
	
	public function get_reported_schools_bmi_count_by_dist_name($date,$dt_name,$school_name){
		
		if($dt_name == "All" && $school_name == "All")
		{
			$query = $this->mongo_db->select ( array (
					"doc_data.widget_data","doc_data.widget_data.school_details") )
					->whereLike("doc_data.widget_data.page1.Student Details.BMI_values.month" , $date)->get ( $this->bmi_app_col );
		
		}
		else
		{
			$query = $this->mongo_db->select ( array (
					"doc_data.widget_data","doc_data.widget_data.school_details") )
					->whereLike("doc_data.widget_data.page1.Student Details.BMI_values.month" , $date)->where(array("doc_data.widget_data.school_details.District" => strtoupper($dt_name), "doc_data.widget_data.school_details.School Name" => $school_name))->get ( $this->bmi_app_col );
		
		}
		/* foreach($query as $doc_data)
		{
			$bmi_values = $doc_data['doc_data']['widget_data']['page1']['Student Details']['BMI_values'];
		$count_bmi = count($bmi_values);
		//log_message("debug","count_bmiiiiii".print_r($count_bmi,true));
		//$i = 0;
		$month[] = $date;
		for($i = 0; $i <= $count_bmi;$i++)
		{
			if(in_array('doc_data.widget_data.page1.Student Details.BMI_values.month',$month))
			{
				//log_message("debug","naresh=============15403===".print_r($naresh,true));
			}
			
		}
		}
		exit() */;
		//$test = ['doc_data']['widget_data']['']
			/* $month = array ('doc_data.widget_data.page1.Student Details.BMI_values.month == ' => array (
						'$eq' => $date 
				) );
			
			
			$result = [ ];
				
				$pipeline = [ 
						array (
								'$project' => array (
										"doc_data.widget_data" => true,
										"history" => true 
								) 
						),
						array (
								'$match' => $month
								
						)
				];
				
				$response = $this->mongo_db->command ( array (
						'aggregate' => $this->bmi_app_col,
						'pipeline' => $pipeline 
				) );
				//log_message("debug","query_nareshhhhhhhhhhhhhhhhhhhhhhhhhhhh".print_r($response,true));
				$query = array();
				if($response['ok']){
					$query = $response["result"];
				}
				
				return $query; */
		/* $school_name = array();
		foreach($query as $unique)
		{
			//$query_naresh = array();
			$query_naresh_push = array();
			$stu_unique = $unique['doc_data']['widget_data']['page1']['Student Details']['Hospital Unique ID'];
			
			$after_explode = explode("_",$stu_unique);
			$school_code = $after_explode[1];
			$school_code = intval($school_code);
			
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$school_details = $this->mongo_db->select ( array('school_name') )->where ( 'school_code', $school_code )->get ( $this->collections ['panacea_schools'] );
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			$school_name = $school_details[0]['school_name'];
			
			//$query_naresh = $school_name;
			array_push($query_naresh_push,$school_name);
			//log_message("debug","queryyyyyyyyyyyyyyyyyyyyyyyy".print_r($query_naresh_push,true));
		}
		
		  array_merge_recursive($query,$query_naresh_push);
		//log_message("debug","query_nareshhhhhhhhhhhhhhhhhhhhhhhhhhhh".print_r($query,true));
		
		exit(); */
		//echo print_r($query,true);
		//exit();
				
		return $query;
	}
	
	public function get_health_supervisors_school_id($id) {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->where ( 'school_code', $id )->select ( array (
				'hs_name',
				'hs_mob' 
		) )->get ( $this->collections ['panacea_health_supervisors'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		if ($query) {
			return $query [0];
		} else {
			return false;
		}
	}
	// MODIFIED BY SELVA FOR TESTING
	public function get_absent_school_details($school,$date) {
		$query = $this->mongo_db->select ( array (
				"doc_data.widget_data" 
		) )->whereLike("history.last_stage.time",$date)->whereLike ( "doc_data.widget_data.page1.Attendence Details.Select School", $school )->get ( $this->absent_app_col );
		if ($query) {
			return $query [0];
		} else {
			return false;
		}
	}
	// VIKAS 
	/*public function get_absent_school_details($school) {
		$query = $this->mongo_db->select ( array (
				"doc_data.widget_data" 
		) )->whereLike ( "doc_data.widget_data.page1.Attendence Details.Select School", $school )->get ( $this->absent_app_col );
		if ($query) {
			return $query [0];
		} else {
			return false;
		}
	}*/
	public function get_student_count_school_name($school) {
		$count = $this->mongo_db->where ( 'doc_data.widget_data.page2.Personal Information.School Name', $school )->count ( $this->screening_app_col );
		return $count;
	}
	public function get_request_by_school_name($school_name, $date) {
		$query = $this->mongo_db->select ( array (
				"doc_data.widget_data" 
		) )->whereLike ( 'history.0.time', $date )->get ( $this->request_app_col );
		
		$request = array ();
		foreach ( $query as $identifiers ) {
			$unique_id = $identifiers ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
			$doc = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
			if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
				$doc_school = $doc [0] ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['School Name'];
				if (strtolower ( $doc_school ) == strtolower ( $school_name )) {
					$req ['request'] = $identifiers;
					$req ['stud_details'] ['name'] = $doc [0] ['doc_data'] ['widget_data'] ['page1'] ['Personal Information'] ['Name'];
					$req ['stud_details'] ['class'] = $doc [0] ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['Class'];
					$req ['stud_details'] ['section'] = $doc [0] ['doc_data'] ['widget_data'] ['page2'] ['Personal Information'] ['Section'];
					array_push ( $request, $req );
				}
			}
		}
		return $request;
	}
	public function get_reports_by_dist_name($dist_name) {
		$query = $this->mongo_db->select ( array (
				'school_name',
				'school_code',
				'school_mob',
				'contact_person_name' 
		) )->orderBy ( array (
				'school_name' => 1 
		) )->where ( 'dt_name', $dist_id )->get ( $this->request_app_col );
		return $query;
	}
	public function get_school_data_school_name($school_name) {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->select ( array (
				'school_name',
				'school_code',
				'school_mob',
				'contact_person_name' 
		) )->orderBy ( array (
				'school_name' => 1 
		) )->where ( 'school_name', $school_name )->get ( $this->collections ['panacea_schools'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		return $query;
	}
	public function get_screening_pie_stage5($dates) {
		ini_set ( 'memory_limit', '10G' );
		$pie_stage5 = $this->mongo_db->select ( array (
				'pie_data.stage5_pie_vales' 
		) )->whereBetween ( 'pie_data.date', $dates ['end_date'], $dates ['today_date'] )->get ( $this->screening_app_col_screening );
		return $pie_stage5;
	}
	public function get_screening_pie_stage4($dates) {
		$pie_stage4 = $this->mongo_db->select ( array (
				'pie_data.stage4_pie_vales'
		) )->whereBetween ( 'pie_data.date', $dates ['end_date'], $dates ['today_date'] )->get ( $this->screening_app_col_screening );
		return $pie_stage4;
	}
	public function screening_pie_data_for_stage4_new($requests) {
		$school_list = $this->get_all_schools ();
		$school_in_dist = [ ];
		
		foreach ( $school_list as $school ) {
			$school_in_dist [base64_encode(strtolower ( $school ['school_name'] ))] = strtolower ( $school ['dt_name'] );
		}
		$request_stage4 = [ ];
		//log_message("debug","in 3333333333333333333333333333333333333333333333333=======".print_r($school_in_dist,true));
		foreach ( $requests as $screening_index => $screening_array ) {
			$request_stage4 [$screening_index] = [ ];
			//log_message("debug","in 11111111111111111111111111111111111111111111111111111111=======".print_r($request_stage4,true));
			foreach ( $screening_array as $school_name => $inner_data ) {
				//log_message("debug","in 222222222222222222222222222222222222222222222222222222=======".print_r($request_stage4,true));
				if (! isset ( $request_stage4 [$screening_index] [$school_in_dist [$school_name]] )) {
					$request_stage4 [$screening_index] [$school_in_dist [$school_name]] = null;
				}
				
				$school_data = [ ];
				if (count ( $inner_data ) > 0) {
					if (! isset ( $request_stage4 [$screening_index] [$school_in_dist [$school_name]] )) {
						$request_stage4 [$screening_index] [$school_in_dist [$school_name]] = [ ];
					}
					$school_data ['label'] = strtoupper ( base64_decode($school_name) );
					$school_data ['value'] = count ( $inner_data );
					array_push ( $request_stage4 [$screening_index] [$school_in_dist [$school_name]], $school_data );
					// //log_message("debug","in ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc=======".print_r($request_stage4,true));
				}
			}
		}
		return $request_stage4;
	}
	public function screening_pie_data_for_stage3_new($requests) {
		$request_stage3 = [ ];
		foreach ( $requests as $request => $request_data ) {
			$request_stage3 [$request] = [ ];
			foreach ( $request_data as $dist_name => $dist_array ) {
				$dist_data ['label'] = strtoupper ( $dist_name );
				if (is_array ( $dist_array )) {
					$value_count = 0;
					foreach ( $dist_array as $school_array ) {
						$value_count = $value_count + $school_array ['value'];
					}
					$dist_data ['value'] = $value_count;
				} else {
					$dist_data ['value'] = count ( $dist_array );
				}
				
				array_push ( $request_stage3 [$request], $dist_data );
			}
		}
		return $request_stage3;
	}
	public function screening_pie_data_for_stage2_new($requests) {
		$request_stage2 = [ ];
		
		$stage_array = [ ];
		$stage_array ["Physical Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Over Weight"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Physical Abnormalities"] ["label"] = "Over Weight";
		$stage_array ["Physical Abnormalities"] ['value'] = $total_count;
		
		array_push ( $request_stage2, $stage_array );
		
		// =====
		$stage_array = [ ];
		$stage_array ["Physical Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Under Weight"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Physical Abnormalities"] ["label"] = "Under Weight";
		$stage_array ["Physical Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// =====
		$stage_array = [ ];
		$stage_array ["Physical Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Obese"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Physical Abnormalities"] ["label"] = "Obese";
		$stage_array ["Physical Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// =====
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["General"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "General";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Skin"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Skin";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// ===
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Others(Description/Advice)"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Others(Description/Advice)";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// =====
		// =====
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Ortho"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Ortho";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Postural"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Postural";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Defects at Birth"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Defects at Birth";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		// $stage_array = [ ];
		// $stage_array ["General Abnormalities"] = [ ];
		
		// $request = [ ];
		// foreach ( $requests ["Deficencies"] as $doc ) {
			// if (isset ( $request [$doc ['label']] )) {
				// $request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			// } else {
				// $request [$doc ['label']] = $doc ['value'];
			// }
		// }
		// $total_count = 0;
		// foreach ( $request as $dist => $count ) {
			// $total_count = $total_count + $count;
		// }
		// $stage_array ["General Abnormalities"] ["label"] = "Deficencies";
		// $stage_array ["General Abnormalities"] ['value'] = $total_count;
		// array_push ( $request_stage2, $stage_array );
		
		//===
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Anaemia"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Anaemia";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Vitamin Deficiency - Bcomplex"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Vitamin Deficiency - Bcomplex";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Vitamin A Deficiency"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Vitamin A Deficiency";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Vitamin D Deficiency"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Vitamin D Deficiency";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["SAM/stunting"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "SAM/stunting";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Goiter"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Goiter";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["General Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Childhood Diseases"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["General Abnormalities"] ["label"] = "Childhood Diseases";
		$stage_array ["General Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Without Glasses"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Eye Abnormalities"] ["label"] = "Without Glasses";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["With Glasses"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Eye Abnormalities"] ["label"] = "With Glasses";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Colour Blindness"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Eye Abnormalities"] ["label"] = "Colour Blindness";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$request = [ ];
		
		foreach ( $requests ["Eye Lids"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Eye Abnormalities"] ["label"] = "Eye Lids";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Conjunctiva"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Eye Abnormalities"] ["label"] = "Conjunctiva";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Cornea"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Eye Abnormalities"] ["label"] = "Cornea";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Pupil"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Eye Abnormalities"] ["label"] = "Pupil";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Wearing Spectacles"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Eye Abnormalities"] ["label"] = "Wearing Spectacles";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Eye Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Subjective Refraction"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Eye Abnormalities"] ["label"] = "Subjective Refraction";
		$stage_array ["Eye Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Auditory Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Right Ear"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Auditory Abnormalities"] ["label"] = "Right Ear";
		$stage_array ["Auditory Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Auditory Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Left Ear"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Auditory Abnormalities"] ["label"] = "Left Ear";
		$stage_array ["Auditory Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Auditory Abnormalities"] = [ ];
		
		$stage2_data = [ ];
		$stage2_data ["label"] = "Speech Screening";
		
		$request = [ ];
		foreach ( $requests ["Speech Screening"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Auditory Abnormalities"] ["label"] = "Speech Screening";
		$stage_array ["Auditory Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Oral Hygiene - Fair"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Dental Abnormalities"] ["label"] = "Oral Hygiene - Fair";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Oral Hygiene - Poor"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Dental Abnormalities"] ["label"] = "Oral Hygiene - Poor";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Carious Teeth"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Dental Abnormalities"] ["label"] = "Carious Teeth";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$stage2_data = [ ];
		$stage2_data ["label"] = "Flourosis";
		
		$request = [ ];
		foreach ( $requests ["Flourosis"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Dental Abnormalities"] ["label"] = "Flourosis";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Orthodontic Treatment"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Dental Abnormalities"] ["label"] = "Orthodontic Treatment";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Indication for extraction"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Dental Abnormalities"] ["label"] = "Indication for extraction";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Root Canal Treatment"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Dental Abnormalities"] ["label"] = "Root Canal Treatment";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["CROWNS"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Dental Abnormalities"] ["label"] = "CROWNS";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Fixed Partial Denture"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Dental Abnormalities"] ["label"] = "Fixed Partial Denture";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		// =====
		$stage_array = [ ];
		$stage_array ["Dental Abnormalities"] = [ ];
		
		$request = [ ];
		foreach ( $requests ["Curettage"] as $doc ) {
			if (isset ( $request [$doc ['label']] )) {
				$request [$doc ['label']] = $request [$doc ['label']] + $doc ['value'];
			} else {
				$request [$doc ['label']] = $doc ['value'];
			}
		}
		$total_count = 0;
		foreach ( $request as $dist => $count ) {
			$total_count = $total_count + $count;
		}
		$stage_array ["Dental Abnormalities"] ["label"] = "Curettage";
		$stage_array ["Dental Abnormalities"] ['value'] = $total_count;
		array_push ( $request_stage2, $stage_array );
		// ===
		
		return $request_stage2;
	}
	public function screening_pie_data_for_stage1_new($requests) {
		$request_stage1 = [ ];
		
		$stage_data = [ ];
		$stage_data ['label'] = "Physical Abnormalities";
		$stage_data ['value'] = $requests [0] ["Physical Abnormalities"] ['value'] + $requests [1] ["Physical Abnormalities"] ['value'] + $requests [2] ["Physical Abnormalities"] ['value'];
		array_push ( $request_stage1, $stage_data );
		
		$stage_data = [ ];
		$stage_data ['label'] = "General Abnormalities";
		$stage_data ['value'] = $requests [3] ["General Abnormalities"] ['value'] + $requests [4] ["General Abnormalities"] ['value'] + $requests [5] ["General Abnormalities"] ['value'] + $requests [6] ["General Abnormalities"] ['value'] + $requests [7] ["General Abnormalities"] ['value'] + $requests [8] ["General Abnormalities"] ['value'] + $requests [9] ["General Abnormalities"] ['value'] + $requests [10] ["General Abnormalities"] ['value'] + $requests [11] ["General Abnormalities"] ['value'] + $requests [12] ["General Abnormalities"] ['value'] + $requests [13] ["General Abnormalities"] ['value'] + $requests [14] ["General Abnormalities"] ['value'] + $requests [15] ["General Abnormalities"] ['value'];
		array_push ( $request_stage1, $stage_data );
		
		$stage_data = [ ];
		$stage_data ['label'] = "Eye Abnormalities";
		$stage_data ['value'] = $requests [16] ["Eye Abnormalities"] ['value'] + $requests [17] ["Eye Abnormalities"] ['value'] + $requests [18] ["Eye Abnormalities"] ['value'] + $requests [19] ["Eye Abnormalities"] ['value'] + $requests [20] ["Eye Abnormalities"] ['value'] + $requests [21] ["Eye Abnormalities"] ['value'] + $requests [22] ["Eye Abnormalities"] ['value'] + $requests [23] ["Eye Abnormalities"] ['value'] + $requests [24] ["Eye Abnormalities"] ['value'];
		array_push ( $request_stage1, $stage_data );
		
		$stage_data = [ ];
		$stage_data ['label'] = "Auditory Abnormalities";
		$stage_data ['value'] = $requests [25] ["Auditory Abnormalities"] ['value'] + $requests [26] ["Auditory Abnormalities"] ['value'] + $requests [27] ["Auditory Abnormalities"] ['value'];
		array_push ( $request_stage1, $stage_data );
		
		$stage_data = [ ];
		$stage_data ['label'] = "Dental Abnormalities";
		$stage_data ['value'] = $requests [28] ["Dental Abnormalities"] ['value'] + $requests [29] ["Dental Abnormalities"] ['value'] + $requests [30] ["Dental Abnormalities"] ['value'] + $requests [31] ["Dental Abnormalities"] ['value'] + $requests [32] ["Dental Abnormalities"] ['value'] + $requests [33] ["Dental Abnormalities"] ['value'] + $requests [34] ["Dental Abnormalities"] ['value'] + $requests [35] ["Dental Abnormalities"] ['value'] + $requests [36] ["Dental Abnormalities"] ['value'] + $requests [37] ["Dental Abnormalities"] ['value'];
		array_push ( $request_stage1, $stage_data );
		
		return $request_stage1;
	}
	
	public function initiate_request($doc_id, $user_coll_data, $app_coll_data) {
		$user_collection = $doc_id . "_docs";
		$this->mongo_db->insert ( $user_collection, $user_coll_data );
		$this->mongo_db->insert ( $this->request_app_col, $app_coll_data );
		$this->mongo_db->insert ( $this->request_app_col . "_shadow", $app_coll_data );
		$this->mongo_db->insertStut ( 'status', $this->request_app_col, $app_coll_data ["doc_properties"] ['doc_id'], $app_coll_data ["app_properties"] ['app_name'] );
	}
	
	public function messaging($message)
	{
		$data = $this->session->userdata("customer");
		
		$data = array(
			"message" => $message,
			"unique_id" => $uid,
		);
	
		$response = $this->data = $this->panacea_common_model->messaging($message);
		//$this->data = "";
	
		$this->output->set_output($response);
	}
	public function groupscount() {
		$count = $this->mongo_db->count ( 'panacea_chat_groups' );
		return $count;
	}
	public function get_groups($per_page, $page) {
		$offset = $per_page * ($page - 1);
		$query = $this->mongo_db->limit ( $per_page )->offset ( $offset )->get ( 'panacea_chat_groups' );
		return $query;
	}
	
	public function get_all_groups() {
		$query = $this->mongo_db->get ( 'panacea_chat_groups' );
		return $query;
	}
	
	// ------------------------------------------------------------------------

	/**
	 * Helper: Get accessible chat rooms ( for the loggedin user )
	 * 
	 * @param  array  $user_email  Loggedin user email
	 *
	 * @return array
	 * 
	 * @author Selva 
	 */
	 
	public function get_accessible_groups($user_email) {
		$accessible_chat_rooms = array();
		$query = $this->mongo_db->get ( 'panacea_chat_groups' );
		
		foreach($query as $data)
		{
			$group_name = $data['group_name'];
			$where_array = array('group_name'=>$group_name,'list_of_users'=>array('$in'=>array($user_email)));
			
			$grps = $this->mongo_db->where($where_array)->get ( 'panacea_chat_groups_users' );
			
			if(isset($grps) && !empty($grps))
			{
				array_push($accessible_chat_rooms,$query);
			}
			
		}
		return $accessible_chat_rooms;
	}
	
	public function get_all_admin_users() {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->get ( $this->collections ['panacea_admins'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		return $query;
	}
	public function get_all_health_supervisors() {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$this->mongo_db->orderBy(array('email' => 1));
		$query = $this->mongo_db->get ( $this->collections ['panacea_health_supervisors'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		return $query;
	}
	public function get_all_cc_users() {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$this->mongo_db->orderBy(array('email' => 1));
		$query = $this->mongo_db->get ( $this->collections ['panacea_cc'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		return $query;
	}
	public function get_all_superiors() {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$this->mongo_db->orderBy(array('email' => 1));
		$query = $this->mongo_db->get ( $this->collections ['superiors'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		return $query;
	}
	public function get_all_rhso_group() {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$this->mongo_db->orderBy(array('email' => 1));
		$query = $this->mongo_db->get ('rhso_users' );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		return $query;
	}
	public function get_all_cro_group() {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$this->mongo_db->orderBy(array('email' => 1));
		$query = $this->mongo_db->get ('cro_collection' );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		return $query;
	}
	public function get_all_rco_group() {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$this->mongo_db->orderBy(array('email' => 1));
		$query = $this->mongo_db->get ('rco_collection' );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		return $query;
	}
	public function get_all_principal() {
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$this->mongo_db->orderBy(array('email' => 1));
		$query = $this->mongo_db->get ('panacea_schools' );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		return $query;
	}

    // ------------------------------------------------------------------------

	/**
	 * Helper: Add message
	 * 
	 * @param  array  $post          $_POST data
	 * @param  array  $chat_room_id  chat Room ID
	 *
	 * @return array
	 * 
	 * @author Selva 
	 */
	 
	public function add_message($data)
	{
		/*$data = array(
				"message_id"   => get_unique_id(),
				"user_id"      => $post['user_id'],
				"user_name"    => $post['username'],
				"chat_room_id" => $chat_room_id,
				"message" 	   => $post['message'],
				"created_at"   => date("Y-m-d H:i:s")
		);*/
		$query = $this->mongo_db->insert($this->collections['panacea_messages'],$data);
		
		
		if($query){
			$response['error'] = false;			
			$response['message'] = $data;
		}else{
			$response['error'] = true;
			$response['message'] = 'Failed send message ' . $stmt->error;
		}
		
		return $response;
	}
	public function get_messages($msg_id,$limit_count)
	{
		ini_set ( 'memory_limit', '10G' );
		//log_message('error','limit==result===============16849'.print_r($limit,TRUE));
		$limit = intval($limit_count);
		$count = $this->mongo_db->where('chat_room_id',$msg_id)->count ( $this->collections['panacea_messages'] );

		//log_message('error');
		//array('chat_room_id' => array('$in' $msg_id);
		$and_merged_array = array();
		$chat_room_id = array (
				"chat_room_id" => array (
						'$eq' => $msg_id
				) 
		);
		$chat_room_id_exists = array (
				"chat_room_id" => array (
						'$exists' => TRUE 
				) 
		);
		array_push($and_merged_array, $chat_room_id);
		array_push($and_merged_array, $chat_room_id_exists);

		
		
		if(!empty($msg_id) && $limit >= $count )
		{
			$result = [ ];
			$pipeline = [ 
						array (
								'$project' => array ( 
										"message_id" => true,
									    "user_id" => true,
									    "chat_room_id" => true,
									    "user_name" => true,
									    "message" => true,
									    "created_at"=> true,
									    "external_attachments" => true
								) 
						),
						array(
							'$match' => array(
								'$and' => $and_merged_array
							)
						),
						array(
							'$sort' => array('created_at' => 1)
						)
				];
				$response = $this->mongo_db->command ( array (
						'aggregate' => $this->collections['panacea_messages'],
						'pipeline' => $pipeline 
				) );				
				$result = array_merge ( $result, $response ['result'] );				
			return $result;

		}
		else{
		$skip = $count - $limit;
		$result = [ ];
			$pipeline = [ 
						array (
								'$project' => array ( 
										"message_id" => true,
									    "user_id" => true,
									    "chat_room_id" => true,
									    "user_name" => true,
									    "message" => true,
									    "created_at"=> true,
									    "external_attachments" => true
								) 
						),
						array(
							'$match' => array(
								'$and' => $and_merged_array
							)
						),
						array (
								'$skip' => $skip
						),
						array (
								'$limit' => $limit 
						),
						array(
							'$sort' => array('created_at' => 1)
						)
				];
				$response = $this->mongo_db->command ( array (
						'aggregate' => $this->collections['panacea_messages'],
						'pipeline' => $pipeline 
				) );				
				$result = array_merge ( $result, $response ['result'] );				
		return $result;
		}
		
		
		
	}

	public function get_user_by_email($name, $email){
				
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		//log_message('debug','eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee=========.'.print_r($email,true));
		$user = $this->mongo_db->where("email",$email)->get($this->collections['panacea_admins']);
		//log_message('debug','uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu=========.'.print_r($user,true));
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		
		if($user){
			$temp["user_id"] = $user[0]['email'];
			$temp["name"] = $user[0]['username'];
			$temp["email"] = $user[0]['email'];
			$temp["created_at"] = $user[0]['registered_on'];
			
			// User with same email already existed in the db
			$response["error"] = false;
			$response["user"] = $temp;			
		}else{
			// Failed to create user
			$response["error"] = true;
			$response["message"] = "User not found.";
		}
		return $response;		
	}
	public function updateGcmID($login, $gcm_registration_id){
		$id_exists = $this->mongo_db->where("user_id",$login)->get($this->collections['panacea_users_gcm']);
		$data = array(
			"user_id" => $login,
			"gcm_registration_id" => $gcm_registration_id
		);
		if($id_exists){
			$query = $this->mongo_db->where("user_id",$login)->set($data)->get($this->collections['panacea_users_gcm']);
		}else{
			$query = $this->mongo_db->insert($this->collections['panacea_users_gcm'],$data);
		}
		return $query;
	}
	
	public function get_sanitation_report_app()
	{
	  $query = $this->mongo_db->select(array('app_template'))->where('_id',$this->sanitation_app_col)->get($this->collections['records']);
	  return $query[0]['app_template'];
	
	}
	
	public function get_sanitation_report_data_with_date($date,$school_name)
	{
	    if ($date) {
			$selected_date = $date;
		} else {
			$selected_date = $this->today_date;
		}
		
		$this->mongo_db->whereLike('doc_data.widget_data.page4.Declaration Information.Date:',$selected_date)->where(array('doc_data.widget_data.page4.Declaration Information.Date:'=>$selected_date,'doc_data.widget_data.page4.School Information.School Name'=>$school_name));
		$query = $this->mongo_db->get($this->sanitation_app_col_v2);
		if($query)
			return $query;
		else
			return FALSE;
	}
	
	// ------------------------------------------------------------------------------------------------------------

	/**
	 * Helper: Get data to draw sanitation report pie based on the selected criteria ( Model )
	 *
	 * @param  string  $date              Selected date 
	 * @param  string  $search_criteria   Criteria question for sanitation report
	 * @param  string  $opt   			  Criteria option for sanitation report
	 *
	 * @return array
	 *  
	 * @author Selva 
	 */
	 
	public function get_sanitation_report_pie_data($date, $search_criteria, $opt) {
		
	 $output 			     = array();
	 $sanitation_report      = array();
	 $sanitation_report['district_list']   = array();
	 $sanitation_report['schools_list']    = array();
	 $sanitation_report['attachment_list'] = array();
	 
	 //log_message("debug","order_by sanitation==============16285".print_r($order_by,true));
	 $query = $this->mongo_db->select(array('doc_data.widget_data','doc_data.external_attachments'),array())
	 ->orderBy(array('history.last_stage.time' => -1))->where(array('doc_data.widget_data.page4.Declaration Information.Date:'=>$date,$search_criteria=>$opt))->get('healthcare2016111212310531_version_2');
	 
	 $dist_list = $this->get_all_district ();
		
	 $dist_arr = [ ];
	 foreach ( $dist_list as $dist ) {
		array_push ( $dist_arr, $dist ['dt_name'] );
	 }
	
	foreach ( $dist_arr as $district_name ) {
	    $schools = array();
		$sanitation_attachments = array();
	    $sanitation_report['schools_list'][$district_name]  = array();
		$sanitation_report['attachment_list'][$district_name]  = array();
		$request ['label'] = $district_name;
		$count = 0;
		if ($query) {
			foreach ( $query as $dist ) {
				if (isset ( $dist ['doc_data'] ['widget_data'] ['page4'] ['School Information'] ['District'] )) {
					if (strtolower ( $dist ['doc_data'] ['widget_data'] ['page4'] ['School Information'] ['District'] ) == strtolower ( $district_name )) {
					    if(!in_array($dist ['doc_data'] ['widget_data'] ['page4'] ['School Information'] ['School Name'],$schools))
						{
							$count ++;
							array_push($schools,$dist ['doc_data'] ['widget_data'] ['page4'] ['School Information'] ['School Name']);
							if(isset($dist ['doc_data']['external_attachments']) && !empty($dist ['doc_data']['external_attachments']))
							{
						       $path = array();
							   
						       foreach($dist ['doc_data']['external_attachments'] as $key=>$attachments)
							   {
							     array_push($path,$attachments['file_path']);
								 //log_message("debug","path attachment_list===========16316".print_r($path,true));
							   }
							   
							   $sanitation_attachments[$dist ['doc_data'] ['widget_data'] ['page4'] ['School Information'] ['School Name']] = $path;
							}
						}
					}
				}
			}
		}
		$request ['value'] = $count;
		array_push ( $output, $request );
		$sanitation_report['schools_list'][$district_name]    = $schools;
		$sanitation_report['attachment_list'][$district_name] = $sanitation_attachments;
	}
	
	$sanitation_report['district_list'] = $output;
		
	 if($sanitation_report)
	     return $sanitation_report;
	 else
		 return false;
		
	}
	
	public function get_sanitation_report_pie_schools_data($date = FALSE)
	{
		// Variables
		$all_schools               = array();
		$all_schools_district      = array();
		$all_schools_name      	   = array();
		$submitted_schools 	       = array();
		$submitted_school_district = array();
		$submitted_school_name     = array();
		$not_submitted_schools	   = array();
		$schools_data              = array();
		$not_submitted_dist        = array();
		
		// $schools_list = $this->get_all_schools();
		
		// foreach($schools_list as $school_data)
		// {
			// array_push($all_schools_district,$school_data['dt_name']);
			// array_push($all_schools_name,$school_data['school_name']);
		// }
		
		// $all_schools['district'] = $all_schools_district; 
		// $all_schools['school']   = $all_schools_name; 
		
		// if ($date) {
			// $today_date = $date;
		// } else {
			// $today_date = $this->today_date;
		// }
		
		// $query = $this->mongo_db->select ( array (
				// "doc_data.widget_data" 
		// ) )->whereLike ( 'doc_data.widget_data.page4.Declaration Information.Date:',$today_date )->get ( $this->sanitation_app_col );
		
		// foreach ( $query as $doc ) {
			    // if(!in_array($doc ['doc_data'] ['widget_data'] ['page4'] ['School Information'] ['School Name'],$submitted_school_name))
				// {
					// array_push ( $submitted_school_district,$doc ['doc_data'] ['widget_data'] ['page4'] ['School Information'] ['District'] );
					// array_push ( $submitted_school_name,$doc ['doc_data'] ['widget_data'] ['page4'] ['School Information'] ['School Name'] );
		        // }
		// }
		
		// $submitted_schools['district']     = $submitted_school_district;
		// $submitted_schools['school']       = $submitted_school_name;
		// $not_submitted_schools['district'] = array();
		// $not_submitted_schools['school']   = array_values(array_diff($all_schools['school'],$submitted_schools['school']));
		// foreach($not_submitted_schools['school'] as $index => $school_name)
		// {
		   // $dist_array    = explode(",",$school_name);
		   // $dist_array[1] = strtolower($dist_array[1]);
		   // array_push($not_submitted_dist,ucfirst($dist_array[1]));
		// }
		// $not_submitted_schools['district']   = $not_submitted_dist;
		// $schools_data['submitted']     		 = $submitted_schools;
		// $schools_data['submitted_count']     = count($submitted_schools['school']);
		// $schools_data['not_submitted'] 		 = $not_submitted_schools;
		// $schools_data['not_submitted_count'] = count($not_submitted_schools['school']);
		
		
		
		//
		
		$not_submitted_dist        = array();
		
		$all_schools_mobile        = array();
		$all_schools_cpn      	   = array();
		$submitted_school_mob 	   = array();
		$submitted_school_person   = array();
		$not_submitted_school_mob 	   = array();
		$not_submitted_school_person   = array();
		
		$schools_list = $this->get_all_schools();
		
		foreach($schools_list as $school_data)
		{
			array_push($all_schools_district,$school_data['dt_name']);
			array_push($all_schools_name,$school_data['school_name']);
			$all_schools_mobile[$school_data['school_name']] = $school_data['school_mob'];
			$all_schools_cpn[$school_data['school_name']] = $school_data['contact_person_name'];
		}
		
		$all_schools['district'] = $all_schools_district; 
		$all_schools['school']   = $all_schools_name; 
		
		if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		$query = $this->mongo_db->select ( array (
				"doc_data.widget_data" 
		) )->whereLike ( 'doc_data.widget_data.page4.Declaration Information.Date:',$today_date )->get ( $this->sanitation_app_col_v2 );
		
		//log_message('debug','$schools_data=====get_absent_pie_schools_data=====716=='.print_r($query,true));
		//log_message('debug','$schools_data=====get_absent_pie_schools_data=====717=='.print_r($today_date,true));
		
		foreach ( $query as $doc ) {
			    if(!in_array($doc ['doc_data'] ['widget_data'] ['page4'] ['School Information'] ['School Name'],$submitted_school_name))
				{
					array_push ( $submitted_school_district,$doc ['doc_data'] ['widget_data'] ['page4'] ['School Information'] ['District'] );
					array_push ( $submitted_school_name,$doc ['doc_data'] ['widget_data'] ['page4'] ['School Information'] ['School Name'] );
					
					if(isset($all_schools_mobile[$doc ['doc_data'] ['widget_data'] ['page4'] ['School Information'] ['School Name']])){
						array_push ( $submitted_school_mob,$all_schools_mobile[$doc ['doc_data'] ['widget_data'] ['page4'] ['School Information'] ['School Name']] );
						array_push ( $submitted_school_person,$all_schools_cpn[$doc ['doc_data'] ['widget_data'] ['page4'] ['School Information'] ['School Name']] );
					}else{
						array_push ( $submitted_school_mob,"" );
						array_push ( $submitted_school_person,"" );
					}
					
		        }
		}
		
		$submitted_schools['district']     = $submitted_school_district;
		$submitted_schools['school']       = $submitted_school_name;
		$submitted_schools['mobile']       = $submitted_school_mob;
		$submitted_schools['person_name']  = $submitted_school_person;
		
		$not_submitted_schools['district'] = array();
		$not_submitted_schools['school']   = array_values(array_diff($all_schools['school'],$submitted_schools['school']));
		foreach($not_submitted_schools['school'] as $index => $school_name)
		{
		   $dist_array    = explode(",",$school_name);
		   $dist_array[1] = strtolower($dist_array[1]);
		   array_push($not_submitted_dist,ucfirst($dist_array[1]));
		   
			if(isset($all_schools_mobile[$school_name])){
				array_push ( $not_submitted_school_mob,$all_schools_mobile[$school_name] );
				array_push ( $not_submitted_school_person,$all_schools_cpn[$school_name] );
			}else{
				array_push ( $not_submitted_school_mob,"" );
				array_push ( $not_submitted_school_person,"" );
			}
		   
		}
		$not_submitted_schools['district']   = $not_submitted_dist;
		$not_submitted_schools['mobile']       = $not_submitted_school_mob;
		$not_submitted_schools['person_name']  = $not_submitted_school_person;
		
		$schools_data['submitted']     		 = $submitted_schools;
		$schools_data['submitted_count']     = count($submitted_schools['school']);
		$schools_data['not_submitted'] 		 = $not_submitted_schools;
		$schools_data['not_submitted_count'] = count($not_submitted_schools['school']);
		
		//
		
		return $schools_data;
	}
	
	public function insert_ehr_note($post)
	{
		$token = $query = $this->mongo_db->insert($this->notes_col,$post);
	
		return $token;
	}
	
	public function fetch_insert_ehr_note($post)
	{
		$token = $query = $this->mongo_db->where(array("datetime"=> $post['datetime'],"username"=> $post['username'],"uid"=> $post['uid'],"note"=> $post['note']))->get($this->notes_col);
	
		return $token;
	}
	
	public function delete_ehr_note($doc_id)
	{
		$query = $this->mongo_db->where ( array (
				"_id" => new MongoId ( $doc_id ) 
		) )->delete ( $this->notes_col );
	
		return $query;
	}

    public function tswreis_chronic_cases_count()
    {
     $query = $this->mongo_db->get($this->collections['tswreis_chronic_cases']);
	 return count($query);
    }
	
	function get_chronic_cases_model($limit, $page)
	{
	    $offset = $limit * ( $page - 1) ;
		
		$this->mongo_db->orderBy(array('_id' => 1));
		$this->mongo_db->limit($limit);
		$this->mongo_db->offset($offset);
		$query = $this->mongo_db->get($this->collections['tswreis_chronic_cases']);
		if ($query)
		{
			return $query;
		}
		else
		{
			return FALSE;
		}
	}
	
	public function get_chronic_cases_model_for_data_table()
	{
	    $this->mongo_db->orderBy(array('created_time' => -1));
		$query = $this->mongo_db->get($this->collections['tswreis_chronic_cases']);
		if ($query)
		{
			return $query;
		}
		else
		{
			return FALSE;
		}
	}
	
	function get_all_chronic_unique_ids_model()
	{
	    $this->mongo_db->orderBy(array('_id' => 1));
		$query = $this->mongo_db->select(array('student_unique_id','case_id','scheduled_months','school_name'),array())->getWhere($this->collections['tswreis_chronic_cases'],array('followup_scheduled'=>'true'));
		if ($query)
		{
			return $query;
		}
		else
		{
			return FALSE;
		}
	}
	
	function create_schedule_followup_model($unique_id,$medication_schedule,$treatment_period,$start_date,$month_names,$case_id)
	{
	   $update_array = array(
	   'start_date'         => $start_date,
	   'medication_schedule'=> $medication_schedule,
	   'treatment_period'   => $treatment_period,
	   'scheduled_months'   => $month_names,
	   'followup_scheduled' => "true");
	   
	   $updated = $this->mongo_db->where(array('student_unique_id'=>$unique_id,'case_id'=>$case_id))->set($update_array)->update($this->collections['tswreis_chronic_cases']);
	   
	   if($updated)
		   return TRUE;
	   else
		   return FALSE;
	}
	
	function calculate_chronic_graph_compliance_percentage($case_id,$unique_id,$medication_taken)
	{
	   $medication_schedule = array();
	   $query = $this->mongo_db->select(array(),array())->getWhere($this->collections['tswreis_chronic_cases'],array('student_unique_id'=>$unique_id,'case_id'=>$case_id));  
	   
	   foreach($query as $value)
	   {
	     $medication_schedule = $value['medication_schedule'];
	   }
	   
	   $schedule_count = count($medication_schedule);
	   
	   if(isset($medication_taken) && !empty($medication_taken))
	   {
	     $taken_count = count($medication_taken);
	   }
	   else
	   {
         $taken_count = 0;
	   }
	   $compliance_percentage = ($taken_count/$schedule_count)*100;
	   return $compliance_percentage;
	}
	
	function update_schedule_followup_model($unique_id,$case_id,$compliance,$selected_date)
	{
		$check_query = array("student_unique_id"=>$unique_id,"case_id"=>$case_id,"medication_taken"=>array('$elemMatch'=>array("date"=>$selected_date)));
		 
		$is_already_updated = $this->mongo_db->where($check_query)->get($this->collections['tswreis_chronic_cases']);
		
		if($is_already_updated)
		{
	       return "ALREADY_UPDATED";
		}
		else
		{
	       $datewise_update = array("date"=>$selected_date,"compliance"=>$compliance);
	  
		   $query = array("student_unique_id"=>$unique_id,"case_id"=>$case_id);
		
		   $update = array('$push'=>array("medication_taken"=>$datewise_update));
			 
		   $response = $this->mongo_db->command(array( 
			'findAndModify' => $this->collections['tswreis_chronic_cases'],
			'query'         => $query,
			'update'        => $update,
			'upsert'        => true
			));
		
			if($response['ok'])
			{
			   return "UPDATE_SUCCESS";
			}
			else
			{
		       return "UPDATE_FAIL";
			}
		}
	}
	
	// ---------------------------------------------------------------------------------------
	
	/**
	 * Helper: Fetch Student's pill compliance data
	 *
	 * @param string $case_id 			 Case ID
	 * @param string $student_unique_id  Hospital Unique ID
	 *
	 * @return array
	 *
	 * @author Selva
	 */
	 
	public function fetch_student_pill_compliance_data($case_id,$student_unique_id)
	{
	    $where_clause = array(
		'case_id' => $case_id,
		'student_unique_id'=> $student_unique_id
		);
		
		$query = $this->mongo_db->where($where_clause)->get($this->collections['tswreis_chronic_cases']);
        return $query;
	}
	
	function get_dup_docs($docs_arr){
		$doc_matchs = [];
		$matched_doc_ids = [];
		foreach($docs_arr as $id){
			$doc_sech = $this->mongo_db->select(array("_id",'doc_data'))->where("doc_data.widget_data.page1.Personal Information.Hospital Unique ID" , $id)->get($this->screening_app_col);
			$inner_doc_count = count($doc_sech);
			//log_message('debug','111111111111111111111111111111111111'.print_r($inner_doc_count,true));
			if($inner_doc_count >1){
				//log_message('debug','2222222222222222222222222222222222'.print_r($id,true));
				if (!in_array($id, $matched_doc_ids)) {
					//log_message('debug','33333333333333333333333333333333333333333'.print_r($doc_matchs,true));
					for ($doc_pointer = 0 ; $doc_pointer < $inner_doc_count ; $doc_pointer++){
						$doc_pointer_id = (string)$doc_sech[$doc_pointer]['_id'];
						array_push($matched_doc_ids, $doc_pointer_id);
						//log_message('debug','44444444444444444444444444444444444444444444444'.print_r($matched_doc_ids,true));
					}
					
					$doc_record['doc_id'] = $doc_sech[0]['doc_data']['widget_data']['page1']['Personal Information']['Name'];
					$doc_record['matched_count'] = $inner_doc_count;
					$doc_record['document1'] = (string)$doc_sech[0]['_id'];
					$doc_record['document2'] = (string)$doc_sech[1]['_id'];
					$doc_record['uid'] = $id;
					array_push($doc_matchs, $doc_record);
					
				}
				
			}
		}
		return $doc_matchs;
		
	}
	
	function get_document($doc_id){
		$query = $this->mongo_db->where("_id", new MongoId($doc_id))->get($this->screening_app_col);
		
	
		if (isset($query[0])) {
			//log_message('debug','fffffffffffffffffffffffffffffffffffffffffff');
			return json_decode(json_encode($query[0]),true);
		}else{
			return false;
		}
	
	}
	
	function get_all_docs_in_uid_no($uid_no){
		
		$query = $this->mongo_db->select(array("doc_data.widget_data"))->where("doc_data.widget_data.page1.Personal Information.Hospital Unique ID", $uid_no)->get($this->screening_app_col);
	
		if (isset($query)) {
			//log_message('debug','fffffffffffffffffffffffffffffffffffffffffff');
			return json_decode(json_encode($query),true);
		}else{
			return false;
		}
	
	}
	
	public function insert_request_note($post)
	{
		$query_request = $this->mongo_db->where ( "req_doc_id", $post ['doc_id'] )->get ( $this->collections['panacea_req_notes'] );
		
		//log_message('debug','notessssssssssssssssspost===query_request==========================='.print_r($query_request,true));
		
		$notes = array(
			'note_id' => get_unique_id(),
			'note'	  => $post['note'],
			'username'=> $post['username'],
			'datetime'=> $post['datetime']
		);
		
		if(isset($query_request[0]['notes_data'])){
			array_push($query_request[0]['notes_data'],$notes);
		}
		else{
			$query_request[0]['notes_data'] = [];
			array_push($query_request[0]['notes_data'],$notes);
			$query_request[0]["req_doc_id"] = $post ['doc_id'];
		}
		
		$is_notes = $this->mongo_db->where ( "req_doc_id", $post ['doc_id'] )->count( $this->collections ['panacea_req_notes'] );
		
		if($is_notes > 0){
			$token = $this->mongo_db->where ( "req_doc_id", $post ['doc_id'] )->set($query_request[0])->update( $this->collections ['panacea_req_notes'] );
		}else{
			$token = $this->mongo_db->insert( $this->collections ['panacea_req_notes'], $query_request[0]);
		}
	
	   // //log_message('debug','notessssssssssssssssspost===token==========================='.print_r($token,true));

		return $token;
	}

	// ------------------------------------------------------------------------
	 
	/**
	* Helper : Update note content ( request notes )
	*
	* @param  string  $doc_id   Request document id
	* @param  string  $note_id  Note id
	* @param  string  $note     Note
	*
	* @return bool
	*
	* @author Selva
	*/

	public function update_request_note($doc_id,$note_id,$note)
	{
       $query = array('req_doc_id'=>$doc_id,'notes_data'=>array('$elemMatch'=>array('note_id'=>$note_id)));

       $update = array('$set'=>array('notes_data.$.note'=>$note));

       $response = $this->mongo_db->command(array( 
		'findAndModify' => 'panacea_req_notes',
		'query'         => $query,
		'update'        => $update
	    ));
		
		return $response['ok'];
	}
	
	public function delete_request_note($post)
	{
		$query_request = $this->mongo_db->where ( "doc_properties.doc_id", $post ['doc_id'] )->get ( $this->request_app_col );
		
		foreach($query_request[0]['doc_data']['notes_data'] as $note => $note_data){
			if($note_data['note_id'] == $post ['note_id']){
				unset($query_request[0]['doc_data']['notes_data'][$note]);
			}
		}
		
		$token = $this->mongo_db->where ( "doc_properties.doc_id", $post ['doc_id'] )->set($query_request[0])->update( $this->request_app_col );
	
		return $token;
	}
	
	
	public function get_chronic_request() {
		ini_set ( 'memory_limit', '10G' );
		$requests = [ ];
		$prob_arr =  array();
		$query = $this->get_request_docs('Chronic',"Not Cured");

		/*foreach ($query as $doc) {
			$chronic_list = $doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] ['Chronic'];

			foreach ($chronic_list as $types => $value) {

				$problems =  $doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] ['Chronic'][$types];
				
				
				if(isset($problems) && !empty($problems))
				{
					foreach ( $problems as $problem )
					{
						array_push($prob_arr, $problem);
						$disease_values = array_count_values($prob_arr);	
						if($disease_values[$problem] > 10)
						{
							echo print_r($disease_values,true);
							
						}					
					}
					
				}
				
			}
		}
		exit();*/
		
		$request ['label'] = 'Chronic';
		$request ['value'] = count($query);
		array_push ( $requests, $request );
		
		$query = $this->get_request_docs('Deficiency',"Not Cured");
		$request ['label'] = 'Deficiency';
		$request ['value'] = count($query);
		array_push ( $requests, $request );
		
		$query = $this->get_request_docs('Defects',"Not Cured");
		$request ['label'] = 'Defects';
		$request ['value'] = count($query);
		array_push ( $requests, $request );
		
		return $requests;
		
	}

	public function get_hospitalized_request() {
		
		$requests = [ ];
		$prob_arr =  array();
		$query = $this->get_request_docs('Normal',"Hospitalized");
		/*foreach ($query as $doc) {
			$chronic_list = $doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] ['Chronic'];

			foreach ($chronic_list as $types => $value) {

				$problems =  $doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] ['Chronic'][$types];
				
				
				if(isset($problems) && !empty($problems))
				{
					foreach ( $problems as $problem )
					{
						array_push($prob_arr, $problem);
						$disease_values = array_count_values($prob_arr);	
						if($disease_values[$problem] > 10)
						{
							echo print_r($disease_values,true);
							
						}					
					}
					
				}
				
			}
		}
		exit();*/
		
		$request ['label'] = 'Normal';
		$request ['value'] = count($query);
		array_push ( $requests, $request );
		
		$query = $this->get_request_docs('Emergency',"Hospitalized");
		$request ['label'] = 'Emergency';
		$request ['value'] = count($query);
		array_push ( $requests, $request );
		
		$query = $this->get_request_docs('Chronic',"Hospitalized");
		$request ['label'] = 'Chronic';
		$request ['value'] = count($query);
		array_push ( $requests, $request );
		
		return $requests;
		
	}
	
	public function update_chronic_request_pie($status_type) {
		
		$requests = [ ];
		
		$query = $this->get_request_docs('Chronic',$status_type);
		$request ['label'] = 'Chronic';
		$request ['value'] = count($query);
		array_push ( $requests, $request );
		
		$query = $this->get_request_docs('Deficiency',$status_type);
		$request ['label'] = 'Deficiency';
		$request ['value'] = count($query);
		array_push ( $requests, $request );
		
		$query = $this->get_request_docs('Defects',$status_type);
		$request ['label'] = 'Defects';
		$request ['value'] = count($query);
		array_push ( $requests, $request );
		
		return $requests;
		
	}
	
	public function drill_down_request_to_symptoms($data,$status_type){
		
		$obj_data = json_decode ( $data, true );
		$type_of_request = $obj_data ['label'];
		
		$query = $this->get_request_docs($type_of_request,$status_type);		
			
		$prob_arr = [ ];
		foreach ( $query as $doc ) 
		{
			if(isset($doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] [$type_of_request]) && !empty($doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] [$type_of_request]))
			{
				if($doc ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Request Type'] == "Defects" || $doc ['doc_data'] ['widget_data'] ['page2'] ['Review Info'] ['Request Type'] == "Deficiency")
				{
					$docs['Normal'] = $doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] ['Normal'];
					$docs['Emergency'] = $doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] ['Emergency'];
					$docs['Chronic'] = $doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] ['Chronic'];

					foreach ($docs as $index => $types) {
						foreach ($types as $type => $values) {
							$problems = $doc['doc_data'] ['widget_data'] ['page1'] ['Problem Info'][$index][$type];	
											
							if(isset($problems) && !empty($problems))
							{	
								if(is_array($problems))
								{
									foreach ( $problems as $problem )
									{
										if (isset ( $prob_arr [$problem] )) {
											$prob_arr [$problem] ++;
										} else {
											$prob_arr [$problem] = 1;
										}
									}
								}else
								{
									if (isset ( $prob_arr [$problems] )) 
									{
										$prob_arr [$problems] ++;
									} else
									{
										$prob_arr [$problems] = 1;
									}
								}		
							}
							
						}
					}
					
				}else
				{
					$chronic_list = $doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] [$type_of_request];
					foreach ($chronic_list as $types => $value) {
								$problems =  $doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] [$type_of_request][$types];
								if(isset($problems) && !empty($problems))
								{				
									
									if(is_array($problems))
									{
										foreach ( $problems as $problem )
										{
											if (isset ( $prob_arr [$problem] )) {
												$prob_arr [$problem] ++;
											} else {
												$prob_arr [$problem] = 1;
											}
										}
									}else
									{
										if (isset ( $prob_arr [$problems] )) 
										{
											$prob_arr [$problems] ++;
										} else
										{
											$prob_arr [$problems] = 1;
										}
									}		
								}
							}
				}
				/*$chronic_list = $doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] ['Chronic'];

				foreach ($chronic_list as $types => $value) {

					$problems =  $doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] ['Chronic'][$types];
					if(isset($problems) && !empty($problems))
					{				
						
						if(is_array($problems))
						{
							foreach ( $problems as $problem )
							{
								if (isset ( $prob_arr [$problem] )) {
									$prob_arr [$problem] ++;
								} else {
									$prob_arr [$problem] = 1;
								}
							}
						}else
						{
							if (isset ( $prob_arr [$problems] )) 
							{
								$prob_arr [$problems] ++;
							} else
							{
								$prob_arr [$problems] = 1;
							}
						}						
						

						//echo print_r($problem,true);
					}				
					
				}*/	
			}
			
			
			/*if (isset ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] ['Identifier'] )) {
				$problems = $doc ['doc_data'] ['widget_data'] ['page1'] ['Problem Info'] ['Identifier'];
				foreach ( $problems as $problem ) {
					if (isset ( $prob_arr [$problem] )) {
						$prob_arr [$problem] ++;
					} else {
						$prob_arr [$problem] = 1;
					}
				}
			}*/
		}
		
		// //log_message("debug","schooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo".print_r($prob_arr,true));
		$final_values = [ ];
		if($status_type == "Hospitalized")
		{
			foreach ( $prob_arr as $prob => $count ) 
			{
				$result ['label'] = $prob;
				$result ['value'] = $count;
				array_push ( $final_values, $result );
			}
		
			return $final_values;
		}
		
		if($type_of_request == "Defects" || $type_of_request == "Deficiency")
		{
			foreach ( $prob_arr as $prob => $count ) {

				$result ['label'] = $prob;
				$result ['value'] = $count;
				array_push ( $final_values, $result );
			}
		
			return $final_values;
		}else{
			foreach ( $prob_arr as $prob => $count ) {
				if($count > 10){
					$result ['label'] = $prob;
					$result ['value'] = $count;
					array_push ( $final_values, $result );
				}
			}
		
			return $final_values;
		}
		
	}
	
	public function drilldown_chronic_request_to_districts($data, $status_type) {
		
		ini_set ( 'max_execution_time', 0 );
		ini_set ( 'memory_limit', '5G' );
		$query = [ ];
		
		$obj_data = json_decode ( $data, true );
		
		$search_param_1 = $obj_data[0];
		$search_param_2 = $obj_data[1];
		$params = explode(" / ", $search_param_1);
		$search_param_1 = $params[1];
		
		$dist_list = [ ];
		
		$query = $this->get_request_docs_params($search_param_1,$search_param_2,$status_type);
		
		foreach ( $query as $identifiers ) {
			
			$retrieval_list = array ();
			//$unique_id = $identifiers ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
			//$doc = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
			
			if (isset ( $identifiers ) && ! empty ( $identifiers ) && (count ( $identifiers ) > 0)) {
				$district = $identifiers ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['District']['field_ref'];
				if (isset ( $dist_list [$district] )) {
					$dist_list [$district] ++;
				} else {
					$dist_list [$district] = 1;
				}
			}
			
		}
		
		/*$end_date = date("Y-m-d H:i:s");
		log_message('debug',"end_date============17561".print_r($end_date,true));*/
		
		//log_message('error',"dist_list============17561".print_r($dist_list,true));
		
		/*$date = "2018-07-02";
		$dist_list = $this->mongo_db->select(array('pie_data.'.$search_param_1),array('_id'))->whereLike('pie_data.date',$date)->get('panacea_district_wise_healthrequest_counts');
		
		$dist_list = $dist_list[0]['pie_data'][$search_param_1][$search_param_2];*/
		
		$final_values = [ ];
		foreach ( $dist_list as $dicsts => $count ) {
			$result ['label'] = $dicsts;
			$result ['value'] = $count;
			array_push ( $final_values, $result );
		}
		
		return $final_values;
	}
	
	public function drilldown_chronic_request_to_schools($data, $status_type) {
		
		ini_set ( 'max_execution_time', 0 );
		ini_set ( 'memory_limit', '5G' );
		$query = [ ];
		
		$obj_data = json_decode ( $data, true );
		
		$search_param_1 = $obj_data[0];

		$params = explode(" / ", $search_param_1);
		$search_param_1 = $params[1];
		$search_param_2 = $params[2];
		
		$query = $this->get_request_docs_params($search_param_1,$search_param_2,$status_type);
	
		$school_list = [ ];
		$matching_docs = [ ];

		$dist_to_lower = strtolower ( $obj_data [1] );

		foreach ( $query as $request ) {
			
			$retrieval_list = array ();
			/*$unique_id = $request ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
			$doc = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );*/
			if (isset ( $request ) && ! empty ( $request ) && (count ( $request ) > 0)) {
				$district = $request ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['District']['field_ref'];
				if (strtolower ( $district ) == $dist_to_lower) {
					array_push ( $matching_docs, $request );
				}
			}
		}
		
		foreach ( $matching_docs as $docs ) {
			$school_name = $docs ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['School Name']['field_ref'];
			if (isset ( $school_list [$school_name] )) {
				$school_list [$school_name] ++;
			} else {
				$school_list [$school_name] = 1;
			}
		}
		
		
		//log_message('error',"school_listttttttttttt=====".print_r($school_list,true));
		//exit();
		/*$date = "2018-07-02";
		$dist = strtoupper( $obj_data [1] );
		$dist_list = $this->mongo_db->select(array('pie_data.'.$search_param_1),array('_id'))->whereLike('pie_data.date',$date)->get('panacea_school_wise_healthrequest_counts');
		
		$school_list = $dist_list[0]['pie_data'][$search_param_1][$search_param_2][$dist];*/
		
		$final_values = [ ];
		foreach ( $school_list as $school => $count ) {
			$result ['label'] = $school;
			$result ['value'] = $count;
			array_push ( $final_values, $result );
		}
		
		return $final_values;
	}
	
	public function drilldown_chronic_request_to_students($data,$status_type) {
		
		
		$query = [ ];
		
		$obj_data = json_decode ( $data, true );
		//log_message("error","obj_data====17428".print_r($obj_data,true));
		$search_param_1 = $obj_data[0];
		
		$params = explode(" / ", $search_param_1);
		$search_param_1 = $params[1];
		$search_param_2 = $params[2];

		$school_name = $obj_data ['1'];
		$school_name = strtoupper($school_name);
			//log_message("error","school_name====17428".print_r($school_name,true));
		if(isset($school_name))
		{
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$schools_list = $this->mongo_db->select(array('school_code'),array('_id'))->where('school_name',$school_name)->get ( $this->collections ['panacea_schools'] );
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			$school_code = $schools_list[0]['school_code'];

			if(isset($school_code) && !empty($school_code))
			{
				$this->mongo_db->switchDatabase($this->common_db ['common_db']);
				$get_hs_email = $this->mongo_db->select(array('email'))->where('school_code',$school_code)->get($this->collections ['panacea_health_supervisors']);
				$this->mongo_db->switchDatabase($this->common_db ['dsn']);
				$email = $get_hs_email[0]['email'];
				$dist_code = strtoupper(str_ireplace(".", "_",substr($email,0,strpos($email,"@")-2)));
			}
		}
		
		if(isset($dist_code) && !empty($dist_code))
		{
			$query = $this->get_request_docs_params_with_school($search_param_1,$search_param_2,$status_type,$dist_code);
		}
		else
		{
			$query = $this->get_request_docs_params($search_param_1,$search_param_2,$status_type);
		}
		
		$student_list = [ ];
		$matching_docs = [ ];
		
		foreach ( $query as $request ) {
			
			$retrieval_list = array ();
			//$unique_id = $request ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
			//$doc = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
			if (isset ( $request ) && ! empty ( $request ) && (count ( $request ) > 0)) {
				$school = $request ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['School Name'] ['field_ref'];
				if ($school == $school_name) {
					array_push ( $matching_docs, $request ['_id']->{'$id'} );
				}
			}
		}
		
		return $matching_docs;
	}
	
	private function get_request_docs($request_type,$status_type)
	{
			ini_set ( 'memory_limit', '10G' );
		if($status_type == "Hospitalized")
		{
			$init_request = array ('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
			$hospitalized_status = array ("doc_data.widget_data.page2.Review Info.Status" => $status_type);
			//$date = array('history.time' => array('$gte' => "2018-05-01"));
			$and_merged_array = array();
			
			array_push ( $and_merged_array, $init_request );
			array_push ( $and_merged_array, $hospitalized_status );
			//array_push ( $and_merged_array, $date );
			$result = [ ];
				
				$pipeline = [ 
						array (
								'$project' => array (
										"doc_data.widget_data" => true,
										"history" => true 
								) 
						),
						array (
								'$match' => array (
										'$and' => $and_merged_array					
								) 
						)
				];
				
				$response = $this->mongo_db->command ( array (
						'aggregate' => $this->request_app_col_static_html, //$this->request_app_col,
						'pipeline' => $pipeline 
				) );
				$query = array();
				if($response['ok']){
					$query = $response["result"];
				}
				
				return $query;
		}
		
		if($status_type == "Cured"){
			
			$init_request = array ('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
			$cured = array ("doc_data.widget_data.page2.Review Info.Status" => "Cured");
			//$date = array('history.0.time' => array('$regex' => "2018-05-*"));

			$and_merged_array = array();
			
			array_push ( $and_merged_array, $init_request );
			array_push ( $and_merged_array, $cured );
			//array_push ( $and_merged_array, $date );
			$result = [ ];
				
				$pipeline = [ 
						array (
								'$project' => array (
										"doc_data.widget_data" => true,
										"history" => true 
								) 
						),
						array (
								'$match' => array (
										'$and' => $and_merged_array					
								) 
						)
				];
				
				$response = $this->mongo_db->command ( array (
						'aggregate' => $this->request_app_col_static_html, //$this->request_app_col, 
						'pipeline' => $pipeline 
				) );
				
				$query = array();
				if($response['ok']){
					$query = $response["result"];
				}
				
				return $query;
				
		}else{

			$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type, "doc_data.widget_data.page2.Review Info.Status" => array ('$ne' => "Cured")))->get($this->request_app_col_static_html);
			//$init_request = array ('doc_data.widget_data.page2.Review Info.Request Type' => $request_type);
			//$not_cured = array ("doc_data.widget_data.page2.Review Info.Status" => array ('$ne' => "Cured"));
			//$date = array('history.time' => array('$gte' => "2018-05-01"));
			
			//echo print_r($query, true); exit();

//exit();
			/*$and_merged_array = array();
			
			array_push ( $and_merged_array, $init_request );
			array_push ( $and_merged_array, $not_cured );
			//array_push ( $and_merged_array, $date );
			$result = [ ];
				
				$pipeline = [ 
						array (
								'$project' => array (
										"doc_data.widget_data" => true,
										"history" => true 
								) 
						),
						array (
								'$match' => array (
										'$and' => $and_merged_array					
								) 
						)
				];
				
				$response = $this->mongo_db->command ( array (
						'aggregate' => $this->request_app_col_static_html, //$this->request_app_col,
						'pipeline' => $pipeline 
				) );
				$query = array();
			
				if($response['ok']){
					$query = $response["result"];
				}*/
			
//exit();
				
				return $query;
		}
		
		
		
	}
	
	private function get_request_docs_params($search_param_1, $search_param_2, $status_type){

		$start_date = date("Y-m-d H:i:s");
		log_message('debug',"start_datestart_date============17561".print_r($start_date,true));
		if($status_type == "Hospitalized")
		{
			$init_request = array ('doc_data.widget_data.page2.Review Info.Request Type' => $search_param_1);
			//$symptoms = array ('doc_data.widget_data.page1.Problem Info.Identifier' => $search_param_2);
			$not_cured = array ("doc_data.widget_data.page2.Review Info.Status" => $status_type);
			//$date = array('history.time' => array('$gte' => "2018-05-01"));
			$and_merged_array = array();
			
			array_push ( $and_merged_array, $init_request );
			//array_push ( $and_merged_array, $symptoms );
			array_push ( $and_merged_array, $not_cured );
			//array_push ( $and_merged_array, $date );
			$result = [ ];
				
				$pipeline = [ 
						array (
								'$project' => array (
										"doc_data.widget_data" => true,
										"history" => true 
								) 
						),
						array (
								'$match' => array (
										'$and' => $and_merged_array					
								) 
						)
				];
				
				$response = $this->mongo_db->command ( array (
						'aggregate' => $this->request_app_col_static_html,  //$this->request_app_col,
						'pipeline' => $pipeline 
				) );
				$query = array();
				if($response['ok']){
					//$query = $response["result"];
					foreach ($response['result'] as $docs) {
						if(isset($docs['doc_data']['widget_data']['page1']['Problem Info'][$search_param_1]) && !empty($docs['doc_data']['widget_data']['page1']['Problem Info'][$search_param_1]))
						{
							$get_array_name = $docs['doc_data']['widget_data']['page1']['Problem Info'][$search_param_1];
							foreach ($get_array_name as $type => $value) 
							{
								if(in_array($search_param_2, $value))
								{
									array_push($query, $docs);
								}
								
							}
						}
					}

				}

				return $query;
		}
		if($status_type == "Cured"){
			
			$init_request = array ('doc_data.widget_data.page2.Review Info.Request Type' => $search_param_1);
			//$symptoms = array ('doc_data.widget_data.page1.Problem Info.Chronic' => $search_param_2);
			$cured = array ("doc_data.widget_data.page2.Review Info.Status" => "Cured");
	
			$and_merged_array = array();
			
			array_push ( $and_merged_array, $init_request );
//			array_push ( $and_merged_array, $symptoms );
			array_push ( $and_merged_array, $cured );
			$result = [ ];
				
				$pipeline = [ 
						array (
								'$project' => array (
										"doc_data.widget_data" => true,
										"history" => true 
								) 
						),
						array (
								'$match' => array (
										'$and' => $and_merged_array					
								) 
						)
				];
				
				$response = $this->mongo_db->command ( array (
						'aggregate' => $this->request_app_col_static_html, //$this->request_app_col,
						'pipeline' => $pipeline 
				) );
				$query = array();
				
				if($response['ok']){
					//$query = $response["result"];
					foreach ($response['result'] as $docs) {
						if(isset($docs['doc_data']['widget_data']['page1']['Problem Info']['Chronic']) && !empty($docs['doc_data']['widget_data']['page1']['Problem Info']['Chronic']))
						{
							$get_array_name = $docs['doc_data']['widget_data']['page1']['Problem Info']['Chronic'];
							foreach ($get_array_name as $type => $value) 
							{
								if(in_array($search_param_2, $value))
								{
									array_push($query, $docs);
								}
								
							}
						}						
					}
				}
				//echo print_r($query,true);exit();
				return $query;
				
		}else{

			$response = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $search_param_1, "doc_data.widget_data.page2.Review Info.Status" => array ('$ne' => "Cured")))->get($this->request_app_col_static_html);

			/*$init_request = array ('doc_data.widget_data.page2.Review Info.Request Type' => $search_param_1);
			//$symptoms = array ('doc_data.widget_data.page1.Problem Info.Identifier' => $search_param_2);
			$not_cured = array ("doc_data.widget_data.page2.Review Info.Status" => array ('$ne' => "Cured"));
			//$date = array('history.time' => array('$gte' => "2018-05-01"));
			$and_merged_array = array();
			
			array_push ( $and_merged_array, $init_request );
			//array_push ( $and_merged_array, $symptoms );
			array_push ( $and_merged_array, $not_cured );
			//array_push ( $and_merged_array, $date );
			$result = [ ];
				
				$pipeline = [ 
						array (
								'$project' => array (
										"doc_data.widget_data" => true,
										"history" => true 
								) 
						),
						array (
								'$match' => array (
										'$and' => $and_merged_array					
								) 
						)
				];
				
				$response = $this->mongo_db->command ( array (
						'aggregate' => $this->request_app_col_static_html,  //$this->request_app_col,
						'pipeline' => $pipeline 
				) );*/
				$query = array();
				if($response){
					//$query = $response["result"];
					foreach ($response as $docs) {
						if(isset($docs['doc_data']['widget_data']['page1']['Problem Info']['Chronic']) && !empty($docs['doc_data']['widget_data']['page1']['Problem Info']['Chronic']))
						{
							$get_array_name = $docs['doc_data']['widget_data']['page1']['Problem Info']['Chronic'];
							foreach ($get_array_name as $type => $value) 
							{
								if(in_array($search_param_2, $value))
								{
									array_push($query, $docs);
								}
								
							}
						}
					}

				}

				return $query;
		}
	}


private function get_request_docs_params_with_school($search_param_1, $search_param_2, $status_type,$dist_code){

		$start_date = date("Y-m-d H:i:s");
		//log_message('error',"start_datestart_date============17561".print_r($start_date,true));
		//$school_code = "HYD_".$school_code."_*";
		if($status_type == "Hospitalized")
		{
			$unique_id = array('doc_data.widget_data.page1.Student Info.Unique ID' => array('$regex' => $dist_code));
			$init_request = array ('doc_data.widget_data.page2.Review Info.Request Type' => $search_param_1);
			//$symptoms = array ('doc_data.widget_data.page1.Problem Info.Identifier' => $search_param_2);
			$not_cured = array ("doc_data.widget_data.page2.Review Info.Status" => $status_type);
			//$date = array('history.time' => array('$gte' => "2018-05-01"));
			$and_merged_array = array();
			
			array_push ( $and_merged_array, $unique_id );
			array_push ( $and_merged_array, $init_request );
			//array_push ( $and_merged_array, $symptoms );
			array_push ( $and_merged_array, $not_cured );
			//array_push ( $and_merged_array, $date );
			$result = [ ];
				
				$pipeline = [ 
						array (
								'$project' => array (
										"doc_data.widget_data" => true,
										"history" => true 
								) 
						),
						array (
								'$match' => array (
										'$and' => $and_merged_array					
								) 
						)
				];
				
				$response = $this->mongo_db->command ( array (
						'aggregate' => $this->request_app_col_static_html,   //$this->request_app_col,
						'pipeline' => $pipeline 
				) );
				$query = array();
				if($response['ok']){
					//$query = $response["result"];
					foreach ($response['result'] as $docs) {
						$get_array_name = $docs['doc_data']['widget_data']['page1']['Problem Info'][$search_param_1];
						foreach ($get_array_name as $type => $value) 
						{
							if(in_array($search_param_2, $value))
							{
								array_push($query, $docs);
							}
							
						}
					}
				}

				return $query;
		}
		if($status_type == "Cured"){
			$unique_id = array('doc_data.widget_data.page1.Student Info.Unique ID' => array('$regex' => $dist_code));
			$init_request = array ('doc_data.widget_data.page2.Review Info.Request Type' => $search_param_1);
			//$symptoms = array ('doc_data.widget_data.page1.Problem Info.Identifier' => $search_param_2);
			$cured = array ("doc_data.widget_data.page2.Review Info.Status" => "Cured");
	
			$and_merged_array = array();
			
			array_push ( $and_merged_array, $unique_id );
			array_push ( $and_merged_array, $init_request );
			//array_push ( $and_merged_array, $symptoms );
			array_push ( $and_merged_array, $cured );
			$result = [ ];
				
				$pipeline = [ 
						array (
								'$project' => array (
										"doc_data.widget_data" => true,
										"history" => true 
								) 
						),
						array (
								'$match' => array (
										'$and' => $and_merged_array					
								) 
						)
				];
				
				$response = $this->mongo_db->command ( array (
						'aggregate' => $this->request_app_col_static_html, //$this->request_app_col,
						'pipeline' => $pipeline 
				) );
				$query = array();
				if($response['ok']){
					//$query = $response["result"];
					foreach ($response['result'] as $docs) {
						$get_array_name = $docs['doc_data']['widget_data']['page1']['Problem Info']['Chronic'];
						foreach ($get_array_name as $type => $value) 
						{
							if(in_array($search_param_2, $value))
							{
								array_push($query, $docs);
							}							
						}
						
					}
				}
				
				return $query;
				
		}else{
			$unique_id = array('doc_data.widget_data.page1.Student Info.Unique ID' => array('$regex' => $dist_code));
			$init_request = array ('doc_data.widget_data.page2.Review Info.Request Type' => $search_param_1);
			//$symptoms = array ('doc_data.widget_data.page1.Problem Info.Identifier' => $search_param_2);
			$not_cured = array ("doc_data.widget_data.page2.Review Info.Status" => array ('$ne' => "Cured"));
			//$date = array('history.time' => array('$gte' => "2018-05-01"));
			$and_merged_array = array();
			
			array_push ( $and_merged_array, $unique_id );
			array_push ( $and_merged_array, $init_request );
			//array_push ( $and_merged_array, $symptoms );
			array_push ( $and_merged_array, $not_cured );
			//array_push ( $and_merged_array, $date );
			$result = [ ];
				
				$pipeline = [ 
						array (
								'$project' => array (
										"doc_data.widget_data" => true,
										"history" => true 
								) 
						),
						array (
								'$match' => array (
										'$and' => $and_merged_array					
								) 
						)
				];
				
				$response = $this->mongo_db->command ( array (
						'aggregate' => $this->request_app_col_static_html,   //$this->request_app_col,
						'pipeline' => $pipeline 
				) );
				$query = array();
				if($response['ok']){
					//$query = $response["result"];
					foreach ($response['result'] as $docs) {
						$get_array_name = $docs['doc_data']['widget_data']['page1']['Problem Info']['Chronic'];
						foreach ($get_array_name as $type => $value) 
						{
							if(in_array($search_param_2, $value))
							{
								array_push($query, $docs);
							}
							
						}
					}
				}

				return $query;
		}
	}

	/*private function get_request_docs_params($search_param_1, $search_param_2, $status_type){
		//echo "get_request_docs_params";
		if($status_type == "Cured"){
			$query = $this->mongo_db->select(array('doc_data.widget_data','history'))
			        ->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $search_param_1,
			         'doc_data.widget_data.page1.Problem Info.Identifier' => $search_param_2))
			        ->get($this->request_app_col);
			       
				return $query;
				
		}else{
			$query = $this->mongo_db->select(array('doc_data.widget_data','history'))
			         ->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $search_param_1, 
				      'doc_data.widget_data.page1.Problem Info.Identifier' => $search_param_2))
			          ->get($this->request_app_col);
				
				return $query;
		}
	}*/
	
	public function get_all_active_request(){
		$date = date('Y-m-d') . " 00:00:00";
		//echo print_r($date, true); exit;
		$dates = $this->get_start_end_date ( $date, "Daily" );
		
		
		$start_date = $dates ['today_date'];
		$end_date = $dates ['end_date'];
		
		$his_0_lte = array (
				"history.time" => array (
						'$lte' => $start_date 
				) 
		);
		$his_0_gte = array (
				"history.time" => array (
						'$gte' => $end_date 
				) 
		);
		/*$his_1_lte = array (
				"history.1.time" => array (
						'$lte' => $start_date 
				) 
		);
		$his_1_gte = array (
				"history.1.time" => array (
						'$gte' => $end_date 
				) 
		);
		$his_last_lte = array (
				"history.last_stage.time" => array (
						'$lte' => $start_date 
				) 
		);
		$his_last_gte = array (
				"history.last_stage.time" => array (
						'$gte' => $end_date 
				) 
		);*/
		
		//$and_merged_array_condition = array();
		$and_merged_array_0 = array();
		/*$and_merged_array_1 = array();
		$and_merged_array_last = array();*/
		
		array_push ( $and_merged_array_0, $his_0_lte );
		array_push ( $and_merged_array_0, $his_0_gte );
		
		
		/*array_push ( $and_merged_array_1, $his_1_lte );
		array_push ( $and_merged_array_1, $his_1_gte );

		array_push ( $and_merged_array_last, $his_last_lte );
		array_push ( $and_merged_array_last, $his_last_gte );*/
		
		
		// ////log_message("debug","response=====1665==".print_r($merged_array,true));
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$or' => array (
										array('$and' => $and_merged_array_0)
										/*array('$and' => $and_merged_array_1),
										array('$and' => $and_merged_array_last),*/
								)									
							) 
					)
			];
			
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->request_app_col_static_html, //$this->request_app_col,
					'pipeline' => $pipeline 
			) );
			
			//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvvvvvvvvv11111111111111111111111111111111111--".print_r($response,true));
			
			//=============================================vjhbdhdsuhyvsuyhvuyv
			$query = array();
			if($response['ok']){
				$query = $response["result"];
			}
			
			
		return count($query);
		
	}
	
	public function get_all_raised_request(){
		
		$date = date('Y-m-d') . " 00:00:00";		
		$dates = $this->get_start_end_date ( $date, "Daily" );
		
		
		$start_date = $dates ['today_date'];
		$end_date = $dates ['end_date'];
		
		$his_0_lte = array (
				"history.0.time" => array (
						'$lte' => $start_date 
				) 
		);
		$his_0_gte = array (
				"history.0.time" => array (
						'$gte' => $end_date 
				) 
		);
		
		//$and_merged_array_condition = array();
		$and_merged_array_0 = array();
		
		array_push ( $and_merged_array_0, $his_0_lte );
		array_push ( $and_merged_array_0, $his_0_gte );		
		
		$result = [ ];
			
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$or' => array (
										array('$and' => $and_merged_array_0)
								)									
							) 
					)
			];
			
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->request_app_col_static_html, //$this->request_app_col,
					'pipeline' => $pipeline 
			) );
			
			//log_message("debug","innnnnnnnnnnnnnnnnnnnnn fn vvvvvvvvvvvvvvvvvvvvvvvvvvvv11111111111111111111111111111111111--".print_r($response,true));
			
			//=============================================vjhbdhdsuhyvsuyhvuyv
			$query = array();
			if($response['ok']){
				$query = $response["result"];
			}
			
			
		return count($query);
	}

	// SANITATION
	public function get_sanitation_infrastructure_model($district_name,$school_name)
	{
		$this->mongo_db->limit(1)->where(array('doc_data.widget_data.page6.School Information.District'=>$district_name,'doc_data.widget_data.page6.School Information.School Name'=>$school_name));
		$query = $this->mongo_db->get($this->sanitation_infra_app_col);
		if($query)
			return $query;
		else
			return FALSE;
	}

	public function get_today_news_feeds($date){
		
		if(!$date){
			$date = date('Y-m-d');
		}
		
		$display_date = array (
				"display_date" => array (
						'$regex' => $date
				) 
		);
		$result = [ ];
			
			$pipeline = [ 
					
					array('$match' => $display_date)
					
			];
			
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->collections ['panacea_news_feed'],
					'pipeline' => $pipeline 
			) );
			$query = array();
			if($response['ok']){
				$query = $response["result"];
			}
	
		return $query;
	
	}

	public function add_news_feed($news_data){
		
		$query = $this->mongo_db->insert ( $this->collections ['panacea_news_feed'], $news_data );
	
		return $query;
	
	}
	
	public function show_all_news_feeds(){
	
		$query = $this->mongo_db->get ( $this->collections ['panacea_news_feed'] );
	
		return $query;
	
	}
	/*News feed for new dashboard*/
	public function get_all_news_feeds($date = FALSE){
	
		$query = $this->mongo_db->select(array('news_feed', 'username'))->whereLike("display_date", $date)->get ( $this->collections ['panacea_news_feed'] );
	
		return $query;
	
	}
	
	public function delete_news_feed($nf_id)
	{
		$query = $this->mongo_db->where(array("_id"=>new MongoId($nf_id)))->delete($this->collections['panacea_news_feed']);
		return $query;
	}
	
	public function get_news_feed($nf_id)
	{
		$query = $this->mongo_db->where(array("_id"=>new MongoId($nf_id)))->get($this->collections['panacea_news_feed']);
		return $query[0];
	}
	
	public function update_news_feed($news_data,$news_id)
	{
		
		$query = $this->mongo_db->where(array("_id"=>new MongoId($news_id)))->set($news_data)->update($this->collections['panacea_news_feed']);
		return $query;
	}
	
	public function get_all_rised_req()
	{
		$user_data = $this->session->userdata ( "customer" );
		
		$uniqueID = strtoupper(str_ireplace('.','_',substr($user_data['email'],0,strpos($user_data['email'],'@')-2)));
		
		//$query = $this->mongo_db->whereLike("doc_data.widget_data.page1.Student Info.Unique ID", $uniqueID)->select(array("doc_data.widget_data","history","doc_properties"))->get($this->request_app_col);
		
		$hs_mail = array (
				"doc_data.widget_data.page1.Student Info.Unique ID" => array (
						'$regex' => $uniqueID
				) 
		);
		$last_stage = array (
				"history.last_stage" => array (
						'$exists' => true
				) 
		);
		
		$and_merged_array = array();
		
		array_push ( $and_merged_array, $hs_mail );
		array_push ( $and_merged_array, $last_stage );
		
		$result = [ ];
			
			$pipeline = [

					array('$match' => array (
									'$and' => $and_merged_array 
							))	
			];
			
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->request_app_col,
					'pipeline' => $pipeline 
			) );
			$query = array();
			if($response['ok']){
				$query = $response["result"];
			}
		
		return $query;
	}
	
	function update_doc_for_disapprove($doc){
		$query = $this->mongo_db->where('_id', new MongoId($doc['_id']))->set($doc)->update('healthcare2016531124515424');
		unset($doc['_id']);
		$query = $this->mongo_db->insert('healthcare2016531124515424_shadow',$doc);
		return $query;
	}
	
	function get_workflow_stage_details($app_id,$collection,$select){
		$query = $this->mongo_db->where('_id', $app_id)->select($select)->get($collection);
		return $query[0];
	}
	
	/*
	*Fetchinhg BMI value with Unique id
	*author Naresh
	
	*/ 
	
	public function get_student_bmi_values($unique_id)
	{
		$query = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.BMI_values'))->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => $unique_id))->get('healthcare2017617145744625');
		//log_message("debug","query==========12576".print_r($query,true));
		
		if($query)
			return $query;
	    else
			return FALSE;
	}
	
	//update personal Information
   public function get_update_personal_ehr_uid($uid) {
		$query = $this->mongo_db->select ( array (
				'doc_data.widget_data',
				'doc_data.chart_data',
				'doc_data.external_attachments',
				'history' 
		) )->whereLike ( "doc_data.widget_data.page1.Personal Information.Hospital Unique ID", $uid )->get ( $this->screening_app_col );
		//log_message("debug","update personal Info for modelllllll114816".print_r($query,true));
		 if ($query) {
			$query_request = $this->mongo_db->where ( "doc_data.widget_data.page1.Student Info.Unique ID", $uid )->get ( $this->request_app_col );
			//log_message("debug"," query_request update personal Info for modelllllll114816".print_r($query_request,true));
			$result ['screening'] = $query;
			///$result ['request'] = $query_request;
			return $result;
		} else {
			$result ['screening'] = false;
			//$result ['request'] = false;
			return $result;
		} 
	}
	
	public function update_student_ehr_model($unique_id,$doc_data)
	{
	  //$doc_data = array("doc_data"=>array("widget_data"=>$doc_data),"history"=>$history);
	  $query = $this->mongo_db->where('doc_data.widget_data.page1.Personal Information.Hospital Unique ID',$unique_id)->set($doc_data)->update($this->screening_app_col);
	  //log_message('debug',"updateeeeeeeeeeeee".print_r($query,true));
	  if($query)
		  return TRUE;
	  else
		  return FALSE;
	}
	
	function delete_doc_from_user_col($doc_id,$hs_user_col){
		$this->mongo_db->where(array('app_id' => $this->request_app_col, 'doc_id' => $doc_id))->delete($hs_user_col.'_web_docs');
		$this->mongo_db->where(array('app_id' => $this->request_app_col, 'doc_id' => $doc_id))->delete($hs_user_col.'_docs');
		$cc_users = $this->get_all_cc_users();
		foreach($cc_users as $cc_user){
			$email = str_replace("@","#",$cc_user['email']);
			$this->mongo_db->where(array('app_id' => $this->request_app_col, 'doc_id' => $doc_id))->delete($email.'_web_docs');
			$this->mongo_db->where(array('app_id' => $this->request_app_col, 'doc_id' => $doc_id))->delete($email.'_docs');
		}
	}
	
/* 	function unique_id_check($unique_id){
		
		$and_merged_array = array ();
		
		$unique_id = array (
				"doc_data.widget_data.page1.Personal Information.Hospital Unique ID" => "HYD_61602_10021"
		);
		$page3_exists = array (
				"doc_data.widget_data.page3.Physical Exam" => array (
						'$exists' => true 
				) 
		);
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up" => array (
						'$exists' => true 
				) 
		);
		$page5_exists = array (
				"doc_data.widget_data.page5.Doctor Check Up" => array (
						'$exists' => true 
				) 
		);
		$page6_exists = array (
				"doc_data.widget_data.page6.With Glasses" => array (
						'$exists' => true 
				) 
		);
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness" => array (
						'$exists' => true 
				) 
		);
		$page8_exists = array (
				"doc_data.widget_data.page8. Auditory Screening" => array (
						'$exists' => true 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $and_merged_array, $unique_id );
		array_push ( $and_merged_array, $page3_exists );
		array_push ( $and_merged_array, $page4_exists );
		array_push ( $and_merged_array, $page5_exists );
		array_push ( $and_merged_array, $page6_exists );
		array_push ( $and_merged_array, $page7_exists );
		array_push ( $and_merged_array, $page8_exists );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			//echo print_r($response,true);
			//exit();
			
			$query = 0;
			if($response['ok']){
				//$query = count($response["result"]);
				if(count($response["result"]) == 0 ){
					
					$and_merged_array = array ();
					
					$page1_exists = array (
							"doc_data.widget_data.page1.Personal Information" => array (
									'$exists' => true 
							) 
					);
					$page2_exists = array (
							"doc_data.widget_data.page2.Personal Information" => array (
									'$exists' => true 
							) 
					);
					
					array_push ( $and_merged_array, $unique_id );
					array_push ( $and_merged_array, $page1_exists );
					array_push ( $and_merged_array, $page2_exists );
					
					$result = [ ];
						$pipeline = [ 
								array (
										'$project' => array (
												"doc_data.widget_data" => true,
												"history" => true 
										) 
								),
								array (
										'$match' => array (
												'$and' => $and_merged_array
										) 
								) 
						];
						$response = $this->mongo_db->command ( array (
								'aggregate' => $this->screening_app_col,
								'pipeline' => $pipeline 
						) );
						
						$query = 0;
						if($response['ok']){
							//$query = count($response["result"]);
							if(count($response["result"]) == 0 ){
								$and_merged_array = array ();
								
								array_push ( $and_merged_array, $unique_id );
								
								$result = [ ];
									$pipeline = [ 
											array (
													'$project' => array (
															"doc_data.widget_data" => true,
															"history" => true 
													) 
											),
											array (
													'$match' => array (
															'$and' => $and_merged_array
													) 
											) 
									];
									$response = $this->mongo_db->command ( array (
											'aggregate' => $this->screening_app_col,
											'pipeline' => $pipeline 
									) );
									
									$query = 0;
									if($response['ok']){
										//$query = count($response["result"]);
										if(count($response["result"]) == 0 ){
											return "No document found";
										}else{
											return "Only unique id document";
										}
									}
							}
							else
							{
								return "Only personal info document";
							}
						}
				}else{
					return "Full document";
				}
			}
		
	} */
	
	/*function unique_id_check($unique_id_check_zipfile){
		
		$and_merged_array = array ();
		
		$unique_id = array (
				"doc_data.widget_data.page1.Personal Information.Hospital Unique ID" => $unique_id_check_zipfile
				);
				
		$page3_exists = array (
				"doc_data.widget_data.page3.Physical Exam" => array (
						'$exists' => true 
				) 
		);
		$page4_exists = array (
				"doc_data.widget_data.page4.Doctor Check Up" => array (
						'$exists' => true 
				) 
		);
		$page5_exists = array (
				"doc_data.widget_data.page5.Doctor Check Up" => array (
						'$exists' => true 
				) 
		);
		$page6_exists = array (
				"doc_data.widget_data.page6.With Glasses" => array (
						'$exists' => true 
				) 
		);
		$page7_exists = array (
				"doc_data.widget_data.page7.Colour Blindness" => array (
						'$exists' => true 
				) 
		);
		$page8_exists = array (
				"doc_data.widget_data.page8. Auditory Screening" => array (
						'$exists' => true 
				) 
		);
		$page9_exists = array (
				"doc_data.widget_data.page9.Dental Check-up" => array (
						'$exists' => true 
				) 
		);
		
		array_push ( $and_merged_array, $unique_id );
		array_push ( $and_merged_array, $page3_exists );
		array_push ( $and_merged_array, $page4_exists );
		array_push ( $and_merged_array, $page5_exists );
		array_push ( $and_merged_array, $page6_exists );
		array_push ( $and_merged_array, $page7_exists );
		array_push ( $and_merged_array, $page8_exists );
		array_push ( $and_merged_array, $page9_exists );
		
		$result = [ ];
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->screening_app_col,
					'pipeline' => $pipeline 
			) );
			//echo print_r($response,true);
			//exit();
			
			$query = 0;
			if($response['ok']){
				//$query = count($response["result"]);
				if(count($response["result"]) == 0 ){
					
					$and_merged_array = array ();
					
					$page1_exists = array (
							"doc_data.widget_data.page1.Personal Information" => array (
									'$exists' => true 
							) 
					);
					$page2_exists = array (
							"doc_data.widget_data.page2.Personal Information" => array (
									'$exists' => true 
							) 
					);
					
					array_push ( $and_merged_array, $unique_id );
					array_push ( $and_merged_array, $page1_exists );
					array_push ( $and_merged_array, $page2_exists );
					
					$result = [ ];
						$pipeline = [ 
								array (
										'$project' => array (
												"doc_data.widget_data" => true,
												"history" => true 
										) 
								),
								array (
										'$match' => array (
												'$and' => $and_merged_array
										) 
								) 
						];
						$response = $this->mongo_db->command ( array (
								'aggregate' => $this->screening_app_col,
								'pipeline' => $pipeline 
						) );
						
						$query = 0;
						if($response['ok']){
							//$query = count($response["result"]);
							if(count($response["result"]) == 0 ){
								$and_merged_array = array ();
								
								array_push ( $and_merged_array, $unique_id );
								
								$result = [ ];
									$pipeline = [ 
											array (
													'$project' => array (
															"doc_data.widget_data" => true,
															"history" => true 
													) 
											),
											array (
													'$match' => array (
															'$and' => $and_merged_array
													) 
											) 
									];
									$response = $this->mongo_db->command ( array (
											'aggregate' => $this->screening_app_col,
											'pipeline' => $pipeline 
									) );
									
									$query = 0;
									if($response['ok']){
										//$query = count($response["result"]);
										if(count($response["result"]) == 0 ){
											return "No document found";
											//exit();
										}else{
											return "Only unique id document";
											
										}
									}
							}
							else
							{
								return "Only personal info document";
								
							}
						}
				}else{
					return "Full document";
					
				}
			}
		
	}*/

	function unique_id_check($unique_id_check_zipfile)
	{
		$and_merged_array = array ();
		
		$or_merged_array = array ();
		
		$unique_id = array (
				"doc_data.widget_data.page1.Personal Information.Hospital Unique ID" => $unique_id_check_zipfile
				);
		$page3_exists = array (
						"doc_data.widget_data.page3.Physical Exam" => array (
							'$exists' => true 
							) 
					);
			$page7_exists_right = array (
					"doc_data.widget_data.page7.Colour Blindness.Right" => array (
							'$nin' => array(
								"",
								" "
							) 
					) 
			);			
			$page7_exists_eye_lids = array (
					"doc_data.widget_data.page7.Colour Blindness.Eye Lids" => array (
							'$nin' => array(
							 "",
							 " "
							)
					) 
			);
			$page7_exists_Conjunctiva = array (
					"doc_data.widget_data.page7.Colour Blindness.Conjunctiva" => array (
							'$nin' => array(
								"",
								" "
							) 
					) 
			);
			$page7_exists_Cornea = array (
					"doc_data.widget_data.page7.Colour Blindness.Cornea" => array (
							'$nin' => array(
								"",
								" "
							) 
					) 
			);
			$page7_exists_Pupil = array (
					"doc_data.widget_data.page7.Colour Blindness.Pupil" => array (
							'$nin' => array(
								"",
								" "
							) 
					) 
			);
			$page7_exists_Complaints = array (
					"doc_data.widget_data.page7.Colour Blindness.Complaints" => array (
							'$nin' => array(
								"",
								" "
							) 
					) 
			);
			$page7_exists_Wearing = array (
					"doc_data.widget_data.page7.Colour Blindness.Wearing Spectacles" => array (
							'$nin' => array(
								"",
								" "
							) 
					) 
			);
			$page7_exists_Subjective = array (
					"doc_data.widget_data.page7.Colour Blindness.Subjective Refraction" => array (
							'$nin' => array(
								"",
								" "
							) 
					) 
			);

			$page7_exists_Ocular = array (
					"doc_data.widget_data.page7.Colour Blindness.Ocular Diagnosis" => array (
							'$nin' => array(
								"",
								" "
							) 
					) 
			);
			$page7_ocular_exist = array (
					"doc_data.widget_data.page7.Colour Blindness.Ocular Diagnosis" => array (
							'$exists' => TRUE
					) 
			);
			

		array_push($and_merged_array, $unique_id);
		array_push($and_merged_array, $page3_exists);
		array_push($and_merged_array, $page7_ocular_exist);
		
		array_push($or_merged_array, $page7_exists_right);
		array_push($or_merged_array, $page7_exists_eye_lids);
		array_push($or_merged_array, $page7_exists_Conjunctiva);
		array_push($or_merged_array, $page7_exists_Cornea);
		array_push($or_merged_array, $page7_exists_Pupil);
		array_push($or_merged_array, $page7_exists_Complaints);
		array_push($or_merged_array, $page7_exists_Wearing);
		array_push($or_merged_array, $page7_exists_Subjective);
		array_push($or_merged_array, $page7_exists_Ocular);
		
		$result = [ ];
		$pipeline = [ 
				array (
						'$project' => array (
								"doc_data.widget_data" => true,
								"history" => true 
						) 
				),
				array (
						'$match' => array (
								'$and' => $and_merged_array,
								'$or' => $or_merged_array
						) 
				) 
		];
		$response = $this->mongo_db->command ( array (
				'aggregate' => $this->screening_app_col,
				'pipeline' => $pipeline 
		) );	
		
		if($response['ok'])
		{
			
			if(count($response["result"]) == 0 )
			{
				$and_merged_array = array ();
						$or_merged_array = array ();
						$page3_exists = array (
							"doc_data.widget_data.page3.Physical Exam" => array (
								'$exists' => true 
								) 
						);
						$page9_exists_oral = array (
								"doc_data.widget_data.page9.Dental Check-up.Oral Hygiene" => array (
										'$nin' => array(
											"",
											" "
										)
								) 
						);

						$page9_exists_carious = array (
								"doc_data.widget_data.page9.Dental Check-up.Carious Teeth" => array (
										'$nin' => array(
											"",
											" "
										)
								) 
						);
						$page9_exists_flourosis = array (
								"doc_data.widget_data.page9.Dental Check-up.Flourosis" => array (
										'$nin' => array(
											"",
											" "
										)
								) 
						);

						$page9_exists_Orthodontic = array (
								"doc_data.widget_data.page9.Dental Check-up.Orthodontic" => array (
										'$nin' => array(
											"",
											 " "
										)
								) 
						);
						$page9_exists_Indication = array (
								"doc_data.widget_data.page9.Dental Check-up.Indication" => array (
										'$nin' => array(
											"",
											" "
										)
								) 
						);
						$page9_exists_root = array (
								"doc_data.widget_data.page9.Dental Check-up.Root Canal Treatment" => array (
										'$nin' => array(
											"",
											" "
										)
								) 
						);
						$page9_exists_CROWNS = array (
								"doc_data.widget_data.page9.Dental Check-up.CROWNS" => array (
										'$nin' => array(
											"",
											" "
										)
								) 
						);
						$page9_exists_Fixed = array (
								"doc_data.widget_data.page9.Dental Check-up.Fixed" => array (
										'$nin' => array(
											'',
											" "
										)
								) 
						);
						$page9_exists_Curettage = array (
								"doc_data.widget_data.page9.Dental Check-up.Curettage" => array (
										'$nin' => array(
											'',
											" "
										)
								) 
						);
						
						$page9_Curettage_exists = array (
								"doc_data.widget_data.page9.Dental Check-up.Curettage" => array (
										'$exists' => true
								) 
						);

					array_push($and_merged_array, $unique_id);
					array_push($and_merged_array, $page3_exists);
					array_push($and_merged_array, $page9_Curettage_exists);

					array_push($or_merged_array, $page9_exists_oral);
					array_push($or_merged_array, $page9_exists_carious);
					array_push($or_merged_array, $page9_exists_flourosis);
					array_push($or_merged_array, $page9_exists_Orthodontic);
					array_push($or_merged_array, $page9_exists_Indication);
					array_push($or_merged_array, $page9_exists_root);
					array_push($or_merged_array, $page9_exists_CROWNS);
					array_push($or_merged_array, $page9_exists_Fixed);
					array_push($or_merged_array, $page9_exists_Curettage);
						
					$result = [ ];
					$pipeline = [ 
							array (
									'$project' => array (
											"doc_data.widget_data" => true,
											"history" => true 
									) 
							),
							array (
									'$match' => array (
											'$and' => $and_merged_array,
											'$or' => $or_merged_array
									) 
							) 
					];
					$response = $this->mongo_db->command ( array (
							'aggregate' => $this->screening_app_col,
							'pipeline' => $pipeline 
					) );
					//echo print_r($response,true); exit();
					if($response['ok'])
					{
						
						if(count($response["result"]) == 0 )
						{
							$and_merged_array = array ();
		
							$unique_id = array (
									"doc_data.widget_data.page1.Personal Information.Hospital Unique ID" => $unique_id_check_zipfile
									);
									
							$page3_exists = array (
									"doc_data.widget_data.page3.Physical Exam" => array (
											'$exists' => true 
									) 
							);
							$page4_exists = array (
									"doc_data.widget_data.page4.Doctor Check Up" => array (
											'$exists' => true 
									) 
							);
							$page5_exists = array (
									"doc_data.widget_data.page5.Doctor Check Up" => array (
											'$exists' => true 
									) 
							);
							$page6_exists = array (
									"doc_data.widget_data.page6.With Glasses" => array (
											'$exists' => true 
									) 
							);
							$page7_exists = array (
									"doc_data.widget_data.page7.Colour Blindness" => array (
											'$exists' => true 
									) 
							);
							$page8_exists = array (
									"doc_data.widget_data.page8. Auditory Screening" => array (
											'$exists' => true 
									) 
							);
							$page9_exists = array (
									"doc_data.widget_data.page9.Dental Check-up" => array (
											'$exists' => true 
									) 
							);
							
							array_push ( $and_merged_array, $unique_id );
							array_push ( $and_merged_array, $page3_exists );
							array_push ( $and_merged_array, $page4_exists );
							array_push ( $and_merged_array, $page5_exists );
							array_push ( $and_merged_array, $page6_exists );
							array_push ( $and_merged_array, $page7_exists );
							array_push ( $and_merged_array, $page8_exists );
							array_push ( $and_merged_array, $page9_exists );
							
							$result = [ ];
								$pipeline = [ 
										array (
												'$project' => array (
														"doc_data.widget_data" => true,
														"history" => true 
												) 
										),
										array (
												'$match' => array (
														'$and' => $and_merged_array
												) 
										) 
								];
								$response = $this->mongo_db->command ( array (
										'aggregate' => $this->screening_app_col,
										'pipeline' => $pipeline 
								) );
								
								$query = 0;
								if($response['ok']){
									//$query = count($response["result"]);
									if(count($response["result"]) == 0 )
									{
										$and_merged_array = array ();
          
							          $page1_exists = array (
							              "doc_data.widget_data.page1.Personal Information" => array (
							                  '$exists' => true 
							              ) 
							          );
							          $page2_exists = array (
							              "doc_data.widget_data.page2.Personal Information" => array (
							                  '$exists' => true 
							              ) 
							          );
							          
							          array_push ( $and_merged_array, $unique_id );
							          array_push ( $and_merged_array, $page1_exists );
							          array_push ( $and_merged_array, $page2_exists );
							          
							          $result = [ ];
							            $pipeline = [ 
							                array (
							                    '$project' => array (
							                        "doc_data.widget_data" => true,
							                        "history" => true 
							                    ) 
							                ),
							                array (
							                    '$match' => array (
							                        '$and' => $and_merged_array
							                    ) 
							                ) 
							            ];
							            $response = $this->mongo_db->command ( array (
							                'aggregate' => $this->screening_app_col,
							                'pipeline' => $pipeline 
							            ) );
							            
							            $query = 0;
							            if($response['ok'])
							            {
							              //$query = count($response["result"]);
							              if(count($response["result"]) == 0 ){

							              	$and_merged_array = array ();
				                
							                array_push ( $and_merged_array, $unique_id );
							                
							                $result = [ ];
							                  $pipeline = [ 
							                      array (
							                          '$project' => array (
							                              "doc_data.widget_data" => true,
							                              "history" => true 
							                          ) 
							                      ),
							                      array (
							                          '$match' => array (
							                              '$and' => $and_merged_array
							                          ) 
							                      ) 
							                  ];
							                  $response = $this->mongo_db->command ( array (
							                      'aggregate' => $this->screening_app_col,
							                      'pipeline' => $pipeline 
							                  ) );
							                  
							                  $query = 0;
							                  if($response['ok']){
							                    //$query = count($response["result"]);
							                    if(count($response["result"]) == 0 ){
							                      return "No document found";
							                      //exit();
							                    }else{
							                      return "Only unique id document";						                      
							                    }
							                  }
							              }else
							              {
							              	return "Only personal info document";
							              }
							          	}
									}else
									{
										return "Full document";
									}
								}
						}else
						{
							return "Dental Screened Exists";
						}
					}

			}else
			{
				return "Eye Screened Exists";
			}
		}	

	}

	public function get_screening_reports_ehr_uid($uid) 
	{
			$query = $this->mongo_db->select ( array (
					'doc_data',
					'history' 
			) )->whereLike( "doc_data.widget_data.page1.Personal Information.Hospital Unique ID", $uid )->get ( $this->screening_app_col );
			$result ['screening'] = $query;
			//$result ['request']   = false;
			return $result;
			
	}

	public function get_screening_eye_reports_ehr_uid($uid) 
	{
			$query = $this->mongo_db->select ( array (
					'doc_data',
					'history' 
			) )->whereLike( "doc_data.widget_data.page1.Personal Information.Hospital Unique ID", $uid )->get ( $this->screening_app_col );
			$result ['screening'] = $query;
			//$result ['request']   = false;
			
			return $result;
			
	}

	public function get_screening_dental_reports_ehr_uid($uid) 
	{
			$query = $this->mongo_db->select ( array (
					'doc_data',
					'history' 
			) )->whereLike( "doc_data.widget_data.page1.Personal Information.Hospital Unique ID", $uid )->get ( $this->screening_app_col );
			$result ['screening'] = $query;
			//$result ['request']   = false;
			return $result;
			
	}

	public function update_screening_details($_id,$data_user)
	{
		
		$this->mongo_db->where(array('_id' => new MongoID($_id)))->set($data_user)->update( $this->screening_app_col );
	
	}

	//Uploading zipfiles
	//author Naresh
	public function insert_screening_details($data_user){
		
		$query = $this->mongo_db->insert($this->screening_app_col,$data_user);
		
		if($query)
		{
			return TRUE;
		}
		else
		{
			return FALSE;
		}
   }
	
	public function get_reports_for_extend($uid) {
		
		//$query_request = $this->mongo_db->orderBy(array("history.0.time"=>-1))->where ( array("doc_data.widget_data.page1.Student Info.Unique ID" => strtoupper($uid), ) )->get ( $this->request_app_col );
		//return $result;
		
		$and_merged_array = array ();
					
		$last_stage_exists = array (
				"history.last_stage" => array (
						'$exists' => true 
				) 
		);
		$uid = array (
				"doc_data.widget_data.page1.Student Info.Unique ID" => strtoupper($uid)
		);
		
		array_push ( $and_merged_array, $uid );
		array_push ( $and_merged_array, $last_stage_exists );
		
		$result = [ ];
			$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"doc_properties" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array (
									'$and' => $and_merged_array
							) 
					) 
			];
			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->request_app_col,
					'pipeline' => $pipeline 
			) );
			$query = [];
			if($response['ok']){
				$query['docs_requests'] = $response["result"];
				return $query;
			}else{
				return $query;
			}
	}

	/*public function get_initaite_requests_count($today_date)
	{
		$document = $this->mongo_db->select(array('history'))->whereLike("history.0.time" , $today_date)->get($this->request_app_col);
		
		if(count($document)>0){
			
			return $document;
		}
		
	}*/


	public function get_total_issues_requests_count($date)
	{
		//$date = "2018-08-16";
		$counts['all_request_count'] = $this->mongo_db->whereLike('history.0.time',$date)->count($this->request_app_col_static_html);
		$counts['normal_request_count'] = $this->mongo_db->whereLike('history.0.time',$date)->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->count($this->request_app_col_static_html);

		$counts['emergency_request_count'] = $this->mongo_db->whereLike('history.0.time',$date)->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->count($this->request_app_col_static_html);
		$counts['chronic_request_count'] = $this->mongo_db->whereLike('history.0.time',$date)->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->count($this->request_app_col_static_html);

		return $counts;
	}

	/*public function get_initaite_requests_count($today_date)
	{
		$document = $this->mongo_db->select(array('history'))->whereLike("history.0.time" , $today_date)->get($this->request_app_col_static_html);
		
		if(count($document)>0){
			
			return $document;
		}
		
		
	}*/
	
	/*public function get_doctors_response_count($today_date)
	{
		$document = $this->mongo_db->select(array('history'))->whereLike("history.1.time" , $today_date)->get($this->request_app_col);
		
		return $document;*
		$document = $this->mongo_db->select(array('history'))->whereLike("history.1.time" , $today_date)->get($this->request_app_col_static_html);
		
		return $document;
	}*/
  
	
	// BMI PIE REPORT

	/*public function drill_down_bmi_to_district($type,$month,$district = "All", $school_name = "All")
	{
		ini_set('memory_limit', "2G");
		switch($type){
			case "OBESE" :
			ini_set ( 'memory_limit', '1G' );
				$query = $this->mongo_db->select ( array (
						"doc_data.widget_data" 
				) )->whereLike ( 'doc_data.widget_data.', $month )->get ( $this->absent_app_col );
				
				$doc_query = array ();
				if ($school_name == "All") 
				{
					if ($dt_name != "All") 
					{
						foreach ( $query as $doc ) 
						{
							if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['District'] ) == strtolower ( $dt_name )) 
							{
								array_push ( $doc_query, $doc );
							}
						}
						$query = $doc_query;
					} 
					else 
					{
						
					}
				} 
				else 
				{
					foreach ( $query as $doc ) 
					{
						
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['page1'] ['Attendence Details'] ['Select School'] ) == strtolower ( $school_name )) 
						{
							array_push ( $doc_query, $doc );
						}
					}
					$query = $doc_query;
				}
				
				return $this->get_drilling_attendance_districts_prepare_pie_array ($query,"Absent");
				break;
		}	
	}*/
	public function get_bmi_report_model($current_month,$district_name, $school_name,$student_type = false,$student_age = false) {
		
		if ($current_month) {
			//$selected_month = "2018-10";
			$selected_month = $current_month;
		} else {
			//$selected_month = "2018-10";
			$selected_month = $this->selected_month;
		}
		
		$requests = [ ];
		$request_under_weight = array();
		$request_normal_weight = array();
		$request_over_weight = array();
		$request_obese= array();
		
		if($school_name == "select" && $district_name == "select")
		{
			$query = array('doc_data.widget_data.page1.Student Details.BMI_values.month' => array('$regex' => $selected_month.'-*'),'doc_data.widget_data.page1.Student Details.Gender' => ($student_type) ? $student_type : array('$exists' => true),'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));
			$documents = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where($query)->get('healthcare2017617145744625');
			foreach ($documents as  $value) 
			{
				$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
				if($end_array['bmi'] < 18.50)
				{
					array_push($request_under_weight, $value);
				}else if($end_array['bmi'] >= 18.50 && $end_array['bmi'] <= 24.99 )
				{
					array_push($request_normal_weight, $value);
				}else if($end_array['bmi'] >= 25.00 && $end_array['bmi'] <= 29.99 )
				{
					array_push($request_over_weight, $value);
				}else if($end_array['bmi'] >= 30 )
				{
					array_push($request_obese, $value);
				}
			}
				$request ['label'] = 'UNDER WEIGHT';
				$request ['value'] = count($request_under_weight);
				array_push ( $requests, $request );
				$request ['label'] = 'NORMAL WEIGHT';
				$request ['value'] = count($request_normal_weight);
				array_push ( $requests, $request );
				$request ['label'] = 'OVER WEIGHT';
				$request ['value'] = count($request_over_weight);
				array_push ( $requests, $request );
				$request ['label'] = 'OBESE';
				$request ['value'] = count($request_obese);
				array_push ( $requests, $request );

				return $requests;
				
		}else if ( $school_name != "All" && $district_name != "select") 
		{
			$query = array('doc_data.widget_data.page1.Student Details.BMI_values.month' => array('$regex' => $selected_month.'-*'),'doc_data.widget_data.page1.Student Details.Gender' => ($student_type) ? $student_type : array('$exists' => true),'doc_data.widget_data.school_details.School Name' => $school_name,'doc_data.widget_data.school_details.District' => $district_name,
		'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));
			$documents = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where($query)->get('healthcare2017617145744625');
			foreach ($documents as  $value) 
			{
				$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
				if($end_array['bmi'] < 18.50)
				{
					array_push($request_under_weight, $value);
				}else if($end_array['bmi'] >= 18.50 && $end_array['bmi'] <= 24.99 )
				{
					array_push($request_normal_weight, $value);
				}else if($end_array['bmi'] >= 25.00 && $end_array['bmi'] <= 29.99 )
				{
					array_push($request_over_weight, $value);
				}else if($end_array['bmi'] >= 30 )
				{
					array_push($request_obese, $value);
				}
			}
				$request ['label'] = 'UNDER WEIGHT';
				$request ['value'] = count($request_under_weight);
				array_push ( $requests, $request );
				$request ['label'] = 'NORMAL WEIGHT';
				$request ['value'] = count($request_normal_weight);
				array_push ( $requests, $request );
				$request ['label'] = 'OVER WEIGHT';
				$request ['value'] = count($request_over_weight);
				array_push ( $requests, $request );
				$request ['label'] = 'OBESE';
				$request ['value'] = count($request_obese);
				array_push ( $requests, $request );

				return $requests;
		}else if ($school_name == "All") {
			if ($district_name != "select")
			 {
				$query = array('doc_data.widget_data.page1.Student Details.BMI_values.month' => array('$regex' => $selected_month),'doc_data.widget_data.page1.Student Details.Gender' => (!empty($student_type) && isset($student_type)) ? $student_type : array('$exists' => true),'doc_data.widget_data.school_details.District' => $district_name,
			'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));
				//echo print_r($query,true);echo print_r($student_age,true);exit();
				$documents = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where($query)->get('healthcare2017617145744625');
				foreach ($documents as  $value) 
				{
					$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
					if($end_array['bmi'] < 18.50)
					{
						array_push($request_under_weight, $value);
					}else if($end_array['bmi'] >= 18.50 && $end_array['bmi'] <= 24.99 )
					{
						array_push($request_normal_weight, $value);
					}else if($end_array['bmi'] >= 25.00 && $end_array['bmi'] <= 29.99 )
					{
						array_push($request_over_weight, $value);
					}else if($end_array['bmi'] >= 30 )
					{
						array_push($request_obese, $value);
					}
				}
					$request ['label'] = 'UNDER WEIGHT';
					$request ['value'] = count($request_under_weight);
					array_push ( $requests, $request );
					$request ['label'] = 'NORMAL WEIGHT';
					$request ['value'] = count($request_normal_weight);
					array_push ( $requests, $request );
					$request ['label'] = 'OVER WEIGHT';
					$request ['value'] = count($request_over_weight);
					array_push ( $requests, $request );
					$request ['label'] = 'OBESE';
					$request ['value'] = count($request_obese);
					array_push ( $requests, $request );

					return $requests;
				
			} else {
			}
		} 
		return $requests;
		
	}

	// hb PIE REPORT
	public function get_hb_report_model($current_month,$district_name, $school_name,$student_type = false,$student_age = false) {
		
		if ($current_month){
			$selected_month = $current_month;
			//$selected_month = "2018-10";
		}else {
			$selected_month = $this->selected_month;
			//$selected_month = "2018-10";
		}

		$requests = [ ];
		$requests_array = [ ];
		$requests_array_normal = [ ];
		$requests_array_moderate = [ ];
		$requests_array_mild = [ ];
		
		if($school_name == "select" && $district_name == "select")
		{
			$query = array('doc_data.widget_data.page1.Student Details.HB_values.month' => array('$regex' => $selected_month),
				'doc_data.widget_data.page1.Student Details.Gender' => ($student_type) ? $student_type : array('$exists' => true),
				'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));
		//`	$documents = $this->mongo_db->select(array('doc_data.widget_data'))->where($query)->get($this->hb_app_col);
			$documents = $this->mongo_db->select(array('doc_data.widget_data'))->where($query)->get($this->hb_app_col);
			
			foreach ($documents as $value) 
			{
				$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['HB_values']);				
				
				if($end_array['hb'] <= 8.0)
				{
					array_push($requests_array, $value);
				}else if($end_array['hb'] >= 12.0 && $end_array['hb'] <= 18.0)
				{
					array_push($requests_array_normal, $value);			
				}else if($end_array['hb'] >= 8.1 && $end_array['hb'] <= 10.0)
				{
					array_push($requests_array_moderate, $value);
				}else if($end_array['hb'] >= 10.1 && $end_array['hb'] < 12.0)
				{
					array_push($requests_array_mild, $value);
				}

			}
			
			$request ['label'] = 'SEVERE';
			$request ['value'] = count($requests_array);
			array_push ( $requests, $request );
			$request ['label'] = 'NORMAL';
			$request ['value'] = count($requests_array_normal);
			array_push ( $requests, $request );
			$request ['label'] = 'MODERATE';
			$request ['value'] = count($requests_array_moderate);
			array_push ( $requests, $request );
			$request ['label'] = 'MILD';
			$request ['value'] = count($requests_array_mild);
			array_push ( $requests, $request );

			return $requests;
			
			/*
			$query_normal = array('doc_data.widget_data.page1.Student Details.HB_values.hb' => array('$gte' => 12.0 ,'$lte' => 18.0),'doc_data.widget_data.page1.Student Details.HB_values.month' => array('$gte' => $selected_month));
			$normal_hb = $this->mongo_db->where($query_normal)->get($this->hb_app_col);
			$request ['label'] = 'NORMAL';
			$request ['value'] = count($normal_hb);
			array_push ( $requests, $request );

			$query_moderate = array('doc_data.widget_data.page1.Student Details.HB_values.hb' => array('$gte' => 8.1 ,'$lte' => 10.0),'doc_data.widget_data.page1.Student Details.HB_values.month' => array('$gte' => $selected_month));
			
			$moderate = $this->mongo_db->where($query_moderate)->get($this->hb_app_col);
			$request ['label'] = 'MODERATE';
			$request ['value'] = count($moderate);
			array_push ( $requests, $request );
			
			$query_mild = array('doc_data.widget_data.page1.Student Details.HB_values.hb' => array('$gte' => 10.1 ,'$lte' => 12.0),'doc_data.widget_data.page1.Student Details.HB_values.month' => array('$gte' => $selected_month));
			$mild = $this->mongo_db->where($query_mild)->get($this->hb_app_col);
			$request ['label'] = 'MILD';
			$request ['value'] = count($mild);
			array_push ( $requests, $request );*/
		}else if ( $school_name != "All" && $district_name != "select") 
		{
			
			$query = array('doc_data.widget_data.school_details.School Name' => $school_name,
				'doc_data.widget_data.school_details.District' => $district_name,
				'doc_data.widget_data.page1.Student Details.HB_values.month' => array('$regex' => $selected_month."-_*"),
				'doc_data.widget_data.page1.Student Details.Gender' => (!empty($student_type) && isset($student_type)) ? $student_type : array('$exists' => true),
				'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));
			$documents = $this->mongo_db->select(array('doc_data.widget_data'))->where($query)->get($this->hb_app_col);
						
			foreach ($documents as $value) 
			{
				$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['HB_values']);				
				
				if($end_array['hb'] <= 8.0)
				{
					array_push($requests_array, $value);
				}else if($end_array['hb'] >= 12.0 && $end_array['hb'] <= 18.0)
				{
					array_push($requests_array_normal, $value);			
				}else if($end_array['hb'] >= 8.1 && $end_array['hb'] <= 10.0)
				{
					array_push($requests_array_moderate, $value);
				}else if($end_array['hb'] >= 10.1 && $end_array['hb'] < 12.0)
				{
					array_push($requests_array_mild, $value);
				}

			}
			$request ['label'] = 'SEVERE';
			$request ['value'] = count($requests_array);
			array_push ( $requests, $request );
			$request ['label'] = 'NORMAL';
			$request ['value'] = count($requests_array_normal);
			array_push ( $requests, $request );
			$request ['label'] = 'MODERATE';
			$request ['value'] = count($requests_array_moderate);
			array_push ( $requests, $request );
			$request ['label'] = 'MILD';
			$request ['value'] = count($requests_array_mild);
			array_push ( $requests, $request );
						
			return $requests;
			
			/*$query = array('doc_data.widget_data.school_details.School Name' => $school_name,
				'doc_data.widget_data.page1.Student Details.HB_values.hb' => array('$lt' => 8.0),
				'doc_data.widget_data.page1.Student Details.HB_values.month' => array('$gte' => $selected_month));
			$sevier = $this->mongo_db->where($query)->get($this->hb_app_col);
			$request ['label'] = 'SEVERE';
			$request ['value'] = count($sevier);
			array_push ( $requests, $request );
			
			$query_normal = array('doc_data.widget_data.school_details.School Name' => $school_name,
				'doc_data.widget_data.page1.Student Details.HB_values.hb' => array('$gte' => 12.0 ,'$lte' => 18.0),
				'doc_data.widget_data.page1.Student Details.HB_values.month' => array('$gte' => $selected_month));
			$normal_hb = $this->mongo_db->where($query_normal)->get($this->hb_app_col);
			$request ['label'] = 'NORMAL';
			$request ['value'] = count($normal_hb);
			array_push ( $requests, $request );

			$query_moderate = array('doc_data.widget_data.school_details.School Name' => $school_name,
				'doc_data.widget_data.page1.Student Details.HB_values.hb' => array('$gte' => 8.1 ,'$lte' => 10.0),
				'doc_data.widget_data.page1.Student Details.HB_values.month' => array('$gte' => $selected_month));
			
			$moderate = $this->mongo_db->where($query_moderate)->get($this->hb_app_col);
			$request ['label'] = 'MODERATE';
			$request ['value'] = count($moderate);
			array_push ( $requests, $request );
			
			$query_mild = array('doc_data.widget_data.school_details.School Name' => $school_name,
				'doc_data.widget_data.page1.Student Details.HB_values.hb' => array('$gte' => 10.1 ,'$lte' => 12.0),
				'doc_data.widget_data.page1.Student Details.HB_values.month' => array('$gte' => $selected_month));
			$mild = $this->mongo_db->where($query_mild)->get($this->hb_app_col);
			$request ['label'] = 'MILD';
			$request ['value'] = count($mild);
			array_push ( $requests, $request );*/
				
		}else if ($school_name == "All") {
			if ($district_name != "select") {	

				$query = array('doc_data.widget_data.school_details.District' => $district_name,
				'doc_data.widget_data.page1.Student Details.HB_values.month' => array('$regex' => $selected_month),
				'doc_data.widget_data.page1.Student Details.Gender' => (!empty($student_type) && isset($student_type)) ? $student_type : array('$exists' => true),
				'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));
			$documents = $this->mongo_db->select(array('doc_data.widget_data'))->where($query)->get($this->hb_app_col);
			
			foreach ($documents as $value) 
			{
				$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['HB_values']);				
				
				if($end_array['hb'] <= 8.0)
				{
					array_push($requests_array, $value);
				}else if($end_array['hb'] >= 12.0 && $end_array['hb'] <= 18.0)
				{
					array_push($requests_array_normal, $value);			
				}else if($end_array['hb'] >= 8.1 && $end_array['hb'] <= 10.0)
				{
					array_push($requests_array_moderate, $value);
				}else if($end_array['hb'] >= 10.1 && $end_array['hb'] < 12.0)
				{
					array_push($requests_array_mild, $value);
				}

			}
			$request ['label'] = 'SEVERE';
			$request ['value'] = count($requests_array);
			array_push ( $requests, $request );
			$request ['label'] = 'NORMAL';
			$request ['value'] = count($requests_array_normal);
			array_push ( $requests, $request );
			$request ['label'] = 'MODERATE';
			$request ['value'] = count($requests_array_moderate);
			array_push ( $requests, $request );
			$request ['label'] = 'MILD';
			$request ['value'] = count($requests_array_mild);
			array_push ( $requests, $request );
						
			return $requests;

			/*$query = array('doc_data.widget_data.school_details.District' => $district_name,
				'doc_data.widget_data.page1.Student Details.HB_values.hb' => array('$lt' => 8.0),
				'doc_data.widget_data.page1.Student Details.HB_values.month' => array('$gte' => $selected_month));
			$sevier = $this->mongo_db->where($query)->get($this->hb_app_col);
			$request ['label'] = 'SEVERE';
			$request ['value'] = count($sevier);
			array_push ( $requests, $request );
			
			$query_normal = array('doc_data.widget_data.school_details.District' => $district_name,
				'doc_data.widget_data.page1.Student Details.HB_values.hb' => array('$gte' => 12.0 ,'$lte' => 18.0),
				'doc_data.widget_data.page1.Student Details.HB_values.month' => array('$gte' => $selected_month));
			$normal_hb = $this->mongo_db->where($query_normal)->get($this->hb_app_col);
			$request ['label'] = 'NORMAL';
			$request ['value'] = count($normal_hb);
			array_push ( $requests, $request );

			$query_moderate = array('doc_data.widget_data.school_details.District' => $district_name,
				'doc_data.widget_data.page1.Student Details.HB_values.hb' => array('$gte' => 8.1 ,'$lte' => 10.0),
				'doc_data.widget_data.page1.Student Details.HB_values.month' => array('$gte' => $selected_month));
			
			$moderate = $this->mongo_db->where($query_moderate)->get($this->hb_app_col);
			$request ['label'] = 'MODERATE';
			$request ['value'] = count($moderate);
			array_push ( $requests, $request );
			
			$query_mild = array('doc_data.widget_data.school_details.District' => $district_name,
				'doc_data.widget_data.page1.Student Details.HB_values.hb' => array('$gte' => 10.1 ,'$lte' => 12.0),
				'doc_data.widget_data.page1.Student Details.HB_values.month' => array('$gte' => $selected_month));
			$mild = $this->mongo_db->where($query_mild)->get($this->hb_app_col);
			$request ['label'] = 'MILD';
			$request ['value'] = count($mild);
			array_push ( $requests, $request );*/
				
			} 
		} 
		//echo print_r($requests,TRUE);exit();
		return $requests;
		
	}
	
public function get_drilling_bmi_students_prepare_pie_array($query, $school_name, $type)
	{
		$search_result = [ ];
		$count = 0;
		
		 if ($query) {
			
			$request = [ ];
			$UI_arr = [ ];
			foreach ( $query as $doc ) {
				
				
				switch ($type) {
					case "UNDER WEIGHT" :
					//log_message('error','uniqid====================19082'.print_r(trim($doc ['doc_data'] ['widget_data'] ['page1'] ['Student Details'] ['Hospital Unique ID']),TRUE));
						$bmi_ids_arr = explode ( " ", $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Details'] ['Hospital Unique ID']);
					//log_message('error','bmi_ids_arrrrrrrrrrrrrrrr=====19084'.print_r($bmi_ids_arr,TRUE));
						$UI_arr = array_merge ( $UI_arr, $bmi_ids_arr );
						
						break;
					case "NORMAL WEIGHT" :
						
						$bmi_ids_arr = explode ( " ", $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Details'] ['Hospital Unique ID'] );
					
						$UI_arr = array_merge ( $UI_arr, $bmi_ids_arr );
						
						break;
					
					case "OVER WEIGHT" :
						
						$bmi_ids_arr = explode ( " ", $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Details'] ['Hospital Unique ID'] );
						
						$UI_arr = array_merge ( $UI_arr, $bmi_ids_arr );
						
						break;
						
					case "OBESE" :
						
						$bmi_ids_arr = explode ( " ", $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Details'] ['Hospital Unique ID'] );
						
						$UI_arr = array_merge ( $UI_arr, $bmi_ids_arr );
						
						break;
						
					default :
					break;
				}
		 }
		
			return $UI_arr;
		}
	}

	public function get_drilling_hb_students_prepare_pie_array($query, $school_name, $type)
	{
		$search_result = [ ];
		$count = 0;
		
		 if ($query) {
			
			$request = [ ];
			$UI_arr = [ ];
			foreach ( $query as $doc ) {
				
				
				switch ($type) {
					case "SEVERE" :
					
						$hb_ids_arr = explode ( " ", $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Details'] ['Hospital Unique ID'] );
						$UI_arr = array_merge ( $UI_arr, $hb_ids_arr );

						
						break;
					case "NORMAL" :
						
						$hb_ids_arr = explode ( " ", $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Details'] ['Hospital Unique ID'] );
					
						$UI_arr = array_merge ( $UI_arr, $hb_ids_arr );
						
						break;
					
					case "MODERATE" :
						
						$hb_ids_arr = explode ( " ", $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Details'] ['Hospital Unique ID'] );
						
						$UI_arr = array_merge ( $UI_arr, $hb_ids_arr );
						
						break;
						
					case "MILD" :
						
						$hb_ids_arr = explode ( " ", $doc ['doc_data'] ['widget_data'] ['page1'] ['Student Details'] ['Hospital Unique ID'] );
						
						$UI_arr = array_merge ( $UI_arr, $hb_ids_arr );
						
						break;
						
					default :
					break;
				}
		 }
		
			return $UI_arr;
		}
	}

	public function get_drill_down_to_bmi_report($type, $current_month, $district_name, $school_name = "All",$student_type = false,$student_age = false) 
	{
		$current_month = substr($current_month,0,-3);

		if ($current_month) {
			$selected_month = $current_month;
		} else {
			$selected_month = $this->selected_month;
		}
		ini_set ( 'memory_limit', '10G' );
		$query = array();
		
		if($district_name == "select" && $school_name == "select")
		{
			
			switch ($type) 
			{
				case "UNDER WEIGHT" :  
					$under_weight = array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi'=>array('$lt' => 18.50),
						'doc_data.widget_data.page1.Student Details.BMI_latest.month' => array('$regex' => $selected_month),'doc_data.widget_data.page1.Student Details.Gender' => ($student_type)?$student_type:array('$exists' => true),'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));

					$docs = $this->mongo_db->select ( array (
							"doc_data" 
					) )->where($under_weight)->get ( $this->bmi_app_col );		

					/*foreach ($docs as $value) 
					{
						$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
						if($end_array['bmi'] < 18.50)
						{
							array_push($query, $value);
						}
					}*/								
					
					return $this->get_drilling_bmi_students_prepare_pie_array ( $docs, $school_name, $type );
					break;
					
				case "NORMAL WEIGHT" :
				ini_set ( 'memory_limit', '10G' );
				$normal_weight = array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi'=>array('$gte' => 18.50,'$lte' => 24.99),
						'doc_data.widget_data.page1.Student Details.BMI_latest.month' => array('$regex' => $selected_month),'doc_data.widget_data.page1.Student Details.Gender' => ($student_type)?$student_type:array('$exists' => true),'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));
					$docs = $this->mongo_db->select ( array (
							"doc_data" 
					) )->where($normal_weight)->get ( $this->bmi_app_col );	

					/*foreach ($docs as $value) 
					{
						$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
						if($end_array['bmi'] >= 18.50 && $end_array['bmi'] <= 24.99)
						{
							array_push($query, $value);
						}
					}*/					
					
					return $this->get_drilling_bmi_students_prepare_pie_array ( $docs, $school_name, $type );
					break;
				
				case "OVER WEIGHT" :
				ini_set ( 'memory_limit', '10G' );
				
					$over_weight = array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi'=>array('$gte' => 25.00,'$lte' => 29.99),
						'doc_data.widget_data.page1.Student Details.BMI_latest.month' => array('$regex' => $selected_month),'doc_data.widget_data.page1.Student Details.Gender' => ($student_type)?$student_type:array('$exists' => true),'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));
					$docs = $this->mongo_db->select ( array (
							"doc_data" 
					) )->where($over_weight)->get ( $this->bmi_app_col );
					/*foreach ($docs as $value) 
					{
						$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
						if($end_array['bmi'] >= 25.00 && $end_array['bmi'] <= 29.99)
						{
							array_push($query, $value);
						}
					}*/	
					
					return $this->get_drilling_bmi_students_prepare_pie_array ( $docs, $school_name, $type );
					break;
					
				case "OBESE" :
				ini_set ( 'memory_limit', '10G' );
				
				$obese_weight = array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi'=>array('$gte' => 30.00),
						'doc_data.widget_data.page1.Student Details.BMI_latest.month' => array('$regex' => $selected_month),'doc_data.widget_data.page1.Student Details.Gender' => ($student_type)?$student_type:array('$exists' => true),'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));

					$docs = $this->mongo_db->select ( array (
							"doc_data" 
					) )->where($obese_weight)->get ( $this->bmi_app_col );

					/*foreach ($docs as $value) 
					{
						$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
						if($end_array['bmi'] >= 30)
						{
							array_push($query, $value);
						}
					}*/	
					
					return $this->get_drilling_bmi_students_prepare_pie_array ( $docs, $school_name, $type );
					break;
				
				default :
					;
					break;
			}
		}else
		{
			switch ($type) 
			{
				case "UNDER WEIGHT" :
					$under_weight = array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi'=>array('$lt' => 18.50),
						'doc_data.widget_data.page1.Student Details.BMI_latest.month' => array('$regex' => $selected_month),
					'doc_data.widget_data.page1.Student Details.Gender' => ($student_type)?$student_type:array('$exists' => true),'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));

					$docs = $this->mongo_db->select ( array (
							"doc_data" 
					) )->where($under_weight)->get ( $this->bmi_app_col );

					/*foreach ($docs as $value) 
					{
						$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
						if($end_array['bmi'] < 18.50)
						{
							array_push($query, $value);
						}
					}*/	
					
					$doc_query = array ();
					if ($school_name == "All") {
						if ($district_name != "select") {
							foreach ( $query as $doc ) {
								if (strtolower ( $doc ['doc_data']['widget_data']['school_details'] ['District'] ) == strtolower ( $district_name )) {
									array_push ( $doc_query, $doc );
								}
							}
							$query = $doc_query;
						} else {
						}
					} else {
						foreach ( $query as $doc ) {
							
							if (strtolower ( $doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'] ) == strtolower ( $school_name )) {
								array_push ( $doc_query, $doc );
							}
						}
						$query = $doc_query;
						
					}
					
					return $this->get_drilling_bmi_students_prepare_pie_array ( $query, $school_name, $type );
					break;
					
				case "NORMAL WEIGHT" :
				ini_set ( 'memory_limit', '10G' );
				$normal_weight = array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi'=>array('$gte' => 18.50,'$lte' => 24.99),
						'doc_data.widget_data.page1.Student Details.BMI_latest.month' => array('$regex' =>$selected_month),'doc_data.widget_data.page1.Student Details.Gender' => ($student_type)?$student_type:array('$exists' => true),'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));
					$docs = $this->mongo_db->select ( array (
							"doc_data" 
					) )->where($normal_weight)->get ( $this->bmi_app_col );

					/*foreach ($docs as $value) 
					{
						$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
						if($end_array['bmi'] >= 18.50 && $end_array['bmi'] <= 24.99)
						{
							array_push($query, $value);
						}
					}*/						
					
					$doc_query = array ();
					if ($school_name == "All") {
						if ($district_name != "select") {
							foreach ( $query as $doc ) {
								if (strtolower ( $doc ['doc_data'] ['widget_data']['school_details'] ['District'] ) == strtolower ( $district_name )) {
									array_push ( $doc_query, $doc );
								}
							}
							$query = $doc_query;
							
						} else {
							
						}
					} else {
						foreach ( $query as $doc ) {
							
							if (strtolower ( $doc ['doc_data'] ['widget_data']['school_details'] ['School Name'] ) == strtolower ( $school_name )) {
								array_push ( $doc_query, $doc );
							}
						}
						
						$query = $doc_query;
					}
					
					return $this->get_drilling_bmi_students_prepare_pie_array ( $query, $school_name, $type );
					break;
				
				case "OVER WEIGHT" :
				ini_set ( 'memory_limit', '10G' );
				
					$over_weight = array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi'=>array('$gte' => 25.00,'$lte' => 29.99),
						'doc_data.widget_data.page1.Student Details.BMI_latest.month' => array('$regex' => $selected_month),
					'doc_data.widget_data.page1.Student Details.Gender' => ($student_type)?$student_type:array('$exists' => true),'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));
					$docs = $this->mongo_db->select ( array (
							"doc_data" 
					) )->where($over_weight)->get ( $this->bmi_app_col );
					/*foreach ($docs as $value) 
					{
						$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
						if($end_array['bmi'] >= 25.00 && $end_array['bmi'] <= 29.99)
						{
							array_push($query, $value);
						}
					}*/	
					$doc_query = array ();
					if ($school_name == "All") {
						if ($district_name != "select") {
							foreach ( $query as $doc ) {
								if (strtolower ( $doc ['doc_data']['widget_data'] ['school_details'] ['District'] ) == strtolower ( $district_name )) {
									array_push ( $doc_query, $doc );
								}
							}
							$query = $doc_query;
						} else {
						}
					} else {
						foreach ( $query as $doc ) {
							
							if (strtolower ( $doc ['doc_data'] ['widget_data']['school_details'] ['School Name'] ) == strtolower ( $school_name )) {
								array_push ( $doc_query, $doc );
							}
						}
						$query = $doc_query;
					}
					return $this->get_drilling_bmi_students_prepare_pie_array ( $query, $school_name, $type );
					break;
					
				case "OBESE" :
				ini_set ( 'memory_limit', '10G' );
				
				$obese_weight = array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi'=>array('$gte' => 30.00),
						'doc_data.widget_data.page1.Student Details.BMI_latest.month' => array('$regex' => $selected_month),'doc_data.widget_data.page1.Student Details.Gender' => ($student_type)?$student_type:array('$exists' => true),'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));

					$docs = $this->mongo_db->select ( array (
							"doc_data" 
					) )->where($obese_weight)->get ( $this->bmi_app_col );
					/*foreach ($docs as $value) 
					{
						$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['BMI_values']);
						if($end_array['bmi'] >= 30)
						{
							array_push($query, $value);
						}
					}*/
					$doc_query = array ();
					if ($school_name == "All") {
						if ($district_name != "select") {
							foreach ( $query as $doc ) {
								
								if (strtolower ( $doc ['doc_data']['widget_data']['school_details'] ['District'] ) == strtolower ( $district_name )) {
									array_push ( $doc_query, $doc );
								}
							}
							$query = $doc_query;

						} else {
						}
					} else {
						foreach ( $query as $doc ) {
							
							if (strtolower ( $doc ['doc_data'] ['widget_data']['school_details'] ['School Name'] ) == strtolower ( $school_name )) {
								array_push ( $doc_query, $doc );
							}
						}
						$query = $doc_query;
						
					}

					return $this->get_drilling_bmi_students_prepare_pie_array ( $query, $school_name, $type );
					break;
				
				default :
					;
					break;
			}
		}
		
	}
	
	public function get_drill_down_to_hb_report($type, $current_month, $district_name, $school_name = "All",$student_type = false,$student_age = false) 
	{
		$current_month = substr($current_month,0,-3);

		if ($current_month) {
			$selected_month = $current_month;
		} else {
			$selected_month = $this->selected_month;
		}
		ini_set ( 'memory_limit', '10G' );
		if($district_name == "select" && $school_name == "select")
		{		$query = array();
				switch ($type) {
				case "SEVERE" :
					$query_severe = array('doc_data.widget_data.page1.Student Details.Gender' => ($student_type) ? $student_type : array('$exists' => true),'doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$lte' => 8.0),
						'doc_data.widget_data.page1.Student Details.HB_latest.month' => array('$regex' => $selected_month),
						'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));
					$docs = $this->mongo_db->select ( array ("doc_data") )->where($query_severe)->get ( $this->hb_app_col );

					
					/*foreach ($docs as $value) {
						$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['HB_latest']);
						if($end_array['hb'] <= 8.0)
						{
							array_push($query, $value);
						}
					}*/

					return $this->get_drilling_hb_students_prepare_pie_array ( $docs,$school_name, $type );
					break;
					
				case "NORMAL" :
				ini_set ( 'memory_limit', '10G' );
				$query_normal = array('doc_data.widget_data.page1.Student Details.Gender' => ($student_type) ? $student_type : array('$exists' => true),'doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$gte' => 12.0,'$lte' => 18.0),
						'doc_data.widget_data.page1.Student Details.HB_latest.month' => array('$regex' => $selected_month),
					'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));
					$docs = $this->mongo_db->select ( array ("doc_data") )->where($query_normal)->get ( $this->hb_app_col );		

					/*foreach ($docs as $value) {
						$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
						if($end_array['hb'] >= 12.0 && $end_array['hb'] <= 18.0)
						{
							array_push($query, $value);
						}
					}*/			
										
					return $this->get_drilling_hb_students_prepare_pie_array ( $docs, $school_name, $type );
					break;
				
				case "MODERATE" :
				ini_set ( 'memory_limit', '10G' );
				$query_moderate = array('doc_data.widget_data.page1.Student Details.Gender' => ($student_type) ? $student_type : array('$exists' => true),'doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$gte' => 8.1,'$lte' => 10.0),
						'doc_data.widget_data.page1.Student Details.HB_latest.month' => array('$regex' => $selected_month),
					'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));
				
					$docs = $this->mongo_db->select ( array ("doc_data") )->where($query_moderate)->get ( $this->hb_app_col );	

					/*foreach ($docs as $value) {
						$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
						if($end_array['hb'] >= 8.1 && $end_array['hb'] <= 10.0)
						{
							array_push($query, $value);
						}
					}	*/			
					
					return $this->get_drilling_hb_students_prepare_pie_array ( $docs, $school_name, $type );
					break;
					
				case "MILD" :
				ini_set ( 'memory_limit', '10G' );
				$query_mild = array('doc_data.widget_data.page1.Student Details.Gender' => ($student_type) ? $student_type : array('$exists' => true),'doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$gte' => 10.1,'$lt' => 12.0),
						'doc_data.widget_data.page1.Student Details.HB_latest.month' => array('$regex' => $selected_month),
					'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));
				
					$docs = $this->mongo_db->select ( array ("doc_data") )->where($query_mild)->get ( $this->hb_app_col );	

					/*foreach ($docs as $value) {
						$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
						if($end_array['hb'] >= 10.1 && $end_array['hb'] < 12.0)
						{
							array_push($query, $value);
						}
					}	*/			
					
					return $this->get_drilling_hb_students_prepare_pie_array ( $docs,$school_name,  $type );
					break;
				
				default :
					;
					break;
		}
		}else{
			$query = array();
			switch ($type) {

			case "SEVERE" :
				$query_severe = array('doc_data.widget_data.page1.Student Details.Gender' => ($student_type) ? $student_type : array('$exists' => true),'doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$lte' => 8.0),
					'doc_data.widget_data.page1.Student Details.HB_latest.month' => array('$regex' => $selected_month),
				'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));
				$docs = $this->mongo_db->select ( array ("doc_data") )->where($query_severe)->get ( $this->hb_app_col );	
				/*foreach ($docs as $value) {
						$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
						if($end_array['hb'] <= 8.0)
						{
							array_push($query, $value);
						}
					}*/
									
				$doc_query = array ();
				if ($school_name == "All") {
					if ($district_name != "select") {
						foreach ( $query as $doc ) {
							if(isset($doc ['doc_data'] ['widget_data']['school_details']))
							{
								if (strtolower ( $doc ['doc_data'] ['widget_data'] ['school_details'] ['District'] ) == strtolower ( $district_name )) {
								array_push ( $doc_query, $doc );
								}
							}else{
								if (strtolower ( $doc ['doc_data'] ['school_details'] ['District'] ) == strtolower ( $district_name )) {
								array_push ( $doc_query, $doc );
								}
							}	
						}
						$query = $doc_query;
					} else {
					}
				} else {
					foreach ( $query as $doc ) {
						
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'] ) == strtolower ( $school_name )) {
							array_push ( $doc_query, $doc );
						}							
					}
					$query = $doc_query;
					
				}
				return $this->get_drilling_hb_students_prepare_pie_array ( $query, $school_name, $type );
				break;
				
			case "NORMAL" :
			ini_set ( 'memory_limit', '10G' );
			$query_normal = array('doc_data.widget_data.page1.Student Details.Gender' => ($student_type) ? $student_type : array('$exists' => true),'doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$gte' => 12.0,'$lte' => 18.0),
					'doc_data.widget_data.page1.Student Details.HB_latest.month' => array('$regex' => $selected_month),
				'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));
				$docs = $this->mongo_db->select ( array ("doc_data") )->where($query_normal)->get ( $this->hb_app_col );

				/*foreach ($docs as $value) {
						$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
						if($end_array['hb'] >= 12.0 && $end_array['hb'] <= 18.0)
						{
							array_push($query, $value);
						}
					}*/
				
				$doc_query = array ();
				if ($school_name == "All") {
					if ($district_name != "select") {
						foreach ( $query as $doc ) {

						if(isset($doc ['doc_data'] ['widget_data']['school_details']))
							{
								if (strtolower ( $doc ['doc_data'] ['widget_data'] ['school_details'] ['District'] ) == strtolower ( $district_name )) {
								array_push ( $doc_query, $doc );
								}
							}else{
								if (strtolower ( $doc ['doc_data'] ['school_details'] ['District'] ) == strtolower ( $district_name )) {
								array_push ( $doc_query, $doc );
								}
							}							
							
						}
						$query = $doc_query;
						
					} else {
						
					}
				} else {
					foreach ( $query as $doc ) {
						
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'] ) == strtolower ( $school_name )) {
							array_push ( $doc_query, $doc );
						}
					}
					
					$query = $doc_query;
				}
				
				return $this->get_drilling_hb_students_prepare_pie_array ( $query, $school_name, $type );
				break;
			
			case "MODERATE" :
			ini_set ( 'memory_limit', '10G' );
			$query_moderate = array('doc_data.widget_data.page1.Student Details.Gender' => ($student_type) ? $student_type : array('$exists' => true),'doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$gte' => 8.1,'$lte' => 10.0),
					'doc_data.widget_data.page1.Student Details.HB_latest.month' => array('$regex' => $selected_month),
				'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));
			
				$docs = $this->mongo_db->select ( array ("doc_data") )->where($query_moderate)->get ( $this->hb_app_col );

				/*foreach ($docs as $value) {
						$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
						if($end_array['hb'] >= 8.1 && $end_array['hb'] <= 10.0)
						{
							array_push($query, $value);
						}
					}*/
				
				$doc_query = array ();
				if ($school_name == "All") {
					if ($district_name != "select") {
						foreach ( $query as $doc ) {
							if (strtolower ( $doc ['doc_data'] ['widget_data'] ['school_details'] ['District'] ) == strtolower ( $district_name )) {
								array_push ( $doc_query, $doc );
							}
						}
						$query = $doc_query;
					} else {
					}
				} else {
					foreach ( $query as $doc ) {
						
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'] ) == strtolower ( $school_name )) {
							array_push ( $doc_query, $doc );
						}
					}
					$query = $doc_query;
				}
				return $this->get_drilling_hb_students_prepare_pie_array ( $query, $school_name, $type );
				break;
				
			case "MILD" :
			ini_set ( 'memory_limit', '10G' );
			$query_mild = array('doc_data.widget_data.page1.Student Details.Gender' => ($student_type) ? $student_type : array('$exists' => true),'doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$gte' => 10.1,'$lte' => 12.0),
					'doc_data.widget_data.page1.Student Details.HB_latest.month' => array('$regex' => $selected_month),
				'doc_data.widget_data.page1.Student Details.Age' => (!empty($student_age) && $student_age != "select" && intval($student_age) != 0 ) ? intval($student_age) : array('$exists' => true));
			
				$docs = $this->mongo_db->select ( array ("doc_data") )->where($query_mild)->get ( $this->hb_app_col );

				/*foreach ($docs as $value) {
						$end_array = end($value['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
						if($end_array['hb'] >= 10.1 && $end_array['hb'] < 12.0)
						{
							array_push($query, $value);
						}
					}*/
				
				$doc_query = array ();
				if ($school_name == "All") {
					if ($district_name != "select") {
						foreach ( $query as $doc ) {
							if (strtolower ( $doc ['doc_data'] ['widget_data'] ['school_details'] ['District'] ) == strtolower ( $district_name )) {
								array_push ( $doc_query, $doc );
							}
						}
						$query = $doc_query;
					} else {
					}
				} else {
					foreach ( $query as $doc ) {
						
						if (strtolower ( $doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'] ) == strtolower ( $school_name )) {
							array_push ( $doc_query, $doc );
						}
					}
					$query = $doc_query;
				}
				return $this->get_drilling_hb_students_prepare_pie_array ( $query, $school_name, $type );
				break;
			
			default :
				;
				break;
		}
		}
		
	}

	 
	 public function get_drilling_bmi_students_docs($_id_array) 
	 {
		
		$bmi_request = array ();
		//set_time_limit(0);
		ini_set ( 'memory_limit', '10G' );
		
		if(isset($_id_array) && !empty($_id_array))
		{
			foreach ( $_id_array as $_id ) 
			{
				/*$query = $this->mongo_db->select ( array (
						'doc_data.widget_data.page1',
						'doc_data.widget_data.page2' 
				) )->where( "doc_data.widget_data.page1.Personal Information.Hospital Unique ID", $_id )->get ( $this->screening_app_col );
				
				foreach ( $query as $bmi_docs )
					{
						$unique_id = $bmi_docs ['doc_data'] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'];
						$doc = $this->mongo_db->where ( 'doc_data.widget_data.page1.Student Details.Hospital Unique ID', $unique_id )->get ( $this->bmi_app_col);
						
						if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
								$bmi ['student_info'] = $bmi_docs;
								$bmi ['BMI_values'] = $doc [0] ['doc_data'] ['widget_data'] ['page1'] ['Student Details'] ['BMI_values'];
								//$bmi['bmi_id'] = $doc[0]['_id'];
								
								array_push ( $bmi_request, $bmi );
						}
					}*/

					$doc = $this->mongo_db->where ( 'doc_data.widget_data.page1.Student Details.Hospital Unique ID', $_id )->get ( $this->bmi_app_col);
						
						if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
								/*$bmi ['student_info'] = $bmi_docs;
								$bmi ['BMI_values'] = $doc [0] ['doc_data'] ['widget_data'] ['page1'] ['Student Details'] ['BMI_values'];*/
								//$bmi['bmi_id'] = $doc[0]['_id'];
								
								array_push ( $bmi_request, $doc );
						}
		}
	
		return $bmi_request;
	}
	}

	public function get_drilling_hb_students_docs($_id_array) 
	 {
		
		$hb_request = array ();
		//set_time_limit(0);
		ini_set ( 'memory_limit', '10G' );
		
		if(isset($_id_array) && !empty($_id_array))
		{
			foreach ( $_id_array as $_id ) 
			{							
				$query = $this->mongo_db->select ( array (
						'doc_data.widget_data.page1.Student Details','doc_data.widget_data.school_details'
				) )->where( "doc_data.widget_data.page1.Student Details.Hospital Unique ID", $_id )->get ( $this->hb_app_col );
				
				foreach ( $query as $hb_docs )
					{
						$unique_id = $hb_docs ['doc_data'] ['widget_data'] ['page1'] ['Student Details'] ['Hospital Unique ID'];
						$doc = $this->mongo_db->where ( 'doc_data.widget_data.page1.Student Details.Hospital Unique ID', $unique_id )->get ( $this->hb_app_col);
						
						if (isset ( $doc ) && ! empty ( $doc ) && (count ( $doc ) > 0)) {
								$hb ['student_info'] = $hb_docs;
								$hb ['HB_latest'] = $doc [0] ['doc_data'] ['widget_data'] ['page1'] ['Student Details'] ['HB_latest'];
								//$hb['hb_id'] = $doc[0]['_id'];
								
								array_push ( $hb_request, $hb );
						}
					}
		}
	
		return $hb_request;
	}
	}
	

	public function get_student_bmi_graph_values($hospital_unique_id)
	{
		$query = $this->mongo_db->select(array('doc_data.widget_data'))->where( array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => $hospital_unique_id))->get($this->bmi_app_col);		
		
		if($query)
			return $query;
	    else
			return FALSE;
	}

	public function get_student_hb_graph_values($hospital_unique_id)
	{
		$query = $this->mongo_db->select(array('doc_data.widget_data'))->where( array('doc_data.widget_data.page1.Student Details.Hospital Unique ID' => $hospital_unique_id))->get($this->hb_app_col);
		
		
		if($query)
			return $query;
	    else
			return FALSE;
	}
	
	
	public function export_bmi_reports_monthly_to_excel($date, $district_name="select", $school_name="All"){
		
		$bmi_reports = [ ];
		if($district_name == "select" && $school_name == "ALL")
		{

				$query = $this->mongo_db->whereLike('doc_data.widget_data.page1.Student Details.BMI_values.month',$date)->orderBy ( array (
					'doc_data.widget_data.school_details.District' => 1 
			) )->get ( $this->bmi_app_col );
				
				array_push ( $bmi_reports, $query );
		}
		
		if ( $school_name != "All") {			
				
				$query = $this->mongo_db->where('doc_data.widget_data.school_details.School Name',$school_name)->whereLike('doc_data.widget_data.page1.Student Details.BMI_values.month',$date)->orderBy ( array (
					'doc_data.widget_data.school_details.District' => 1 
			) )->get ( $this->bmi_app_col );
				
				array_push ( $bmi_reports, $query );
		}
		if ($school_name == "All") {
			if ($district_name != "select") {
				
				$query = $this->mongo_db->where('doc_data.widget_data.school_details.District',$district_name)->whereLike('doc_data.widget_data.page1.Student Details.BMI_values.month',$date)->orderBy ( array (
					'doc_data.widget_data.school_details.District' => 1 
			) )->get ( $this->bmi_app_col );
				
				array_push ( $bmi_reports, $query );
			}
		}
		
		return $bmi_reports[0];
	}
	
	public function get_bmi_submitted_schools_list($current_month,$district_name,$dist_id)
	{
		
		// Variables
		$all_schools               = array();
		$all_schools_district      = array();
		$all_schools_name      	   = array();
		
		$submitted_schools 	       = array();
		$submitted_school_district = array();
		$submitted_school_name     = array();
		$not_submitted_schools	   = array();
		$schools_data              = array();
		$not_submitted_dist        = array();
		
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$schools_list = $this->mongo_db->whereLike('dt_name',$dist_id)->get ( $this->collections ['panacea_schools'] );
		
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		
		foreach($schools_list as $school_data)
		{
			array_push($all_schools_district,$school_data['dt_name']);
			array_push($all_schools_name,$school_data['school_name']);
		}
		
		$all_schools['district'] = $all_schools_district; 
		$all_schools['school']   = $all_schools_name; 
		
		if ($current_month) {
			$selected_month = $current_month;
		} else {
			$selected_month = $this->selected_month;
		}
	
		$query = $this->mongo_db->select(array('doc_data.widget_data.school_details'))->whereLike('doc_data.widget_data.page1.Student Details.BMI_values.month',$selected_month)->where(array('doc_data.widget_data.school_details.District' => $district_name))->get($this->bmi_app_col);
		
		
		foreach ( $query as $doc ) {
			
			    if(!in_array($doc ['doc_data']['widget_data'] ['school_details'] ['School Name'], $submitted_school_name))
				{
					array_push ( $submitted_school_district,$doc ['doc_data']['widget_data'] ['school_details'] ['District']);
					array_push ( $submitted_school_name,$doc ['doc_data']['widget_data'] ['school_details'] ['School Name'] );
					
		        }
		}
		
		$submitted_schools['district']     = $submitted_school_district;
		$submitted_schools['school']       = $submitted_school_name;
		
		$not_submitted_schools['district'] = array();
		$not_submitted_schools['school']   = array_values(array_diff($all_schools['school'],$submitted_schools['school']));
		foreach($not_submitted_schools['school'] as $index => $school_name)
		{
		   $dist_array    = explode(",",$school_name);
		   $dist_array[1] = strtolower($dist_array[1]);
		   array_push($not_submitted_dist,ucfirst($dist_array[1]));
		   
		}
		$not_submitted_schools['district']   = $not_submitted_dist;
		
		
		
		$schools_data['submitted']     		 = $submitted_schools;
		$schools_data['submitted_count']     = count($submitted_schools['school']);
		$schools_data['not_submitted'] 		 = $not_submitted_schools;
		$schools_data['not_submitted_count'] = count($not_submitted_schools['school']);
		
		return $schools_data;
		
	}

	public function get_hb_submitted_schools_list($current_month,$district_name,$dist_id)
	{
		
		// Variables
		$all_schools               = array();
		$all_schools_district      = array();
		$all_schools_name      	   = array();
		
		$submitted_schools 	       = array();
		$submitted_school_district = array();
		$submitted_school_name     = array();
		$not_submitted_schools	   = array();
		$schools_data              = array();
		$not_submitted_dist        = array();
		
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$schools_list = $this->mongo_db->whereLike('dt_name',$dist_id)->get ( $this->collections ['panacea_schools'] );
		
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		
		foreach($schools_list as $school_data)
		{
			array_push($all_schools_district,$school_data['dt_name']);
			array_push($all_schools_name,$school_data['school_name']);
		}
		
		$all_schools['district'] = $all_schools_district; 
		$all_schools['school']   = $all_schools_name; 
		
		if ($current_month) {
			$selected_month = $current_month;
		} else {
			$selected_month = $this->selected_month;
		}
	
		$query = $this->mongo_db->select(array('doc_data.widget_data.school_details'))->whereLike('doc_data.widget_data.page1.Student Details.HB_values.month',$selected_month)->where(array('doc_data.widget_data.school_details.District' => $district_name))->get($this->hb_app_col);
		
		
		foreach ( $query as $doc ) {
			
			    if(!in_array($doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'], $submitted_school_name))
				{
					array_push ( $submitted_school_district,$doc ['doc_data'] ['widget_data'] ['school_details'] ['District']);
					array_push ( $submitted_school_name,$doc ['doc_data'] ['widget_data'] ['school_details'] ['School Name'] );
					
		        }
		}
		
		$submitted_schools['district']     = $submitted_school_district;
		$submitted_schools['school']       = $submitted_school_name;
		
		$not_submitted_schools['district'] = array();
		$not_submitted_schools['school']   = array_values(array_diff($all_schools['school'],$submitted_schools['school']));
		foreach($not_submitted_schools['school'] as $index => $school_name)
		{
		   $dist_array    = explode(",",$school_name);
		   $dist_array[1] = strtolower($dist_array[1]);
		   array_push($not_submitted_dist,ucfirst($dist_array[1]));
		   
		}
		$not_submitted_schools['district']   = $not_submitted_dist;
		
		
		
		$schools_data['submitted']     		 = $submitted_schools;
		$schools_data['submitted_count']     = count($submitted_schools['school']);
		$schools_data['not_submitted'] 		 = $not_submitted_schools;
		$schools_data['not_submitted_count'] = count($not_submitted_schools['school']);
		
		return $schools_data;
		
	}
	
	/******************* Contact PIE chart*****************************************************************/
	public function contact_numbers()
	{

		$contacts = [ ];

		/*------------------HS-----------------------------*/
		$this->mongo_db->switchDatabase( $this->common_db ['common_db']);
		$query = $this->mongo_db->get('panacea_health_supervisors');
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn']);

		$contact_numbers['label'] = 'HS';
		$contact_numbers['value'] = count($query);

		array_push($contacts, $contact_numbers);

		/*------------------Principal-----------------------------*/
		$this->mongo_db->switchDatabase( $this->common_db ['common_db']);
		$query = $this->mongo_db->get('panacea_schools');
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn']);

		$contact_numbers['label'] = 'Principal';
		$contact_numbers['value'] = count($query);

		array_push($contacts, $contact_numbers);
		
		return $contacts;
	}

	public function get_contacts_list_by_contact_type($contact_type)
	{

		switch ($contact_type) {
			case 'Principal':
				$this->mongo_db->switchDatabase( $this->common_db ['common_db']);
				$query = $this->mongo_db->get('panacea_schools');
				$this->mongo_db->switchDatabase ( $this->common_db ['dsn']);
				$result ['principal'] = $query;
				return $result;
				break;

			case 'HS':
				$this->mongo_db->switchDatabase( $this->common_db ['common_db']);
				$query = $this->mongo_db->get('panacea_health_supervisors');
				$this->mongo_db->switchDatabase ( $this->common_db ['dsn']);
				$result ['hs'] = $query;
				return $result;
				break;

			default:
				
				break;
		}

	}
	
	
		
	public function sanitation_insp_count($school_name) {
		$count = $this->mongo_db->where(array('doc_data.School Information.school_name' => $school_name))->count ( 'healthcare20171226174552433' );
		return $count;
	}

	public function get_sanitation_inspection_report_model($dist_name, $school_name)
	{
		$sanitation_inspection = $this->mongo_db->where ( array (
				"doc_data.School Information.district_name" => $dist_name, "doc_data.School Information.school_name" =>  $school_name  
		) )->get('healthcare20171226174552433');
		if($sanitation_inspection)
		{
			return $sanitation_inspection;
		}
		else
		{
			return FALSE;
		}
	}


	public function civil_infrastructure_count($school_name) {
		$count = $this->mongo_db->where(array('doc_data.School Information.school_name' => $school_name))->count ( 'healthcare20171227153054237' );
		return $count;
	}

	public function get_civil_and_infrastructure_report_model($dist_name, $school_name)
	{
		
		$civil_and_infrastructure = $this->mongo_db->where ( array (
				"doc_data.School Information.district_name" => $dist_name, "doc_data.School Information.school_name" =>  $school_name  
		) )->get('healthcare20171227153054237');
		//log_message('debug', 'get_civil_and_infrastructure_report====='.print_r($civil_and_infrastructure, true));
		if($civil_and_infrastructure)
		{
			return $civil_and_infrastructure;
		}
		else
		{
			return FALSE;
		}
	}

	public function health_inspector_inspection_count($school_name) {
		$count = $this->mongo_db->where(array('doc_data.School Information.school_name' => $school_name))->count ( 'healthcare20171227173441869' );
		return $count;
	}

	public function get_health_inspector_inspection_report_model($dist_name, $school_name)
	{
		
		$health_inspector_inspection = $this->mongo_db->where ( array (
				"doc_data.School Information.district_name" => $dist_name, "doc_data.School Information.school_name" =>  $school_name  
		) )->get('healthcare20171227173441869');
		//log_message('debug', 'get_health_inspector_inspection_report====='.print_r($health_inspector_inspection, true));
		if($health_inspector_inspection)
		{
			return $health_inspector_inspection;
		}
		else
		{
			return FALSE;
		}
	}

	public function food_hygiene_inspection_count($school_name) {
		$count = $this->mongo_db->where(array('doc_data.School Information.school_name' => $school_name))->count ( 'healthcare20171221112544749' );
		return $count;
	}

	public function get_food_hygiene_inspection_report_model($dist_name, $school_name)
	{
		
		$food_hygiene_inspection = $this->mongo_db->where ( array (
				"doc_data.School Information.district_name" => $dist_name, "doc_data.School Information.school_name" =>  $school_name  
		) )->get('healthcare20171221112544749');
		//log_message('debug', 'get_food_hygiene_inspection_report====='.print_r($food_hygiene_inspection, true));
		if($food_hygiene_inspection)
		{
			return $food_hygiene_inspection;
		}
		else
		{
			return FALSE;
		}
	}

	/**
	 * Helper: get approval history from document collection
	 *
	 * @return array
	 *  
	 * @author Naresh 
	 */

    function get_approval_history($doc_id)
    {
    	$query = $this->mongo_db->select(array('history'))->where(array('doc_properties.doc_id'=> $doc_id))->get($this->request_app_col_static_html);
    	return $query[0]['history'];
    }
	
	
	// ------------------Basic Dashboard------------------------------

	/**
	 * Helper: Screening PIE with tabel format
	 
	 * @author bhanu 
	 */
	 
	 	// ------------------------------------------------------------------------

	
	 
	public function get_all_screenings_count_by_school($email, $date = false, $screening_duration = "Yearly") 
	{
		if ($date) 
		{
			$today_date = $date;
		} 
		else 
		{
			$today_date = $this->today_date;
		}		

		$dates = $this->get_start_end_date ( $today_date, $screening_duration );


	
		ini_set ( 'memory_limit', '10G' );
		$pie_data = $this->mongo_db->select ( array (
				'pie_data.stage1_pie_values' 
		) )->get ( $email.'_pie_analytics' );
		
		
		$requests ['Physical Abnormalities'] = 0;
		$requests ['General Abnormalities']  = 0;
		$requests ['Eye Abnormalities']      = 0;
		$requests ['Auditory Abnormalities'] = 0;
		$requests ['Dental Abnormalities']   = 0;
		
		foreach ( $pie_data as $each_pie ) {
			
			$requests ['Physical Abnormalities'] = $requests ['Physical Abnormalities'] + $each_pie ['pie_data'] ['stage1_pie_values'] [0] ['value'];
			$requests ['General Abnormalities']  = $requests ['General Abnormalities'] + $each_pie ['pie_data'] ['stage1_pie_values'] [1] ['value'];
			$requests ['Eye Abnormalities']      = $requests ['Eye Abnormalities'] + $each_pie ['pie_data'] ['stage1_pie_values'] [2] ['value'];
			$requests ['Auditory Abnormalities'] = $requests ['Auditory Abnormalities'] + $each_pie ['pie_data'] ['stage1_pie_values'] [3] ['value'];
			$requests ['Dental Abnormalities']   = $requests ['Dental Abnormalities'] + $each_pie ['pie_data'] ['stage1_pie_values'] [4] ['value'];
		}

		$result = [ ];
		foreach ( $requests as $request => $req_value ) {
			$req ['label'] = $request;
			$req ['value'] = $req_value;
			array_push ( $result, $req );
		
		}
		return $result;
	}

	public function get_schools_by_district_id($dist_id) {
		if ($dist_id == "All") {
			ini_set ( 'memory_limit', '10G' );
			// $query = $this->mongo_db->select ( array ( 'doc_data.widget_data.page1', 'doc_data.widget_data.page2' ) )->orderBy(array('Hospital Unique ID' => 1))->get ( $this->screening_app_col );
			
			//ini_set ( 'memory_limit', '1G' );
			$count = $this->mongo_db->count ( $this->screening_app_col );
			if ($count < 10000) {
				$per_page = $count;
				$loop = 2; // $count / $per_page;
			} else {
				$per_page = 10000;
				$loop = $count / $per_page;
			}
			
			$result = [ ];
			for($page = 1; $page < $loop; $page ++) {
				$offset = $per_page * ($page);
				$pipeline = [ 
						array (
								'$project' => array (
										"doc_data.widget_data.page1" => true,
										"doc_data.widget_data.page2" => true 
								) 
						),
						array (
								'$limit' => $offset 
						),
						array (
								'$skip' => $offset - $per_page 
						) 
				];
				$response = $this->mongo_db->command ( array (
						'aggregate' => $this->screening_app_col,
						'pipeline' => $pipeline 
				) );
				$result = array_merge ( $result, $response ['result'] );
			}
			return $result;
		} else {
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$query = $this->mongo_db->select ( array (
					'school_name',
					'school_code',
					'school_mob',
					'contact_person_name' 
			) )->orderBy ( array (
					'school_name' => 1 
			) )->where ( 'dt_name', $dist_id )->get ( $this->collections ['panacea_schools'] );
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			return $query;
		}
	}

	public function get_school_name_by_school_code($school_code)
	{
		$school_code = (int) $school_code;
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->where ( array (
				"school_code" => $school_code 
		) )->get ( $this->collections ['panacea_health_supervisors'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		
		return $query;
	}

	public function get_school_code_by_school_name($school_name)
	{
		
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->where ( array (
				"school_name" => $school_name 
		) )->get ( $this->collections ['panacea_schools'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		
		return $query;
	}

	public function get_abnormalities_screening_count($selectedLabel, $schoolEmail, $date = false, $screening_duration = "Yearly") {
		
		if ($date) 
		{
			$today_date = $date;
		} 
		else 
		{
			$today_date = $this->today_date;
		}
		

		
		//$dates = $this->get_start_end_date ( $today_date, $screening_duration );
		ini_set ( 'memory_limit', '10G' );
		
		$pie_data = $this->mongo_db->select ( array (
				'pie_data.stage2_pie_values' 
		) )->get ( $schoolEmail.'_pie_analytics' );
		
		
		
		switch ($selectedLabel) {
			case "Physical Abnormalities" :
				
				$requests = [ ];
				
				$request ['label'] = 'Over Weight';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [0] ['Physical Abnormalities'] ['value'];
				}
				
				array_push ( $requests, $request );
				
				$request ['label'] = 'Under Weight';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [1] ['Physical Abnormalities'] ['value'];
				}
				
				array_push ( $requests, $request );
				
				return $requests;
				break;
			
			case "General Abnormalities" :
				
				$requests = [ ];
				
				$request ['label'] = 'General';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [2] ['General Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Skin';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [3] ['General Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Others(Description/Advice)';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [4] ['General Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Ortho';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [5] ['General Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Postural';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [6] ['General Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Defects at Birth';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [7] ['General Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Deficencies';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [8] ['General Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Childhood Diseases';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [9] ['General Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				return $requests;
				break;
			
			case "Eye Abnormalities" :
				$requests = [ ];
				
				$request ['label'] = 'Without Glasses';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [10] ['Eye Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'With Glasses';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [11] ['Eye Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Colour Blindness';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [12] ['Eye Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );

				$request ['label'] = 'Eye Lids';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [13] ['Eye Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );

				$request ['label'] = 'Conjunctiva';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [14] ['Eye Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );

				$request ['label'] = 'Cornea';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [15] ['Eye Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );

				$request ['label'] = 'Pupil';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [16] ['Eye Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );

				$request ['label'] = 'Wearing Spectacles';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [17] ['Eye Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );

				$request ['label'] = 'Subjective Refraction';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [18] ['Eye Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				return $requests;
				break;
			
			case "Auditory Abnormalities" :
				$requests = [ ];
				
				$request ['label'] = 'Right Ear';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [19] ['Auditory Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Left Ear';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [20] ['Auditory Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Speech Screening';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [21] ['Auditory Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				return $requests;
				break;
			
			case "Dental Abnormalities" :
				$requests = [ ];
				
				$request ['label'] = 'Oral Hygiene - Fair';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [22] ['Dental Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Oral Hygiene - Poor';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [23] ['Dental Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Carious Teeth';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [24] ['Dental Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Flourosis';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [25] ['Dental Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Orthodontic Treatment';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [26] ['Dental Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Indication for extraction';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [27] ['Dental Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				return $requests;
				break;
			
			default :
				break;
		}
	}

public function get_drilling_screenings_students_count(/*$data, $date = false, $screening_duration = "Yearly"*/ $symptome_type, $schoolEmail) {
		ini_set ( 'memory_limit', '1G' );
		/*if ($date) {
			$today_date = $date;
		} else {
			$today_date = $this->today_date;
		}
		
		$dates = $this->get_start_end_date ( $today_date, $screening_duration );*/
		
		$pie_data = $this->mongo_db->select ( array (
				'pie_data.stage3_pie_values' 
		) )/*->whereBetween ( 'pie_data.date', $dates ['end_date'], $dates ['today_date'] )*/->get ( $schoolEmail.'_pie_analytics' );
		
		/*$obj_data = json_decode ( $data, true );
		$type = $obj_data ['0'];*/
		//$school_name = strtolower ( $obj_data ['1'] );
		
		switch ($symptome_type) {
			case "Over Weight" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
				
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Over Weight"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Over Weight"] )) 
					{
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Over Weight"]);
					}
				}
				
				return $requests;
				break;
			
			case "Under Weight" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Under Weight"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Under Weight"] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Under Weight"]);
				}
				
				return $requests;
				break;
			
			case "General" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["General"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["General"]))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["General"]);
				}
				
				return $requests;
				break;
			
			case "Skin" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Skin"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Skin"] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Skin"] );
				}
				
				return $requests;
				break;
			
			case "Others(Description/Advice)" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Others(Description/Advice)"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Others(Description/Advice)"]))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Others(Description/Advice)"]);
				}
				
				return $requests;
				break;
			
			case "Ortho" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Ortho"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Ortho"]))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Ortho"]);
				}
				
				return $requests;
				break;
			
			case "Postural" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Postural"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Postural"]))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Postural"]);
				}
				
				return $requests;
				break;
			
			case "Defects at Birth" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Defects at Birth"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Defects at Birth"] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Defects at Birth"]);
				}
				
				return $requests;
				break;
			
			case "Deficencies" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Deficencies"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Deficencies"]))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Deficencies"]);
				}
				
				return $requests;
				break;
			
			case "Childhood Diseases" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Childhood Diseases"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Childhood Diseases"]))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Childhood Diseases"]);
				}
				
				return $requests;
				break;
			
			case "Without Glasses" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Without Glasses"]  != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Without Glasses"]))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Without Glasses"]);
				}
				
				return $requests;
				break;
			
			case "With Glasses" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["With Glasses"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["With Glasses"]))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["With Glasses"]);
				}
				
				return $requests;
				break;
			
			case "Colour Blindness" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Colour Blindness"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Colour Blindness"] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Colour Blindness"]);
				}
				
				return $requests;
				break;
			
			case "Eye Lids" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Eye Lids"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Eye Lids"] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Eye Lids"]);
				}
				
				return $requests;
				break;

			case "Conjunctiva" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Conjunctiva"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Conjunctiva"] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Conjunctiva"]);
				}
				
				return $requests;
				break;
			case "Cornea" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Cornea"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Cornea"] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Cornea"]);
				}
				
				return $requests;
				break;
				
			case "Pupil" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Pupil"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Pupil"] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Pupil"]);
				}
				
				return $requests;
				break;		

			case "Wearing Spectacles" :
			
			$requests = [ ];
			foreach ( $pie_data as $each_pie ) {
				if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Wearing Spectacles"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Wearing Spectacles"] ))
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Wearing Spectacles"]);
			}
			
			return $requests;
			break;

			case "Subjective Refraction" :
			
			$requests = [ ];
			foreach ( $pie_data as $each_pie ) {
				if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Subjective Refraction"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Subjective Refraction"] ))
					$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Subjective Refraction"]);
			}
			
			return $requests;
			break;
					
			case "Right Ear" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Right Ear"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Right Ear"]))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Right Ear"]);
				}
				
				return $requests;
				break;
			
			case "Left Ear" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Left Ear"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Left Ear"]))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Left Ear"] );
				}
				
				return $requests;
				break;
			
			case "Speech Screening" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Speech Screening"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Speech Screening"]))
						$requests = array_merge_recursive ($requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Speech Screening"]);
				}
				
				return $requests;
				break;
			
			case "Oral Hygiene - Fair" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Oral Hygiene - Fair"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Oral Hygiene - Fair"]))
						$requests = array_merge_recursive ($requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Oral Hygiene - Fair"]);
				}
				
				return $requests;
				break;
			
			case "Oral Hygiene - Poor" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Oral Hygiene - Poor"]!= null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Oral Hygiene - Poor"]))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Oral Hygiene - Poor"]);
				}
				
				return $requests;
				break;
			
			case "Carious Teeth" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Carious Teeth"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Carious Teeth"] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Carious Teeth"] );
				}
				
				return $requests;
				break;
			
			case "Flourosis" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Flourosis"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Flourosis"]))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Flourosis"] );
				}
				
				return $requests;
				break;
			
			case "Orthodontic Treatment" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Orthodontic Treatment"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Orthodontic Treatment"] ))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Orthodontic Treatment"] );
				}
				
				return $requests;
				break;
			
			case "Indication for extraction" :
				
				$requests = [ ];
				foreach ( $pie_data as $each_pie ) {
					if ($each_pie ['pie_data'] ['stage3_pie_values'] ["Indication for extraction"] != null && is_array ( $each_pie ['pie_data'] ['stage3_pie_values'] ["Indication for extraction"]))
						$requests = array_merge_recursive ( $requests, $each_pie ['pie_data'] ['stage3_pie_values'] ["Indication for extraction"] );
				}
				
				return $requests;
				break;
			
			default :
				;
				break;
		}
	}


	public function get_drilling_screenings_students_docs_count($_id_array) {
		$docs = [ ];
		ini_set ( 'memory_limit', '10G' );
		foreach ( $_id_array as $_id ) 
		{
			$query = $this->mongo_db->select(array("doc_data.widget_data"))->where ( "_id", new MongoID ( $_id ) )->get ( $this->screening_app_col );			
			if (isset ( $query [0] ) && !empty($query[0]))
			{
				array_push ( $docs, $query [0] );
			}else
			{
				$query = $this->mongo_db->select(array("doc_data.widget_data"))->where ( "_id", new MongoID ( $_id ) )->get ( 'healthcare2016226112942701_divided_passed_out' );
				array_push ( $docs, $query [0] );
			}
		}
		return $docs;
	}

	/*===================================================================/
	/*===================================================================/
	/*===================================================================/
	/*===================================================================*/


	public function get_drilling_screenings_abnormalities_to_pie($data, $schoolEmail, $date = false, $screening_duration = "Yearly") {
		
		if ($date) 
		{
			$today_date = $date;
		} 
		else 
		{
			$today_date = $this->today_date;
		}
		
		$obj_data = json_decode ( $data, true );
		$type     = $obj_data ['label'];
		
		$dates = $this->get_start_end_date ( $today_date, $screening_duration );
		ini_set ( 'memory_limit', '10G' );
		
		$pie_data = $this->mongo_db->select ( array (
				'pie_data.stage2_pie_values' 
		) )/*->whereBetween ( 'pie_data.date', $dates ['end_date'], $dates ['today_date'] )*/->get ( $schoolEmail.'_pie_analytics' );
		
		switch ($type) {
			case "Physical Abnormalities" :
				
				$requests = [ ];
				
				$request ['label'] = 'Over Weight';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [0] ['Physical Abnormalities'] ['value'];
				}
				
				array_push ( $requests, $request );
				
				$request ['label'] = 'Under Weight';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [1] ['Physical Abnormalities'] ['value'];
				}
				
				array_push ( $requests, $request );
				
				return $requests;
				break;
			
			case "General Abnormalities" :
				
				$requests = [ ];
				
				$request ['label'] = 'General';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [2] ['General Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Skin';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [3] ['General Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Others(Description/Advice)';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [4] ['General Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Ortho';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [5] ['General Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Postural';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [6] ['General Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Defects at Birth';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [7] ['General Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Deficencies';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [8] ['General Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Childhood Diseases';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [9] ['General Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				return $requests;
				break;
			
			case "Eye Abnormalities" :
				$requests = [ ];
				
				$request ['label'] = 'Without Glasses';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [10] ['Eye Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'With Glasses';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [11] ['Eye Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Colour Blindness';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [12] ['Eye Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Eye Lids';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [13] ['Eye Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				$request ['label'] = 'Conjunctiva';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [14] ['Eye Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				$request ['label'] = 'Cornea';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [15] ['Eye Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				$request ['label'] = 'Pupil';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [16] ['Eye Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				$request ['label'] = 'Wearing Spectacles';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [17] ['Eye Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				$request ['label'] = 'Subjective Refraction';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [18] ['Eye Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );

				return $requests;
				break;
			
			case "Auditory Abnormalities" :
				$requests = [ ];
				
				$request ['label'] = 'Right Ear';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [19] ['Auditory Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Left Ear';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [20] ['Auditory Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Speech Screening';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [21] ['Auditory Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				return $requests;
				break;
			
			case "Dental Abnormalities" :
				$requests = [ ];
				
				$request ['label'] = 'Oral Hygiene - Fair';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [22] ['Dental Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Oral Hygiene - Poor';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [23] ['Dental Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Carious Teeth';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [24] ['Dental Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Flourosis';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [25] ['Dental Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Orthodontic Treatment';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [26] ['Dental Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				$request ['label'] = 'Indication for extraction';
				$request ['value'] = 0;
				
				foreach ( $pie_data as $each_pie ) {
					// log_message("debug","pppppppppppppppppppppppppppppppp=====".print_r($each_pie,true));
					$request ['value'] = $request ['value'] + $each_pie ['pie_data'] ['stage2_pie_values'] [27] ['Dental Abnormalities'] ['value'];
				}
				array_push ( $requests, $request );
				
				return $requests;
				break;
			
			default :
				break;
		}
	}
	
	public function get_show_ehr_details($request_type,$status,$date,$school_name)
	{
        
        $data['all_request'] = $this->mongo_db->whereLike('history.0.time',$date)->get($this->request_app_col_static_html);
        if($school_name== "All")
        {
            if($request_type == "Normal" )
            {
            $normal_request_all = $this->mongo_db->select(array(),array('_id'))->whereLike('history.0.time',$date)->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type))->get($this->request_app_col_static_html);
                return $normal_request_all;
            
            }
            else if($request_type == "Emergency")
            { 
            $emergency_request_all = $this->mongo_db->select(array(),array('_id'))->whereLike('history.0.time',$date)->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type))->get($this->request_app_col_static_html);

            return $emergency_request_all;
                
            }
            else if($request_type == "Chronic")
            {
                $chronic_request_all = $this->mongo_db->select(array(),array('_id'))->whereLike('history.0.time',$date)->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type))->get($this->request_app_col_static_html);
                return $chronic_request_all;
                
            }   
            else if($request_type == "Admitted")
            {           
                $emergency_request_all = $this->mongo_db->select(array(),array('_id'))->where(array('doc_data.widget_data.page2.Review Info.Status' => "Hospitalized"))->get($this->request_app_col_static_html);
                return $emergency_request_all;
                
            }
            else if($request_type == "Review")
            {           
                $review_request_all = $this->mongo_db->select(array(),array('_id'))->where(array('doc_data.widget_data.page2.Review Info.Status' => "Review"))->get($this->request_app_col_static_html);
                return $review_request_all;
                
            }
            else if($request_type == "Out-Patient")
            {           
                $op_request_all = $this->mongo_db->select(array(),array('_id'))->where(array('doc_data.widget_data.page2.Review Info.Status' => "Out-Patient"))->get($this->request_app_col_static_html);
                return $op_request_all;
                
            }
        }else{
            
            if($request_type == "Normal")
            {
            $normal_request = $this->mongo_db->select(array(),array('_id'))->whereLike('history.0.time',$date)->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type, 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->get($this->request_app_col_static_html);
                return $normal_request;
            
            }
            
            else if($request_type == "Emergency")
            { 
            $emergency_request = $this->mongo_db->select(array(),array('_id'))->whereLike('history.0.time',$date)->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type, 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->get($this->request_app_col_static_html);

            return $emergency_request;
                
            }
            else if($request_type == "Chronic")
            {
                $chronic_request = $this->mongo_db->select(array(),array('_id'))->whereLike('history.0.time',$date)->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type, 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->get($this->request_app_col_static_html);
                return $chronic_request;
                
            }
            else if($request_type == "Admitted")
            {                       
                $hospitalised_request = $this->mongo_db->select(array(),array('_id'))->where(array('doc_data.widget_data.page2.Review Info.Status' => "Hospitalized", 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->get($this->request_app_col_static_html);
                return $hospitalised_request;
                
            }
            else if($request_type == "Review")
            {                       
                $review_request = $this->mongo_db->select(array(),array('_id'))->where(array('doc_data.widget_data.page2.Review Info.Status' => "Review", 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->get($this->request_app_col_static_html);
                return $review_request;
                
            }
            else if($request_type == "Out-Patient")
            {                       
                $op_request = $this->mongo_db->select(array(),array('_id'))->where(array('doc_data.widget_data.page2.Review Info.Status' => "Out-Patient", 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->get($this->request_app_col_static_html);
                return $op_request;
                
            }
        }
        
        
    }

	/* public function get_show_ehr_student_unique_id($unique_id)
	{

		$query = $this->mongo_db->select(array('_id'))->where('doc_data.widget_data.page1.Personal Information.Hospital Unique ID',$unique_id)->get($this->screening_app_col);
		return $query;
	}*/
	public function drill_down_screening_to_students_load_ehr_panacea_new_dashboard($_id) 
	{
		ini_set ( 'memory_limit', '2G' );
		$query = $this->mongo_db->select ( array ('doc_data','history','doctors_medical_reports') )->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $_id)->get ( $this->screening_app_col );
		
		//where ( "_id", new MongoID ( $_id ) ) 
		if(empty($query))
		{
			$query = $this->mongo_db->select ( array ('doc_data','history') )->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $_id)->get ( $this->screening_app_col_sw_2020_2021 );
		}

	/* Second year 2020 screening info */
	$query_second = $this->mongo_db->select ( array ('doc_data','history','doctors_medical_reports') )->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $_id)->get ( $this->screening_app_col_sw_2020_2021 );

	if(empty($query_second))
	{
		$query_second = $this->mongo_db->select ( array ('doc_data','history','doctors_medical_reports') )->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $_id)->get ( 'screening_report_col_2020-2021_passed_out' );

		if(empty($query_second))
		{
			$query_second = $this->mongo_db->select ( array ('doc_data','history','doctors_medical_reports') )->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $_id)->get ( 'other_classes_screening_data_2019-2020' );
		}
	}
		
		if ($query) {
			$query_request = $this->mongo_db->select(array("doc_data","doc_properties","history","regular_follow_up"))->orderBy(array("history.0.time"=> -1))->where( "doc_data.widget_data.page1.Student Info.Unique ID", $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'] )->get ($this->request_app_col_static_html);

			$query_request_old_dash = $this->mongo_db->select(array("doc_data.widget_data","doc_data.notes_data","doc_data.external_attachments","doc_properties","history"))->orderBy(array("history.0.time"=> -1))->where( "doc_data.widget_data.page1.Student Info.Unique ID", $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'] )->get ( $this->request_app_col );


			if(count($query_request) > 0){
				foreach($query_request as $req_ind => $req){
					unset($query_request[$req_ind]['doc_data']["notes_data"]);
					$notes_data = $this->mongo_db->whereLike ("req_doc_id", new MongoId($req['_id']))->get ( $this->collections['panacea_req_notes'] );
					
					
					if(count($notes_data) > 0){
						$query_request[$req_ind]['doc_data']['notes_data'] = $notes_data[0]['notes_data'];
					}

					//for Field Officer data
						$followups_data = $this->mongo_db->whereLike("doc_properties.followup_request_doc_id", $req['doc_properties']['doc_id'])->get('field_officer_report');



						if(count($followups_data) > 0){
							foreach ($followups_data as $follow) {
								$get_user = $follow['history']['last_stage']['submitted_by'];
								if(!empty($get_user))
								{
									if(preg_match("/tswreis.cc/i", $get_user))
									{
										$query_request[$req_ind]['doc_data']['field_officer_followup'] = $followups_data;
										
									}
									else
									{
										$query_request[$req_ind]['doc_data']['rhso_followup'] = $followups_data;
										
									}
								}
								
							}
						}
						else
						{
							$query_request[$req_ind]['doc_data']['field_officer_followup'] = $followups_data;
							$query_request[$req_ind]['doc_data']['rhso_followup'] = $followups_data;
						}
						
				}
				
			}

			

			$bmi_value_table_addto_ehr = $this->mongo_db->where("doc_data.widget_data.page1.Student Details.Hospital Unique ID", $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'])->get('healthcare2017617145744625');
			

			$hb_value_table_addto_ehr = $this->mongo_db->where("doc_data.widget_data.page1.Student Details.Hospital Unique ID", $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'])->get($this->hb_app_col);

			$fo_report_table_add_ehr =$this->mongo_db->orderBy(array('history.last_stage.time' => 1))->where("doc_data.widget_data.Student Details.Hospital Unique ID", $query[0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'])->get("field_officer_report");
			

			$query_notes = $this->mongo_db->orderBy(array('datetime' => 1))->where ( "uid", $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'] )->get ( $this->notes_col );

			$request_notes = $this->mongo_db->orderBy(array('datetime' => -1))->where ( "uid", $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'] )->get('panacea_ehr_notes');
		

			/* Field Officer Report and RHhso not doc id existed */
			//for Field Officer data
				
				if(count($fo_report_table_add_ehr) > 0){
					foreach ($fo_report_table_add_ehr as $follow) {
						$get_user = $follow['history']['last_stage']['submitted_by'];
						if(!empty($get_user))
						{
							if(preg_match("/tswreis.cc/i", $get_user))
							{
								$field_officer_followup_without_doc[] = $follow;
							}
							else
							{
								$rhso_followup_without_doc[] = $follow;
							}
						}
						
					}
				}
				else
				{
					$field_officer_followup_without_doc = [];

					$rhso_followup_without_doc = [];
				}

			//log_message("debug","EHR======notes".print_r($query_notes,true));
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$school_details = $this->mongo_db->whereLike ( "school_name", $query[0]['doc_data']['widget_data']['page2']['Personal Information']['School Name'] )->get ( $this->collections ['panacea_schools'] );
			//echo print_r($school_details,TRUE);exit();
			$query_hs = $this->mongo_db->where ( "school_code", $school_details[0]['school_code'] )->get ( $this->collections ['panacea_health_supervisors'] );
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			
			$result ['screening'] = isset($query) ? $query : $query_second;
			$result ['screening_2020'] = $query_second;

			

			$result ['request'] = array_merge_recursive($query_request, $query_request_old_dash);

			
			//$result ['request'] = $query_request;
			$result ['notes'] = $query_notes;
			$result ['hs'] = $query_hs[0];
			$result ['BMI_report'] = $bmi_value_table_addto_ehr;
			$result ['hb_report'] = $hb_value_table_addto_ehr;
			$result ['fo_report'] = $fo_report_table_add_ehr;
			$result ['fo_report_without_id'] = isset($field_officer_followup_without_doc) ? $field_officer_followup_without_doc :false;
			$result ['rhso_report_without_id'] = isset($rhso_followup_without_doc) ? $rhso_followup_without_doc :false;
			$result ['notes_data'] = $request_notes;
			
			//log_message("debug","result ==========notes".print_r($result ['notes'],true));
			return $result;
		} else {
			$result ['screening'] = false;
			$result ['request'] = false;
			$result ['notes'] = false;
			$result ['hs'] = false;
			$result ['BMI_report'] = false;
			$result ['hb_report'] = false;
			$result ['fo_report'] = false;
			$result ['fo_report_without_id'] = false;
			$result ['rhso_report_without_id'] = false;
			$result ['notes_data'] = false;
			return $result;
		}
	}

	public function drill_down_screening_to_students_load_ehr_new_dashboard($_id) {
		$query = $this->mongo_db->select ( array (
				'doc_data.widget_data',
				'doc_data.chart_data',				
				'doc_data.external_attachments',
				'history' 
		) )->where ( "_id", new MongoID ( $_id ) )->get ( $this->screening_app_col );
		
		//whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $_id)

		
		if ($query) {
			$query_request = $this->mongo_db->select(array("doc_data","doc_properties","history"))->orderBy(array("history.0.time"=> -1))->where( "doc_data.widget_data.page1.Student Info.Unique ID", $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'] )->get ($this->request_app_col_static_html);
			
			
			
			if(count($query_request) > 0){
				foreach($query_request as $req_ind => $req){
					unset($query_request[$req_ind]['doc_data']["notes_data"]);
					$notes_data = $this->mongo_db->whereLike ("req_doc_id", new MongoId($req['_id']))->get ( $this->collections['panacea_req_notes'] );
					
					
					if(count($notes_data) > 0){
						$query_request[$req_ind]['doc_data']['notes_data'] = $notes_data[0]['notes_data'];
					}
				}
				
			}
			
			$bmi_value_table_addto_ehr = $this->mongo_db->where("doc_data.widget_data.page1.Student Details.Hospital Unique ID", $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'])->get('healthcare2017617145744625');
			

			$hb_value_table_addto_ehr = $this->mongo_db->where("doc_data.widget_data.page1.Student Details.Hospital Unique ID", $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'])->get($this->hb_app_col);
			

			$query_notes = $this->mongo_db->orderBy(array('datetime' => 1))->where ( "uid", $query [0] ["doc_data"] ['widget_data'] ['page1'] ['Personal Information'] ['Hospital Unique ID'] )->get ( $this->notes_col );

			//log_message("debug","EHR======notes".print_r($query_notes,true));
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$school_details = $this->mongo_db->where ( "school_name", $query[0]['doc_data']['widget_data']['page2']['Personal Information']['School Name'] )->get ( $this->collections ['panacea_schools'] );

			$query_hs = $this->mongo_db->where ( "school_code", $school_details[0]['school_code'] )->get ( $this->collections ['panacea_health_supervisors'] );
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			
			$result ['screening'] = $query;
			$result ['request'] = $query_request;
			$result ['notes'] = $query_notes;
			$result ['hs'] = $query_hs[0];
			$result ['BMI_report'] = $bmi_value_table_addto_ehr;
			$result ['hb_report'] = $hb_value_table_addto_ehr;
			
			//log_message("debug","result ==========notes".print_r($result ['notes'],true));
			return $result;
		} else {
			$result ['screening'] = false;
			$result ['request'] = false;
			$result ['notes'] = false;
			$result ['hs'] = false;
			$result ['BMI_report'] = false;
			$result ['hb_report'] = false;
			return $result;
		}
	} 

	public function get_initaite_requests_count_today_date($today_date)
	{
		$exists_history = array('history.0.time' => array('$regex' => $today_date ));
		
		$document = $this->mongo_db->select(array('history'))->where($exists_history)->count($this->request_app_col_static_html);
		//log_message('error','document--------------------19480'.print_r($document,true));
		if(count($document)>0){
			return $document;
		}
	}

	public function get_requests_count_today_date($today_date)
	{
		$exists_history = array('history.0.time' => array('$regex' => $today_date ));
		
		$document['normal'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->where($exists_history)->count($this->request_app_col_static_html);

		$document['defects'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Defects"))->where($exists_history)->count($this->request_app_col_static_html);

		$document['deficiency'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Deficiency"))->where($exists_history)->count($this->request_app_col_static_html);

		$document['emergency_count'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->where($exists_history)->count($this->request_app_col_static_html);

		$document['chronic_count'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->where($exists_history)->count($this->request_app_col_static_html);

		$document['normal_count'] = $document['normal'] + $document['defects'] + $document['deficiency'];

		if(count($document)>0){
			return $document;
		} 
	}
	
	public function get_doctors_response_count_today_date($today_date)
	{
		$exists_doctor = array('history.submitted_by' => array('$regex' => 'panacea.dr'),'history.current_stage' => 'Doctor','history.time'=>array('$regex' => $today_date));
		$document = $this->mongo_db->select(array('history'))->where($exists_doctor)->get($this->request_app_col_static_html);
		//echo print_r($document,true);exit();
		return $document;
	}
	public function get_initaite_requests_count($today_date,$school_name)
	{
		//$document = $this->mongo_db->select(array('history'))->whereLike("history.0.time" , $today_date)->get($this->request_app_col);
		
		$document = $this->mongo_db->select(array('history'))->
		where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->whereLike("history.0.time" , $today_date)->get($this->request_app_col_static_html);
		
		if(count($document)>0){
			return $document;
		}
	}

	public function get_normal_requests_count($today_date,$school_name)
	{
		//$document = $this->mongo_db->select(array('history'))->whereLike("history.0.time" , $today_date)->get($this->request_app_col);
		$document = $this->mongo_db->select(array('history'))->
		where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
	'doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->whereLike("history.0.time" , $today_date)->get($this->request_app_col_static_html);
		
		if(count($document)>0){
			return $document;
		}
	}
	public function get_emergency_requests_count($today_date,$school_name)
	{
		//$document = $this->mongo_db->select(array('history'))->whereLike("history.0.time" , $today_date)->get($this->request_app_col);
		
		$document = $this->mongo_db->select(array('history'))->
		where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
			'doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->whereLike("history.0.time" , $today_date)->get($this->request_app_col_static_html);
		
		if(count($document)>0){
			return $document;
		}
	}
	public function get_chronic_requests_count($today_date,$school_name)
	{
		//$document = $this->mongo_db->select(array('history'))->whereLike("history.0.time" , $today_date)->get($this->request_app_col);
		
		$document = $this->mongo_db->select(array('history'))->
		where(array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name,
			'doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->whereLike("history.0.time" , $today_date)->get($this->request_app_col_static_html);
		
		if(count($document)>0){
			return $document;
		}
	}


	public function get_doctors_response_count($today_date,$school_name)
	{
		//$document = $this->mongo_db->select(array('history'))->whereLike("history.1.time" , $today_date)->get($this->request_app_col);
						$document = $this->mongo_db->select(array('history'))->where(array('doc_data.doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->get($this->request_app_col_static_html);
		
		return $document;
	}

	/**
	 * Helper: Fetch school details using the school code
	 *
	 * @param  int $school_code  School code
	 *
	 * @return array
	 */
	 
	public function get_school_info($school_code)
	{
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$res = $this->mongo_db->where(array('school_code' => $school_code))->get($this->collections['panacea_schools']);
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		if($res)
		{
			return $res;
		}
		else
		{
			return false;
		}
	}

	public function insert_into_notification_message($title,$date,$message)
	{
		
		$notification_msg = array(
						'title' => $title,
						'date' => $date,
						'message' =>$message
					);
		$query = $this->mongo_db->insert('notification_message',$notification_msg);
		if($query)
		{
			return $query;
		}
	}

	/*public get_check_email_id_for_fcm($email)
	{
		$query = $this->mongo_db->select(array('email','fcm_token'))->where('email',$email)->get('panacea_doctor_notifications');

		if(!empty($query))
		{
			return $query;
		}
	}*/
	
	function get_sanitation_report_fields_count($date, $district_name, $school_name)
	{
		
		if($district_name == 'All' && $school_name == 'All')
		{
			$today_date = $date;
			$campusOnce = $this->mongo_db->
								where(array(
										
										'doc_properties.status' => 2,
									    "doc_data.widget_data.page4.Declaration Information.Date:" => $today_date
									))->get("healthcare2016111212310531_version_2");
			
			return $campusOnce;
		}
		elseif($school_name == 'All')
		{
			$today_date = date("Y-m-d");
			$campusOnceCount = $this->mongo_db->
								where(array(
										'doc_data.widget_data.page4.School Information.District' => strtoupper($district_name),
										'doc_properties.status' => 2, 
										"doc_data.widget_data.page4.Declaration Information.Date:" => $today_date 					    
									))->get("healthcare2016111212310531_version_2");
								
			return $campusOnceCount;
			
		}
	}


	function get_sanitaiton_report_by_school($today_date,$school_name)
	{
		
			$daily_count = $this->mongo_db->where(array('doc_properties.status' => 2, 'doc_data.widget_data.page4.School Information.School Name' => $school_name))->whereLike('doc_data.widget_data.page4.Declaration Information.Date:',$today_date)->get("healthcare2016111212310531_version_2");
			return $daily_count;

	}


	function check_if_doc_exists($unique_id)
	{
		$is_exists = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id))->get($this->bmi_app_col_xl_import);
		
		if($is_exists)
		{
			return TRUE;
		}
		else {
		  return FALSE;
		}
		
	}
	public function create_bmi_values_monthly($doc_data,$doc_properties,$history) {
		
		$document = array('doc_data' => $doc_data,'doc_properties'=>$doc_properties,'history'=>$history);
		$query = $this->mongo_db->insert ( $this->bmi_app_col, $document );
		return $query;
	}



	function update_bmi_values($month,$monthly_bmi,$unique_id)
	{
	 $check_query = array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id,"doc_data.widget_data.page1.Student Details.BMI_values"=>array('$elemMatch'=>array("month"=>$month)));
	 
	 $is_already_updated = $this->mongo_db->where($check_query)->get($this->bmi_app_col);
	 
		
	 if($is_already_updated)
	 {
		 $query = array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id,"doc_data.widget_data.page1.Student Details.BMI_values"=>array('$elemMatch'=>array("month"=>$month)));
		 
		$update_values = array('doc_data.widget_data.page1.Student Details.BMI_values.$.height'=>$monthly_bmi['height'],'doc_data.widget_data.page1.Student Details.BMI_values.$.weight'=>$monthly_bmi['weight'],'doc_data.widget_data.page1.Student Details.BMI_values.$.bmi'=>$monthly_bmi['bmi']);
		 
		$update = array('$set'=>$update_values);
		

		$response = $this->mongo_db->command(array( 
		'findAndModify' => $this->bmi_app_col_xl_import,
		'query'         => $query,
		'update'        => $update
		 ));
		 
		 $update_values_main = array('doc_data.widget_data.page1.Student Details.Height cms'=>$monthly_bmi['height'],
							   'doc_data.widget_data.page1.Student Details.Weight kgs'=>$monthly_bmi['weight'],
							   'doc_data.widget_data.page1.Student Details.BMI'=>$monthly_bmi['bmi']);
							   
		 $update_main = array('$set'=>$update_values_main);
		 
		 $response = $this->mongo_db->command(array( 
		'findAndModify' => $this->bmi_app_col_xl_import,
		'query'         => $query,
		'update'        => $update_main
		 ));
		 
		 if($response['ok'])
			return TRUE;
		else
			return FALSE; 
		
		
		//db.getCollection('healthcare20176616511646').update({},{'$pull':{"doc_data.widget_data.page1.Student Details.BMI_values":{"month":"2017-11"}}})
		
		//$this->mongo_db->pull('doc_data.widget_data.page1.Student Details.BMI_values',array('month'=>$month))->update('healthcare20176616511646');

	 }
	 
	 //$query_main = array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id,"doc_data.widget_data.page1.Student Details.Date"=>array('$elemMatch'=> $month));
	 
	 
		 $new_date = new DateTime($month);
			  	$ndate = $new_date->format('Y-m-d');
				
		 $after_update = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id))->set(array('doc_data.widget_data.page1.Student Details.Height cms'=>$monthly_bmi['height'],
									'doc_data.widget_data.page1.Student Details.Weight kgs'=>$monthly_bmi['weight'],
									'doc_data.widget_data.page1.Student Details.BMI'=>$monthly_bmi['bmi'],
									'doc_data.widget_data.page1.Student Details.Date'=>$ndate))
									->update($this->bmi_app_col_xl_import);
			
	 $after_update = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id))->push('doc_data.widget_data.page1.Student Details.BMI_values',$monthly_bmi)->update($this->bmi_app_col_xl_import);
		
	 if($after_update)
		return TRUE;
	 else
		return FALSE; 
	}
	function check_if_doc_exists_hb($unique_id)
	{
		$is_exists = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id))->get($this->hb_app_col_xl_import);
		
		if($is_exists)
		{
			return TRUE;
		}
		else {
		  return FALSE;
		}
		
	}
	public function create_hb_values_monthly($doc_data,$doc_properties,$history) {
		
		$document = array('doc_data' => $doc_data,'doc_properties'=>$doc_properties,'history'=>$history);
		$query = $this->mongo_db->insert ( $this->hb_app_col_xl_import, $document );
		return $query;
	}
	function update_hb_values($month,$monthly_hb,$unique_id)
	{
	 $check_query = array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id,"doc_data.widget_data.page1.Student Details.HB_values"=>array('$elemMatch'=>array("month"=>$month)));
	 
	 $is_already_updated = $this->mongo_db->where($check_query)->get($this->hb_app_col_xl_import);
	 
		
	 if($is_already_updated)
	 {
		 $query = array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id,"doc_data.widget_data.page1.Student Details.HB_values"=>array('$elemMatch'=>array("month"=>$month)));
		 
		$update_values = array('doc_data.widget_data.page1.Student Details.HB_values.$.hb'=>$monthly_hb['hb']);
		 
		$update = array('$set'=>$update_values);
		

		$response = $this->mongo_db->command(array( 
		'findAndModify' => $this->hb_app_col_xl_import,
		'query'         => $query,
		'update'        => $update
		 ));
		 
		 /*$update_values_main = array('doc_data.widget_data.page1.Student Details.HB'=>$monthly_hb['hb']);
							   
		 $update_main = array('$set'=>$update_values_main);
		 
		 $response = $this->mongo_db->command(array( 
		'findAndModify' => $this->hb_app_col_xl_import,
		'query'         => $query,
		'update'        => $update_main
		 ));*/
		 
		 if($response['ok'])
			return TRUE;
		else
			return FALSE; 
		
		
		//db.getCollection('healthcare20176616511646').update({},{'$pull':{"doc_data.widget_data.page1.Student Details.BMI_values":{"month":"2017-11"}}})
		
		//$this->mongo_db->pull('doc_data.widget_data.page1.Student Details.BMI_values',array('month'=>$month))->update('healthcare20176616511646');

	 }
	 
	 //$query_main = array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id,"doc_data.widget_data.page1.Student Details.Date"=>array('$elemMatch'=> $month));
	 
	 
			 $new_date = new DateTime($month);
			  	$ndate = $new_date->format('Y-m-d');
				
			 $after_update = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id))->set(array('doc_data.widget_data.page1.Student Details.Date'=>$ndate))
									->update($this->hb_app_col_xl_import);
			
	 $after_update = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Hospital Unique ID'=> $unique_id))->push('doc_data.widget_data.page1.Student Details.HB_values',$monthly_hb)->update($this->hb_app_col_xl_import);
		
	 if($after_update)
		return TRUE;
	 else
		return FALSE; 
	}
	public function get_fcm_token($user_type)
	{
		if(preg_match('/PANACEA/i', $user_type))
		{
			$query = $this->mongo_db->select(array('fcm_token'))->where(array('user_type' =>array('$regex' => 'PANACEA_DOCTOR')))->get('panacea_doctor_notifications');
			return $query;
		}elseif(preg_match('/TTWREIS/i', $user_type))
		{
			$query = $this->mongo_db->select(array('fcm_token'))->where(array('user_type' =>array('$regex' => 'TTWREIS_DOCTOR')))->get('ttwreis_doctor_notifications');
			return $query;
		}elseif(preg_match('/TMREIS/i', $user_type))
		{
			$query = $this->mongo_db->select(array('fcm_token'))->where(array('user_type' =>array('$regex' => 'TMREIS_DOCTOR')))->get('tmreis_doctor_notifications');
			return $query;
		}elseif(preg_match('/BCWELFARE/i', $user_type))
		{
			$query = $this->mongo_db->select(array('fcm_token'))->where(array('user_type' =>array('$regex' => 'BCWELFARE_DOCTOR')))->get('bcwelfare_doctor_notifications');
			return $query;
		}
	}

	public function get_study_circle_data_model($uid) {

		$last_submitted = "2018-11-";
		$query = $this->mongo_db->limit(1)->select ( array (
				'doc_data.widget_data',
				'doc_data.chart_data',
				'doc_data.external_attachments',
				'history' 
		) )->whereLike ( "doc_data.widget_data.page1.Personal Information.Hospital Unique ID", $uid )->whereLike('history.last_stage.time',$last_submitted)->get ( $this->screening_app_col );
		//log_message("debug","update personal Info for modelllllll114816".print_r($query,true));
		 if ($query) {
			
			$result ['screening'] = $query;
			///$result ['request'] = $query_request;
			return $result;
		} else {
			$result ['screening'] = false;
			//$result ['request'] = false;
			return $result;
		} 
	}

	public function get_sevier_count($type)
	{
		$final_values_6 = array();
		$final_values_8 = array();
		$final_values_10_12 = array();
		$final_values_8_10 = array();
		$query = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.HB_values'))->where(array('doc_data.widget_data.page1.Student Details.HB_values.hb' => array('$exists' => true),'doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true)))->get($this->hb_app_col);
		/*$query = array('doc_data.widget_data.page1.Student Details.HB_values' => array('$slice' => -1));

		$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => $query
					)
					];
		$response = $this->mongo_db->command(array( 
				'aggregate' => $this->hb_app_col,
				'pipeline'         => $pipeline
				 ));
		echo print_r($response,true);exit();*/
		
		/*unset($final_values_6);
				$final_values_6 = array();
				unset($final_values_8);
				$final_values_8 = array();
				unset($final_values_10_12);
				$final_values_10_12 = array();*/
		foreach ($query as $hb_values)
		{
			$end_hb = end($hb_values['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
			if($end_hb['hb'] <= 6 )
			{				
				array_push($final_values_6, $hb_values);
			}else if ($end_hb['hb'] > 6 && $end_hb['hb'] <= 8)
			{				
				array_push($final_values_8, $hb_values);
			}else if($end_hb['hb'] > 10 && $end_hb['hb'] <= 12)
			{				
				array_push($final_values_10_12, $hb_values);				
			}else 
			if($end_hb['hb'] > 8 && $end_hb['hb'] <= 10) 
			{				
				array_push($final_values_8_10, $hb_values);
			}
					
		}

			$final_data['below_6_hb_values'] = count($final_values_6);
			$final_data['sevier'] = count($final_values_8);
			$final_data['mild'] = count($final_values_10_12);
			$final_data['moderate'] = count($final_values_8_10);
		/*$final_data['below_6_hb_values'] = count($final_values);

		$query = $this->mongo_db->whereLt('doc_data.widget_data.page1.Student Details.HB_values.hb',8)->get($this->hb_app_col);
		foreach ($query as $hb_values)
		{
			$end_hb = end($hb_values['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
			if($end_hb['hb'] <= 8 )
			{
				array_push($final_values, $hb_values);
			}
					
		}
		$final_data['sevier'] = count($final_values);

		$query = $this->mongo_db->whereBetween('doc_data.widget_data.page1.Student Details.HB_values.hb',10.1,12.0)->get($this->hb_app_col);

		foreach ($query as $hb_values)
		{
			$end_hb = end($hb_values['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
			if($end_hb['hb'] >= 10 || $end_hb['hb'] <= 12 )
			{
				array_push($final_values, $hb_values);
			}
					
		}
		$final_data['mild'] = count($final_values);

		$query = $this->mongo_db->whereBetween('doc_data.widget_data.page1.Student Details.HB_values.hb',8.1,10)->get($this->hb_app_col);
		foreach ($query as $hb_values)
		{
			$end_hb = end($hb_values['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
			if($end_hb['hb'] >= 8 || $end_hb['hb'] <= 10 )
			{
				array_push($final_values, $hb_values);
			}
					
		}
		$final_data['moderate'] = count($final_values);*/

		if(!empty($final_data))
		{
			return $final_data;
		}else{
			return FALSE;
		}
	}
	public function get_bmi_count($type)
	{
		$ages_list = array(10,11,12,13,14,15,16,17,18,19,20);
		$final_array_10 = array();
		$final_array_11 = array();
		$final_array = array();
		
		foreach ($ages_list as $age) 
		{
			switch ($age) {
				case 10 :
					$query['under_weight_10'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',13.2)->count($this->bmi_app_col);
					$query['over_weight_10'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',19)->count($this->bmi_app_col);
					$query['normal_weight_10'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',13.2, 18)->count($this->bmi_app_col);

					//array_push($final_array_10, $query);
				break;

				case 11:
				
					$query['under_weight_11'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',14)->count($this->bmi_app_col);
					$query['over_weight_11'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',20)->count($this->bmi_app_col);
					$query['normal_weight_11'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',14, 19.2)->count($this->bmi_app_col);

					//array_push($final_array_11, $query);
				break;

				case 12:
					$query['under_weight_12'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',14.2)->count($this->bmi_app_col);
					$query['over_weight_12'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',21)->count($this->bmi_app_col);
					$query['normal_weight_12'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',14.2, 20.8)->count($this->bmi_app_col);
					//array_push($final_array_12, $query);
				break;

				case 13:
					$query['under_weight_13'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',14.3)->count($this->bmi_app_col);
					$query['over_weight_13'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',21.5)->count($this->bmi_app_col);
					$query['normal_weight_13'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',14.3, 21.1)->count($this->bmi_app_col);
					
				break;

				case 14:
					$query['under_weight_14'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',14.6)->count($this->bmi_app_col);
					$query['over_weight_14'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',22)->count($this->bmi_app_col);
					$query['normal_weight_14'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',14.6, 21.8)->count($this->bmi_app_col);
					//array_push($final_array_12, $query);
				break;

				case 15:
					$query['under_weight_15'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',14.8)->count($this->bmi_app_col);
					$query['over_weight_15'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',23)->count($this->bmi_app_col);
					$query['normal_weight_15'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',14.8, 22)->count($this->bmi_app_col);
					//array_push($final_array_12, $query);
				break;

				case 16:
					$query['under_weight_16'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',15.2)->count($this->bmi_app_col);
					$query['over_weight_16'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',23)->count($this->bmi_app_col);
					$query['normal_weight_16'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',15.2, 22.4)->count($this->bmi_app_col);
					//array_push($final_array_12, $query);
				break;

				case 17:
					$query['under_weight_17'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',15.6)->count($this->bmi_app_col);
					$query['over_weight_17'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',24)->count($this->bmi_app_col);
					$query['normal_weight_17'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',15.6, 23)->count($this->bmi_app_col);
					//array_push($final_array_12, $query);
				break;

				case 18:
					$query['under_weight_18'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',18)->count($this->bmi_app_col);
					$query['over_weight_18'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',25)->count($this->bmi_app_col);
					$query['normal_weight_18'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',18, 25)->count($this->bmi_app_col);
					//array_push($final_array_12, $query);
				break;

				case 19:
					$query['under_weight_19'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',18)->count($this->bmi_app_col);
					$query['over_weight_19'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',25)->count($this->bmi_app_col);
					$query['normal_weight_19'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',18, 25)->count($this->bmi_app_col);
					//array_push($final_array_12, $query);
				break;

				case 20:
					$query['under_weight_20'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',18)->count($this->bmi_app_col);
					$query['over_weight_20'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',25)->count($this->bmi_app_col);
					$query['normal_weight_20'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true), 'doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',18, 25)->count($this->bmi_app_col);
					array_push($final_array, $query);
				break;
				
				default:
				# code...
				break;
			}
		}
		
		$final_bmi_array = array();
		$doc_data['under_weight'] = "";
		$doc_data['over_weight'] = "";
		$doc_data['normal_weight'] = "";
		foreach ($final_array as $key => $value)
		{
			foreach ($value as $index => $counts) {
				if(preg_match('/under_weight/i', $index))
				{
					$doc_data['under_weight'] += $counts;
				}elseif(preg_match('/over_weight/i', $index))
				{
					$doc_data['over_weight'] += $counts;
				}elseif(preg_match('/normal_weight/i', $index))
				{
					$doc_data['normal_weight'] += $counts;
				}
			}
			array_push($final_bmi_array, $doc_data);
		}
		
		return $final_bmi_array[0];
		/*$query['below_14_bmi_values'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true)))->whereLt('doc_data.widget_data.page1.Student Details.BMI_values.bmi',14)->count($this->bmi_app_col);
		$query['under_weight'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true)))->whereLt('doc_data.widget_data.page1.Student Details.BMI_values.bmi',18.5)->count($this->bmi_app_col);
		$query['over_weight'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true)))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_values.bmi',25.00,29.99)->count($this->bmi_app_col);
		$query['obese'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => ($type != "All") ? $type : array('$exists' => true)))->wheregte('doc_data.widget_data.page1.Student Details.BMI_values.bmi',30)->count($this->bmi_app_col);
		if(!empty($query))
		{
			return $query;
		}else{
			return FALSE;
		}*/
	}

	public function get_student_type_for_tails($type)
	{
		$data['hb'] = $this->get_sevier_count($type);
		$data['bmi'] = $this->get_bmi_count($type);
		$data['chronic'] = $this->get_chronic_asthma_count($type);
		$data['request'] = $this->get_total_emergency_req_count($type);
		return $data;
	}
	public function get_bmi_students_docs($bmi_type, $age)
	{
		
		$age = trim($age);
		
		switch ($bmi_type) {
			/*case 'Below 14 BMI Count ':
			//$search_query = array('doc_data.widget_data.page1.Student Details.BMI_values' => array('$elemMatch' => array('bmi' => 14)));
				//$query = $this->mongo_db->limit(1000)->whereLt($search_query)->get($this->bmi_app_col);
				$query = $this->mongo_db->limit(1000)->whereLt('doc_data.widget_data.page1.Student Details.BMI_values.bmi',14)->get($this->bmi_app_col);

				return $query;
				break;*/

				case 'Under Weight Count ':
				if($age == 10)
				{

				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',13.2)->get($this->bmi_app_col);
				}elseif($age == 11)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',14)->get($this->bmi_app_col);
				}
				elseif($age == 12)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',14.2)->get($this->bmi_app_col);
				}
				elseif($age == 13)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',14.3)->get($this->bmi_app_col);
				}
				elseif($age == 14)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',14.6)->get($this->bmi_app_col);
				}
				elseif($age == 15)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',14.8)->get($this->bmi_app_col);
				}
				elseif($age == 16)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',15.2)->get($this->bmi_app_col);
				}
				elseif($age == 17)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',15.6)->get($this->bmi_app_col);
				}elseif($age == 18)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',18)->get($this->bmi_app_col);
				}
				elseif($age == 19)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',18)->get($this->bmi_app_col);
				}
				elseif($age == 20)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereLt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',18)->get($this->bmi_app_col);
				}
				return $query;
				break;
				//====================================Normal Weight
				case 'Normal Weight Count ':
				if($age == 10)
				{

				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',13.2, 18)->get($this->bmi_app_col);
				}elseif($age == 11)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',14, 19.2)->get($this->bmi_app_col);
				}
				elseif($age == 12)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',14.2, 20.8)->get($this->bmi_app_col);
				}
				elseif($age == 13)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',14.3, 21.1)->get($this->bmi_app_col);
				}
				elseif($age == 14)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',14.6, 21.8)->get($this->bmi_app_col);
				}
				elseif($age == 15)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',14.8, 22)->get($this->bmi_app_col);
				}
				elseif($age == 16)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',15.2, 22.4)->get($this->bmi_app_col);
				}
				elseif($age == 17)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',15.6, 23)->get($this->bmi_app_col);
				}elseif($age == 18)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',18, 25)->get($this->bmi_app_col);
				}
				elseif($age == 19)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',18, 25)->get($this->bmi_app_col);
				}
				elseif($age == 20)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',18, 25)->get($this->bmi_app_col);
				}
				return $query;
				break;

				case 'Over Weight Count ':
				if($age == 10)
				{

				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',19)->get($this->bmi_app_col);
				}elseif($age == 11)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',20)->get($this->bmi_app_col);
				}
				elseif($age == 12)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',21)->get($this->bmi_app_col);
				}
				elseif($age == 13)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',21.5)->get($this->bmi_app_col);
				}
				elseif($age == 14)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',22)->get($this->bmi_app_col);
				}
				elseif($age == 15)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',23)->get($this->bmi_app_col);
				}
				elseif($age == 16)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',23)->get($this->bmi_app_col);
				}
				elseif($age == 17)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',24)->get($this->bmi_app_col);
				}elseif($age == 18)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',25)->get($this->bmi_app_col);
				}
				elseif($age == 19)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',25)->get($this->bmi_app_col);
				}
				elseif($age == 20)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',25)->get($this->bmi_app_col);
				}
				return $query;
				break;

				/*case 'Obese Count ':
				if($age == 10)
				{

				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',26)->get($this->bmi_app_col);
				}elseif($age == 11)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',26)->get($this->bmi_app_col);
				}
				elseif($age == 12)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',26)->get($this->bmi_app_col);
				}
				elseif($age == 13)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',27)->get($this->bmi_app_col);
				}
				elseif($age == 14)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',27)->get($this->bmi_app_col);
				}
				elseif($age == 15)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',28)->get($this->bmi_app_col);
				}
				elseif($age == 16)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',28)->get($this->bmi_app_col);
				}
				elseif($age == 17)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',29)->get($this->bmi_app_col);
				}elseif($age == 18)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',30)->get($this->bmi_app_col);
				}
				elseif($age == 19)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',30)->get($this->bmi_app_col);
				}
				elseif($age == 20)
				{

					$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Age' => $age))->whereGt('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',30)->get($this->bmi_app_col);
				}
				return $query;
				break;*/
			
			default:
				# code...
				break;
		}
	}
	public function get_hb_students_docs($hb_type)
	{
		//ini_set ( 'memory_limit',"2G");
		
		$final_values = array();
		switch ($hb_type) {
			case 'Very Severe Anemia Cases Count':
				$query = $this->mongo_db->select(array('doc_data.widget_data'))->where(array('doc_data.widget_data.page1.Student Details.HB_values.hb' => array('$lte' => 6)))->get($this->hb_app_col);
				
				foreach ($query as $hb_values) {
					$end_hb = end($hb_values['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
					if($end_hb['hb'] <= 6 )
					{
						array_push($final_values, $hb_values);
					}
					
				}
				return $final_values;
				break;

			case 'Severe Anemia Cases Count':
				$query = $this->mongo_db->select(array('doc_data.widget_data'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_values.hb',6,8)->get($this->hb_app_col);
				foreach ($query as $hb_values) {
					$end_hb = end($hb_values['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
					if($end_hb['hb'] > 6 && $end_hb['hb'] <= 8 )
					{
						array_push($final_values, $hb_values);
					}
					
				}
				return $final_values;
				break;

			case 'Mild Anemia Cases Count':
				$query = $this->mongo_db->select(array('doc_data.widget_data'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_values.hb',10.1,12.0)->get($this->hb_app_col);
				foreach ($query as $hb_values) {
					$end_hb = end($hb_values['doc_data']['widget_data']['page1']['Student Details']['HB_values']);

					if($end_hb['hb'] > 10 &&  $end_hb['hb'] <= 12.0)
					{
						array_push($final_values, $hb_values);
					}
					
				}
				
				return $final_values;
				break;

			case 'Moderate Anemia Cases Count':
				$query = $this->mongo_db->select(array('doc_data.widget_data'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_values.hb',8.1,10)->get($this->hb_app_col);
				foreach ($query as $hb_values) {
					$end_hb = end($hb_values['doc_data']['widget_data']['page1']['Student Details']['HB_values']);
					if($end_hb['hb'] > 8 && $end_hb['hb'] <= 10)
					{
						array_push($final_values, $hb_values);
					}
					
				}
				return $final_values;
				break;
			
			default:
				# code...
				break;
		}
	}
	public function get_chronic_students_docs($chronic_type)
	{
		/*var_dump($chronic_type);
		exit;*/
		switch ($chronic_type) {
			case 'Anemia':
		
				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Blood' => "Anemia"))->whereLike('doc_data.widget_data.page2.Review Info.Request Type',"Chronic")->get($this->request_app_col_static_html);
				return $query;
				break;

				case 'TB':
				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Others' => "TB"))->whereLike('doc_data.widget_data.page2.Review Info.Request Type',"Chronic")->get($this->request_app_col_static_html);
				return $query;
				break;

				case 'Asthma':
				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Respiratory_system' => "Asthma"))->whereLike('doc_data.widget_data.page2.Review Info.Request Type',"Chronic")->get($this->request_app_col_static_html);
				return $query;
				break;

				case 'Scabies':
				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Skin' => "Scabies"))->whereLike('doc_data.widget_data.page2.Review Info.Request Type',"Chronic")->get($this->request_app_col_static_html);
				return $query;
				break;

				case 'Epilepsy':
				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Central_nervous_system' => "Epilepsy"))->whereLike('doc_data.widget_data.page2.Review Info.Request Type',"Chronic")->get($this->request_app_col_static_html);
				return $query;
				break;
				
				case 'Hypothyroidism':
				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Endo' => "Hypothyroidism"))->whereLike('doc_data.widget_data.page2.Review Info.Request Type',"Chronic")->get($this->request_app_col_static_html);
				return $query;
				break;

				case 'HIV':
				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Others' => "HIV"))->whereLike('doc_data.widget_data.page2.Review Info.Request Type',"Chronic")->get($this->request_app_col_static_html);
				return $query;
				break;

				case 'Diabetes':
				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Endo' => "Diabetes Milletus Type 1"))->whereLike('doc_data.widget_data.page2.Review Info.Request Type',"Chronic")->get($this->request_app_col_static_html);
				return $query;
				break;

			default:
				# code...
				break;
		}
	}

	public function get_emergency_req_students_docs($emergencyReq)
	{
		$request_type = explode(" ", $emergencyReq);
		$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => $request_type[0]))->get($this->request_app_col_static_html);
		return $query;
	}

	public function get_field_officer_req_students_docs($fieldOfficerReq)
	{
		switch ($fieldOfficerReq) {
				case 'Out Patient':
				$query = $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => "Out Patients"))->get("field_officer_report");
				return $query;
				break;

				case 'Admitted Cases':
				$query = $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => "Emergency or Admitted"))->get("field_officer_report");
				return $query;
				break;

				case 'Review Cases':
				$query = $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => "Review Cases"))->get("field_officer_report");
				return $query;
				break;

				case 'Surgery Cases':
				$query = $this->mongo_db->where(array('doc_data.widget_data.Emergency or Admitted.Doctor Advice' => "Surgery"))->get("field_officer_report");
				return $query;
				break;

				case 'Doctor Visits':
				$query = $this->mongo_db->get("doctor_visiting_reports");
				return $query;
				break;


			default:
				break;
		}
	}
	 public function show_field_officer_submit_student($doc_id)
    {
            $getSubmittedDocs = $this->mongo_db->where(array('doc_properties.doc_id'=>$doc_id))->get('field_officer_report');
            return $getSubmittedDocs;
    } 
    public function show_doctor_visiting_reports($doc_id)
    {
            $getSubmittedDocs = $this->mongo_db->where(array('doc_properties.doc_id'=>$doc_id))->get('doctor_visiting_reports');
            return $getSubmittedDocs;
    }
    public function update_dr_visiting_and_submit($doc_id,$remarks)
    {
    	$getSubmittedDocs = $this->mongo_db->where(array('doc_properties.doc_id'=>$doc_id))->set(array('doc_data.widget_data.Student Details.remarks' => $remarks))->update('doctor_visiting_reports');
            return $getSubmittedDocs;
    }

	public function get_screened_count()
	{
		$exists_screened = array ("doc_data.widget_data.page3.Physical Exam" => array ('$exists' => true),
			"doc_data.widget_data.page4.Doctor Check Up" => array ('$exists' => true));
		$total_count = $this->mongo_db->where($exists_screened)->count($this->screening_app_col);

		$eye_screened = array ("doc_data.widget_data.page3.Physical Exam" => array ('$exists' => true),
			"doc_data.widget_data.page7.Colour Blindness.Right" => array ('$ne' => ""),"doc_data.widget_data.page7.Colour Blindness.Eye Lids" => array ('$exists' => true),'history.last_stage.time' => array('$gte' => "2018-10-01"));
		$eye_screened_count = $this->mongo_db->where($eye_screened)->count($this->screening_app_col);

		$dental_screened = array ("doc_data.widget_data.page3.Physical Exam" => array ('$exists' => true),
			"doc_data.widget_data.page9.Dental Check-up.Oral Hygiene" => array ('$ne' => ""),"doc_data.widget_data.page9.Dental Check-up.Root Canal Treatment" => array ('$exists' => true),'history.last_stage.time' => array('$gte' => "2018-10-01"));
		$dental_screened_count = $this->mongo_db->where($dental_screened)->count($this->screening_app_col);

		$qry['total_count'] = $total_count;
		$qry['eye_screened_count'] = $eye_screened_count;
		$qry['dental_screened_count'] = $dental_screened_count;

		if($qry){
			return $qry;
		}else{
			return FALSE;
		}

			
	}

	public function get_attendance_count()
	{
		$date = $this->today_date;

		$query = $this->mongo_db->whereLike('history.last_stage.time',$date)->count($this->absent_app_col);

		if($query){
			return $query;
		}else{
			return FALSE;
		}
	}
	public function get_sanitation_count()
	{
		$date = $this->today_date;

		$query = $this->mongo_db->whereLike('history.last_stage.time',$date)->count($this->sanitation_app_col_v2);

		if($query){
			return $query;
		}else{
			return FALSE;
		}
	}

	public function get_chronic_asthma_count($type)
	{
		$date = $this->today_date;

		$query['chronic'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Info.Gender' => ($type != "All") ? $type : array('$exists' => true)))->whereLike('doc_data.widget_data.page2.Review Info.Request Type',"Chronic")->count($this->request_app_col_static_html);

		$query['anemia'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Blood' => "Anemia",'doc_data.widget_data.page1.Student Info.Gender' => ($type != "All") ? $type : array('$exists' => true)))->whereLike('doc_data.widget_data.page2.Review Info.Request Type',"Chronic")->count($this->request_app_col_static_html);

		$query['tb'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Others' => "TB", 'doc_data.widget_data.page1.Student Info.Gender' => ($type != "All") ? $type : array('$exists' => true)))->whereLike('doc_data.widget_data.page2.Review Info.Request Type',"Chronic")->count($this->request_app_col_static_html);

		$query['asthma'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Respiratory_system' => "Asthma", 'doc_data.widget_data.page1.Student Info.Gender' => ($type != "All") ? $type : array('$exists' => true)))->whereLike('doc_data.widget_data.page2.Review Info.Request Type',"Chronic")->count($this->request_app_col_static_html);

		$query['scabies'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Skin' => "Scabies", 'doc_data.widget_data.page1.Student Info.Gender' => ($type != "All") ? $type : array('$exists' => true)))->whereLike('doc_data.widget_data.page2.Review Info.Request Type',"Chronic")->count($this->request_app_col_static_html);

		$query['epilepsy'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Central_nervous_system' => "Epilepsy", 'doc_data.widget_data.page1.Student Info.Gender' => ($type != "All") ? $type : array('$exists' => true)))->whereLike('doc_data.widget_data.page2.Review Info.Request Type',"Chronic")->count($this->request_app_col_static_html);

		$query['hypothyroidism'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Endo' => "Hypothyroidism", 'doc_data.widget_data.page1.Student Info.Gender' => ($type != "All") ? $type : array('$exists' => true)))->whereLike('doc_data.widget_data.page2.Review Info.Request Type',"Chronic")->count($this->request_app_col_static_html);

		$query['hiv'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Others' => "HIV", 'doc_data.widget_data.page1.Student Info.Gender' => ($type != "All") ? $type : array('$exists' => true)))->whereLike('doc_data.widget_data.page2.Review Info.Request Type',"Chronic")->count($this->request_app_col_static_html);

		$query['diabetese'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Endo' => "Diabetes Milletus Type 1", 'doc_data.widget_data.page1.Student Info.Gender' => ($type != "All") ? $type : array('$exists' => true)))->whereLike('doc_data.widget_data.page2.Review Info.Request Type',"Chronic")->count($this->request_app_col_static_html);
		//echo print_r($query,TRUE);exit();
		if($query){
			return $query;
		}else{
			return FALSE;
		}
	}

	public function get_total_emergency_req_count($type)
	{
		$query['total_normal_req_count'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal",
			'doc_data.widget_data.page1.Student Info.Gender' => ($type != 'All') ? $type : array('$exists' => true), 'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured")))->count($this->request_app_col_static_html);
		$query['total_emergency_req_count'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Emergency", 'doc_data.widget_data.page1.Student Info.Gender' => ($type != 'All') ? $type : array('$exists' => true), 'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured")))->count($this->request_app_col_static_html);
		$query['total_chronic_req_count'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic", 'doc_data.widget_data.page1.Student Info.Gender' => ($type != 'All') ? $type : array('$exists' => true), 'doc_data.widget_data.page2.Review Info.Status' => array('$ne' => "Cured")))->count($this->request_app_col_static_html);
		$query['doctor_visits_total_count'] = $this->mongo_db->count("doctor_visiting_reports");

		$query['out_patient_total_count'] = $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => "Out Patients"))->count("field_officer_report");

		$query['admitted_total_count'] = $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => "Emergency or Admitted"))->count("field_officer_report");

		$query['review_cases_total_count'] = $this->mongo_db->where(array('doc_data.widget_data.type_of_request' => "Review Cases"))->count("field_officer_report");

		$query['surgery_cases_total_count'] = $this->mongo_db->where(array('doc_data.widget_data.Emergency or Admitted.Doctor Advice' => "Surgery"))->count("field_officer_report");

		if($query){
			return $query;
		}else{
			return FALSE;
		}
	}

		public function get_schools_health_status_count_model()
		{
			$all_schools_name = array();
			$all_schools = array();
			$schools_list = $this->get_all_schools();
			$zone1['label'] = "Red";
			$zone1['value']=0;
			$zone1['school_name'] =  array();
			$zone1['school_count'] = 0;
			$zone2['label'] = "Yellow";
			$zone2['value']=0;
			$zone2['school_name'] = array();
			$zone2['school_count'] = 0;
			$zone3['label'] = "Green";
			$zone3['value']=0;
			$zone3['school_name'] =  array();
			$zone3['school_count'] = 0;
			$all_asthma_cases = array();
			$all_kidney_cases = array();
			$all_scabies_cases = array();
			$all_epilepsy_cases = array();
			$all_bmi_cases = array();
			$all_hb_cases = array();
			$astham_cases_details = array();
			$kidney_cases_details = array();
			$scabies_cases_details = array();
			$epilipsy_cases_details = array();
			$bmi_details = array();
			$bmi_between_14_and_28_details = array();
			$bmi_above_28_details = array();
			$hb_between_6_and_18_details = array();
			$hb_details = array();
			$asthma_count = 0;
			$kidney_count = 0;
			$scabies_count = 0;
			$epilipsy_count = 0;
			$bmi_count = 0;
			$hb_count = 0;
			$zone1['criteria'] = [];
			$zone2['criteria'] = [];
			$zone3['criteria'] = [];
			$zone1['current_school_name'] = [];
			$zone2['current_school_name'] = [];
			$zone3['current_school_name'] = [];

			$all_cases = array();
			foreach($schools_list as $school)
			{
				/*
				$and_merged_array = array();
				$or_merged_array = array();

				$asthma = array("doc_data.widget_data.page1.Problem Info.Chronic.Respiratory_system" => "Asthma");
				$scabies = array("doc_data.widget_data.page1.Problem Info.Chronic.Skin" => "Scabies");
				$epilepy = array("doc_data.widget_data.page1.Problem Info.Chronic.Central_nervous_system" => "Epilepy");
				$kidney = array("doc_data.widget_data.page1.Problem Info.Chronic.Kidney" => array(
							'$nin' => array(
								[]
							)
						));

				$cured = array("doc_data.widget_data.page2.Review Info.Status" => array(
							'$nin' => array(
								'Cured'
							)
						)
					);
				$school_name = array("doc_data.widget_data.page1.Student Info.School Name.field_ref" => $school['school_name']
				);

				array_push($and_merged_array, $cured);
				array_push($and_merged_array, $school_name);

				array_push($or_merged_array, $asthma);
				array_push($or_merged_array, $scabies);
				array_push($or_merged_array, $epilepy);
				array_push($or_merged_array, $kidney);
				

				$pipeline = [ 
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true 
							) 
					),
					array (
							'$match' => array(
								'$or' => $or_merged_array,
								'$and' => $and_merged_array
							)
					)
					];
					$response = $this->mongo_db->command ( array (
							'aggregate' => $this->request_app_col_static_html,
							'pipeline' => $pipeline 
					) );
					//echo print_r($response,true);exit();
					$result = array();
				if($response["ok"])
				{
					if(count($response['result']) == 0)
					{

					}else
					{
						
						foreach ($response['result'] as $index => $document) {
							
							if(isset($document['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'][$index]) == "Asthma")
							{							
								$asthma_cases_details['school_name'] = $school['school_name'];
			    				$asthma_cases_details['asthma_issues_docs'] = $document;
								$asthma_cases_details['asthma_issues_count'] = count($document);
								if($asthma_cases_details['asthma_issues_count']>8)
								{
									$asthma_weight = 3;
								}
								elseif($asthma_cases_details['asthma_issues_count']>4)
								{
									$asthma_weight = 2;

								}
								else
								{
									$asthma_weight = 1;
								}
							}else if(isset($document['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'][$index]) == "Scabies")
							{
								$scabies_cases_details['school_name'] = $school;
							    $scabies_cases_details['scabies_issues_docs'] = $scabies_docs;
								$scabies_cases_details['scabies_issues_count'] = count($scabies_docs);
								if($scabies_cases_details['scabies_issues_count']>8 )
								{
									$scabies_weight = 3;
								}
								elseif($scabies_cases_details['scabies_issues_count']>4)
								{
									$scabies_weight = 2;
								}
								else
								{
									$scabies_weight = 1;
								}
							}else if(isset($document['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'][$index]) == "Epilepy")
							{
								$epilipsy_cases_details['school_name'] = $school;
							    $epilipsy_cases_details['epilipsy_issues_docs'] = $epilipsy_docs;
								$epilipsy_cases_details['epilipsy_issues_count'] = count($epilipsy_docs);
								if($epilipsy_cases_details['epilipsy_issues_count']>8)
								{
									$epilipsy_weight = 3;
								}
								elseif($epilipsy_cases_details['epilipsy_issues_count']>4)
								{
									$epilipsy_weight = 2;
								}
								else
								{
									$epilipsy_weight = 1;
								}
							}else if(isset($document['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney']) != [])
							{
								$kidney_cases_details['school_name'] = $school['school_name'];
								$kidney_cases_details['kidney_issues_docs'] = $kidney_docs;
								$kidney_cases_details['kidney_issues_count'] = count($kidney_docs);

								if($kidney_cases_details['kidney_issues_count']>8)
								{
									$kidney_weight = 3;
								}
								elseif($kidney_cases_details['kidney_issues_count']>4)
								{
									$kidney_weight = 2;
								}
								else
								{
									$kidney_weight = 1;
								}
							}
						}
						//echo print_r($result,true);
						//exit();
					}
				}*/
			
				
				//$asthma_cases_details['school_name'] = $school['school_name'];
			    //$asthma_cases_details['asthma_issues_docs'] = $asthma_docs;
				//$asthma_cases_details['asthma_issues_count'] = count($asthma_docs);
				
				// Asthma cases
				$asthma_docs = $this->mongo_db->select ( array (
						//"doc_data.widget_data",
						"doc_data.widget_data.page1.Student Info.School Name.field_ref"
				) )->where(array(
					"doc_data.widget_data.page1.Problem Info.Chronic.Respiratory_system" => "Asthma",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school['school_name']
				) )->whereNe(array(
					'doc_data.widget_data.page2.Review Info.Status' => "Cured"
				))->get ( $this->request_app_col_static_html );


				// Kidney cases
				$kidney_docs = $this->mongo_db->select ( array (
						//"doc_data.widget_data",
						"doc_data.widget_data.page1.Student Info.School Name.field_ref"
				) )->where(array(
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school['school_name']
				) )->whereNe(array(
					"doc_data.widget_data.page1.Problem Info.Chronic.Kidney" => array(),
					'doc_data.widget_data.page2.Review Info.Status' => "Cured"
				))->get ( $this->request_app_col_static_html );

				
				// Scabies cases
				$scabies_docs = $this->mongo_db->select ( array (
						//"doc_data.widget_data",
						"doc_data.widget_data.page1.Student Info.School Name.field_ref"
				) )->where(array(
					"doc_data.widget_data.page1.Problem Info.Chronic.Skin" => "Scabies",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school['school_name'],
				) )->whereNe(array(
					'doc_data.widget_data.page2.Review Info.Status' => "Cured"
				))->get ( $this->request_app_col_static_html );

				// Epilipsy cases
				$epilipsy_docs = $this->mongo_db->select ( array (
						//"doc_data.widget_data",
						"doc_data.widget_data.page1.Student Info.School Name.field_ref"
				) )->where(array(
					"doc_data.widget_data.page1.Problem Info.Chronic.Central_nervous_system" => "Epilepsy",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$school['school_name'],
				) )->whereNe(array(
					'doc_data.widget_data.page2.Review Info.Status' => "Cured"
				))->get ( $this->request_app_col_static_html );

				// BMI cases
				// Getting BMI value LESSTHAN 14 Students
				$bmi_docs = $this->mongo_db->select ( array (
						//"doc_data.widget_data",
						"doc_data.widget_data"
				) )->whereLte(
					"doc_data.widget_data.page1.Student Details.BMI_values.bmi",14
				)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( 'healthcare2017617145744625' );
				$bmi_details['school_name'] = $school['school_name'];
			    $bmi_details['bmi_issues_docs'] = $bmi_docs;
				$bmi_details['bmi_issues_count'] = count($bmi_docs);

				// Getting BMI value BETWEEN 14 AND 28 Students
				$bmi_between_14_and_28_docs = $this->mongo_db->select ( array (
						//"doc_data.widget_data",
						"doc_data.widget_data"
				) )->whereBetween(
					"doc_data.widget_data.page1.Student Details.BMI_values.bmi",14,28
				)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( 'healthcare2017617145744625' );
				$bmi_between_14_and_28_details['school_name'] = $school['school_name'];
			    $bmi_between_14_and_28_details['bmi_between_docs'] = $bmi_between_14_and_28_docs;
				$bmi_between_14_and_28_details['bmi_between_count'] = count($bmi_between_14_and_28_docs);

				// Getting BMI value ABOVE 28 Students
				$bmi_above_28_docs = $this->mongo_db->select ( array (
						"doc_data.widget_data"
				) )->whereGte(
					"doc_data.widget_data.page1.Student Details.BMI_values.bmi",28
				)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( 'healthcare2017617145744625' );
				$bmi_above_28_details['school_name'] = $school['school_name'];
			    $bmi_above_28_details['bmi_above_docs'] = $bmi_above_28_docs;
				$bmi_above_28_details['bmi_above_count'] = count($bmi_above_28_docs);

				// Getting All BMI value BETWEEN 14 AND 28 Students
				$bmi_total_docs = $this->mongo_db->select ( array (
						"doc_data.widget_data"
				) )->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->count ( 'healthcare2017617145744625' );

				// Getting HB value LESSTHAN 6 Students
				$hb_docs = $this->mongo_db->select ( array (
						"doc_data.widget_data"
				) )->whereLte(
					"doc_data.widget_data.page1.Student Details.HB_values.hb",6
				)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( 'himglobin_report_col' );
				$hb_details['school_name'] = $school['school_name'];
			    $hb_details['hb_issues_docs'] = $hb_docs;
				$hb_details['hb_issues_count'] = count($hb_docs);

				// Getting HB value BETWEEEN 6 AND 18 Students
				$hb_between_6_and_18_docs = $this->mongo_db->select ( array (
						//"doc_data.widget_data",
						"doc_data.widget_data"
				) )->whereBetween(
					"doc_data.widget_data.page1.Student Details.HB_values.hb",7,18
				)->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->get ( 'himglobin_report_col' );
				$hb_between_6_and_18_details['school_name'] = $school['school_name'];
			    $hb_between_6_and_18_details['hb_between_docs'] = $hb_between_6_and_18_docs;
				$hb_between_6_and_18_details['hb_between_count'] = count($hb_between_6_and_18_docs);

				

				$hb_total_docs = $this->mongo_db->select ( array (
						"doc_data.widget_data"
				) )->where(array("doc_data.widget_data.school_details.School Name"=>$school['school_name']))->count ( 'himglobin_report_col' );
			
				$asthma_cases_details['school_name'] = $school['school_name'];
			    $asthma_cases_details['asthma_issues_docs'] = $asthma_docs;
				$asthma_cases_details['asthma_issues_count'] = count($asthma_docs);	
				if($asthma_cases_details['asthma_issues_count']>8)
				{
					$asthma_weight = 3;
				}
				elseif($asthma_cases_details['asthma_issues_count']>4)
				{
					$asthma_weight = 2;
				}
				else
				{
					$asthma_weight = 1;
				}
				$kidney_cases_details['school_name'] = $school['school_name'];
				$kidney_cases_details['kidney_issues_docs'] = $kidney_docs;
				$kidney_cases_details['kidney_issues_count'] = count($kidney_docs);

				if($kidney_cases_details['kidney_issues_count']>8)
				{
					$kidney_weight = 3;
				}
				elseif($kidney_cases_details['kidney_issues_count']>4)
				{
					$kidney_weight = 2;
				}
				else
				{
					$kidney_weight = 1;
				}
			    
				$scabies_cases_details['school_name'] = $school;
			    $scabies_cases_details['scabies_issues_docs'] = $scabies_docs;
				$scabies_cases_details['scabies_issues_count'] = count($scabies_docs);
				if($scabies_cases_details['scabies_issues_count']>8 )
				{
					$scabies_weight = 3;
				}
				elseif($scabies_cases_details['scabies_issues_count']>4)
				{
					$scabies_weight = 2;
				}
				else
				{
					$scabies_weight = 1;
				}
				$epilipsy_cases_details['school_name'] = $school;
			    $epilipsy_cases_details['epilipsy_issues_docs'] = $epilipsy_docs;
				$epilipsy_cases_details['epilipsy_issues_count'] = count($epilipsy_docs);
				if($epilipsy_cases_details['epilipsy_issues_count']>8)
				{
					$epilipsy_weight = 3;
				}
				elseif($epilipsy_cases_details['epilipsy_issues_count']>4)
				{
					$epilipsy_weight = 2;
				}
				else
				{
					$epilipsy_weight = 1;
				}
				//Calculate Grade
				//echo print_r($school['school_name']."  ".$total_grade,true)."<br>";
				$total_grade = $asthma_weight + $kidney_weight + $scabies_weight + $epilipsy_weight;
				//echo print_r($total_grade,true);
					if($bmi_total_docs == 0 || $hb_total_docs == 0 || $bmi_details['bmi_issues_count'] > 0 || $bmi_above_28_details['bmi_above_count'] > 0 || $hb_details['hb_issues_count'] > 0 || $scabies_cases_details['scabies_issues_count'] > 0 || $total_grade > 12){
						array_push($zone1['school_name'],$school['school_name']);
						$test['sn'] = $school;
						array_push($zone1['current_school_name'],$test['sn']['school_name']);
						$zone1_criteria = array($test['sn']['school_name'],$bmi_total_docs==0?"BMI VALUES NOT SUBMITTED TILL TODAY":"BMI Values are less than 14, total No: ".$bmi_details['bmi_issues_count'],"BMI Values are greater than 28, total No: ".$bmi_above_28_details['bmi_above_count'],$hb_total_docs==0?"HB VALUES NOT SUBMITTED TILL TODAY": "HB Values are less than 6, total No: ".$hb_details['hb_issues_count'], "Total Asthma Cases: ".$asthma_cases_details['asthma_issues_count'],"Total Kidney: ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy Cases: ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies Cases: ".$scabies_cases_details['scabies_issues_count']);
						array_push($zone1['criteria'],$zone1_criteria);
						//array_push($zone1['criteria'],$zone1_criteria);
						$zone1['school_count']++;
						
						$zone1['value']++;
				}
				elseif($total_grade > 8 || $bmi_between_14_and_28_details['bmi_between_count'] > 0 || 
					$hb_between_6_and_18_details['hb_between_count'] > 0 )
				{
					//YEL
						array_push($zone2['school_name'],$school['school_name']);
						$test['sn'] = $school;
						array_push($zone2['current_school_name'],$test['sn']['school_name']);
						$zone2['school_count']++;
						$zone2['value']++;
						$zone2_criteria = array($test['sn']['school_name'], "BMI Values are >14 and <28, Total No: ".$bmi_between_14_and_28_details['bmi_between_count'], "HB Values are  >6 and >18, Total No: ".$hb_between_6_and_18_details['hb_between_count'], "Total Asthma Cases: ".$asthma_cases_details['asthma_issues_count'],"Total Kidney: ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy Cases: ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies Cases: ".$scabies_cases_details['scabies_issues_count']);
								array_push($zone2['criteria'],$zone2_criteria);
				}
				else
				{
					//GREEN
						array_push($zone3['school_name'],$school['school_name']);
						$test['sn'] = $school;
						array_push($zone3['current_school_name'],$test['sn']['school_name']);
						$zone3['school_count']++;
						$zone3['value']++;
						$zone3_criteria = array($test['sn']['school_name'], "Total Asthma Cases: ".$asthma_cases_details['asthma_issues_count'],"Total Kidney ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy Cases : ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies Cases : ".$scabies_cases_details['scabies_issues_count']);
							array_push($zone3['criteria'],$zone3_criteria);
				}

				$asthma_count += $asthma_cases_details['asthma_issues_count'];
				$kidney_count += $kidney_cases_details['kidney_issues_count'];
				$scabies_count += $scabies_cases_details['scabies_issues_count'];
				$epilipsy_count += $epilipsy_cases_details['epilipsy_issues_count'];
				$bmi_count += $bmi_details['bmi_issues_count'];

				array_push($all_asthma_cases, $asthma_cases_details);
				array_push($all_kidney_cases, $kidney_cases_details);
				array_push($all_scabies_cases, $scabies_cases_details);
				array_push($all_epilepsy_cases, $epilipsy_cases_details);
				array_push($all_bmi_cases, $bmi_details);
				array_push($all_hb_cases, $hb_details);
			}
		//exit;
	
				array_push($all_cases, $zone1);
				
				array_push($all_cases, $zone2);
				
				array_push($all_cases, $zone3);
				
				array_push($all_cases, $all_asthma_cases);
				array_push($all_cases, $all_kidney_cases);
				array_push($all_cases, $all_scabies_cases);
				array_push($all_cases, $all_epilepsy_cases);
		

			return $all_cases;
			
		}
	public function get_schools_health_status_count_model_new($student_type = false)
	{
		$all_schools_name = array();
		$all_schools = array();
		$schools_list = $this->get_all_schools_student_type($student_type);
		$zone1['label'] = "Red";
		$zone1['value'] = 0;
		$zone1['school_name'] =  array();
		$zone1['school_count'] = 0;
		$zone2['label'] = "Green";
		$zone2['value'] = 0;
		$zone2['school_name'] = array();
		$zone2['school_count'] = 0;
		$zone3['label'] = "Yellow";
		$zone3['value'] = 0;
		$zone3['school_name'] =  array();
		$zone3['school_count'] = 0;
		$all_asthma_cases = array();
		$all_kidney_cases = array();
		$all_scabies_cases = array();
		$all_epilepsy_cases = array();
		$all_bmi_cases = array();
		$all_hb_cases = array();
		$astham_cases_details = array();
		$kidney_cases_details = array();
		$scabies_cases_details = array();
		$epilipsy_cases_details = array();
		$bmi_details = array();
		$bmi_between_14_and_28_details = array();
		$bmi_above_28_details = array();
		$hb_between_6_and_18_details = array();
		$hb_details = array();
		$asthma_count = 0;
		$kidney_count = 0;
		$scabies_count = 0;
		$epilipsy_count = 0;
		$bmi_count = 0;
		$hb_count = 0;
		$under_weight_students = 0;
		$bmi_total_docs = "";
		$hb_total_docs = "";
		$zone1['criteria'] = [];
		$zone2['criteria'] = [];
		$zone3['criteria'] = [];
		$zone1['current_school_name'] = [];
		$zone2['current_school_name'] = [];
		$zone3['current_school_name'] = [];

		$under_weight_array = array();

		$all_cases = array();
		foreach ($schools_list as $school) 
		{
			unset($under_weight_students);		
			$under_weight_students = 0;
			$asthma_count_doc = $this->mongo_db->where(array('School Status.2019-02-28.Asthma' => array('$ne' => 0),'School Details.School Name' => $school['school_name']))->count('get_schools_status_collection');
			$kidney_count_doc = $this->mongo_db->where(array('School Status.2019-02-28.Kidney' => array('$ne' => 0),'School Details.School Name' => $school['school_name']))->count('get_schools_status_collection');
			$epilipsy_count_doc = $this->mongo_db->where(array('School Status.2019-02-28.Epilepy' => array('$ne' => 0),'School Details.School Name' => $school['school_name']))->count('get_schools_status_collection');

			$scabies_count_doc = $this->mongo_db->where(array('School Status.2019-02-28.Scabies' => array('$ne' => 0),'School Details.School Name' => $school['school_name']))->count('get_schools_status_collection');
			
			$under_count_doc = $this->mongo_db->select(array())->where(array('School Status.2019-02-28.BMI.Under Weight' => array('$ne' => 0),'School Details.School Name' => $school['school_name']))->get('get_schools_status_collection');
				if(isset($under_count_doc) && !empty($under_count_doc))
				{
					foreach ($under_count_doc as $value) {
					$under_weight_students = $value['School Status']['2019-02-28']['BMI']['Under Weight'];
					}	
				}	
							
			$over_count_doc = $this->mongo_db->where(array('School Status.2019-02-28.BMI.Over Weight' => array('$ne' => 0),'School Details.School Name' => $school['school_name']))->count('get_schools_status_collection');
			$obese_count_doc = $this->mongo_db->where(array('School Status.2019-02-28.BMI.Obese' => array('$ne' => 0),'School Details.School Name' => $school['school_name']))->count('get_schools_status_collection');
			
			$severe_count_doc = $this->mongo_db->where(array('School Status.2019-02-28.HB.Severe' => array('$ne' => 0),'School Details.School Name' => $school['school_name']))->count('get_schools_status_collection');
			$moderate_count_doc = $this->mongo_db->where(array('School Status.2019-02-28.HB.Moderate' => array('$ne' => 0),'School Details.School Name' => $school['school_name']))->count('get_schools_status_collection');
			$mild_count_doc = $this->mongo_db->where(array('School Status.2019-02-28.HB.Mild' => array('$ne' => 0),'School Details.School Name' => $school['school_name']))->count('get_schools_status_collection');

			if($under_weight_students == 0 && $over_count_doc == 0 && $obese_count_doc == 0)
			{				
				$bmi_total_docs = "No BMI Values";//Not Submitted Still Now
			}
			if($severe_count_doc == 0 && $moderate_count_doc == 0 && $mild_count_doc == 0)
			{				
				$hb_total_docs = "No HB Values";//Not Submitted Still Now
			}	

			$under_weight_details['school_name'] = $school['school_name'];				
			$under_weight_details['under_weight_issues_count'] = $under_weight_students;

			$over_weight_details['school_name'] = $school['school_name'];				
			$over_weight_details['over_weight_issues_count'] = $over_count_doc;

			$obese_details['school_name'] = $school['school_name'];				
			$obese_details['obese_issues_count'] = $obese_count_doc;

			$severe_details['school_name'] = $school['school_name'];				
			$severe_details['severe_issues_count'] = $severe_count_doc;
			
			$moderate_details['school_name'] = $school['school_name'];				
			$moderate_details['moderate_issues_count'] = $moderate_count_doc;

			$mild_details['school_name'] = $school['school_name'];				
			$mild_details['mild_issues_count'] = $mild_count_doc;

			$asthma_cases_details['school_name'] = $school['school_name'];
			   // $asthma_cases_details['asthma_issues_docs'] = $asthma_docs;
				$asthma_cases_details['asthma_issues_count'] = $asthma_count_doc;	
				if($asthma_cases_details['asthma_issues_count']>8)
				{
					$asthma_weight = 3;
				}
				elseif($asthma_cases_details['asthma_issues_count']>4)
				{
					$asthma_weight = 2;
				}
				else
				{
					$asthma_weight = 1;
				}
				$kidney_cases_details['school_name'] = $school['school_name'];
				//$kidney_cases_details['kidney_issues_docs'] = $kidney_docs;
				$kidney_cases_details['kidney_issues_count'] = $kidney_count_doc;

				if($kidney_cases_details['kidney_issues_count']>8)
				{
					$kidney_weight = 3;
				}
				elseif($kidney_cases_details['kidney_issues_count']>4)
				{
					$kidney_weight = 2;
				}
				else
				{
					$kidney_weight = 1;
					
				}
			    
				$scabies_cases_details['school_name'] = $school;
			    //$scabies_cases_details['scabies_issues_docs'] = $scabies_docs;
				$scabies_cases_details['scabies_issues_count'] = $scabies_count_doc;
				if($scabies_cases_details['scabies_issues_count']>8 )
				{
					$scabies_weight = 3;
				}
				elseif($scabies_cases_details['scabies_issues_count']>4)
				{
					$scabies_weight = 2;
				}
				else
				{
					$scabies_weight = 1;
					
				}
				$epilipsy_cases_details['school_name'] = $school;
			    //$epilipsy_cases_details['epilipsy_issues_docs'] = $epilipsy_docs;
				$epilipsy_cases_details['epilipsy_issues_count'] = $epilipsy_count_doc;
				if($epilipsy_cases_details['epilipsy_issues_count']>8)
				{
					$epilipsy_weight = 3;
				}
				elseif($epilipsy_cases_details['epilipsy_issues_count']>4)
				{
					$epilipsy_weight = 2;
				}
				else
				{
					$epilipsy_weight = 1;
					
				}



			$total_grade = $asthma_weight + $kidney_weight + $scabies_weight + $epilipsy_weight;
							//echo print_r($total_grade,true);
			if($scabies_cases_details['scabies_issues_count'] > 6 || $total_grade > 15 || $under_weight_details['under_weight_issues_count'] > 6 || $over_weight_details['over_weight_issues_count'] > 6 || $obese_details['obese_issues_count'] > 6 )//|| $bmi_total_docs == "No BMI Values" || $hb_total_docs == "No HB Values")
			{ //|| $moderate_details['moderate_issues_count'] > 0){
					//echo print_r($school['school_name'],true);
					//echo print_r($bmi_total_docs,true);
					//echo print_r($under_weight_details['under_weight_issues_count'],true);
					//exit();
					array_push($zone1['school_name'],$school['school_name']);
					$test['sn'] = $school;
					array_push($zone1['current_school_name'],$test['sn']['school_name']);
					$zone1_criteria = array($test['sn']['school_name'],$bmi_total_docs == "No BMI Values" ? "BMI VALUES NOT SUBMITTED TILL TODAY":"BMI Values are greater than 28, total No: ".$obese_details['obese_issues_count'],"BMI Values are less than 14, total No: ".$under_weight_details['under_weight_issues_count'],$hb_total_docs == "No HB Values"?"HB VALUES NOT SUBMITTED TILL TODAY":"HB Values are less than 8, total no".$severe_details['severe_issues_count'],"Total Asthma Cases: ".$asthma_cases_details['asthma_issues_count'],"Total Kidney: ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy Cases: ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies Cases: ".$scabies_cases_details['scabies_issues_count']);
					array_push($zone1['criteria'],$zone1_criteria);

					//array_push($zone1['criteria'],$zone1_criteria);
					$zone1['school_count']++;					
					$zone1['value']++;
				}
				else if($total_grade > 8 )
				{
					//YEL
						array_push($zone3['school_name'],$school['school_name']);
						$test['sn'] = $school;
						array_push($zone3['current_school_name'],$test['sn']['school_name']);
						$zone3['school_count']++;
						$zone3['value']++;
						$zone3_criteria = array($test['sn']['school_name'],"Total Asthma Cases: ".$asthma_cases_details['asthma_issues_count'],"Total Kidney: ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy Cases: ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies Cases: ".$scabies_cases_details['scabies_issues_count']);
								array_push($zone3['criteria'],$zone3_criteria);
				}
				else
				{
					//GREEN
						array_push($zone2['school_name'],$school['school_name']);
						$test['sn'] = $school;
						array_push($zone2['current_school_name'],$test['sn']['school_name']);
						$zone2['school_count']++;
						$zone2['value']++;
						$zone2_criteria = array($test['sn']['school_name'], "Total Asthma Cases: ".$asthma_cases_details['asthma_issues_count'],"Total Kidney ".$kidney_cases_details['kidney_issues_count'],"Total Epilipsy Cases : ".$epilipsy_cases_details['epilipsy_issues_count'],"Total Scabies Cases : ".$scabies_cases_details['scabies_issues_count']);
							array_push($zone2['criteria'],$zone2_criteria);
				}

				$asthma_count += $asthma_cases_details['asthma_issues_count'];
				$kidney_count += $kidney_cases_details['kidney_issues_count'];
				$scabies_count += $scabies_cases_details['scabies_issues_count'];
				$epilipsy_count += $epilipsy_cases_details['epilipsy_issues_count'];
				//$bmi_count += $bmi_details['bmi_issues_count'];

				array_push($all_asthma_cases, $asthma_cases_details);
				array_push($all_kidney_cases, $kidney_cases_details);
				array_push($all_scabies_cases, $scabies_cases_details);
				array_push($all_epilepsy_cases, $epilipsy_cases_details);
				//array_push($all_bmi_cases, $bmi_details);
				//array_push($all_hb_cases, $hb_details);
		}

		
			
				array_push($all_cases, $zone1);
				
				array_push($all_cases, $zone2);
				
				array_push($all_cases, $zone3);
				
				array_push($all_cases, $all_asthma_cases);
				array_push($all_cases, $all_kidney_cases);
				array_push($all_cases, $all_scabies_cases);
				array_push($all_cases, $all_epilepsy_cases);
				//echo "<pre>";
				//echo print_r($all_cases,true); echo "</pre>";exit();

			return $all_cases;
			
		
	}
		public function get_chronic_student_docs_model($labelColor, $schoolName)
		{
		
			$all_cases_docs = array();
				
				$asthma_docs = $this->mongo_db->select ( array (
						"doc_data.widget_data",
				) )->where(array(
					"doc_data.widget_data.page1.Problem Info.Chronic.Respiratory_system" => "Asthma",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$schoolName
				) )->whereNe(array(
					'doc_data.widget_data.page2.Review Info.Status' => "Cured"
				))->get ( $this->request_app_col_static_html );
				$asthma['all_asthma_cases_docs'] = $asthma_docs;
				$asthma['all_asthma_cases_count'] = count($asthma_docs);
				array_push($all_cases_docs, $asthma);
				// Kidney cases
				$kidney_docs = $this->mongo_db->select ( array (
						"doc_data.widget_data",
						//"doc_data.widget_data.page1.Student Info.School Name.field_ref"
				) )->where(array(
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$schoolName
				) )->whereNe(array(
					"doc_data.widget_data.page1.Problem Info.Chronic.Kidney" => array(),
					'doc_data.widget_data.page2.Review Info.Status' => "Cured"
				))->get ( $this->request_app_col_static_html );

				$kidney['all_kidney_cases_docs'] = $kidney_docs;
				array_push($all_cases_docs, $kidney);
				// Scabies cases
				$scabies_docs = $this->mongo_db->select ( array (
						"doc_data.widget_data",
						//"doc_data.widget_data.page1.Student Info.School Name.field_ref"
				) )->where(array(
					"doc_data.widget_data.page1.Problem Info.Chronic.Skin" => "Scabies",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$schoolName,
				) )->whereNe(array(
					'doc_data.widget_data.page2.Review Info.Status' => "Cured"
				))->get ( $this->request_app_col_static_html );
				$scabies['all_scabies_cases_docs'] = $scabies_docs;
				array_push($all_cases_docs, $scabies);
				// Epilipsy cases
				$epilipsy_docs = $this->mongo_db->select ( array (
						"doc_data.widget_data",
						//"doc_data.widget_data.page1.Student Info.School Name.field_ref"
				) )->where(array(
					"doc_data.widget_data.page1.Problem Info.Chronic.Central_nervous_system" => "Epilepsy",
					"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$schoolName,
				) )->whereNe(array(
					'doc_data.widget_data.page2.Review Info.Status' => "Cured"
				))->get ( $this->request_app_col_static_html );
				$epilepsy['all_epilepsy_cases_docs'] = $epilipsy_docs;
				array_push($all_cases_docs, $epilepsy);

				$bmi_docs = $this->mongo_db->select ( array (
						"doc_data"
				) )->whereLte(
					"doc_data.widget_data.page1.Student Details.BMI_values.bmi",14
				)->where(array("doc_data.widget_data.school_details.School Name"=>$schoolName))->get ( 'healthcare2017617145744625' );
				$bmi['all_bmi_cases_docs'] = $bmi_docs;
				array_push($all_cases_docs, $bmi);
				
				$bmi_docs_28 = $this->mongo_db->select ( array (
						"doc_data"
				) )->whereGte(
					"doc_data.widget_data.page1.Student Details.BMI_values.bmi",28
				)->where(array("doc_data.widget_data.school_details.School Name"=>$schoolName))->get ( 'healthcare2017617145744625' );
				$bmi['all_bmi_cases_docs_28'] = $bmi_docs_28;
				array_push($all_cases_docs, $bmi);

				$hb_docs = $this->mongo_db->select ( array (
						"doc_data"
				) )->whereLte(
					"doc_data.widget_data.page1.Student Details.HB_values.hb",6
				)->where(array("doc_data.widget_data.school_details.School Name"=>$schoolName))->get ( 'himglobin_report_col' );
				$hb['all_hb_cases_docs'] = $hb_docs;
				array_push($all_cases_docs, $hb);
		
			return $all_cases_docs;

		}

	function check_date_of_exam($unique_id,$date_check,$eye_lids,$conjunctiva,$oral_hygiene,$carious_teeth)
	{
		$where_query = array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => $unique_id,'doc_data.widget_data.page3.Physical Exam' => array('$exists' => TRUE),'doc_data.widget_data.page2.Personal Information.Date of Exam' => $date_check,'doc_data.widget_data.page7.Colour Blindness.Eye Lids' => $eye_lids,
			'doc_data.widget_data.page7.Colour Blindness.Conjunctiva'=>$conjunctiva,
			'doc_data.widget_data.page9.Dental Check-up.Oral Hygiene'=>$oral_hygiene,
		'doc_data.widget_data.page9.Dental Check-up.Carious Teeth'=>$carious_teeth);
		$query = $this->mongo_db->select(array())->where($where_query)->count($this->screening_app_col);
		//log_message('error','query============250514'.print_r($query,true));
		if($query == 0)
		{
			return "No Document found";
		}else
		{
			return "document exists";
		}
	}
	/************************** request pie chart ##author Suman reddy start**********************************/
	public function get_schools_by_dist($dist_id) {

		if ($dist_id == "All") {
			ini_set ( 'memory_limit', '10G' );
			
			$count = $this->mongo_db->count ( $this->screening_app_col );
			if ($count < 10000) {
				$per_page = $count;
				$loop = 2; // $count / $per_page;
			} else {
				$per_page = 10000;
				$loop = $count / $per_page;
			}
			
			$result = [ ];
			for($page = 1; $page < $loop; $page ++) {
				$offset = $per_page * ($page);
				$pipeline = [ 
						array (
								'$project' => array (
										"doc_data.widget_data.page1" => true,
										"doc_data.widget_data.page2" => true 
								) 
						),
						array (
								'$limit' => $offset 
						),
						array (
								'$skip' => $offset - $per_page 
						) 
				];
				$response = $this->mongo_db->command ( array (
						'aggregate' => $this->screening_app_col,
						'pipeline' => $pipeline 
				) );
				$result = array_merge ( $result, $response ['result'] );
			}
			return $result;
		} else {
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$query = $this->mongo_db->select ( array (
					'school_name',
					'school_code',
					'school_mob',
					'contact_person_name' 
			) )->orderBy ( array (
					'school_name' => 1 
			) )->where (array('school_name' => array('$regex' => $dist_id )))->get ( $this->collections ['panacea_schools'] );
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			return $query;
		}
	}
	public function get_monthly_request_by_month($date_month,$school_name,$dt_name)
	{
		$date_month = substr($date_month,0,-3);
		
		$normal_request_counts = array();
		$normal_diease = array();
		$emergency_diease = array();
		$chronic_diease = array();
		
		$emergency_request_counts = array();
		$chronic_request_counts = array();
		
		if($school_name == "All" && $dt_name == "All")
		{
			$query = $this->mongo_db->select(array('doc_data.widget_data'))->whereLike("history.0.time" , $date_month)->get('healthcare201610114435690_static_html');			

			foreach ($query as $request_type)
			{
				$type = $request_type['doc_data']['widget_data']['page2']['Review Info']['Request Type'];
				
						
				switch ($type) {
					case 'Normal':					
						array_push($normal_request_counts, $type);
						$types['normal'] = count($normal_request_counts);
						$normal = $request_type['doc_data']['widget_data']['page1']['Problem Info']['Normal'];
						array_push($normal_diease, $normal);
						$types['disease_normal'] = $normal_diease;
						break;
					case 'Emergency':					
						array_push($emergency_request_counts, $type);
						$types['emergency'] = count($emergency_request_counts);
						$emergency = $request_type['doc_data']['widget_data']['page1']['Problem Info']['Emergency'];
						array_push($emergency_diease, $emergency);
						$types['disease_emergency'] = $emergency_diease;

						break;	
					case 'Chronic':					
						array_push($chronic_request_counts, $type);
						$types['chronic'] = count($chronic_request_counts);
						$chronic = $request_type['doc_data']['widget_data']['page1']['Problem Info']['Chronic'];
						array_push($chronic_diease, $chronic);
						$types['disease_chronic'] = $chronic_diease;
						break;
					
					default:
						;
						break;
				}
				
			}
			if($types)
			{
				return $types;
			}else{
				return FALSE;
			}	
		}

		if($dt_name != "All" && $school_name == "All")
		{
			$query = $this->mongo_db->select(array('doc_data.widget_data'))->whereLike("history.0.time" , $date_month)->where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name))->get('healthcare201610114435690_static_html');			
			if(!empty($query) && isset($query))
			{
				foreach ($query as $request_type)
				{
					$type = $request_type['doc_data']['widget_data']['page2']['Review Info']['Request Type'];
					
							
					switch ($type) {
						case 'Normal':					
							array_push($normal_request_counts, $type);
							$types['normal'] = count($normal_request_counts);
							$normal = $request_type['doc_data']['widget_data']['page1']['Problem Info']['Normal'];
							array_push($normal_diease, $normal);
							$types['disease_normal'] = $normal_diease;
							

							break;
						case 'Emergency':					
							array_push($emergency_request_counts, $type);
							$types['emergency'] = count($emergency_request_counts);
							$emergency = $request_type['doc_data']['widget_data']['page1']['Problem Info']['Emergency'];
							array_push($emergency_diease, $emergency);
							$types['disease_emergency'] = $emergency_diease;

							break;	
						case 'Chronic':					
							array_push($chronic_request_counts, $type);
							$types['chronic'] = count($chronic_request_counts);
							$chronic = $request_type['doc_data']['widget_data']['page1']['Problem Info']['Chronic'];
							array_push($chronic_diease, $chronic);
							$types['disease_chronic'] = $chronic_diease;
							break;
						
						default:
							;
							break;
					}
					
				}
			}else
			{
				$types['no_data'] = "No Data is Availability";
			}
			if($types)
			{
				return $types;
			}else{
				return FALSE;
			}
		}
		if($dt_name != "All" && $school_name != "All")
		{
			$query = $this->mongo_db->select(array('doc_data.widget_data'))->whereLike("history.0.time" , $date_month)->where(array('doc_data.widget_data.page1.Student Info.District.field_ref' => $dt_name,'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->get('healthcare201610114435690_static_html');	
			
		  if(!empty($query) && isset($query))
		   {
			foreach ($query as $request_type)
			{
				$type = $request_type['doc_data']['widget_data']['page2']['Review Info']['Request Type'];
				
						
				switch ($type) {
					case 'Normal':					
						array_push($normal_request_counts, $type);
						$types['normal'] = count($normal_request_counts);
						$normal = $request_type['doc_data']['widget_data']['page1']['Problem Info']['Normal'];
						array_push($normal_diease, $normal);
						$types['disease_normal'] = $normal_diease;
						break;
					case 'Emergency':					
						array_push($emergency_request_counts, $type);
						$types['emergency'] = count($emergency_request_counts);
						$emergency = $request_type['doc_data']['widget_data']['page1']['Problem Info']['Emergency'];
						array_push($emergency_diease, $emergency);
						$types['disease_emergency'] = $emergency_diease;

						break;	
					case 'Chronic':					
						array_push($chronic_request_counts, $type);
						$types['chronic'] = count($chronic_request_counts);
						$chronic = $request_type['doc_data']['widget_data']['page1']['Problem Info']['Chronic'];
						array_push($chronic_diease, $chronic);
						$types['disease_chronic'] = $chronic_diease;
						break;
					
					default:
						;
						break;
				}
				
			}
		  }else
			{
				$types['no_data'] = "No Data is Availability";
			}
			if($types)
			{
				return $types;
			}else{
				return FALSE;
			}
		}

		
		
		
	}
	public function drill_down_chronic_student_list($chronic_symtom)
	{
		$chronic_sym = explode(".", $chronic_symtom);
		$month = substr($chronic_sym[2], 0,-3);
		
		
		if($chronic_sym[3] == "All" && $chronic_sym[4] == "All")
		{			
			$serch = array("doc_data.widget_data.page1.Problem Info.Chronic.".$chronic_sym[0] => $chronic_sym[1],'history.0.time' => array('$regex' => $month));			
			$query = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where($serch)->get('healthcare201610114435690_static_html');
		}else if($chronic_sym[3] != "All" && $chronic_sym[4] == "All") 
		{			
			$serch = array("doc_data.widget_data.page1.Problem Info.Chronic.".$chronic_sym[0] => $chronic_sym[1],'history.0.time' => array('$regex' => $month),'doc_data.widget_data.page1.Student Info.District.field_ref' => $chronic_sym[3]);		
			$query = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where($serch)->get('healthcare201610114435690_static_html');
		}else if($chronic_sym[3] != "All" && $chronic_sym[4] != "All")
		{
			
			$serch = array("doc_data.widget_data.page1.Problem Info.Chronic.".$chronic_sym[0] => $chronic_sym[1],'history.0.time' => array('$regex' => $month),'doc_data.widget_data.page1.Student Info.District.field_ref' => $chronic_sym[3],'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $chronic_sym[4]);		
			$query = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where($serch)->get('healthcare201610114435690_static_html');
		}
		
		return $query;			
	}
	public function drill_down_emergency_student_list($emergency_symtom)
	{	
		
		$emergency_sym = explode(".", $emergency_symtom);
		$month = substr($emergency_sym[2], 0,-3);
		if($emergency_sym[3] == "All" && $emergency_sym[4] == "All")
		{			
			$serch = array("doc_data.widget_data.page1.Problem Info.Emergency.".$emergency_sym[0] => $emergency_sym[1],'history.0.time' => array('$regex' => $month));			
			$query = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where($serch)->get('healthcare201610114435690_static_html');
		}else if($emergency_sym[3] != "All" && $emergency_sym[4] == "All") 
		{			
			$serch = array("doc_data.widget_data.page1.Problem Info.Emergency.".$emergency_sym[0] => $emergency_sym[1],'history.0.time' => array('$regex' => $month),'doc_data.widget_data.page1.Student Info.District.field_ref' => $emergency_sym[3]);		
			$query = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where($serch)->get('healthcare201610114435690_static_html');
		}else if($emergency_sym[3] != "All" && $emergency_sym[4] != "All")
		{
			
			$serch = array("doc_data.widget_data.page1.Problem Info.Emergency.".$emergency_sym[0] => $emergency_sym[1],'history.0.time' => array('$regex' => $month),'doc_data.widget_data.page1.Student Info.District.field_ref' => $emergency_sym[3],'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $emergency_sym[4]);		
			$query = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where($serch)->get('healthcare201610114435690_static_html');
		}
		
		
		return $query;			
	}
	public function drill_down_normal_student_list($normal_symtom)
	{

		$normal_sym = explode(".", $normal_symtom);
		$month = substr($normal_sym[2], 0,-3);
		if($normal_sym[3] == "All" && $normal_sym[4] == "All")
		{			
			$serch = array("doc_data.widget_data.page1.Problem Info.Normal.".$normal_sym[0] => $normal_sym[1],'history.0.time' => array('$regex' => $month));			
			$query = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where($serch)->get('healthcare201610114435690_static_html');
		}else if($normal_sym[3] != "All" && $normal_sym[4] == "All") 
		{			
			$serch = array("doc_data.widget_data.page1.Problem Info.Normal.".$normal_sym[0] => $normal_sym[1],'history.0.time' => array('$regex' => $month),'doc_data.widget_data.page1.Student Info.District.field_ref' => $normal_sym[3]);		
			$query = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where($serch)->get('healthcare201610114435690_static_html');
		}else if($normal_sym[3] != "All" && $normal_sym[4] != "All")
		{
			
			$serch = array("doc_data.widget_data.page1.Problem Info.Normal.".$normal_sym[0] => $normal_sym[1],'history.0.time' => array('$regex' => $month),'doc_data.widget_data.page1.Student Info.District.field_ref' => $normal_sym[3],'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $normal_sym[4]);		
			$query = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where($serch)->get('healthcare201610114435690_static_html');
		}
		
		return $query;			
	}
	public function get_all_students_count()
	{
		$females_count = $this->mongo_db->command(array('distinct' => $this->screening_app_col ,'key' => "doc_data.widget_data.page1.Personal Information.Hospital Unique ID",'query'=>array('doc_data.widget_data.page2.Personal Information.School Name' => array('$regex' => '(G).,', '$options' => 'i'))));
    	$males_count = $this->mongo_db->command(array('distinct' => $this->screening_app_col ,'key' => "doc_data.widget_data.page1.Personal Information.Hospital Unique ID",'query'=>array('doc_data.widget_data.page2.Personal Information.School Name' => array('$regex' => '(B).,', '$options' => 'i'))));
    	$gender['female'] = count($females_count['values']);
    	$gender['male'] = count($males_count['values']);
    	$gender['total_students'] = count($males_count['values']) + count($females_count['values']);
    	
		//$query = $this->mongo_db->count('healthcare2016226112942701');

		return $gender;
	}
      
	public function get_total_requests()
	{
		$data['total_req_count'] = $this->mongo_db->select(array())->whereNe(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Defects','doc_data.widget_data.page2.Review Info.Request Type' => 'Deficiency','doc_data.widget_data.page2.Review Info.Request Type' => "",'doc_data.widget_data.page2.Review Info.Request Type' => false))->count($this->request_app_col_static_html);
		
		$data['normal_req_count'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->count($this->request_app_col_static_html);

		$data['normal_req_count_not_cured'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal'))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->count($this->request_app_col_static_html);

		$data['normal_req_count_cured'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal'))->where(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->count($this->request_app_col_static_html);

		$data['emergency_req_count'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency'))->count($this->request_app_col_static_html);

		$data['emergency_req_count_not_cured'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency'))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => 'Cured'))->count($this->request_app_col_static_html);

		$data['emergency_req_count_cured'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency'))->where(array('doc_data.widget_data.page2.Review Info.Status' => 'Cured'))->count($this->request_app_col_static_html);

		$data['chronic_req_count'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->count($this->request_app_col_static_html);

		$data['chronic_req_count_not_cured'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic'))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => 'Cured'))->count($this->request_app_col_static_html);

		$data['chronic_req_count_cured'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic'))->where(array('doc_data.widget_data.page2.Review Info.Status' => 'Cured'))->count($this->request_app_col_static_html);
		return $data;
	}

	function get_counts_for_bar()
	{
		$count = $this->mongo_db->select(array(),array('_id'))->get('eye_abmormalities_2019');

		return $count;
	}

	
	/******************end*********************************************************/
	public function get_regular_followup_data($unique_id)
	{
		$query = $this->mongo_db->where('student_unique_id',$unique_id)->get('tswreis_reqular_followup_requests');
		return $query;
	}

	/**
	 * Helper: Student Health Track Chart
	 * @author YOGA NARASIMHA
	 */

	function get_data($start_date,$end_date, $selectedDistrict, $selectedSchool)
    {

    	$final_data = array();
    	$final_data_symptom = array();
    	$general_diseases_array = array();
    	$emergency_diseases_array = array();
    	$chronic_diseases_array = array();
    	if(($selectedDistrict == "All" && $selectedSchool == "All") || ($selectedDistrict == "All" && $selectedSchool == "All_ini"))
    	{
    		$condition = array (
					"history.time" => array ('$gte' => $start_date,'$lte' => $end_date)
					//"history.0.time" => array ('$regex' => "2019-11-06")
				);

	    	$all_general_diseases= $this->mongo_db->command(array('distinct' => "healthcare2016531124515424_static_html" ,'key' => "doc_data.widget_data.page1.Problem Info.Normal",'query'=>$condition));
	    	
	    			
					foreach ($all_general_diseases['values'] as $index=>$value)
					{
						foreach ($value as $symptom_category => $symptom_names) {
						
							if(!empty($symptom_names) && $symptom_names != array())
							{
								foreach ($symptom_names as $symptom)
								{	
									if(!in_array($symptom,$final_data_symptom))
									{
										$qry = $this->mongo_db->where(array("doc_data.widget_data.page1.Problem Info.Normal.$symptom_category"=>$symptom))->whereBetween('history.time', $start_date, $end_date)->count('healthcare2016531124515424_static_html');
										if($qry > 10)
										{
											$general['label'] = $symptom;
											$general['y'] = $qry;
											$general['symptom_category'] = $symptom_category;
											array_push($final_data, $general);
											array_push($final_data_symptom, $symptom);
										}
									}
								}
							}
						}
		      		}
		      		
				// Emergency Cases
	    	$all_emergency_diseases = $this->mongo_db->command(array('distinct' => "healthcare2016531124515424_static_html" ,'key' => "doc_data.widget_data.page1.Problem Info.Emergency",'query'=>$condition));
				foreach ($all_emergency_diseases['values'] as $index=>$value) {
					foreach ($value as $symptom_category => $symptom_names) {
						if(!empty($symptom_names) && $symptom_names != array())
						{
							foreach ($symptom_names as $symptom) {

								if(!in_array($symptom,$final_data_symptom))
									{
										$qry = $this->mongo_db->where(array("doc_data.widget_data.page1.Problem Info.Emergency.$symptom_category"=>$symptom))->whereBetween('history.time', $start_date, $end_date)->count('healthcare2016531124515424_static_html');
										if($qry > 0)
										{
											$emergency['label'] = $symptom;
											$emergency['y'] = $qry;
											$emergency['symptom_category'] = $symptom_category;
											array_push($final_data, $emergency);
											array_push($final_data_symptom, $symptom);
										}
									}
								}
							}
						}
					}


				// Chronic Cases
	    	$all_chronic_diseases = $this->mongo_db->command(array('distinct' => "healthcare2016531124515424_static_html" ,'key' => "doc_data.widget_data.page1.Problem Info.Chronic",'query'=>$condition));
				foreach ($all_chronic_diseases['values'] as $index=>$value) {
					foreach ($value as $symptom_category => $symptom_names) {
						if(!empty($symptom_names) && $symptom_names != array())
						{
							foreach ($symptom_names as $symptom) {

								if(!in_array($symptom,$final_data_symptom))
									{
										$qry = $this->mongo_db->where(array("doc_data.widget_data.page1.Problem Info.Chronic.$symptom_category"=>$symptom))->whereBetween('history.time', $start_date, $end_date)->count('healthcare2016531124515424_static_html');
										if($qry > 0)
										{
											$chronic['label'] = $symptom;
											$chronic['y'] = $qry;
											$chronic['symptom_category'] = $symptom_category;
											array_push($final_data, $chronic);
											array_push($final_data_symptom, $symptom);
										}
									}
								}
							}
						}
					}

	    	 return $final_data;
    	}

			/////////
    	elseif($selectedDistrict != "All" && $selectedSchool == "All")
    	{
    		$condition = array (
					"history.time" => array ('$gte' => $start_date,'$lte' => $end_date),
					'doc_data.widget_data.page1.Student Info.District.field_ref' => $selectedDistrict
				);


				//$qry = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Normal'=>$value, 'doc_data.widget_data.page1.Student Info.District.field_ref' => $selectedDistrict))->whereLike('history.0.time', $selectedMonth)->count($this->request_app_col_static_html);

				// Normal Cases
				$all_general_diseases= $this->mongo_db->command(array('distinct' => "healthcare2016531124515424_static_html" ,'key' => "doc_data.widget_data.page1.Problem Info.Normal",'query'=>$condition));

					foreach ($all_general_diseases['values'] as $index=>$value) {
						foreach ($value as $symptom_category => $symptom_names) {
							if(!empty($symptom_names) && $symptom_names != array())
							{
								foreach ($symptom_names as $symptom) {
									
									if(!in_array($symptom,$final_data_symptom))
									{
										$qry = $this->mongo_db->where(array("doc_data.widget_data.page1.Problem Info.Normal.$symptom_category"=>$symptom,'doc_data.widget_data.page1.Student Info.District.field_ref' => $selectedDistrict))->whereBetween('history.time', $start_date, $end_date)->count('healthcare2016531124515424_static_html');
										
										if($qry > 0)
										{
											$general['label'] = $symptom;
											$general['y'] = $qry;
											$general['symptom_category'] = $symptom_category;
											array_push($final_data, $general);
											array_push($final_data_symptom, $symptom);
										}
									}
								}
							}
						}
					 }



				// Emergency Cases
				$all_emergency_diseases = $this->mongo_db->command(array('distinct' => "healthcare2016531124515424_static_html" ,'key' => "doc_data.widget_data.page1.Problem Info.Emergency",'query'=>$condition));
				foreach ($all_emergency_diseases['values'] as $index=>$value) {
					foreach ($value as $symptom_category => $symptom_names) {
						if(!empty($symptom_names) && $symptom_names != array())
						{
							foreach ($symptom_names as $symptom) {

								if(!in_array($symptom,$final_data_symptom))
									{
										$qry = $this->mongo_db->where(array("doc_data.widget_data.page1.Problem Info.Emergency.$symptom_category"=>$symptom ,'doc_data.widget_data.page1.Student Info.District.field_ref' => $selectedDistrict))->whereBetween('history.time', $start_date, $end_date)->count('healthcare2016531124515424_static_html');
										if($qry > 0)
										{
											$emergency['label'] = $symptom;
											$emergency['y'] = $qry;
											$emergency['symptom_category'] = $symptom_category;
											array_push($final_data, $emergency);
											array_push($final_data_symptom, $symptom);
										}
									}
								}
							}
						}
					}


				// Chronic Cases
				$all_chronic_diseases = $this->mongo_db->command(array('distinct' => "healthcare2016531124515424_static_html" ,'key' => "doc_data.widget_data.page1.Problem Info.Chronic",'query'=>$condition));
				foreach ($all_chronic_diseases['values'] as $index=>$value) {
					foreach ($value as $symptom_category => $symptom_names) {

						if(!empty($symptom_names) && $symptom_names != array())
						{
							foreach ($symptom_names as $symptom) {
								
								if(!in_array($symptom,$final_data_symptom))
									{
										$test = array("doc_data.widget_data.page1.Problem Info.Chronic.$symptom_category"=>$symptom);
										$test2 = array ('$gte' => $start_date,'$lte' => $end_date);
										$qry = $this->mongo_db->where(array("doc_data.widget_data.page1.Problem Info.Chronic.$symptom_category"=>$symptom ,'doc_data.widget_data.page1.Student Info.District.field_ref' => $selectedDistrict))->whereBetween('history.time', $start_date, $end_date)->count('healthcare2016531124515424_static_html');
										if($qry > 0)
										{
											$chronic['label'] = $symptom;
											$chronic['y'] = $qry;
											$chronic['symptom_category'] = $symptom_category;
											array_push($final_data, $chronic);
											array_push($final_data_symptom, $symptom);
										}
									}
								}
							}
						}
					}

				

				 return $final_data;
    	}
    	elseif($selectedDistrict != "All" && $selectedSchool != "All")
    	{
    		$condition = array (
					"history.time" => array ('$gte' => $start_date,'$lte' => $end_date),
					'doc_data.widget_data.page1.Student Info.District.field_ref' => $selectedDistrict,
					'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $selectedSchool
				);

    		// Normal Cases
				$all_general_diseases = $this->mongo_db->command(array('distinct' => "healthcare2016531124515424_static_html" ,'key' => "doc_data.widget_data.page1.Problem Info.Normal",'query'=>$condition));
				foreach ($all_general_diseases['values'] as $index=>$value) {
					foreach ($value as $symptom_category => $symptom_names) {
						if(!empty($symptom_names) && $symptom_names != array())
						{
							foreach ($symptom_names as $symptom) {

								if(!in_array($symptom,$final_data_symptom))
									{
										$qry = $this->mongo_db->where(array("doc_data.widget_data.page1.Problem Info.Normal.$symptom_category"=>$symptom, 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $selectedSchool))->whereBetween('history.time', $start_date, $end_date)->count('healthcare2016531124515424_static_html');
										if($qry > 0)
										{
											$general['label'] = $symptom;
											$general['y'] = $qry;
											$general['symptom_category'] = $symptom_category;
											array_push($final_data, $general);
											array_push($final_data_symptom, $symptom);
										}
									}
								}
							}
						}
					}

	    	// Emergency Cases
				$all_emergency_diseases = $this->mongo_db->command(array('distinct' => "healthcare2016531124515424_static_html" ,'key' => "doc_data.widget_data.page1.Problem Info.Emergency",'query'=>$condition));
				foreach ($all_emergency_diseases['values'] as $index=>$value) {
					foreach ($value as $symptom_category => $symptom_names) {
						if(!empty($symptom_names) && $symptom_names != array())
						{
							foreach ($symptom_names as $symptom) {

								if(!in_array($symptom,$final_data_symptom))
									{
										$qry = $this->mongo_db->where(array("doc_data.widget_data.page1.Problem Info.Emergency.$symptom_category"=>$symptom, 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $selectedSchool))->whereBetween('history.time', $start_date, $end_date)->count('healthcare2016531124515424_static_html');
										if($qry > 0)
										{
											$emergency['label'] = $symptom;
											$emergency['y'] = $qry;
											$emergency['symptom_category'] = $symptom_category;
											array_push($final_data, $emergency);
											array_push($final_data_symptom, $symptom);
										}
									}
						}

					}
				}
			}

				// Chronic Cases
				$all_chronic_diseases = $this->mongo_db->command(array('distinct' => "healthcare2016531124515424_static_html" ,'key' => "doc_data.widget_data.page1.Problem Info.Chronic",'query'=>$condition));
				foreach ($all_chronic_diseases['values'] as $index=>$value) {
					foreach ($value as $symptom_category => $symptom_names) {
						if(!empty($symptom_names) && $symptom_names != array())
						{
							foreach ($symptom_names as $symptom) {

								if(!in_array($symptom,$final_data_symptom))
									{
										$qry = $this->mongo_db->where(array("doc_data.widget_data.page1.Problem Info.Chronic.$symptom_category"=>$symptom, 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $selectedSchool))->whereBetween('history.time', $start_date, $end_date)->count('healthcare2016531124515424_static_html');
										if($qry > 0)
										{
											$chronic['label'] = $symptom;
											$chronic['y'] = $qry;
											$chronic['symptom_category'] = $symptom_category;
											array_push($final_data, $chronic);
											array_push($final_data_symptom, $symptom);
										}
									}
						}

					}
				}
			}

	         return $final_data;
    	}

	 }
	 public function get_students_list_based_on_request_symptom($symptomName, $symptomCategory, $selectedMonth_start, $selectedMonth_end, $selectedDistrict, $selectedSchool)
	 {
	 		$merged_or_array = array();
			$merged_and_array = array();

	 	if(($selectedDistrict == "All" && $selectedSchool == "All"))
		{
				
			$normal = array("doc_data.widget_data.page1.Problem Info.Normal.$symptomCategory" => array('$in' => array($symptomName)));
			$emergency = array("doc_data.widget_data.page1.Problem Info.Emergency.$symptomCategory" => array('$in' => array($symptomName)));
			$chronic = array("doc_data.widget_data.page1.Problem Info.Chronic.$symptomCategory" => array('$in' => array($symptomName)));
			$month = array('history.time' => array('$gte' => $selectedMonth_start ,'$lte' => $selectedMonth_end));

			array_push($merged_or_array, $normal);
			array_push($merged_or_array, $emergency);
			array_push($merged_or_array, $chronic);
			array_push($merged_and_array, $month);

			$result = [ ];

			$pipeline = [
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true
							)
					),
					array (
							'$match' => array (
									'$or' => $merged_or_array,
									'$and' => $merged_and_array
							)
					)
			];

			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->request_app_col_static_html,
					'pipeline' => $pipeline
			) );

			if($response['ok'])
			{
				$doc = $response['result'];

			}

				return $doc;

    	}
    	elseif($selectedDistrict != "All" && $selectedSchool == "All")
    	{
    		
			$normal = array("doc_data.widget_data.page1.Problem Info.Normal.$symptomCategory" => array('$in' => array($symptomName)));
			$emergency = array("doc_data.widget_data.page1.Problem Info.Emergency.$symptomCategory" => array('$in' => array($symptomName)));
			$chronic = array("doc_data.widget_data.page1.Problem Info.Chronic.$symptomCategory" => array('$in' => array($symptomName)));
			$month = array('history.time' => array('$gte' => $selectedMonth_start ,'$lte' => $selectedMonth_end));
			$district = array('doc_data.widget_data.page1.Student Info.District.field_ref' => array('$in' => array($selectedDistrict)));

			array_push($merged_or_array, $normal);
			array_push($merged_or_array, $emergency);
			array_push($merged_or_array, $chronic);
			array_push($merged_and_array, $month);
			array_push($merged_and_array, $district);

			$result = [ ];

			$pipeline = [
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true
							)
					),
					array (
							'$match' => array (
									'$or' => $merged_or_array,
									'$and' => $merged_and_array
							)
					)
			];

			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->request_app_col_static_html,
					'pipeline' => $pipeline
			) );

			
			if($response['ok'])
			{
				$doc = $response['result'];

			}

				return $doc;
    	}
    	elseif($selectedDistrict != "All" && $selectedSchool != "All")
    	{
    		$normal = array("doc_data.widget_data.page1.Problem Info.Normal.$symptomCategory" => array('$in' => array($symptomName)));
			$emergency = array("doc_data.widget_data.page1.Problem Info.Emergency.$symptomCategory" => array('$in' => array($symptomName)));
			$chronic = array("doc_data.widget_data.page1.Problem Info.Chronic.$symptomCategory" => array('$in' => array($symptomName)));
			$month = array('history.time' => array('$gte' => $selectedMonth_start ,'$lte' => $selectedMonth_end));
			$district = array('doc_data.widget_data.page1.Student Info.District.field_ref' => array('$in' => array($selectedDistrict)));
			$school = array('doc_data.widget_data.page1.Student Info.School Name.field_ref' => array('$in' => array($selectedSchool)));

			array_push($merged_or_array, $normal);
			array_push($merged_or_array, $emergency);
			array_push($merged_or_array, $chronic);
			array_push($merged_and_array, $month);
			array_push($merged_and_array, $district);
			array_push($merged_and_array, $school);

			$result = [ ];

			$pipeline = [
					array (
							'$project' => array (
									"doc_data.widget_data" => true,
									"history" => true
							)
					),
					array (
							'$match' => array (
									'$or' => $merged_or_array,
									'$and' => $merged_and_array
							)
					)
			];

			$response = $this->mongo_db->command ( array (
					'aggregate' => $this->request_app_col_static_html,
					'pipeline' => $pipeline
			) );


			if($response['ok'])
			{
				$doc = $response['result'];

			}

			return $doc;
    	}
	 }


	 public function update_hb_request_pie($year)
	 {
	 	$docs = $this->mongo_db->select(array('doc_data.widget_data.page1.Student Details.HB_latest'),array('_id'))->where(array('doc_data.widget_data.page1.Student Details.HB_latest.month' => array('$regex' => $year."-*")))->get($this->hb_app_col);

	 	if(!empty($docs) && isset($docs))
 		{
 			$requests = array();
			$requests_array = array();
			$requests_array_normal = array();
			$requests_array_moderate = array();
			$requests_array_mild = array();
			foreach ($docs as $value) 
			{
				$hb_value = $value['doc_data']['widget_data']['page1']['Student Details']['HB_latest']['hb'];
				if($hb_value <= 8.0)
				{
					array_push($requests_array, $value);
				}else if($hb_value >= 12.0 && $hb_value <= 18.0)
				{
					array_push($requests_array_normal, $value);			
				}else if($hb_value >= 8.1 && $hb_value <= 10.0)
				{
					array_push($requests_array_moderate, $value);
				}else if($hb_value >= 10.1 && $hb_value < 12.0)
				{
					array_push($requests_array_mild, $value);
				}
			}

			$request ['label'] = 'SEVERE';
			$request ['value'] = count($requests_array);
			array_push ( $requests, $request );
			$request ['label'] = 'NORMAL';
			$request ['value'] = count($requests_array_normal);
			array_push ( $requests, $request );
			$request ['label'] = 'MODERATE';
			$request ['value'] = count($requests_array_moderate);
			array_push ( $requests, $request );
			$request ['label'] = 'MILD';
			$request ['value'] = count($requests_array_mild);
			array_push ( $requests, $request );
			
			return $requests;
 		}else
 		{
 			return false;
 		}		
	 }
	 public function drill_down_request_to_district($data, $year) {
		
		ini_set ( 'max_execution_time', 0 );
		ini_set ( 'memory_limit', '5G' );
		$query = [ ];
		
		$obj_data = json_decode ( $data, true );
		
		$type = $obj_data['label'];
		$count = $obj_data['value'];
		
		if($type == "SEVERE")
		{
			$query = $this->mongo_db->select(array('doc_data.widget_data.school_details'))->where(array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$lte' => 8.0),'doc_data.widget_data.page1.Student Details.HB_latest.month' => array('$regex' => $year."-*")))->limit($count)->get($this->hb_app_col);
		}elseif($type == "MODERATE")
		{
			$query = $this->mongo_db->select(array('doc_data.widget_data.school_details'))->where(array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$gte' => 8.1, '$lte' => 10.0),'doc_data.widget_data.page1.Student Details.HB_latest.month' => array('$regex' => $year."-*")))->limit($count)->get($this->hb_app_col);
		}elseif($type == "MILD")
		{
			$query = $this->mongo_db->select(array('doc_data.widget_data.school_details'))->where(array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$gte' => 10.1, '$lt' => 12.0),'doc_data.widget_data.page1.Student Details.HB_latest.month' => array('$regex' => $year."-*")))->limit($count)->get($this->hb_app_col);
		}elseif($type == "NORMAL")
		{
			$query = $this->mongo_db->select(array('doc_data.widget_data.school_details'))->where(array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$gte' => 12.0 ,'$lte' => 18.0),'doc_data.widget_data.page1.Student Details.HB_latest.month' => array('$regex' => $year."-*")))->limit($count)->get($this->hb_app_col);
		}
		
		
		$dist_list = [ ];
		foreach ( $query as $identifiers ) {
			
			$retrieval_list = array ();
			//$unique_id = $identifiers ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
			//$doc = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
			
			if (isset ( $identifiers ) && ! empty ( $identifiers ) && (count ( $identifiers ) > 0)) {
				$district = $identifiers ['doc_data'] ['widget_data'] ['school_details'] ['District'];
				if (isset ( $dist_list [$district] )) {
					$dist_list [$district] ++;
				} else {
					$dist_list [$district] = 1;
				}
			}
			
		}
		
		/*$end_date = date("Y-m-d H:i:s");
		log_message('debug',"end_date============17561".print_r($end_date,true));*/
		
		//log_message('error',"dist_list============17561".print_r($dist_list,true));
		
		/*$date = "2018-07-02";
		$dist_list = $this->mongo_db->select(array('pie_data.'.$search_param_1),array('_id'))->whereLike('pie_data.date',$date)->get('panacea_district_wise_healthrequest_counts');
		
		$dist_list = $dist_list[0]['pie_data'][$search_param_1][$search_param_2];*/
		
		$final_values = [ ];
		foreach ( $dist_list as $dicsts => $count ) {
			$result ['label'] = $dicsts;
			$result ['value'] = $count;
			array_push ( $final_values, $result );
		}
		
		return $final_values;
	}


	public function drilldown_request_to_school($data, $year) {
		
		ini_set ( 'max_execution_time', 0 );
		ini_set ( 'memory_limit', '5G' );
		$query = [ ];
		
		$obj_data = json_decode ( $data, true );
		$type = explode("/", $obj_data[0]);
		$type = trim($type[1]);
		$district = $obj_data[1];
		$count = $obj_data[2];
		
		if($type == "SEVERE")
		{
			$query = $this->mongo_db->select(array('doc_data.widget_data.school_details'))->where(array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$lte' => 8.0), 'doc_data.widget_data.page1.Student Details.HB_latest.month' => array('$regex' => $year."-*"), 'doc_data.widget_data.school_details.District' => $district))->limit($count)->get($this->hb_app_col);
		}elseif($type == "MODERATE")
		{
			$query = $this->mongo_db->select(array('doc_data.widget_data.school_details'))->where(array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$gte' => 8.1, '$lte' => 10.0), 'doc_data.widget_data.page1.Student Details.HB_latest.month' => array('$regex' => $year."-*"), 'doc_data.widget_data.school_details.District' => $district))->limit($count)->get($this->hb_app_col);
		}elseif($type == "MILD")
		{
			$query = $this->mongo_db->select(array('doc_data.widget_data.school_details'))->where(array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$gte' => 10.1, '$lt' => 12.0), 'doc_data.widget_data.page1.Student Details.HB_latest.month' => array('$regex' => $year."-*"), 'doc_data.widget_data.school_details.District' => $district))->limit($count)->get($this->hb_app_col);
		}elseif($type == "NORMAL")
		{
			$query = $this->mongo_db->select(array('doc_data.widget_data.school_details'))->where(array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$gte' => 12.0 ,'$lte' => 18.0), 'doc_data.widget_data.page1.Student Details.HB_latest.month' => array('$regex' => $year."-*"), 'doc_data.widget_data.school_details.District' => $district))->limit($count)->get($this->hb_app_col);
		}
		$school_list = [ ];
		$matching_docs = [ ];

		$dist_to_lower = strtolower ( $district );

		foreach ( $query as $request ) {
			
			$retrieval_list = array ();
			/*$unique_id = $request ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
			$doc = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );*/
			if (isset ( $request ) && ! empty ( $request ) && (count ( $request ) > 0)) {
				$district = $request ['doc_data'] ['widget_data'] ['school_details'] ['District'];
				if (strtolower ( $district ) == $dist_to_lower) {
					array_push ( $matching_docs, $request );
				}
			}
		}
		
		foreach ( $matching_docs as $docs ) {
			$school_name = $docs ['doc_data'] ['widget_data'] ['school_details'] ['School Name'];
			if (isset ( $school_list [$school_name] )) {
				$school_list [$school_name] ++;
			} else {
				$school_list [$school_name] = 1;
			}
		}
		
		
		//log_message('error',"school_listttttttttttt=====".print_r($school_list,true));
		//exit();
		/*$date = "2018-07-02";
		$dist = strtoupper( $obj_data [1] );
		$dist_list = $this->mongo_db->select(array('pie_data.'.$search_param_1),array('_id'))->whereLike('pie_data.date',$date)->get('panacea_school_wise_healthrequest_counts');
		
		$school_list = $dist_list[0]['pie_data'][$search_param_1][$search_param_2][$dist];*/
		
		$final_values = [ ];
		foreach ( $school_list as $school => $count ) {
			$result ['label'] = $school;
			$result ['value'] = $count;
			array_push ( $final_values, $result );
		}
		
		return $final_values;
	}

	public function drilldown_request_to_student($data, $year) {
		
		
		$query = [ ];
		
		$obj_data = json_decode ( $data, true );
		$school_name_lable = $obj_data[1];
		$count = $obj_data[2];

		$school_name = $obj_data ['1'];
		$school_name = strtoupper($school_name);
			//log_message("error","school_name====17428".print_r($school_name,true));
		/*if(isset($school_name))
		{
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$schools_list = $this->mongo_db->select(array('school_code'),array('_id'))->where('school_name',$school_name)->get ( $this->collections ['panacea_schools'] );
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
			$school_code = $schools_list[0]['school_code'];

			if(isset($school_code) && !empty($school_code))
			{
				$this->mongo_db->switchDatabase($this->common_db ['common_db']);
				$get_hs_email = $this->mongo_db->select(array('email'))->where('school_code',$school_code)->get($this->collections ['panacea_health_supervisors']);
				$this->mongo_db->switchDatabase($this->common_db ['dsn']);
				$email = $get_hs_email[0]['email'];
				$dist_code = strtoupper(str_ireplace(".", "_",substr($email,0,strpos($email,"@")-2)));
			}
		}
		
		if(isset($dist_code) && !empty($dist_code))
		{
			$query = $this->get_request_docs_params_with_school($search_param_1,$search_param_2,$status_type,$dist_code);
		}
		else
		{
			$query = $this->get_request_docs_params($search_param_1,$search_param_2,$status_type);
		}*/
		
		$query = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$lte' => 8.0),'doc_data.widget_data.page1.Student Details.HB_latest.month' => array('$regex' => $year."-*"),'doc_data.widget_data.school_details.School Name' => $school_name_lable))->limit($count)->get($this->hb_app_col);
		
		$student_list = [ ];
		$matching_docs = [ ];
		
		foreach ( $query as $request ) {
			
			$retrieval_list = array ();
			//$unique_id = $request ['doc_data'] ['widget_data'] ['page1'] ['Student Info'] ['Unique ID'];
			//$doc = $this->mongo_db->where ( 'doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id )->get ( $this->screening_app_col );
			if (isset ( $request ) && ! empty ( $request ) && (count ( $request ) > 0)) {
				$school = $request ['doc_data'] ['widget_data'] ['school_details'] ['School Name'];
				if ($school == $school_name) {
					array_push ( $matching_docs, $request ['_id']->{'$id'} );
				}
			}
		}
		
		return $matching_docs;
	}

	public function drill_down_request_to_students_load_ehr($_id_array) 
	{
		$docs = [ ];
		ini_set ( 'memory_limit', '10G' );
		foreach ( $_id_array as $_id ) 
		{
			$query = $this->mongo_db->select(array("doc_data.widget_data"))->where ( "_id", new MongoID ( $_id ) )->get ($this->hb_app_col);//$this->screening_app_col );			
			if (isset ( $query [0] ))
				array_push ( $docs, $query [0] );
		}

		return $docs;
	}

	/* For new students bulk import getting last unique id new pattern */

	public function check_last_unique_id_exists_in_school($school_name)
	{
		$all_list = array();

		$all_uniqueID = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID'),array())->whereLike('doc_data.widget_data.page2.Personal Information.School Name' , $school_name)->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1))->get('tswreis_screening_report_col_2020-2021');
		if(!empty($all_uniqueID)){
			foreach ($all_uniqueID as $data1) {
				$uniques1 = $data1['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
				array_push($all_list, $uniques1);
			}
		}

		$all_uniqueID_frm_pasout = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID'),array())->whereLike('doc_data.widget_data.page2.Personal Information.School Name' , $school_name)->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1))->get('screening_report_col_2020-2021_passed_out');
		if(!empty($all_uniqueID_frm_pasout)){
			foreach ($all_uniqueID_frm_pasout as $data2) {
				$uniques2 = $data2['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
				if(!in_array($uniques2, $all_list)){
					array_push($all_list, $uniques2);
				}
			}
		}

		$all_uniqueID_frm_otherscls = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID'),array())->whereLike('doc_data.widget_data.page2.Personal Information.School Name' , $school_name)->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1))->get('other_classes_screening_data_2019-2020');
		if(!empty($all_uniqueID_frm_otherscls)){
			foreach ($all_uniqueID_frm_otherscls as $data3) {
				$uniques3 = $data3['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
				if(!in_array($uniques3, $all_list)){
					array_push($all_list, $uniques3);
				}
			}
		}

		/*
			Above we have taken ids from all the collections for one school

			increase last id by ordering array in ascending order,  then last id will come
		*/
		sort($all_list);
		$value = end($all_list);
		/*$take_value_frm_id = explode('_', $value);
		$last_val_frm_id = $take_value_frm_id[2];
		$increase_value = $last_val_frm_id+1;*/
		//$new_id = $take_value_frm_id[0]."_".$take_value_frm_id[1]."_".$increase_value;

		return $value;
	}


	/* For new students bulk import getting last unique id Old pattern */

	public function check_unique_id_is_exists($school_name)
	{
		$greater_unique_id = [];
		$number_passed_out_unique = 0;
		//$unique_id_for_latest_col = $this->mongo_db->command(array('distinct' => $this->screening_app_col ,'key' => "doc_data.widget_data.page1.Personal Information.Hospital Unique ID",'query'=> array('doc_data.widget_data.page2.Personal Information.School Name' => $school_name )));
		$unique_id_for_latest_col = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name))->select(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID'),array())->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1))->get($this->screening_app_col);
		
		foreach ($unique_id_for_latest_col as $unique_ids)
		{
			$unique_ids = $unique_ids['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
			if(preg_match('/STAFF/i', $unique_ids) || preg_match('/Staff/i', $unique_ids))
			{

			}else
			{
				$unique_id = explode("_", $unique_ids);
				$num_length = strlen((string)$unique_id[2]);
				if($num_length >= 4)
				{
					$last_id = $unique_id[2];
				}
				
			}
		}
		$latest_id = intval($last_id);
		$last_unique_id = $unique_id[0]."_".$unique_id[1]."_".$latest_id;
		//$number_latest_unique = max($unique_id_for_latest_col['values']);


		//$unique_id_for_passed_out_col = $this->mongo_db->command(array('distinct' => "healthcare2016226112942701_divided_passed_out" ,'key' => "doc_data.widget_data.page1.Personal Information.Hospital Unique ID",'query'=> array('doc_data.widget_data.page2.Personal Information.School Name' => $school_name )));
		$unique_id_for_passed_out_col = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name))->select(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID'),array())->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1))->get('healthcare2016226112942701_divided_passed_out');
		
		if(isset($unique_id_for_passed_out_col) && !empty($unique_id_for_passed_out_col))
		{
			foreach ($unique_id_for_passed_out_col as $unique_ids_out) 
			{
				$unique_ids_out = $unique_ids_out['doc_data']['widget_data']['page1']['Personal Information']['Hospital Unique ID'];
				if(preg_match('/STAFF/i', $unique_ids_out) || preg_match('/Staff/i', $unique_ids_out))
				{

				}else
				{
					$unique_id_out = explode("_", $unique_ids_out);
					$num_length_out = strlen((string)$unique_id_out[2]);
					if($num_length_out >= 4)
					{
						$last_id_out = $unique_id_out[2];
					}
					
				}
			}
			//$number_passed_out_unique = max($unique_id_for_passed_out_col['values']);	
			$latest_id_out = intval($last_id_out);
			$last_id_out = $unique_id_out[0]."_".$unique_id_out[1]."_".$latest_id_out;
			if($last_unique_id > $last_id_out)
			{
				return $last_unique_id;
			}else
			{
				return $last_id_out;
			}
		}
		return $last_unique_id;
				
	}

	public function get_sms_messages_list($today_date, $type_of_msg)
	{
		$query = $this->mongo_db->select(array("$today_date.$type_of_msg"),array('_id'))->where(array("$today_date.$type_of_msg.Sent_date" => $today_date))->get('Over_all_Msg_status');
		
		return $query;
	}

	public function get_screening_hb_data_for_boys(){

		$hb_final = array();

		$severe = $this->mongo_db->where('doc_data.widget_data.page1.Student Details.Gender', 'Male')->whereLte('doc_data.widget_data.page1.Student Details.HB_latest.hb',8)->count('himglobin_report_col');
		$severe_cases['label'] = "Severe";
		$severe_cases['value'] = intval($severe);
		array_push($hb_final, $severe_cases);

		$moderate = $this->mongo_db->where('doc_data.widget_data.page1.Student Details.Gender', 'Male')->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb', 8,10)->count('himglobin_report_col');
		$moderate_cases['label'] = "Moderate";
		$moderate_cases['value'] = intval($moderate);
		array_push($hb_final, $moderate_cases);

		$mild = $this->mongo_db->where('doc_data.widget_data.page1.Student Details.Gender', 'Male')->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',10.1,12)->count('himglobin_report_col');
		$mild_cases['label'] = "Mild";
		$mild_cases['value'] = intval($mild);
		array_push($hb_final, $mild_cases);

		//echo print_r($hb_final, true); exit();
		return $hb_final;
	}

	public function get_screening_hb_data_for_girls(){

		$hb_final = array();

		$severe = $this->mongo_db->where('doc_data.widget_data.page1.Student Details.Gender', 'Female')->whereLte('doc_data.widget_data.page1.Student Details.HB_latest.hb',8)->count('himglobin_report_col');
		$severe_cases['label'] = "Severe";
		$severe_cases['value'] = intval($severe);
		array_push($hb_final, $severe_cases);

		$moderate = $this->mongo_db->where('doc_data.widget_data.page1.Student Details.Gender', 'Female')->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb', 8,10)->count('himglobin_report_col');
		$moderate_cases['label'] = "Moderate";
		$moderate_cases['value'] = intval($moderate);
		array_push($hb_final, $moderate_cases);

		$mild = $this->mongo_db->where('doc_data.widget_data.page1.Student Details.Gender', 'Female')->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',10.1,12)->count('himglobin_report_col');
		$mild_cases['label'] = "Mild";
		$mild_cases['value'] = intval($mild);
		array_push($hb_final, $mild_cases);

		//echo print_r($hb_final, true); exit();
		return $hb_final;
	}

	public function get_screening_bmi_data_for_boys(){

		$bmi_final = array();

		$under_weight = $this->mongo_db->where('doc_data.widget_data.page1.Student Details.Gender','Male')->whereLte('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',18.50)->count('healthcare2017617145744625');
		$under_weight_cases['label'] = "UNDER WEIGHT";
		$under_weight_cases['value'] = intval($under_weight);
		array_push($bmi_final, $under_weight_cases);

		$over_weight = $this->mongo_db->where('doc_data.widget_data.page1.Student Details.Gender', 'Male')->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 25.00,29.99)->count('healthcare2017617145744625');
		$over_weight_cases['label'] = "OVER WEIGHT";
		$over_weight_cases['value'] = intval($over_weight);
		array_push($bmi_final, $over_weight_cases);

		$obese_weight = $this->mongo_db->where('doc_data.widget_data.page1.Student Details.Gender', 'Male')->whereGte('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',30.00)->count('healthcare2017617145744625');
		$obese_weight_cases['label'] = "OBESE WEIGHT";
		$obese_weight_cases['value'] = intval($obese_weight);
		array_push($bmi_final, $obese_weight_cases);

		//echo print_r($hb_final, true); exit();
		return $bmi_final;
	}

	public function get_screening_bmi_data_for_girls(){

		$bmi_final = array();

		$under_weight = $this->mongo_db->where('doc_data.widget_data.page1.Student Details.Gender', 'Female')->whereLte('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',18.50)->count('healthcare2017617145744625');
		$under_weight_cases['label'] = "UNDER WEIGHT";
		$under_weight_cases['value'] = intval($under_weight);
		array_push($bmi_final, $under_weight_cases);

		$over_weight = $this->mongo_db->where('doc_data.widget_data.page1.Student Details.Gender', 'Female')->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 25.00,29.99)->count('healthcare2017617145744625');
		$over_weight_cases['label'] = "OVER WEIGHT";
		$over_weight_cases['value'] = intval($over_weight);
		array_push($bmi_final, $over_weight_cases);

		$obese_weight = $this->mongo_db->where('doc_data.widget_data.page1.Student Details.Gender', 'Female')->whereGte('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',30.00)->count('healthcare2017617145744625');
		$obese_weight_cases['label'] = "OBESE WEIGHT";
		$obese_weight_cases['value'] = intval($obese_weight);
		array_push($bmi_final, $obese_weight_cases);

		//echo print_r($bmi_final, true); exit();
		return $bmi_final;
	}

	public function get_hb_submitted_schools_data_with_symptom($symptom_type, $gender_type)
	{
		$filtered_school_names = [];
		$hb_final = [];
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$all_schools = $this->mongo_db->select(array('school_name'))->get ( $this->collections ['panacea_schools'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

		if($gender_type == 'Male'){
			foreach($all_schools as $school){
				
				if(preg_match('/(B)/', $school['school_name'])){
					array_push($filtered_school_names, $school);
				}
			
			}
		}else{
			foreach($all_schools as $schools){
				
				if(preg_match('/(G)/', $schools['school_name'])){
					array_push($filtered_school_names, $schools);
				}
			
			}
		}
		
		switch ($symptom_type) {
			case 'Severe':
			foreach ($filtered_school_names as $scl) {
				$scls_name = $scl['school_name'];
				
				$severe = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender'=> $gender_type, 'doc_data.widget_data.school_details.School Name' => $scls_name ))->whereLte('doc_data.widget_data.page1.Student Details.HB_latest.hb',8)->count('himglobin_report_col');

				if($severe != 0){
				$severe_cases['label'] = $scls_name;
				$severe_cases['value'] = intval($severe);
				$severe_cases['symptom'] = $symptom_type;
				$severe_cases['gender'] = $gender_type;
				array_push($hb_final, $severe_cases);
				}

			}
			return $hb_final;
			break;
			case 'Moderate' :
			foreach ($filtered_school_names as $scl) {
				$scls_name = $scl['school_name'];
				
				$moderate = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender'=> $gender_type, 'doc_data.widget_data.school_details.School Name' => $scls_name ))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb', 8,10)->count('himglobin_report_col');

				if($moderate != 0){
				$moderate_cases['label'] = $scls_name;
				$moderate_cases['value'] = intval($moderate);
				$moderate_cases['symptom'] = $symptom_type;
				$moderate_cases['gender'] = $gender_type;
				array_push($hb_final, $moderate_cases);
				}

			}
			return $hb_final;
			break;

			case 'Mild':
				foreach ($filtered_school_names as $scl) {
				$scls_name = $scl['school_name'];
				
				$mild = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender'=> $gender_type, 'doc_data.widget_data.school_details.School Name' => $scls_name ))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',10.1,12)->count('himglobin_report_col');

				if($mild != 0){
				$mild_cases['label'] = $scls_name;
				$mild_cases['value'] = intval($mild);
				$mild_cases['symptom'] = $symptom_type;
				$mild_cases['gender'] = $gender_type;
				array_push($hb_final, $mild_cases);
				}

			}
			return $hb_final;
			break;
			
			default:
				;
				break;
		}

	}

	public function get_bmi_submitted_schools_data_with_symptom($symptom_type, $gender_type)
	{
		$filtered_school_names = [];
		$bmi_final = [];
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$all_schools = $this->mongo_db->select(array('school_name'))->get ( $this->collections ['panacea_schools'] );
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

		if($gender_type == 'Male'){
			foreach($all_schools as $school){
				
				if(preg_match('/(B)/', $school['school_name'])){
					array_push($filtered_school_names, $school);
				}
			
			}
		}else{
			foreach($all_schools as $schools){
				
				if(preg_match('/(G)/', $schools['school_name'])){
					array_push($filtered_school_names, $schools);
				}
			
			}
		}
		
		switch ($symptom_type) {
			case 'UNDER WEIGHT':
			foreach ($filtered_school_names as $scl) {
				$scls_name = $scl['school_name'];
				
				$under_weight = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender'=> $gender_type, 'doc_data.widget_data.school_details.School Name' => $scls_name ))->whereLte('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',18.50)->count('healthcare2017617145744625');

				if($under_weight != 0){
				$under_weight_cases['label'] = $scls_name;
				$under_weight_cases['value'] = intval($under_weight);
				$under_weight_cases['symptom'] = $symptom_type;
				$under_weight_cases['gender'] = $gender_type;
				array_push($bmi_final, $under_weight_cases);
				}

			}
			return $bmi_final;
			break;
			case 'OVER WEIGHT' :
			foreach ($filtered_school_names as $scl) {
				$scls_name = $scl['school_name'];
				
				$over_weight = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender'=> $gender_type, 'doc_data.widget_data.school_details.School Name' => $scls_name ))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 25.00,29.99)->count('healthcare2017617145744625');

				if($over_weight != 0){
				$over_weight_cases['label'] = $scls_name;
				$over_weight_cases['value'] = intval($over_weight);
				$over_weight_cases['symptom'] = $symptom_type;
				$over_weight_cases['gender'] = $gender_type;
				array_push($bmi_final, $over_weight_cases);
				}

			}
			return $bmi_final;
			break;

			case 'OBESE WEIGHT':
				foreach ($filtered_school_names as $scl) {
				$scls_name = $scl['school_name'];
				
				$obese_weight = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender'=> $gender_type, 'doc_data.widget_data.school_details.School Name' => $scls_name ))->whereGte('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',30.00)->count('healthcare2017617145744625');

				if($obese_weight != 0){
				$obese_weight_cases['label'] = $scls_name;
				$obese_weight_cases['value'] = intval($obese_weight);
				$obese_weight_cases['symptom'] = $symptom_type;
				$obese_weight_cases['gender'] = $gender_type;
				array_push($bmi_final, $obese_weight_cases);
				}

			}
			return $bmi_final;
			break;
			
			default:
				;
				break;
		}

	}
	
	public function get_students_hb_list_scl_wise($school_name, $symptom_type, $gender_type)
	{

		switch ($symptom_type)
		{
			case 'Severe':
				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender'=> $gender_type, 'doc_data.widget_data.school_details.School Name' => $school_name ))->whereLte('doc_data.widget_data.page1.Student Details.HB_latest.hb',8)->get('himglobin_report_col');
				
				return $query;
				break;
			case 'Moderate':
				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender'=> $gender_type, 'doc_data.widget_data.school_details.School Name' => $school_name ))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb', 8,10)->get('himglobin_report_col');
				return $query;
				break;

			case 'Mild':
				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender'=> $gender_type, 'doc_data.widget_data.school_details.School Name' => $school_name ))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',10.1,12)->get('himglobin_report_col');
				return $query;
				break;
			default:
				;
				break;
		}

	}
public function get_students_bmi_list_scl_wise($school_name, $symptom_type, $gender_type)
	{

		switch ($symptom_type)
		{
			case 'UNDER WEIGHT':
				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender'=> $gender_type, 'doc_data.widget_data.school_details.School Name' => $school_name ))->whereLte('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',18.50)->get('healthcare2017617145744625');
				
				return $query;
				break;
			case 'OVER WEIGHT':
				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender'=> $gender_type, 'doc_data.widget_data.school_details.School Name' => $school_name ))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 25.00,29.99)->get('healthcare2017617145744625');
				return $query;
				break;

			case 'OBESE WEIGHT':
				$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender'=> $gender_type, 'doc_data.widget_data.school_details.School Name' => $school_name ))->whereGte('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',30.00)->get('healthcare2017617145744625');
				return $query;
				break;
			default:
				;
				break;
		}

	}

	 public function get_searched_student_sick_requests($search_data)
	{

		$data = trim($search_data);
		if(preg_match("/_/", $data)){
		$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_data.widget_data.page2'))->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $data)->get($this->screening_app_col);
		}else{

		$query = $this->mongo_db->select(array('doc_data.widget_data.page1','doc_data.widget_data.page2'))->whereLike('doc_data.widget_data.page1.Personal Information.Name', $data)->get($this->screening_app_col);
		}
		return $query;
	}
	public function send_sms_for_parents_eclipse()
	{
		$moblie_nin = array('doc_data.widget_data.page1.Personal Information.Mobile.mob_num' => array(
			'$nin' => array("", "          ", " 6302656860", " 6600697248", " 7702669964", " 9177402998", " 9701545581", " 9908727945", " 9963354735", "+191994830", "+449603513", "+917036918", ",,,", "-", "-809674529", "-990882084", "-9908820846", "0", "000", "0000", "0000000000", "03609753", "06", "07036770870", "0789306215", "07995370170", "0805584187", "08713314134", "08866", "09440551854", "09490389590", "0950244954", "09527061779", "0953377139", "09542907611", "0957355062", "0984952438", "09921869652", "09922685012", "0994821887", "0995109702", "0995176518", "0995180132", "09959656179", "09963705571", "09966654562", "10", "1110000000", "1111111111", "12", "1213234546", "1231456789", "1234457777", "1234556899", "1234561233", "1234566789", "1234567588", "1234567789", "1234567810", "1234567888", "1234567889", "123456789", "1234567890", "1234567891", "1234567892", "1234567897", "1234567898", "1234567899", "1234568925", "1235678989", "1236547899", "1237564789", "1239455555", "1253258547", "1294555555", "134567891", "1478956234", "15", "158", "1666386396", "1816123086", "1849479364", "1879160938", "1944091469", "1986692687", "20", "21", "2123235654", "223344556", "23", "2345778990", "2389652635", "2471997994", "2536253625", "2653265326", "2715", "2814780999", "2971186153", "2996501742", "303776289", "3096516698", "3216549870", "3231214548", "3246560580", "3256562532", "3285468184", "334276443051", "3366336633", "3550927982", "356249871", "356586685", "3600999591", "3605592911", "3609746530", "3652478412", "4", "4013082596", "404854006", "4448968658", "4475", "45", "4545456454", "455", "4564653454", "4575522222", "46", "4612578491", "464836249", "468", "4686", "47", "4704078985", "4786521452", "4794285058", "4798659866", "485", "4856947856", "4893303516", "4952975222", "5", "500", "5008231724", "5059000345", "5188971088", "5325652352", "5423655854", "5454546565", "5466173451", "5468974456", "5482454548", "5498726589", "5542434379", "5555555555", "5555558282", "565656683", "5666666654", "5666845724", "57", "58", "5877846776", "5884858225", "5888", "6","9999888877","9999999999", "AB", "Admission ", "DOUBLE", "DOUBLE ENT", "DUPLICATE", "Delete", "Double", "Double ", "EXTRA", "FALSE", "ID 1594", "ID 1619", "ID 1662", "ID number ", "ISSUED TC", "Irrelevant", "LAST YEAR ", "LONG AB", "LONG ABSEN", "Long Absen", "Long absen", "NIL", "NO", "NO CANDIDA", "NO NAMBER", "NO STUDENT", "NOT OUR SC", "No Number", "Not belong", "Not studyi", "PASSEDOUT", "PASSOUT BA", "REPEAT", "SEAT CANCE", "T. C Issue", "T.C", "T.C ", "T.C Issue ", "T.C.", "TC", "TC ", "TC ISSUE ", "TC ISSUED", "TC Issued", "Tc", "Tc Issued", "UNKNOWN", "UPDATED", "]", "_", "duplicate ", "extra", false, "false", "left", "not Record", "tc", "tc issued", "undefined")));

			$father_nu = $this->mongo_db->command(array('distinct' => $this->screening_app_col ,'key' => "doc_data.widget_data.page1.Personal Information.Mobile.mob_num",'query'=>$moblie_nin)); 
		//$father_nu = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information.Mobile.mob_num'))->where($moblie_nin)->get($this->screening_app_col);
		return $father_nu;
	}

		public function update_requests_followup_data($student_id,$case_id,$created_time,$medicine_details,$followup_desc)
	{
	        $exist_follow_up = array();
	        /*$query = array("student_unique_id"=>$unique_id,"case_id"=>$case_id);

	           $update = array('$push'=>array("medication_taken"=>$datewise_update));*/
	           $Follow_Up_data = $this->mongo_db->select(array('Follow_Up'))->where(array('doc_properties.doc_id' =>$case_id))->get('healthcare2016531124515424_static_html');
	           
	           if(isset($Follow_Up_data[0]['Follow_Up']) && !empty($Follow_Up_data[0]['Follow_Up']))
	           {
	             $exist_follow_up = $Follow_Up_data[0]['Follow_Up'];

	             $data = array('medicine_details'=>$medicine_details, 'followup_desc'=>$followup_desc,'created_time'=> $created_time);

	            // array_push($array_follow_up, $Follow_Up_data);
	             array_push($exist_follow_up, $data);
	           
	            $response =  $this->mongo_db->where(array('doc_properties.doc_id' =>$case_id))->set(array('Follow_Up' =>
	                $exist_follow_up))->update('healthcare2016531124515424_static_html');
	            }else    
	    {
	            $data = array('medicine_details'=>$medicine_details, 'followup_desc'=>$followup_desc,'created_time'=> $created_time);           
	         $response =  $this->mongo_db->where(array('doc_properties.doc_id' =>$case_id))->set(array('Follow_Up' =>
	                [$data]))->update('healthcare2016531124515424_static_html');
	    }
	            if($response)
	            {
	               return "UPDATE_SUCCESS";
	            }
	            else
	            {
	               return "UPDATE_FAIL";
	            }   
	}


/// First Stage analytics Generation author ===== Harish

	public function do_stage1_refresh($academic_year)
		{


					if($academic_year == "2017-2018"){
						$screening_duration = 'healthcare2016226112942701_screening_final_2017-18';
						
					}

					$abnormality_counts = [];

				
					$studentPhotoandpage3Exists = array (
						"doc_data.widget_data.page9.Dental Check-up" => array (
								'$exists' => true),
						"doc_data.widget_data.page3.Physical Exam" => array (
								'$exists' => true
						)
					);

					$ortho_array = [];
					$ortho = $this->mongo_db->command(array('distinct' => $screening_duration,'key' => "doc_data.widget_data.page4.Doctor Check Up.Ortho"));


					foreach ($ortho['values'] as $index => $value) {
						if($value != " " || $value != "" || $value != false){
						$qry = $this->mongo_db->where($studentPhotoandpage3Exists)->where(array('doc_data.widget_data.page4.Doctor Check Up.Ortho'=> $value))->count($screening_duration);
			          		array_push($ortho_array, $qry);
							}
			          	}
						$ortho_val = array_sum($ortho_array);
			          	$ortho['label'] = 'Ortho Abnormalities';
			          	$ortho['value'] = $ortho_val;
			          	array_push($abnormality_counts, $ortho);
/*
					$skin_array = [];
					$skin = $this->mongo_db->command(array('distinct' => $screening_duration,'key' => "doc_data.widget_data.page4.Doctor Check Up.Skin conditions"));

					foreach ($skin['values'] as $index => $value) {

						$qry = $this->mongo_db->where($studentPhotoandpage3Exists)->where(array('doc_data.widget_data.page4.Doctor Check Up.Skin conditions'=> $value))->count($screening_duration);
			          		array_push($skin_array, $qry);
			          	}
						$skin_val = array_sum($skin_array);
			          	$skin['label'] = 'Skin Abnormalities';
			          	$skin['value'] = $skin_val;
			          	array_push($abnormality_counts, $skin);*/

			        $postural_array = [];
					$postural = $this->mongo_db->command(array('distinct' => $screening_duration,'key' => "doc_data.widget_data.page4.Doctor Check Up.Postural"));

					foreach ($postural['values'] as $index => $value) {

						if($value != " " || $value != "" || $value != false){

						$qry = $this->mongo_db->where($studentPhotoandpage3Exists)->where(array('doc_data.widget_data.page4.Doctor Check Up.Postural'=> $value))->count($screening_duration);
			          		array_push($postural_array, $qry);
						}

			          	}
						$postural_val = array_sum($postural_array);
			          	$postural['label'] = 'Postural Abnormalities';
			          	$postural['value'] = $postural_val;
			          	array_push($abnormality_counts, $postural);

				        /*$common_diesease_array = [];
						$Common_Diseases = $this->mongo_db->command(array('distinct' => $screening_duration,'key' => "doc_data.widget_data.page4.Doctor Check Up.Common Diseases"));
						foreach ($Common_Diseases['values'] as $index => $value) {

							$qry = $this->mongo_db->where($studentPhotoandpage3Exists)->where(array('doc_data.widget_data.page4.Doctor Check Up.Common Diseases'=> $value))->count($screening_duration);
				          		array_push($common_diesease_array, $qry);
				          	}
							$common_diesease_val = array_sum($common_diesease_array);
				          	$common_diesease['label'] = 'Common Disease Abnormalities';
				          	$common_diesease['value'] = $common_diesease_val;
				          	array_push($abnormality_counts, $common_diesease);*/
				
					$dab_array = [];
					$dab = $this->mongo_db->command(array('distinct' => $screening_duration,'key' => "doc_data.widget_data.page5.Doctor Check Up.Defects at Birth"));

					foreach ($dab['values'] as $index => $value) {

						if($value != " " || $value != "" || $value != false){
							$qry = $this->mongo_db->where($studentPhotoandpage3Exists)->where(array('doc_data.widget_data.page5.Doctor Check Up.Defects at Birth'=> $value))->count($screening_duration);
							}

			          		array_push($dab_array, $qry);
			          	}
						$dab_val = array_sum($dab_array);
			          	$dab['label'] = 'Defects At Birth';
			          	$dab['value'] = $dab_val;
			          	array_push($abnormality_counts, $dab);

					
			      	$deficencies_array = [];
					//$Deficencies = $this->mongo_db->command(array('distinct' => $screening_duration,'key' => "doc_data.widget_data.page5.Doctor Check Up.Deficencies"));
					$Deficencies = [
						"Under Weight",
						"Anaemia",
						"Vitamin Deficiency - Bcomplex",
						"Over Weight",
						"Anemic",
						"Vitamin deficiency",
						"Goiter",
						"Vitamin A Deficiency",
						"Vitamin D Deficiency",
						"Normal Weight",
						"SAM/stunting",
						"Obese",
						"Anemia-Mild",
						"Anemia-Moderate"
						];
					foreach ($Deficencies as $index => $value) {
						
						$qry = $this->mongo_db->where($studentPhotoandpage3Exists)->where(array('doc_data.widget_data.page5.Doctor Check Up.Deficencies'=> $value))->count($screening_duration);
			          		array_push($deficencies_array, $qry);
			          	}
						$deficencies_val = array_sum($deficencies_array);

			          	$deficencies['label'] = 'Deficiencies';
			          	$deficencies['value'] = $deficencies_val;

			          	array_push($abnormality_counts, $deficencies);

			        $childhood = [];
					$Childhood_Diseases = $this->mongo_db->command(array('distinct' => $screening_duration,'key' => "doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases"));
					
					foreach ($Childhood_Diseases['values'] as $index => $value) {

						if($value != " " || $value != "" || $value != false){

							$qry = $this->mongo_db->where($studentPhotoandpage3Exists)->where(array('doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases'=> $value))->count($screening_duration);
						}
			          		array_push($childhood, $qry);
			          	}
						$childhood_val = array_sum($childhood);
			          	$childhood['label'] = 'Childhood Diseases';
			          	$childhood['value'] = $childhood_val;
			          	array_push($abnormality_counts, $childhood);

			        $check_if_array = [];
					$check_if = $this->mongo_db->command(array('distinct' => $screening_duration,'key' => "doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities"));
					foreach ($check_if['values'] as $index => $value) {
						if($value != " " || $value != "" || $value != false){

						$qry = $this->mongo_db->where($studentPhotoandpage3Exists)->where(array('doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities'=> $value))->count($screening_duration);
							}
			          		array_push($check_if_array, $qry);
			          	}
						$check_if_val = array_sum($check_if_array);
			          	$check_if['label'] = 'General Abnormalities';
			          	$check_if['value'] = $check_if_val;
			          	array_push($abnormality_counts, $check_if);

					//Dental Problems
					$dental_count = [];
			  		$qry = $this->mongo_db->where(array("doc_data.widget_data.page9.Dental Check-up.Oral Hygiene"=>"Yes"))->count($screening_duration);
			      		//$carious_teeth['values'] = "Oral Hygiene";
			      		//$carious_teeth['count'] = $qry;
				          
				        array_push($dental_count, $qry);

				    $qry = $this->mongo_db->where(array("doc_data.widget_data.page9.Dental Check-up.Carious Teeth"=>"Yes"))->count($screening_duration);
			      		//$carious_teeth['values'] = "Carious Teeth";
			      		//$carious_teeth['count'] = $qry;
				          
				        array_push($dental_count, $qry);

				    $qry = $this->mongo_db->where(array("doc_data.widget_data.page9.Dental Check-up.Flourosis"=>"Yes"))->count($screening_duration);
			      		//$carious_teeth['values'] = "Flourosis";
			      		//$carious_teeth['count'] = $qry;
				          
				        array_push($dental_count, $qry);

				    $qry = $this->mongo_db->where(array("doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment"=>"Yes"))->count($screening_duration);
			      		//$carious_teeth['values'] = "Orthodontic Treatment";
			      		//$carious_teeth['count'] = $qry;
				          
				        array_push($dental_count, $qry);

				     $qry = $this->mongo_db->where(array("doc_data.widget_data.page9.Dental Check-up.Indication for extraction"=>"Yes"))->count($screening_duration);
			      		//$carious_teeth['values'] = "Indication for extraction";
			      		//$carious_teeth['count'] = $qry;
				          
				        array_push($dental_count, $qry);

				    /* $qry = $this->mongo_db->where(array("doc_data.widget_data.page9.Dental Check-up.Halitosis"=>"Yes"))->count($screening_duration);
			      		//$carious_teeth['values'] = "Halitosis";
			      		//$carious_teeth['count'] = $qry;
				          
				        array_push($dental_count, $qry);*/

				   /*  $qry = $this->mongo_db->where(array("doc_data.widget_data.page9.Dental Check-up.Flat patches"=>"Yes"))->count($screening_duration);
			      		//$carious_teeth['values'] = "Flat patches";
			      		//$carious_teeth['count'] = $qry;
				          
				        array_push($dental_count, $qry);*/

				   /*  $qry = $this->mongo_db->where(array("doc_data.widget_data.page9.Dental Check-up.Ulcer"=>"Yes"))->count($screening_duration);
			      		//$carious_teeth['values'] = "Ulcer";
			      		//$carious_teeth['count'] = $qry;
				          
				        array_push($dental_count, $qry);*/

				       $dent_val = array_sum($dental_count);

				       $Dental['label'] = 'Dental Abnormalities';
					   $Dental['value'] = $dent_val;

					array_push($abnormality_counts, $Dental);

					//Eye Abnormalities

					$eye_count = [];

							$qry = $this->mongo_db->where(array("doc_data.widget_data.page6.Without Glasses" => array('$exists' => true),"doc_data.widget_data.page6.Without Glasses.Right"=>array('$in'=> array("6/36", "6/24", "6/60", "6/18"))))->count($screening_duration);

							array_push($eye_count, $qry);

				          	$qry = $this->mongo_db->where(array("doc_data.widget_data.page6.Without Glasses" => array('$exists' => true),"doc_data.widget_data.page6.Without Glasses.Left"=>array('$in'=> array("6/36", "6/24", "6/60", "6/18"))))->count($screening_duration);
				          	
						        array_push($eye_count, $qry);

						    $qry = $this->mongo_db->where(array("doc_data.widget_data.page6.With Glasses" => array('$exists' => true),"doc_data.widget_data.page6.With Glasses.Right"=>array('$in'=> array("6/36", "6/24", "6/60", "6/18"))))->count($screening_duration);
				          		
						          
						        array_push($eye_count, $qry);

						     $qry = $this->mongo_db->where(array("doc_data.widget_data.page6.With Glasses" => array('$exists' => true),"doc_data.widget_data.page6.With Glasses.Left"=>array('$in'=> array("6/36", "6/24", "6/60", "6/18"))))->count($screening_duration);
				          		
						          
						        array_push($eye_count, $qry);

						    $vision_screen = $this->mongo_db->command(array('distinct' => $screening_duration ,'key' => "doc_data.widget_data.page6.Screenings"));


			          		foreach ($vision_screen['values'] as $index => $value) {
				          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page6.Screenings'=>$value))->count($screening_duration);
				          		if($qry != 0){

				          		array_push($eye_count, $qry);
				          		}
				          	}

				          	$qry = $this->mongo_db->where(array("doc_data.widget_data.page7.Colour Blindness.Right"=>"Yes"))->count($screening_duration);

			  	    		
			  	    		array_push($eye_count, $qry);

			  	    		$qry = $this->mongo_db->where(array("doc_data.widget_data.page7.Colour Blindness.Left"=>"Yes"))->count($screening_duration);
			  	    		
			  	    		array_push($eye_count, $qry);

				          	/*$qry = $this->mongo_db->where(array("doc_data.widget_data.page6.Bitot Night Blindness"=>"Yes"))->count($screening_duration);
				          	array_push($eye_count, $qry);*/

					       $eye_val = array_sum($eye_count);

					       $eye['label'] = 'Eye Abnormalities';
						   $eye['value'] = $eye_val;

						  array_push($abnormality_counts, $eye);
					// Audio And Speech Abnormalities

						$audio_speech_count = [];
			  	    		$qry = $this->mongo_db->where(array("doc_data.widget_data.page8. Auditory Screening.Right"=>"Fail"))->count($screening_duration);
			  	    		
			  	    		array_push($audio_speech_count, $qry);

			  	    		$qry = $this->mongo_db->where(array("doc_data.widget_data.page8. Auditory Screening.Left"=>"Fail"))->count($screening_duration);
			  	    		
			  	    		array_push($audio_speech_count, $qry);

			  	    		$speech_screen = $this->mongo_db->command(array('distinct' => $screening_duration ,'key' => "doc_data.widget_data.page8. Auditory Screening.Speech Screening"));

			  	    		
			            		foreach ($speech_screen['values'] as $index => $value) {
			            			if($value != 'Normal' && $value != " " && $value != "" && $value != false)
			            			{
			  	          				$qry = $this->mongo_db->where(array('doc_data.widget_data.page8. Auditory Screening.Speech Screening'=>$value))->count($screening_duration);

			            			}

			            			
			  	          			array_push($audio_speech_count, $qry);
			  	          		
			  	          	}

			  	          	
			  	          	$dd_disability = $this->mongo_db->command(array('distinct' => $screening_duration ,'key' => "doc_data.widget_data.page8. Auditory Screening.D D and disability"));
			            		foreach ($dd_disability['values'] as $index => $value) {
			            			if($value != " " && $value != "" && $value != false){

			  	          			$qry = $this->mongo_db->where(array('doc_data.widget_data.page8. Auditory Screening.D D and disability'=>$value))->count($screening_duration);
			  	          				array_push($audio_speech_count, $qry);
			            			}
			  	          		
			  	          	}

			  	         

			  	         $audio_val = array_sum($audio_speech_count);


					       $audio['label'] = 'Auditory And Speech Abnormalities';
						   $audio['value'] = $audio_val;

						   array_push($abnormality_counts, $audio);

					$result = [];
					foreach($abnormality_counts as $request){
						$req['label'] = $request['label'];
						$req['value'] = $request['value'];

						array_push($result, $req);
					}

					
					$pie_data['academic_year']    = '2017-2018';
					$pie_data['stage1_info'] = $result;

					$insert = $this->mongo_db->insert('panacea_screening_stage1_analytics_new', array('doc_data' => $pie_data));
					/*$exists = $this->mongo_db->where('doc_data.academic_year', $pie_data['academic_year'])->get('mh_screening_stage1_analytics');

					if(isset($exists) && !empty($exists))
					{
						$insert = $this->mongo_db->where(array('doc_data.academic_year' => $pie_data['academic_year']))->set($pie_data)->update('mh_screening_stage1_analytics');
					}else{
						$insert = $this->mongo_db->insert('mh_screening_stage1_analytics', array('doc_data' => $pie_data));
					}*/
					
					return $insert;
		}

	public function get_screening_pie_values($span)
	{

		//$refresh = $this->get_all_screeningssss();
		//$span = '2019-2020';
		$qry = $this->mongo_db->select(array('doc_data.stage1_info'))->where('doc_data.academic_year', $span)->get('panacea_screening_stage1_analytics_new');

		$result = [ ];

		foreach($qry as $data){

			$ortho ['label'] = $data ['doc_data'] ['stage1_info'] [0] ['label'];
			$ortho ['value'] = $data ['doc_data'] ['stage1_info'] [0] ['value'];

			if($ortho ['value'] != 0){

			array_push($result, $ortho);
			}

			
			
			$postural ['label'] = $data ['doc_data'] ['stage1_info'] [1] ['label'];
			$postural ['value'] = $data ['doc_data'] ['stage1_info'] [1] ['value'];
			if($postural ['value'] != 0){
				
			array_push($result, $postural);
			}

			$defect_at ['label'] = $data ['doc_data'] ['stage1_info'] [2] ['label'];
			$defect_at ['value'] = $data ['doc_data'] ['stage1_info'] [2] ['value'];
			if($defect_at ['value'] != 0){
				
			array_push($result, $defect_at);
			}

			$dificiences ['label'] = $data ['doc_data'] ['stage1_info'] [3] ['label'];
			$dificiences ['value'] = $data ['doc_data'] ['stage1_info'] [3] ['value'];
			if($dificiences ['value'] != 0){
				
			array_push($result, $dificiences);
			}

			$Childhood ['label'] = $data ['doc_data'] ['stage1_info'] [4] ['label'];
			$Childhood ['value'] = $data ['doc_data'] ['stage1_info'] [4] ['value'];
			if($Childhood ['value'] != 0){
				
			array_push($result, $Childhood);
			}

			$general ['label'] = $data ['doc_data'] ['stage1_info'] [5] ['label'];
			$general ['value'] = $data ['doc_data'] ['stage1_info'] [5] ['value'];
			if($general ['value'] != 0){
				
			array_push($result, $general);
			}
			$dental ['label'] = $data ['doc_data'] ['stage1_info'] [6] ['label'];
			$dental ['value'] = $data ['doc_data'] ['stage1_info'] [6] ['value'];
			if($dental ['value'] != 0){
				
			array_push($result, $dental);
			}

			$eye ['label'] = $data ['doc_data'] ['stage1_info'] [7] ['label'];
			$eye ['value'] = $data ['doc_data'] ['stage1_info'] [7] ['value'];

			if($eye ['value'] != 0){
				
			array_push($result, $eye);
			}


			$auditory ['label'] = $data ['doc_data'] ['stage1_info'] [8] ['label'];
			$auditory ['value'] = $data ['doc_data'] ['stage1_info'] [8] ['value'];

			if($auditory ['value'] != 0){
				
			array_push($result, $auditory);
			}



		}

		

		$resultsss = [ ];
		foreach ( $result as $data ) {

			$req ['label'] = $data['label'];
			$req ['value'] = $data['value'];
			if($req ['value'] != 0){
				
			array_push($result, $req);
			}
			array_push ( $resultsss, $req );
		}

		return $resultsss;


	}

// Code for Table View

		public function get_all_screening_diseases_counts($academic_years, $abnormalities, $po_name, $school_name = false)
		{

			if($academic_years == "2018-19 Academic Year" || $academic_years == '2018-2019') {
				$academic_year = "healthcare2016226112942701";
			}
		    
			if(($school_name == false) || ($school_name == 'All_po'))
			{
				$school_name = 'All';
			}

		    $abnormalities_array = array();

		    if(($po_name == 'All') && ($school_name == 'All')){

		    	switch ($abnormalities) {

		    	case 'General_Abnormalities': case 'General Abnormalities':
		    		$check = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities"));
		          		foreach ($check['values'] as $index => $value) {
			          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities'=>$value))->count($academic_year);

			          		$check['values'] = $value;
			          		$check['count'] = $qry;
				          	if($check['count'] != 0 && $check['values'] != " " && $check['values'] != ""){
				          		array_push($abnormalities_array, $check);
			          		}
			          		
			        }
		    	break;

		    	case 'postural': case 'Postural Abnormalities':
		    		    	
		          	$postural = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page4.Doctor Check Up.Postural"));
			          	foreach ($postural['values'] as $index => $value) {
			          		
				          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page4.Doctor Check Up.Postural'=>$value))->count($academic_year);
			          		
				          		$postural['values'] = $value;
				          		$postural['count'] = $qry;

				          		if($postural['count'] != 0 && $postural['values'] != " " && $postural['values'] != ""){
				          		array_push($abnormalities_array, $postural);
			          			}
				          		
				        	}
				break;

				case 'ortho': case 'Ortho Abnormalities':
					$ortho = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page4.Doctor Check Up.Ortho"));
		          		foreach ($ortho['values'] as $index => $value) {
			          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page4.Doctor Check Up.Ortho'=>$value))->count($academic_year);
			          		$ortho['values'] = $value;
			          		$ortho['count'] = $qry;

			          		if($ortho['count'] != 0 && $ortho['values'] != " " && $ortho['values'] != ""){
				          		array_push($abnormalities_array, $ortho);
			          			}
			          		
			        }

				break;

				case 'skin': case 'Skin Abnormalities':
					$skin = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page4.Doctor Check Up.Skin conditions"));
			        foreach ($skin['values'] as $index => $value) {
			          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page4.Doctor Check Up.Skin conditions'=>$value))->count($academic_year);
			          	//log_message('error','checkingskinconditionsscabies==='.print_r($qry,true));
			          		$skin['values'] = $value;
			          		$skin['count'] = $qry;

			          		if($skin['count'] != 0){
				          		array_push($abnormalities_array, $skin);
			          			}
			          }

				break;

				case 'common_dieseases': case 'Common Disease Abnormalities':
					$common_dieseases = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page4.Doctor Check Up.Common Diseases"));
		          foreach ($common_dieseases['values'] as $index => $value) {
			          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page4.Doctor Check Up.Common Diseases'=>$value))->count($academic_year);
			          		$common_dieseases['values'] = $value;
			          		$common_dieseases['count'] = $qry;
			          		if($common_dieseases['count'] != 0){
				          		array_push($abnormalities_array, $common_dieseases);
			          			}
			          }

				break;

				case 'defects_at_birth': case 'Defects At Birth':
					$defects_at_birth = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page5.Doctor Check Up.Defects at Birth"));
	           		foreach ($defects_at_birth['values'] as $index => $value) {
		          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page5.Doctor Check Up.Defects at Birth'=>$value))->count($academic_year);
		          		$defects_at_birth['values'] = $value;
		          		$defects_at_birth['count'] = $qry;
		          		if($defects_at_birth['count'] != 0 && $defects_at_birth['values'] != " " && $defects_at_birth['values'] != ""){
				          		array_push($abnormalities_array, $defects_at_birth);
			          			}
		          	}

				break;	

				case 'deficencies': case 'Deficiencies':

					//$deficencies = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page5.Doctor Check Up.Deficencies"));
					$deficencies = [
						   
						"Under Weight",
						"Anaemia",
						"Vitamin Deficiency - Bcomplex",
						"Over Weight",
						"Anemic",
						"Vitamin deficiency",
						"Goiter",
						"Vitamin A Deficiency",
						"Vitamin D Deficiency",
						"Normal Weight",
						"SAM/stunting",
						"Obese",
						"Anemia-Mild",
						"Anemia-Moderate"
						];
	          		foreach ($deficencies as $index => $value) {
		          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page5.Doctor Check Up.Deficencies'=>$value))->count($academic_year);
		          		$deficencies['values'] = $value;
		          		$deficencies['count'] = $qry;
		          		if($deficencies['count'] != 0 && $deficencies['values'] != " " && $deficencies['values'] != ""){
		          		array_push($abnormalities_array, $deficencies);
	          			}
		          	}
				break;

				case 'childhood_diseases': case 'Childhood Diseases':
					 $childhood_diseases = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases"));
	          		foreach ($childhood_diseases['values'] as $index => $value) {
		          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases'=>$value))->count($academic_year);
		          		$childhood_diseases['values'] = $value;
		          		$childhood_diseases['count'] = $qry;
		          		if($childhood_diseases['count'] != 0 && $childhood_diseases['values'] != " " && $childhood_diseases['values'] != ""){
				          		array_push($abnormalities_array, $childhood_diseases);
			          			}
		          }

				break;	  
		    		        
		    	case 'Eye_Abnormalities': case 'Eye Abnormalities':

		    		$qry = $this->mongo_db->where(array("doc_data.widget_data.page6.Without Glasses" => array('$exists' => true),"doc_data.widget_data.page6.Without Glasses.Right"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->count($academic_year);
		          		$vision_screening['values'] = "Without Glasses Right";
		          		$vision_screening['count'] = $qry;
		          		if($vision_screening['count'] != 0){
		          		array_push($abnormalities_array, $vision_screening);
	          			}

		          	$qry = $this->mongo_db->where(array("doc_data.widget_data.page6.Without Glasses" => array('$exists' => true),"doc_data.widget_data.page6.Without Glasses.Left"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->count($academic_year);
		          		$vision_screening['values'] = "Without Glasses Left";
		          		$vision_screening['count'] = $qry;
				        if($vision_screening['count'] != 0){
		          		array_push($abnormalities_array, $vision_screening);
	          			}

				    $qry = $this->mongo_db->where(array("doc_data.widget_data.page6.With Glasses" => array('$exists' => true),"doc_data.widget_data.page6.With Glasses.Right"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->count($academic_year);
		          		$vision_screening['values'] = "With Glasses Right";
		          		$vision_screening['count'] = $qry;
				        if($vision_screening['count'] != 0){
		          		array_push($abnormalities_array, $vision_screening);
	          			}

				     $qry = $this->mongo_db->where(array("doc_data.widget_data.page6.With Glasses" => array('$exists' => true),"doc_data.widget_data.page6.With Glasses.Left"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->count($academic_year);
		          		$vision_screening['values'] = "With Glasses Left";
		          		$vision_screening['count'] = $qry;

				        if($vision_screening['count'] != 0){
		          		array_push($abnormalities_array, $vision_screening);
	          			}

				    $vision_screen = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page6.Vision Screening"));
	          		foreach ($vision_screen['values'] as $index => $value) {
		          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page6.Vision Screening'=>$value))->count($academic_year);
		          		$vision_screening['values'] = $value;
		          		$vision_screening['count'] = $qry;
		          		if($vision_screening['count'] != 0){
		          		array_push($abnormalities_array, $vision_screening);
	          			}
		          	}

		          	$qry = $this->mongo_db->where(array("doc_data.widget_data.page6.Bitot Night Blindness"=>"Yes"))->count($academic_year);
		    		$vision_screening['values'] = "Bitot Night Blindness";
		    		$vision_screening['count'] = $qry;

		    		if($vision_screening['count'] != 0){
		          		array_push($abnormalities_array, $vision_screening);
	          			}

		    		
		    	break;

		    	case 'Auditory_Abnormalities' : case 'Auditory And Speech Abnormalities':

		    		$qry = $this->mongo_db->where(array("doc_data.widget_data.page8. Auditory Screening.Right"=>"Fail"))->count($academic_year);
		    		$auditory_screening['values'] = "Auditory Screening Right";
		    		$auditory_screening['count'] = $qry;

		    		if($auditory_screening['count'] != 0){
	          		array_push($abnormalities_array, $auditory_screening);
	      			}

		    		$qry = $this->mongo_db->where(array("doc_data.widget_data.page8. Auditory Screening.Left"=>"Fail"))->count($academic_year);
		    		$auditory_screening['values'] = "Auditory Screening Left";
		    		$auditory_screening['count'] = $qry;
		    		if($auditory_screening['count'] != 0){
	          		array_push($abnormalities_array, $auditory_screening);
	      			}

		    		$speech_screen = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page8. Auditory Screening.Speech Screening"));
	          		foreach ($speech_screen['values'] as $index => $value) {
		          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page8. Auditory Screening.Speech Screening'=>$value))->count($academic_year);
		          		$speech_screening['values'] = $value;
		          		$speech_screening['count'] = $qry;
		          		if($speech_screening['count'] != 0 && $speech_screening['values'] != 'Normal' && $speech_screening['values'] != " " && $speech_screening['values'] != ""){
		          		array_push($abnormalities_array, $speech_screening);
		      			}
		          	}

		          	$dd_disability = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page8. Auditory Screening.D D and disability"));
	          		foreach ($dd_disability['values'] as $index => $value) {
		          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page8. Auditory Screening.D D and disability'=>$value))->count($academic_year);
		          		$dd_screening['values'] = $value;
		          		$dd_screening['count'] = $qry;
		          		if(!empty($dd_screening['values']) && $dd_screening['count'] != 0){
		          		array_push($abnormalities_array, $dd_screening);
		      			}
		          	}


		    	break;

		    	case 'Dental_Checkup': case 'Dental Abnormalities':

	          		$qry = $this->mongo_db->where(array("doc_data.widget_data.page9.Dental Check-up.Oral Hygiene"=>"Poor"))->count($academic_year);
		          		$carious_teeth['values'] = "Oral Hygiene -Poor";
		          		$carious_teeth['count'] = $qry;
				        if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

				    $qry = $this->mongo_db->where(array("doc_data.widget_data.page9.Dental Check-up.Carious Teeth"=>"Yes"))->count($academic_year);
		          		$carious_teeth['values'] = "Carious Teeth";
		          		$carious_teeth['count'] = $qry;
				        if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

				    $qry = $this->mongo_db->where(array("doc_data.widget_data.page9.Dental Check-up.Flourosis"=>"Yes"))->count($academic_year);
		          		$carious_teeth['values'] = "Flourosis";
		          		$carious_teeth['count'] = $qry;
				        if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

				    $qry = $this->mongo_db->where(array("doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment"=>"Yes"))->count($academic_year);
		          		$carious_teeth['values'] = "Orthodontic Treatment";
		          		$carious_teeth['count'] = $qry;
				        
				        if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

				     $qry = $this->mongo_db->where(array("doc_data.widget_data.page9.Dental Check-up.Indication for extraction"=>"Yes"))->count($academic_year);
		          		$carious_teeth['values'] = "Indication for extraction";
		          		$carious_teeth['count'] = $qry;
				        if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

				     $qry = $this->mongo_db->where(array("doc_data.widget_data.page9.Dental Check-up.Halitosis"=>"Yes"))->count($academic_year);
		          		$carious_teeth['values'] = "Halitosis";
		          		$carious_teeth['count'] = $qry;
				        if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}
				     $qry = $this->mongo_db->where(array("doc_data.widget_data.page9.Dental Check-up.Flat patches"=>"Red"))->count($academic_year);
		          		$carious_teeth['values'] = "Flat patches Red";
		          		$carious_teeth['count'] = $qry;
				        
				        if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}
				    $qry = $this->mongo_db->where(array("doc_data.widget_data.page9.Dental Check-up.Flat patches"=>"White"))->count($academic_year);
		          		$carious_teeth['values'] = "Flat patches White";
		          		$carious_teeth['count'] = $qry;
				       
				       if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}
				     $qry = $this->mongo_db->where(array("doc_data.widget_data.page9.Dental Check-up.Ulcer"=>"Yes"))->count($academic_year);
		          		$carious_teeth['values'] = "Ulcer";
		          		$carious_teeth['count'] = $qry;
				       if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}
			          		
		    		break;

		    	case 'Refferal_Made':


		    		$qry = $this->mongo_db->where(array("doc_data.widget_data.page5.Doctor Check Up.Referral Made"=>"Yes"))->count($academic_year);
		    		$carious_teeth['values'] = "Doctor Referral Made";
		    		$carious_teeth['count'] = $qry;

		    		if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

		    		$qry = $this->mongo_db->where(array("doc_data.widget_data.page7.Colour Blindness.Referral Made"=>"Yes"))->count($academic_year);
		    		$carious_teeth['values'] = "Vision Referral Made";
		    		$carious_teeth['count'] = $qry;
		    		if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

		    		$qry = $this->mongo_db->where(array("doc_data.widget_data.page8.Auditory Screening.Referral Made"=>"Yes"))->count($academic_year);
		    		$carious_teeth['values'] = "Auditory Referral Made";
		    		$carious_teeth['count'] = $qry;
		    		if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

		    		$qry = $this->mongo_db->where(array("doc_data.widget_data.page9.Dental Check-up.Referral Made"=>"Yes"))->count($academic_year);
		    		$carious_teeth['values'] = "Dental Check-up Referral Made";
		    		$carious_teeth['count'] = $qry;
		    		if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}
		    		
		    		break;
		    	case 'Command_centre':

		    		$qry = $this->mongo_db->where(array("doc_data.widget_data.page10.Command Center Followup"=>"Yes"))->count($academic_year);
		    		$carious_teeth['values'] = "Command Center Followup";
		    		$carious_teeth['count'] = $qry;

		    		if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

		    		$qry = $this->mongo_db->where(array("doc_data.widget_data.page10.Post Operative Cases"=>"Yes"))->count($academic_year);
		    		$carious_teeth['values'] = "Post Operative Cases";
		    		$carious_teeth['count'] = $qry;

		    		if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

		    		$qry = $this->mongo_db->where(array("doc_data.widget_data.page10.Surgery Cases"=>"Yes"))->count($academic_year);
		    		$carious_teeth['values'] = "Surgery Cases";
		    		$carious_teeth['count'] = $qry;

		    		if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}
		    		
		    		break;
		    	
		    	default:
		    		# code...
		    		break;
		    }

		    }elseif (($po_name != 'All') && ($school_name == 'All')) {
		    	 switch ($abnormalities) {

		    	case 'General_Abnormalities': case 'General Abnormalities':
		    		$check = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities"));
		          		foreach ($check['values'] as $index => $value) {
			          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, 'doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities'=>$value))->count($academic_year);
			          		$check['values'] = $value;
			          		$check['count'] = $qry;

			          	if($check['count'] != 0 && $check['values'] != " " && $check['values'] != ""){
		          		array_push($abnormalities_array, $check);
		      			}
			        }
		    	break;

		    	case 'postural': case 'Postural Abnormalities':
		    		    	
		          	$postural = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page4.Doctor Check Up.Postural"));
			          	foreach ($postural['values'] as $index => $value) {
				          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, 'doc_data.widget_data.page4.Doctor Check Up.Postural'=>$value))->count($academic_year);
				          		$postural['values'] = $value;
				          		$postural['count'] = $qry;
				          		if($postural['count'] != 0 && $postural['values'] != " " && $postural['values'] != ""){
				          		array_push($abnormalities_array, $postural);
				      			}
				        	}
				break;

				case 'ortho': case 'Ortho Abnormalities':
					$ortho = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page4.Doctor Check Up.Ortho"));
		          		foreach ($ortho['values'] as $index => $value) {
			          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, 'doc_data.widget_data.page4.Doctor Check Up.Ortho'=>$value))->count($academic_year);
			          		$ortho['values'] = $value;
			          		$ortho['count'] = $qry;
			          		if($ortho['count'] != 0 && $ortho['values']!= " " && $ortho['values'] != ""){
			          		array_push($abnormalities_array, $ortho);
			      			}

			        }

				break;
/*
				case 'skin': case 'Skin Abnormalities':
					$skin = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page4.Doctor Check Up.Skin conditions"));
			        foreach ($skin['values'] as $index => $value) {
			          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, 'doc_data.widget_data.page4.Doctor Check Up.Skin conditions'=>$value))->count($academic_year);
			          	//log_message('error','checkingskinconditionsscabies==='.print_r($qry,true));
			          		$skin['values'] = $value;
			          		$skin['count'] = $qry;
			          		if($skin['count'] != 0){
			          		array_push($abnormalities_array, $skin);
			      			}
			          }

				break;*/

			/*	case 'common_dieseases': case 'Common Disease Abnormalities':
					$common_dieseases = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page4.Doctor Check Up.Common Diseases"));
		          foreach ($common_dieseases['values'] as $index => $value) {
			          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, 'doc_data.widget_data.page4.Doctor Check Up.Common Diseases'=>$value))->count($academic_year);
			          		$common_dieseases['values'] = $value;
			          		$common_dieseases['count'] = $qry;
			          		if($common_dieseases['count'] != 0){
			          		array_push($abnormalities_array, $common_dieseases);
			      			}
			          }

				break;*/

				case 'defects_at_birth': case 'Defects At Birth':
					$defects_at_birth = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page5.Doctor Check Up.Defects at Birth"));
	           		foreach ($defects_at_birth['values'] as $index => $value) {
		          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, 'doc_data.widget_data.page5.Doctor Check Up.Defects at Birth'=>$value))->count($academic_year);
		          		$defects_at_birth['values'] = $value;
		          		$defects_at_birth['count'] = $qry;
		          		if($defects_at_birth['count'] != 0 && $defects_at_birth['values'] != " " && $defects_at_birth['values'] != ""){
		          		array_push($abnormalities_array, $defects_at_birth);
		      			}
		          	}

				break;	

				case 'deficencies': case 'Deficiencies':

					//$deficencies = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page5.Doctor Check Up.Deficencies"));
					$deficencies = [
						   "Under Weight",
						"Anaemia",
						"Vitamin Deficiency - Bcomplex",
						"Over Weight",
						"Anemic",
						"Vitamin deficiency",
						"Goiter",
						"Vitamin A Deficiency",
						"Vitamin D Deficiency",
						"Normal Weight",
						"SAM/stunting",
						"Obese",
						"Anemia-Mild",
						"Anemia-Moderate"
						];
	          		foreach ($deficencies as $index => $value) {
		          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, 'doc_data.widget_data.page5.Doctor Check Up.Deficencies'=>$value))->count($academic_year);
		          		$deficencies['values'] = $value;
		          		$deficencies['count'] = $qry;
		          		if($deficencies['count'] != 0 && $deficencies['values']!= " " && $deficencies['values'] != ""){
		          		array_push($abnormalities_array, $deficencies);
		      			}
		          	}
				break;

				case 'childhood_diseases': case 'Childhood Diseases':
					 $childhood_diseases = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases"));
	          		foreach ($childhood_diseases['values'] as $index => $value) {
		          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, 'doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases'=>$value))->count($academic_year);
		          		$childhood_diseases['values'] = $value;
		          		$childhood_diseases['count'] = $qry;
		          		if($childhood_diseases['count'] != 0 && $childhood_diseases['values']!= " " && $childhood_diseases['values'] != ""){
		          		array_push($abnormalities_array, $childhood_diseases);
		      			}
		          }

				break;	  
		    		        
		    	case 'Eye_Abnormalities': case 'Eye Abnormalities':

		    		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page6.Without Glasses" => array('$exists' => true),"doc_data.widget_data.page6.Without Glasses.Right"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->count($academic_year);
		          		$vision_screening['values'] = "Without Glasses Right";
		          		$vision_screening['count'] = $qry;

		          		if($vision_screening['count'] != 0){
		          		array_push($abnormalities_array, $vision_screening);
		      			}

		          	$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page6.Without Glasses" => array('$exists' => true),"doc_data.widget_data.page6.Without Glasses.Left"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->count($academic_year);
		          		$vision_screening['values'] = "Without Glasses Left";
		          		$vision_screening['count'] = $qry;
				          
				        if($vision_screening['count'] != 0){
		          		array_push($abnormalities_array, $vision_screening);
		      			}

				    $qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page6.With Glasses" => array('$exists' => true),"doc_data.widget_data.page6.With Glasses.Right"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->count($academic_year);
		          		$vision_screening['values'] = "With Glasses Right";
		          		$vision_screening['count'] = $qry;
				          
				       if($vision_screening['count'] != 0){
		          		array_push($abnormalities_array, $vision_screening);
		      			}

				     $qry = $this->mongo_db->where(array("doc_data.widget_data.page6.With Glasses" => array('$exists' => true),"doc_data.widget_data.page6.With Glasses.Left"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->count($academic_year);
		          		$vision_screening['values'] = "With Glasses Left";
		          		$vision_screening['count'] = $qry;
				          
				       if($vision_screening['count'] != 0){
		          		array_push($abnormalities_array, $vision_screening);
		      			}

				    $vision_screen = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page6.Vision Screening"));
	          		foreach ($vision_screen['values'] as $index => $value) {
		          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, 'doc_data.widget_data.page6.Vision Screening'=>$value))->count($academic_year);
		          		$vision_screening['values'] = $value;
		          		$vision_screening['count'] = $qry;
		          		if($vision_screening['count'] != 0 && $vision_screening['values']!=" " && $vision_screening['values']!= ""){
		          		array_push($abnormalities_array, $vision_screening);
		      			}
		          	}

		          	$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page6.Bitot Night Blindness"=>"Yes"))->count($academic_year);
		    		$vision_screening['values'] = "Bitot Night Blindness";
		    		$vision_screening['count'] = $qry;

		    		if($vision_screening['count'] != 0){
		          		array_push($abnormalities_array, $vision_screening);
		      			}

		    		
		    	break;

		    	case 'Auditory_Abnormalities' : case 'Auditory And Speech Abnormalities':

		    		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page8. Auditory Screening.Right"=>"Fail"))->count($academic_year);
		    		$auditory_screening['values'] = "Auditory Screening Right";
		    		$auditory_screening['count'] = $qry;

		    		if($auditory_screening['count'] != 0){
	          		array_push($abnormalities_array, $auditory_screening);
	      			}

		    		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page8. Auditory Screening.Left"=>"Fail"))->count($academic_year);
		    		$auditory_screening['values'] = "Auditory Screening Left";
		    		$auditory_screening['count'] = $qry;

		    		if($auditory_screening['count'] != 0){
	          		array_push($abnormalities_array, $auditory_screening);
	      			}

		    		$speech_screen = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page8. Auditory Screening.Speech Screening"));
	          		foreach ($speech_screen['values'] as $index => $value) {
		          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, 'doc_data.widget_data.page8. Auditory Screening.Speech Screening'=>$value))->count($academic_year);
		          		$speech_screening['values'] = $value;
		          		$speech_screening['count'] = $qry;
		          		if($speech_screening['count'] != 0 && $speech_screening['values']!=" " && $speech_screening['values'] != "" ){
		          		array_push($abnormalities_array, $speech_screening);
		      			}
		          	}

		          	$dd_disability = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page8. Auditory Screening.D D and disability"));
	          		foreach ($dd_disability['values'] as $index => $value) {
		          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, 'doc_data.widget_data.page8. Auditory Screening.D D and disability'=>$value))->count($academic_year);
		          		$dd_screening['values'] = $value;
		          		$dd_screening['count'] = $qry;
		          		if($dd_screening['count'] != 0){
		          		array_push($abnormalities_array, $dd_screening);
		      			}
		          	}


		    	break;

		    	case 'Dental_Checkup': case 'Dental Abnormalities':

	          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page9.Dental Check-up.Oral Hygiene"=>"Poor"))->count($academic_year);
		          		$carious_teeth['values'] = "Oral Hygiene -Poor";
		          		$carious_teeth['count'] = $qry;
				          
				        if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}
				    $qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page9.Dental Check-up.Carious Teeth"=>"Yes"))->count($academic_year);
		          		$carious_teeth['values'] = "Carious Teeth";
		          		$carious_teeth['count'] = $qry;
				          
				        if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

				    $qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page9.Dental Check-up.Flourosis"=>"Yes"))->count($academic_year);
		          		$carious_teeth['values'] = "Flourosis";
		          		$carious_teeth['count'] = $qry;
				          
				        if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

				    $qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment"=>"Yes"))->count($academic_year);
		          		$carious_teeth['values'] = "Orthodontic Treatment";
		          		$carious_teeth['count'] = $qry;
				          
				        if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

				     $qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page9.Dental Check-up.Indication for extraction"=>"Yes"))->count($academic_year);
		          		$carious_teeth['values'] = "Indication for extraction";
		          		$carious_teeth['count'] = $qry;
				          
				        if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

				     $qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page9.Dental Check-up.Halitosis"=>"Yes"))->count($academic_year);
		          		$carious_teeth['values'] = "Halitosis";
		          		$carious_teeth['count'] = $qry;
				          
				        if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

				     $qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page9.Dental Check-up.Flat patches"=>"Red"))->count($academic_year);
		          		$carious_teeth['values'] = "Flat patches Red";
		          		$carious_teeth['count'] = $qry;
				          
				        if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

				    $qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page9.Dental Check-up.Flat patches"=>"White"))->count($academic_year);
		          		$carious_teeth['values'] = "Flat patches White";
		          		$carious_teeth['count'] = $qry;
				          
				        if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

				     $qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page9.Dental Check-up.Ulcer"=>"Yes"))->count($academic_year);
		          		$carious_teeth['values'] = "Ulcer";
		          		$carious_teeth['count'] = $qry;
				          
				        if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}
			          		
		    		break;

		    	case 'Refferal_Made':


		    		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page5.Doctor Check Up.Referral Made"=>"Yes"))->count($academic_year);
		    		$carious_teeth['values'] = "Doctor Referral Made";
		    		$carious_teeth['count'] = $qry;

		    		if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

		    		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page7.Colour Blindness.Referral Made"=>"Yes"))->count($academic_year);
		    		$carious_teeth['values'] = "Vision Referral Made";
		    		$carious_teeth['count'] = $qry;

		    		if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

		    		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page8.Auditory Screening.Referral Made"=>"Yes"))->count($academic_year);
		    		$carious_teeth['values'] = "Auditory Referral Made";
		    		$carious_teeth['count'] = $qry;

		    		if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

		    		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page9.Dental Check-up.Referral Made"=>"Yes"))->count($academic_year);
		    		$carious_teeth['values'] = "Dental Check-up Referral Made";
		    		$carious_teeth['count'] = $qry;

		    		if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}
		    		
		    		break;
		    	case 'Command_centre':

		    		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page10.Command Center Followup"=>"Yes"))->count($academic_year);
		    		$carious_teeth['values'] = "Command Center Followup";
		    		$carious_teeth['count'] = $qry;

		    		if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

		    		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page10.Post Operative Cases"=>"Yes"))->count($academic_year);
		    		$carious_teeth['values'] = "Post Operative Cases";
		    		$carious_teeth['count'] = $qry;

		    		if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

		    		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page10.Surgery Cases"=>"Yes"))->count($academic_year);
		    		$carious_teeth['values'] = "Surgery Cases";
		    		$carious_teeth['count'] = $qry;

		    		if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}
		    		
		    		break;
		    	
		    	default:
		    		# code...
		    		break;
		    }
		    }elseif (($po_name != 'All') && ($school_name != 'All')) {
		    	 switch ($abnormalities) {

		    	case 'General_Abnormalities': case 'General Abnormalities':
		    		$check = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities"));
		          		foreach ($check['values'] as $index => $value) {
			          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, 'doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities'=>$value))->count($academic_year);
			          		$check['values'] = $value;
			          		$check['count'] = $qry;

			          		if($check['count'] != 0 && $check['values']!=" " && $check['values']!=""){
			          		array_push($abnormalities_array, $check);
			      			}
			        }
		    	break;

		    	case 'postural': case 'Postural Abnormalities':
		    		    	
		          	$postural = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page4.Doctor Check Up.Postural"));
			          	foreach ($postural['values'] as $index => $value) {
				          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page4.Doctor Check Up.Postural'=>$value))->count($academic_year);
				          		$postural['values'] = $value;
				          		$postural['count'] = $qry;
				          		if($postural['count'] != 0 && $postural['values'] != " " && $postural['values'] != ""){
				          		array_push($abnormalities_array, $postural);
				      			}
				        	}
				break;

				case 'ortho': case 'Ortho Abnormalities':
					$ortho = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page4.Doctor Check Up.Ortho"));
		          		foreach ($ortho['values'] as $index => $value) {
			          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, 'doc_data.widget_data.page4.Doctor Check Up.Ortho'=>$value))->count($academic_year);
			          		$ortho['values'] = $value;
			          		$ortho['count'] = $qry;
			          		if($ortho['count'] != 0 && $ortho['values']!=" " && $ortho['values'] != ""){
			          		array_push($abnormalities_array, $ortho);
			      			}
			        }

				break;

				/*case 'skin': case 'Skin Abnormalities':
					$skin = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page4.Doctor Check Up.Skin conditions"));
			        foreach ($skin['values'] as $index => $value) {
			          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, 'doc_data.widget_data.page4.Doctor Check Up.Skin conditions'=>$value))->count($academic_year);
			          	//log_message('error','checkingskinconditionsscabies==='.print_r($qry,true));
			          		$skin['values'] = $value;
			          		$skin['count'] = $qry;
			          		if($skin['count'] != 0){
			          		array_push($abnormalities_array, $skin);
			      			}
			          }

				break;

				case 'common_dieseases': case 'Common Disease Abnormalities':
					$common_dieseases = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page4.Doctor Check Up.Common Diseases"));
		          foreach ($common_dieseases['values'] as $index => $value) {
			          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, 'doc_data.widget_data.page4.Doctor Check Up.Common Diseases'=>$value))->count($academic_year);
			          		$common_dieseases['values'] = $value;
			          		$common_dieseases['count'] = $qry;
			          		if($common_dieseases['count'] != 0){
			          		array_push($abnormalities_array, $common_dieseases);
			      			}
			          }

				break;*/

				case 'defects_at_birth': case 'Defects At Birth':
					$defects_at_birth = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page5.Doctor Check Up.Defects at Birth"));
	           		foreach ($defects_at_birth['values'] as $index => $value) {
		          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, 'doc_data.widget_data.page5.Doctor Check Up.Defects at Birth'=>$value))->count($academic_year);
		          		$defects_at_birth['values'] = $value;
		          		$defects_at_birth['count'] = $qry;
		          		if($defects_at_birth['count'] != 0 && $defects_at_birth['values']!=" " && $defects_at_birth['values']!=""){
		          		array_push($abnormalities_array, $defects_at_birth);
		      			}
		          	}

				break;	

				case 'deficencies': case 'Deficiencies':

					//$deficencies = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page5.Doctor Check Up.Deficencies"));
					$deficencies = [
						   "Under Weight",
						"Anaemia",
						"Vitamin Deficiency - Bcomplex",
						"Over Weight",
						"Anemic",
						"Vitamin deficiency",
						"Goiter",
						"Vitamin A Deficiency",
						"Vitamin D Deficiency",
						"Normal Weight",
						"SAM/stunting",
						"Obese",
						"Anemia-Mild",
						"Anemia-Moderate"
						];
	          		foreach ($deficencies as $index => $value) {
		          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, 'doc_data.widget_data.page5.Doctor Check Up.Deficencies'=>$value))->count($academic_year);
		          		$deficencies['values'] = $value;
		          		$deficencies['count'] = $qry;
		          		if($deficencies['count'] != 0 && $deficencies['values']!=" " && $deficencies['values']!=""){
		          		array_push($abnormalities_array, $deficencies);
		      			}
		          	}
				break;

				case 'childhood_diseases': case 'Childhood Diseases':
					 $childhood_diseases = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases"));
	          		foreach ($childhood_diseases['values'] as $index => $value) {
		          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, 'doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases'=>$value))->count($academic_year);
		          		$childhood_diseases['values'] = $value;
		          		$childhood_diseases['count'] = $qry;
		          		if($childhood_diseases['count'] != 0 && $childhood_diseases['values'] !=" " && $childhood_diseases['values'] != ""){
		          		array_push($abnormalities_array, $childhood_diseases);
		      			}
		          }

				break;	  
		    		        
		    	case 'Eye_Abnormalities': case 'Eye Abnormalities':

		    		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page6.Without Glasses" => array('$exists' => true),"doc_data.widget_data.page6.Without Glasses.Right"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->count($academic_year);
		          		$vision_screening['values'] = "Without Glasses Right";
		          		$vision_screening['count'] = $qry;
		          		if($vision_screening['count'] != 0){
		          		array_push($abnormalities_array, $vision_screening);
		      			}

		          	$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page6.Without Glasses" => array('$exists' => true),"doc_data.widget_data.page6.Without Glasses.Left"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->count($academic_year);
		          		$vision_screening['values'] = "Without Glasses Left";
		          		$vision_screening['count'] = $qry;
				          
				        if($vision_screening['count'] != 0){
		          		array_push($abnormalities_array, $vision_screening);
		      			}

				    $qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page6.With Glasses" => array('$exists' => true),"doc_data.widget_data.page6.With Glasses.Right"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->count($academic_year);
		          		$vision_screening['values'] = "With Glasses Right";
		          		$vision_screening['count'] = $qry;
				          
				        if($vision_screening['count'] != 0){
		          		array_push($abnormalities_array, $vision_screening);
		      			}

				     $qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page6.With Glasses" => array('$exists' => true),"doc_data.widget_data.page6.With Glasses.Left"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->count($academic_year);
		          		$vision_screening['values'] = "With Glasses Left";
		          		$vision_screening['count'] = $qry;
				          
				       if($vision_screening['count'] != 0){
		          		array_push($abnormalities_array, $vision_screening);
		      			}

				    $vision_screen = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page6.Vision Screening"));
	          		foreach ($vision_screen['values'] as $index => $value) {
		          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, 'doc_data.widget_data.page6.Vision Screening'=>$value))->count($academic_year);
		          		$vision_screening['values'] = $value;
		          		$vision_screening['count'] = $qry;
		          		if($vision_screening['count'] != 0 && $vision_screening['values'] != " " && $vision_screening['values']!= "" && $vision_screening['values'] != "Normal"){
		          		array_push($abnormalities_array, $vision_screening);
		      			}
		          	}

		          	$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page6.Bitot Night Blindness"=>"Yes"))->count($academic_year);
		    		$vision_screening['values'] = "Bitot Night Blindness";
		    		$vision_screening['count'] = $qry;

		    		if($vision_screening['count'] != 0){
		          		array_push($abnormalities_array, $vision_screening);
		      			}

		    		
		    	break;

		    	case 'Auditory_Abnormalities' : case 'Auditory And Speech Abnormalities':

		    		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page8. Auditory Screening.Right"=>"Fail"))->count($academic_year);
		    		$auditory_screening['values'] = "Auditory Screening Right";
		    		$auditory_screening['count'] = $qry;

		    		if($auditory_screening['count'] != 0){
	          		array_push($abnormalities_array, $auditory_screening);
	      			}

		    		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page8. Auditory Screening.Left"=>"Fail"))->count($academic_year);
		    		$auditory_screening['values'] = "Auditory Screening Left";
		    		$auditory_screening['count'] = $qry;

		    		if($auditory_screening['count'] != 0){
	          		array_push($abnormalities_array, $auditory_screening);
	      			}

		    		$speech_screen = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page8. Auditory Screening.Speech Screening"));
	          		foreach ($speech_screen['values'] as $index => $value) {
		          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, 'doc_data.widget_data.page8. Auditory Screening.Speech Screening'=>$value))->count($academic_year);
		          		$speech_screening['values'] = $value;
		          		$speech_screening['count'] = $qry;
		          		if($speech_screening['count'] != 0 && $speech_screening['values']!=" " && $speech_screening['values']!= "" && $speech_screening['values']!= false && $speech_screening['values'] != 'Normal'){
		          		array_push($abnormalities_array, $speech_screening);
		      			}
		          	}

		          	$dd_disability = $this->mongo_db->command(array('distinct' => $academic_year ,'key' => "doc_data.widget_data.page8. Auditory Screening.D D and disability"));
	          		foreach ($dd_disability['values'] as $index => $value) {
		          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, 'doc_data.widget_data.page8. Auditory Screening.D D and disability'=>$value))->count($academic_year);
		          		$dd_screening['values'] = $value;
		          		$dd_screening['count'] = $qry;
		          		if($dd_screening['count'] != 0){
		          		array_push($abnormalities_array, $dd_screening);
		      			}
		          	}


		    	break;

		    	case 'Dental_Checkup': case 'Dental Abnormalities':

	          		$qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page9.Dental Check-up.Oral Hygiene"=>"Poor"))->count($academic_year);
		          		$carious_teeth['values'] = "Oral Hygiene -Poor";
		          		$carious_teeth['count'] = $qry;
				          
				        if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

				    $qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page9.Dental Check-up.Carious Teeth"=>"Yes"))->count($academic_year);
		          		$carious_teeth['values'] = "Carious Teeth";
		          		$carious_teeth['count'] = $qry;
				          
				        if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

				    $qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page9.Dental Check-up.Flourosis"=>"Yes"))->count($academic_year);
		          		$carious_teeth['values'] = "Flourosis";
		          		$carious_teeth['count'] = $qry;
				          
				        if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

				    $qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment"=>"Yes"))->count($academic_year);
		          		$carious_teeth['values'] = "Orthodontic Treatment";
		          		$carious_teeth['count'] = $qry;
				          
				        if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

				     $qry = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page9.Dental Check-up.Indication for extraction"=>"Yes"))->count($academic_year);
		          		$carious_teeth['values'] = "Indication for extraction";
		          		$carious_teeth['count'] = $qry;
				          
				        if($carious_teeth['count'] != 0){
		          		array_push($abnormalities_array, $carious_teeth);
		      			}

				    
				   
			          		
		    		
		    		break;
		    	
		    	default:
		    		# code...
		    		break;
		    }
		    }

		    $abnormal_original = [];

		    foreach ($abnormalities_array as $abno) {
		    	 
		    	$data['label'] = $abno['values'];
		    	
		    	$data['value'] = $abno['count'];
		    	if($data['value'] != 0){

		    	array_push($abnormal_original, $data);
		    	}

		    }

		    return $abnormal_original;
		   
		}

// Get SChools by symptom

		public function get_schools_by_symptom($symptom, $academic_years, $po_name, $school_name)
		{

			if($academic_years == '2018-19 Academic Year'){
				$academic_year = 'healthcare2016226112942701';
			}
			if(($school_name == false) || ($school_name == 'All_po'))
			{
				$school_name = 'All';
			}

			$empty = [];

			if(($po_name == 'All') && ($school_name == 'All')){

				switch ($symptom) {

				// General Symptoms
				case "ENT": case "Neurologic": case "Heart": case "Skin": case "Abdomen": case "Lungs": case "H and N": case "Genetalia": case "Lymphatic": case "Lyphamatic": case "Genitalia":
					$general_symptoms = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => $symptom ))->get($academic_year);

						foreach($general_symptoms as $symptom)
						{
						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}


						$schools_with_count = array_count_values($empty);
						
					return $schools_with_count;
					break;
				// Ortho problems
				case "Neck": case "Shoulders": case "Arms/Hands": case "Knees": case "Feet": case "Hips": case "Arms":
					$ortho_problms = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page4.Doctor Check Up.Ortho" => $symptom))->get($academic_year);

						foreach($ortho_problms as $symptom)
						{
						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}

						$schools_with_count = array_count_values($empty);
					return $schools_with_count;
					break;
				// Postural problems
				case "No spinal Abnormality": case "Spinal Abnormality": case "Moderate": case "Mild": case "Marked": case 'Spinal Abnomality':

					$postural_problms = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page4.Doctor Check Up.Postural" => $symptom))->get($academic_year);
					foreach($postural_problms as $symptom)
						{
						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}

						$schools_with_count = array_count_values($empty);
					return $schools_with_count;
					break;
				// Common problems
				case "Myalgia": case "Tonsillitis": case "tonsillitis": case "Cold": case "cold": case "Cervical Lymph Adenitis": case "ASOM": case "Acute Br.Asthama": case "Icterus": case "Pyrexia": case "URTI": case "Injuries": case "UTI": case "Angular Stomatities": case "Angular Stomatitis": case "Aphthous Ulcers": case "Glossities": case "Pharyngitis": case "Headache": case "Stomachache": case "Diarrhea": case "Behaviour Disorder":
					$common_problems = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page4.Doctor Check Up.Common Diseases" => $symptom))->get($academic_year);
					foreach($common_problems as $symptom)
						{

						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}

						$schools_with_count = array_count_values($empty);
					return $schools_with_count;
					break;
	    		// Defects at Birth problems
				case "Neural Tube Defect": case "Down Syndrome": case "Cleft Lip and Palate": case "Talipes Club foot": case "Developmental Dyslpasia of Hip": case "Congenital Heart Disease": case "Congenital Cataract": case "Congenital Deafness": case "Congential Heart Disease": case "Retinopathy of Prematurity": case "Retinopathy of Prematurity(only at DH)": case "Sickle Cell Anaemia": case "Down Syndome": case "Congential Cataract": case "Congential Deafness":

					$defects_at_birth_problems = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => $symptom ))->get($academic_year);
					foreach($defects_at_birth_problems as $symptom)
						{
						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}

						$schools_with_count = array_count_values($empty);
					return $schools_with_count;
					break;
				// Deficencies problems
				case "Anemia-Mild": case "Anemia-Moderate": case "Anemia-Severe": case "Vitamin Deficiency - BComplex": case "Vitamin A Deficiency": case "Vitamin C Deficiency": case "Vitamin D Deficiency": case "SAM/Stunting": case "Goiter": case "Under Weight": case "Over Weight":case "Obese": case "Anaemia": case "Vitamin Deficiency - Bcomplex": case "Normal Weight":
					$deficencies_problems = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page5.Doctor Check Up.Deficencies" => $symptom))->get($academic_year);
					foreach($deficencies_problems as $symptom)
						{
						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}

						$schools_with_count = array_count_values($empty);
					return $schools_with_count;
					break;
	    		// Childhood Disease problems
				case "CSOM": case "Rheumatic Heart Disease": case "Chronic Br.Asthma": case "Hyperthyroidism": case "Hypothyrodism": case "Hypothyroidism": case "Type-I Diabeties": case "Type-II Diabeties": case "Epilepsy": case "PCOD": case 'Type-I Diabetes': case 'Type-II Diabetes': case 'Skin Conditions': case 'Asthma': case 'Skin conditions': case 'Hypothyrodism': case 'Otitis Media': case 'Convulsive Disorders': case 'Diabetes':
					$deficencies_problems = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => $symptom))->get($academic_year);
					foreach($deficencies_problems as $symptom)
						{
						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}

						$schools_with_count = array_count_values($empty);
					return $schools_with_count;
					break;
					// Skin problems
					case "Scabies": case "Taenia Corporis": case "Taenia Facialis": case "Taenia Cruris": case "ECCEMA": case "Psoriasis": case "Allergic Rash": case "White Patches on Face": case "Acne on Face": case "Hyper Pigmentation": case "Hypo Pigmentation": case "Hansens Disease": case "Molluscum": case "Nail Bed Disease": case "Greying of Hair": case "Danddruff": case "Cracked Feet": case "Hyperhidrosis": case "ECZEMA": case "Greying Hair":
					$skin_problems = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page4.Doctor Check Up.Skin conditions" => $symptom))->get($academic_year);
					foreach($skin_problems as $symptom)
						{
						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}

						$schools_with_count = array_count_values($empty);
					return $schools_with_count;
					break;

							//Vision Abnormalities
							case "Without Glasses Right":

								$without_glass_right = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page6.Without Glasses" => array('$exists' => true), "doc_data.widget_data.page6.Without Glasses.Right"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->get($academic_year);
							foreach($without_glass_right as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Without Glasses Left":
							$without_glass_left = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page6.Without Glasses" => array('$exists' => true), "doc_data.widget_data.page6.Without Glasses.Left"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->get($academic_year);
							foreach($without_glass_left as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "With Glasses Right":

								$with_glass_right = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page6.With Glasses" => array('$exists' => true), "doc_data.widget_data.page6.With Glasses.Right"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->get($academic_year);
							foreach($with_glass_right as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "With Glasses Left":
							$with_glass_left = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page6.With Glasses" => array('$exists' => true), "doc_data.widget_data.page6.With Glasses.Left"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->get($academic_year);
							foreach($with_glass_left as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Left Squnit": case "Redness of Eye Left": case "Redness of Eye Right": case "Redness of Eye": case "Stye": case "Trauma": case "Blepharitis": case "Right Squnit": case "Myopia": case "Forign Boady": case "Hyperopia": case "Pterizium": case "Chalazion": case "Pterygium": case "Forign Body":
							$vision_problem = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page6.Vision Screening" => $symptom))->get($academic_year);
							foreach($vision_problem as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Bitot Night Blindness":
								
							$bitot = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page6.Bitot Night Blindness"=>"Yes"))->get($academic_year);

							foreach($bitot as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Auditory Screening Right": case 'Auditory Screening Right':
							$auditory_right = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page8. Auditory Screening.Right"=>"Fail"))->get($academic_year);
							foreach($auditory_right as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break; 

							case "Auditory Screening Left": case 'Auditory Screening Left':	
							$auditory_left = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page8. Auditory Screening.Left"=>"Fail"))->get($academic_year);
							foreach($auditory_left as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Normal": case "Fluency": case "Normal": case "Delay": case "Fluency": case "Misarticulation": case "Tongue Tie": case "Stammering": case "Voice": case "Behaviour Disorder": case "Language Delay": case "Misarticulaion": case "Pyrexia": case "Injuries": case "Myalgia": case "Pharyngitis": case "Stomachache": case "Headache": case "Cold": case "UTI": case "Behaviour Disorder":
							$speech_screen = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page8. Auditory Screening.Speech Screening" => $symptom))->get($academic_year);
							foreach($speech_screen as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Oral Hygiene -Poor":
							$oral_poor = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page9.Dental Check-up.Oral Hygiene"=>"Poor"))->get($academic_year);
							foreach($oral_poor as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Carious Teeth":
							$carious_teeth = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page9.Dental Check-up.Carious Teeth"=>"Yes"))->get($academic_year);
							foreach($carious_teeth as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Flourosis":
							$flourosis = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page9.Dental Check-up.Flourosis"=>"Yes"))->get($academic_year);
							foreach($flourosis as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

					   		case "Orthodontic Treatment":
					    	$orho_treatment = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment"=>"Yes"))->get($academic_year);
					    	foreach($orho_treatment as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

					    	case "Indication for extraction":
					    	$ife = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page9.Dental Check-up.Indication for extraction"=>"Yes"))->get($academic_year);
					    	foreach($ife as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

					     	case "Halitosis":
					      	$halitotis = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page9.Dental Check-up.Halitosis"=>"Yes"))->get($academic_year);
					      	foreach($halitotis as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

					      case "Flat patches Red":
					       $fpr = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page9.Dental Check-up.Flat patches"=>"Red"))->get($academic_year);
					       foreach($fpr as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

					       case "Flat patches White":
					       $fpw = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page9.Dental Check-up.Flat patches"=>"White"))->get($academic_year);
					       foreach($fpw as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

					        case "Ulcer":
					        $ulcer = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page9.Dental Check-up.Ulcer"=>"Yes"))->get($academic_year);
					        foreach($ulcer as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Doctor Referral Made":
							$doctor_refer = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page5.Doctor Check Up.Referral Made"=>"Yes"))->get($academic_year);
							foreach($doctor_refer as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							 case "Vision Referral Made":
							 $vision_refer = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page7.Colour Blindness.Referral Made"=>"Yes"))->get($academic_year);
							 foreach($vision_refer as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
								break;

							 case "Auditory Referral Made":
							 $auditory_refer = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page8.Auditory Screening.Referral Made"=>"Yes"))->get($academic_year);
							 foreach($auditory_refer as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
								break;
							 case "Dental Check-up Referral Made":
							 $dental_refer = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array("doc_data.widget_data.page9.Dental Check-up.Referral Made"=>"Yes"))->get($academic_year);
							 foreach($dental_refer as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
								break;
				default:
					break;
			}

			}elseif (($po_name != 'All') && ($school_name == 'All')) {
				switch ($symptom) {

				// General Symptoms
				case "ENT": case "Neurologic": case "Heart": case "Skin": case "Abdomen": case "Lungs": case "H and N": case "Genetalia": case "Lymphatic": case "Lyphamatic":
					$general_symptoms = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => $symptom ))->get($academic_year);

						foreach($general_symptoms as $symptom)
						{
						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}


						$schools_with_count = array_count_values($empty);
						
					return $schools_with_count;
					break;
				// Ortho problems
				case "Neck": case "Shoulders": case "Arms/Hands": case "Knees": case "Feet": case "Hips": case "Arms":
					$ortho_problms = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page4.Doctor Check Up.Ortho" => $symptom))->get($academic_year);

						foreach($ortho_problms as $symptom)
						{
						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}

						$schools_with_count = array_count_values($empty);
					return $schools_with_count;
					break;
				// Postural problems
				case "No spinal Abnormality": case "Spinal Abnormality": case "Moderate": case "Mild": case "Marked": case 'Spinal Abnomality':

					$postural_problms = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page4.Doctor Check Up.Postural" => $symptom))->get($academic_year);
					foreach($postural_problms as $symptom)
						{
						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}

						$schools_with_count = array_count_values($empty);
					return $schools_with_count;
					break;
				// Common problems
				case "Myalgia": case "Tonsillitis": case "tonsillitis": case "Cold": case "cold": case "Cervical Lymph Adenitis": case "ASOM": case "Acute Br.Asthama": case "Icterus": case "Pyrexia": case "URTI": case "Injuries": case "UTI": case "Angular Stomatities": case "Angular Stomatitis": case "Aphthous Ulcers": case "Glossities": case "Pharyngitis": case "Headache": case "Stomachache": case "Diarrhea": case "Behaviour Disorder":
					$common_problems = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page4.Doctor Check Up.Common Diseases" => $symptom))->get($academic_year);
					foreach($common_problems as $symptom)
						{

						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}

						$schools_with_count = array_count_values($empty);
					return $schools_with_count;
					break;
	    		// Defects at Birth problems
				case "Neural Tube Defect": case "Down Syndrome": case "Cleft Lip and Palate": case "Talipes Club foot": case "Developmental Dyslpasia of Hip": case "Congenital Heart Disease": case "Congenital Cataract": case "Congenital Deafness": case "Congential Heart Disease": case "Retinopathy of Prematurity": case "Retinopathy of Prematurity(only at DH)": case "Sickle Cell Anaemia": case "Down Syndome": case "Congential Cataract": case "Congential Deafness":

					$defects_at_birth_problems = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => $symptom ))->get($academic_year);
					foreach($defects_at_birth_problems as $symptom)
						{
						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}

						$schools_with_count = array_count_values($empty);
					return $schools_with_count;
					break;
				// Deficencies problems
				case "Anemia-Mild": case "Anemia-Moderate": case "Anemia-Severe": case "Vitamin Deficiency - BComplex": case "Vitamin A Deficiency": case "Vitamin C Deficiency": case "Vitamin D Deficiency": case "SAM/Stunting": case "Goiter":case "Under Weight": case "Over Weight":case "Obese":
					$deficencies_problems = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page5.Doctor Check Up.Deficencies" => $symptom))->get($academic_year);
					foreach($deficencies_problems as $symptom)
						{
						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}

						$schools_with_count = array_count_values($empty);
					return $schools_with_count;
					break;
	    		// Childhood Disease problems
				case "CSOM": case "Rheumatic Heart Disease": case "Chronic Br.Asthma": case "Hyperthyroidism": case "Hypothyrodism": case "Hypothyroidism": case "Type-I Diabeties": case "Type-II Diabeties": case "Epilepsy": case "PCOD": case 'Type-I Diabetes': case 'Type-II Diabetes':
					$deficencies_problems = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => $symptom))->get($academic_year);
					foreach($deficencies_problems as $symptom)
						{
						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}

						$schools_with_count = array_count_values($empty);
					return $schools_with_count;
					break;
					// Skin problems
					case "Scabies": case "Taenia Corporis": case "Taenia Facialis": case "Taenia Cruris": case "ECCEMA": case "Psoriasis": case "Allergic Rash": case "White Patches on Face": case "Acne on Face": case "Hyper Pigmentation": case "Hypo Pigmentation": case "Hansens Disease": case "Molluscum": case "Nail Bed Disease": case "Greying of Hair": case "Danddruff": case "Cracked Feet": case "Hyperhidrosis": case "ECZEMA": case "Greying Hair":
					$skin_problems = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page4.Doctor Check Up.Skin conditions" => $symptom))->get($academic_year);
					foreach($skin_problems as $symptom)
						{
						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}

						$schools_with_count = array_count_values($empty);
					return $schools_with_count;
					break;

							//Vision Abnormalities
							case "Without Glasses Right":

								$without_glass_right = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page6.Without Glasses" => array('$exists' => true), "doc_data.widget_data.page6.Without Glasses.Right"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->get($academic_year);
							foreach($without_glass_right as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Without Glasses Left":
							$without_glass_left = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page6.Without Glasses" => array('$exists' => true), "doc_data.widget_data.page6.Without Glasses.Left"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->get($academic_year);
							foreach($without_glass_left as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "With Glasses Right":

								$with_glass_right = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page6.With Glasses" => array('$exists' => true), "doc_data.widget_data.page6.With Glasses.Right"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->get($academic_year);
							foreach($with_glass_right as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "With Glasses Left":
							$with_glass_left = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page6.With Glasses" => array('$exists' => true), "doc_data.widget_data.page6.With Glasses.Left"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->get($academic_year);
							foreach($with_glass_left as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Left Squnit": case "Redness of Eye Left": case "Redness of Eye Right": case "Redness of Eye": case "Stye": case "Trauma": case "Blepharitis": case "Right Squnit": case "Myopia": case "Forign Boady": case "Hyperopia": case "Pterizium": case "Chalazion": case "Pterygium": case "Forign Body":
							$vision_problem = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page6.Vision Screening" => $symptom))->get($academic_year);
							foreach($vision_problem as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Bitot Night Blindness":
								
							$bitot = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page6.Bitot Night Blindness"=>"Yes"))->get($academic_year);

							foreach($bitot as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Auditory Screening Right": case 'Auditory Screening Right':
							$auditory_right = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page8. Auditory Screening.Right"=>"Fail"))->get($academic_year);
							foreach($auditory_right as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break; 

							case "Auditory Screening Left": case 'Auditory Screening Left':	
							$auditory_left = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page8. Auditory Screening.Left"=>"Fail"))->get($academic_year);
							foreach($auditory_left as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Normal": case "Fluency": case "Normal": case "Delay": case "Fluency": case "Misarticulation": case "Tongue Tie": case "Stammering": case "Voice": case "Behaviour Disorder": case "Language Delay": case "Misarticulaion": case "Pyrexia": case "Injuries": case "Myalgia": case "Pharyngitis": case "Stomachache": case "Headache": case "Cold": case "UTI":
							$speech_screen = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page8. Auditory Screening.Speech Screening" => $symptom))->get($academic_year);
							foreach($speech_screen as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Oral Hygiene -Poor":
							$oral_poor = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page9.Dental Check-up.Oral Hygiene"=>"Poor"))->get($academic_year);
							foreach($oral_poor as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Carious Teeth":
							$carious_teeth = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page9.Dental Check-up.Carious Teeth"=>"Yes"))->get($academic_year);
							foreach($carious_teeth as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Flourosis":
							$flourosis = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page9.Dental Check-up.Flourosis"=>"Yes"))->get($academic_year);
							foreach($flourosis as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

					   		case "Orthodontic Treatment":
					    	$orho_treatment = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment"=>"Yes"))->get($academic_year);
					    	foreach($orho_treatment as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

					    	case "Indication for extraction":
					    	$ife = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page9.Dental Check-up.Indication for extraction"=>"Yes"))->get($academic_year);
					    	foreach($ife as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

					     	case "Halitosis":
					      	$halitotis = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page9.Dental Check-up.Halitosis"=>"Yes"))->get($academic_year);
					      	foreach($halitotis as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

					      case "Flat patches Red":
					       $fpr = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page9.Dental Check-up.Flat patches"=>"Red"))->get($academic_year);
					       foreach($fpr as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

					       case "Flat patches White":
					       $fpw = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page9.Dental Check-up.Flat patches"=>"White"))->get($academic_year);
					       foreach($fpw as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

					        case "Ulcer":
					        $ulcer = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page9.Dental Check-up.Ulcer"=>"Yes"))->get($academic_year);
					        foreach($ulcer as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Doctor Referral Made":
							$doctor_refer = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page5.Doctor Check Up.Referral Made"=>"Yes"))->get($academic_year);
							foreach($doctor_refer as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							 case "Vision Referral Made":
							 $vision_refer = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page7.Colour Blindness.Referral Made"=>"Yes"))->get($academic_year);
							 foreach($vision_refer as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
								break;

							 case "Auditory Referral Made":
							 $auditory_refer = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page8.Auditory Screening.Referral Made"=>"Yes"))->get($academic_year);
							 foreach($auditory_refer as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
								break;
							 case "Dental Check-up Referral Made":
							 $dental_refer = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.District'=>$po_name, "doc_data.widget_data.page9.Dental Check-up.Referral Made"=>"Yes"))->get($academic_year);
							 foreach($dental_refer as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
								break;
				default:
					break;
			}
			}elseif (($po_name != 'All') && ($school_name != 'All')) {
				switch ($symptom) {

				// General Symptoms
				case "ENT": case "Neurologic": case "Heart": case "Skin": case "Abdomen": case "Lungs": case "H and N": case "Genetalia": case "Lymphatic": case "Lyphamatic":
					$general_symptoms = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => $symptom ))->get($academic_year);

						foreach($general_symptoms as $symptom)
						{
						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}


						$schools_with_count = array_count_values($empty);
						
					return $schools_with_count;
					break;
				// Ortho problems
				case "Neck": case "Shoulders": case "Arms/Hands": case "Knees": case "Feet": case "Hips": case "Arms":
					$ortho_problms = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page4.Doctor Check Up.Ortho" => $symptom))->get($academic_year);

						foreach($ortho_problms as $symptom)
						{
						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}

						$schools_with_count = array_count_values($empty);
					return $schools_with_count;
					break;
				// Postural problems
				case "No spinal Abnormality": case "Spinal Abnormality": case "Moderate": case "Mild": case "Marked": case 'Spinal Abnomality':

					$postural_problms = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page4.Doctor Check Up.Postural" => $symptom))->get($academic_year);
					foreach($postural_problms as $symptom)
						{
						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}

						$schools_with_count = array_count_values($empty);
					return $schools_with_count;
					break;
				// Common problems
				case "Myalgia": case "Tonsillitis": case "tonsillitis": case "Cold": case "cold": case "Cervical Lymph Adenitis": case "ASOM": case "Acute Br.Asthama": case "Icterus": case "Pyrexia": case "URTI": case "Injuries": case "UTI": case "Angular Stomatities": case "Angular Stomatitis": case "Aphthous Ulcers": case "Glossities": case "Pharyngitis": case "Headache": case "Stomachache": case "Diarrhea": case "Behaviour Disorder":
					$common_problems = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page4.Doctor Check Up.Common Diseases" => $symptom))->get($academic_year);
					foreach($common_problems as $symptom)
						{

						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}

						$schools_with_count = array_count_values($empty);
					return $schools_with_count;
					break;
	    		// Defects at Birth problems
				case "Neural Tube Defect": case "Down Syndrome": case "Cleft Lip and Palate": case "Talipes Club foot": case "Developmental Dyslpasia of Hip": case "Congenital Heart Disease": case "Congenital Cataract": case "Congenital Deafness": case "Congential Heart Disease": case "Retinopathy of Prematurity": case "Retinopathy of Prematurity(only at DH)": case "Sickle Cell Anaemia": case "Down Syndome": case "Congential Cataract": case "Congential Deafness":

					$defects_at_birth_problems = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => $symptom ))->get($academic_year);
					foreach($defects_at_birth_problems as $symptom)
						{
						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}

						$schools_with_count = array_count_values($empty);
					return $schools_with_count;
					break;
				// Deficencies problems
				case "Anemia-Mild": case "Anemia-Moderate": case "Anemia-Severe": case "Vitamin Deficiency - BComplex": case "Vitamin A Deficiency": case "Vitamin C Deficiency": case "Vitamin D Deficiency": case "SAM/Stunting": case "Goiter":case "Under Weight": case "Over Weight":case "Obese":
					$deficencies_problems = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page5.Doctor Check Up.Deficencies" => $symptom))->get($academic_year);
					foreach($deficencies_problems as $symptom)
						{
						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}

						$schools_with_count = array_count_values($empty);
					return $schools_with_count;
					break;
	    		// Childhood Disease problems
				case "CSOM": case "Rheumatic Heart Disease": case "Chronic Br.Asthma": case "Hyperthyroidism": case "Hypothyrodism": case "Hypothyroidism": case "Type-I Diabeties": case "Type-II Diabeties": case "Epilepsy": case "PCOD": case 'Type-I Diabetes': case 'Type-II Diabetes':
					$deficencies_problems = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => $symptom))->get($academic_year);
					foreach($deficencies_problems as $symptom)
						{
						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}

						$schools_with_count = array_count_values($empty);
					return $schools_with_count;
					break;
					// Skin problems
					case "Scabies": case "Taenia Corporis": case "Taenia Facialis": case "Taenia Cruris": case "ECCEMA": case "Psoriasis": case "Allergic Rash": case "White Patches on Face": case "Acne on Face": case "Hyper Pigmentation": case "Hypo Pigmentation": case "Hansens Disease": case "Molluscum": case "Nail Bed Disease": case "Greying of Hair": case "Danddruff": case "Cracked Feet": case "Hyperhidrosis": case "ECZEMA": case "Greying Hair":
					$skin_problems = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page4.Doctor Check Up.Skin conditions" => $symptom))->get($academic_year);
					foreach($skin_problems as $symptom)
						{
						$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

						array_push($empty, $school);

						}

						$schools_with_count = array_count_values($empty);
					return $schools_with_count;
					break;

							//Vision Abnormalities
							case "Without Glasses Right":

								$without_glass_right = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page6.Without Glasses" => array('$exists' => true), "doc_data.widget_data.page6.Without Glasses.Right"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->get($academic_year);
							foreach($without_glass_right as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Without Glasses Left":
							$without_glass_left = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page6.Without Glasses" => array('$exists' => true), "doc_data.widget_data.page6.Without Glasses.Left"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->get($academic_year);
							foreach($without_glass_left as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "With Glasses Right":

								$with_glass_right = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page6.With Glasses" => array('$exists' => true), "doc_data.widget_data.page6.With Glasses.Right"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->get($academic_year);
							foreach($with_glass_right as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "With Glasses Left":
							$with_glass_left = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page6.With Glasses" => array('$exists' => true), "doc_data.widget_data.page6.With Glasses.Left"=>array('$nin'=> array("6/12", "6/6", "6/9", ""))))->get($academic_year);
							foreach($with_glass_left as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Left Squnit": case "Redness of Eye Left": case "Redness of Eye Right": case "Redness of Eye": case "Stye": case "Trauma": case "Blepharitis": case "Right Squnit": case "Myopia": case "Forign Boady": case "Hyperopia": case "Pterizium": case "Chalazion": case "Pterygium": case "Forign Body":
							$vision_problem = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page6.Vision Screening" => $symptom))->get($academic_year);
							foreach($vision_problem as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Bitot Night Blindness":
								
							$bitot = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page6.Bitot Night Blindness"=>"Yes"))->get($academic_year);

							foreach($bitot as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Auditory Screening Right": case 'Auditory Screening Right':
							$auditory_right = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page8. Auditory Screening.Right"=>"Fail"))->get($academic_year);
							foreach($auditory_right as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break; 

							case "Auditory Screening Left": case 'Auditory Screening Left':	
							$auditory_left = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page8. Auditory Screening.Left"=>"Fail"))->get($academic_year);
							foreach($auditory_left as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Normal": case "Fluency": case "Normal": case "Delay": case "Fluency": case "Misarticulation": case "Tongue Tie": case "Stammering": case "Voice": case "Behaviour Disorder": case "Language Delay": case "Misarticulaion": case "Pyrexia": case "Injuries": case "Myalgia": case "Pharyngitis": case "Stomachache": case "Headache": case "Cold": case "UTI":
							$speech_screen = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page8. Auditory Screening.Speech Screening" => $symptom))->get($academic_year);
							foreach($speech_screen as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Oral Hygiene -Poor":
							$oral_poor = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page9.Dental Check-up.Oral Hygiene"=>"Poor"))->get($academic_year);
							foreach($oral_poor as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Carious Teeth":
							$carious_teeth = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page9.Dental Check-up.Carious Teeth"=>"Yes"))->get($academic_year);
							foreach($carious_teeth as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Flourosis":
							$flourosis = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page9.Dental Check-up.Flourosis"=>"Yes"))->get($academic_year);
							foreach($flourosis as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

					   		case "Orthodontic Treatment":
					    	$orho_treatment = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment"=>"Yes"))->get($academic_year);
					    	foreach($orho_treatment as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

					    	case "Indication for extraction":
					    	$ife = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page9.Dental Check-up.Indication for extraction"=>"Yes"))->get($academic_year);
					    	foreach($ife as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

					     	case "Halitosis":
					      	$halitotis = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page9.Dental Check-up.Halitosis"=>"Yes"))->get($academic_year);
					      	foreach($halitotis as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

					      case "Flat patches Red":
					       $fpr = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page9.Dental Check-up.Flat patches"=>"Red"))->get($academic_year);
					       foreach($fpr as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

					       case "Flat patches White":
					       $fpw = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page9.Dental Check-up.Flat patches"=>"White"))->get($academic_year);
					       foreach($fpw as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

					        case "Ulcer":
					        $ulcer = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page9.Dental Check-up.Ulcer"=>"Yes"))->get($academic_year);
					        foreach($ulcer as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							case "Doctor Referral Made":
							$doctor_refer = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page5.Doctor Check Up.Referral Made"=>"Yes"))->get($academic_year);
							foreach($doctor_refer as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
							break;

							 case "Vision Referral Made":
							 $vision_refer = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page7.Colour Blindness.Referral Made"=>"Yes"))->get($academic_year);
							 foreach($vision_refer as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
								break;

							 case "Auditory Referral Made":
							 $auditory_refer = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page8.Auditory Screening.Referral Made"=>"Yes"))->get($academic_year);
							 foreach($auditory_refer as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
								break;
							 case "Dental Check-up Referral Made":
							 $dental_refer = $this->mongo_db->select(array('doc_data.widget_data.page2.Personal Information.School Name'))->where(array('doc_data.widget_data.page2.Personal Information.School Name'=>$school_name, "doc_data.widget_data.page9.Dental Check-up.Referral Made"=>"Yes"))->get($academic_year);
							 foreach($dental_refer as $symptom)
								{
								$school = $symptom['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

								array_push($empty, $school);

								}

								$schools_with_count = array_count_values($empty);
							return $schools_with_count;
								break;
				default:
					break;
			}
			}
			
		}

	public function get_students_by_symptom($symptom, $school, $academic_years)
	{
		

		if($academic_years == '2018-19 Academic Year'){
			$academic_year = 'healthcare2016226112942701';
		}

		switch ($symptom) {

			// General Symptoms
			case "ENT": case "Neurologic": case "Heart": case "Skin": case "Abdomen": case "Lungs": case "H and N": case "Genetalia": case "Lymphatic": case "Lyphamatic": case "Genitalia":
				$general_symptoms = $this->mongo_db->where(array("doc_data.widget_data.page4.Doctor Check Up.Check the box if normal else describe abnormalities" => $symptom, 'doc_data.widget_data.page2.Personal Information.School Name' => $school ))->get($academic_year);
				return $general_symptoms;
				break;
			// Ortho problems
			case "Neck": case "Shoulders": case "Arms/Hands": case "Knees": case "Feet": case "Hips": case "Arms":
				$ortho_problms = $this->mongo_db->where(array("doc_data.widget_data.page4.Doctor Check Up.Ortho" => $symptom, 'doc_data.widget_data.page2.Personal Information.School Name' => $school ))->get($academic_year);
				return $ortho_problms;
				break;
			// Postural problems
			case "No spinal Abnormality": case "Spinal Abnormality": case "Moderate": case "Mild": case "Marked": case 'Spinal Abnomality': case "Referral Made": case "Referal Made":

				$postural_problms = $this->mongo_db->where(array("doc_data.widget_data.page4.Doctor Check Up.Postural" => $symptom, 'doc_data.widget_data.page2.Personal Information.School Name' => $school ))->get($academic_year);
				return $postural_problms;
				break;
			// Common problems
			case "Myalgia": case "Tonsillitis": case "tonsillitis": case "Cold": case "cold": case "Cervical Lymph Adenitis": case "ASOM": case "Acute Br.Asthama": case "Icterus": case "Pyrexia": case "URTI": case "Injuries": case "UTI": case "Angular Stomatities": case "Angular Stomatitis": case "Aphthous Ulcers": case "Glossities": case "Pharyngitis": case "Headache": case "Stomachache": case "Diarrhea": case "Behaviour Disorder":
				$common_problems = $this->mongo_db->where(array("doc_data.widget_data.page4.Doctor Check Up.Common Diseases" => $symptom, 'doc_data.widget_data.page2.Personal Information.School Name' => $school ))->get($academic_year);
				return $common_problems;
				break;
    		// Defects at Birth problems
			case "Neural Tube Defect": case "Down Syndrome": case "Cleft Lip and Palate": case "Talipes Club foot": case "Developmental Dyslpasia of Hip": case "Congenital Heart Disease": case "Congenital Cataract": case "Congenital Deafness": case "Congential Heart Disease": case "Retinopathy of Prematurity": case "Retinopathy of Prematurity(only at DH)": case "Sickle Cell Anaemia": case "Down Syndome": case "Congential Cataract": case "Congential Deafness":

				$defects_at_birth_problems = $this->mongo_db->where(array("doc_data.widget_data.page5.Doctor Check Up.Defects at Birth" => $symptom, 'doc_data.widget_data.page2.Personal Information.School Name' => $school ))->get($academic_year);
				return $defects_at_birth_problems;
				break;
			// Deficencies problems
			case "Anemia-Mild": case "Anemia-Moderate": case "Anemia-Severe": case "Vitamin Deficiency - BComplex": case "Vitamin A Deficiency": case "Vitamin C Deficiency": case "Vitamin D Deficiency": case "SAM/Stunting": case "Goiter":case "Under Weight": case "Over Weight":case "Obese": case "Anaemia": case "Anemic": case "Vitamin Deficiency - Bcomplex": case "Normal Weight":
				$deficencies_problems = $this->mongo_db->where(array("doc_data.widget_data.page5.Doctor Check Up.Deficencies" => $symptom, 'doc_data.widget_data.page2.Personal Information.School Name' => $school ))->get($academic_year);
				return $deficencies_problems;
				break;
    		// Childhood Disease problems
			case "CSOM": case "Rheumatic Heart Disease": case "Chronic Br.Asthma": case "Hyperthyroidism": case "Hypothyrodism": case "Hypothyroidism": case "Type-I Diabeties": case "Type-II Diabeties": case "Epilepsy": case "PCOD": case 'Type-I Diabetes': case 'Type-II Diabetes': case 'Skin Conditions': case 'Asthma': case 'Skin conditions': case 'Hypothyrodism': case 'Otitis Media': case 'Convulsive Disorders': case 'Diabetes':
			
				$deficencies_problems = $this->mongo_db->where(array("doc_data.widget_data.page5.Doctor Check Up.Childhood Diseases" => $symptom, 'doc_data.widget_data.page2.Personal Information.School Name' => $school ))->get($academic_year);
				return $deficencies_problems;
				break;
			// Skin problems
			case "Scabies": case "Taenia Corporis": case "Taenia Facialis": case "Taenia Cruris": case "ECCEMA": case "Psoriasis": case "Allergic Rash": case "White Patches on Face": case "Acne on Face": case "Hyper Pigmentation": case "Hypo Pigmentation": case "Hansens Disease": case "Molluscum": case "Nail Bed Disease": case "Greying of Hair": case "Danddruff": case "Cracked Feet": case "Hyperhidrosis": case "ECZEMA": case "Greying Hair":
			$skin_problems = $this->mongo_db->where(array("doc_data.widget_data.page4.Doctor Check Up.Skin conditions" => $symptom, 'doc_data.widget_data.page2.Personal Information.School Name' => $school ))->get($academic_year);
			return $skin_problems;
			break;

					//Vision Abnormalities
					case "Without Glasses Right":

						$without_glass_right = $this->mongo_db->where(array("doc_data.widget_data.page6.Without Glasses" => array('$exists' => true), "doc_data.widget_data.page6.Without Glasses.Right"=>array('$nin'=> array("6/12", "6/6", "6/9", "")), 'doc_data.widget_data.page2.Personal Information.School Name' => $school ))->get($academic_year);
					return $without_glass_right;
					break;

					case "Without Glasses Left":
					$without_glass_left = $this->mongo_db->where(array("doc_data.widget_data.page6.Without Glasses" => array('$exists' => true), "doc_data.widget_data.page6.Without Glasses.Left"=>array('$nin'=> array("6/12", "6/6", "6/9", "")), 'doc_data.widget_data.page2.Personal Information.School Name' => $school ))->get($academic_year);
					return $without_glass_left;
					break;

					case "With Glasses Right":

						$with_glass_right = $this->mongo_db->where(array("doc_data.widget_data.page6.With Glasses" => array('$exists' => true), "doc_data.widget_data.page6.With Glasses.Right"=>array('$nin'=> array("6/12", "6/6", "6/9", "")), 'doc_data.widget_data.page2.Personal Information.School Name' => $school ))->get($academic_year);
					return $with_glass_right;
					break;

					case "With Glasses Left":
					$with_glass_left = $this->mongo_db->where(array("doc_data.widget_data.page6.With Glasses" => array('$exists' => true), "doc_data.widget_data.page6.With Glasses.Left"=>array('$nin'=> array("6/12", "6/6", "6/9", "")), 'doc_data.widget_data.page2.Personal Information.School Name' => $school ))->get($academic_year);
					return $with_glass_left;
					break;

					case "Left Squnit": case "Redness of Eye Left": case "Redness of Eye Right": case "Redness of Eye": case "Stye": case "Trauma": case "Blepharitis": case "Right Squnit": case "Myopia": case "Forign Boady": case "Hyperopia": case "Pterizium": case "Chalazion": case "Pterygium": case "Forign Body":
					$vision_problem = $this->mongo_db->where(array("doc_data.widget_data.page6.Vision Screening" => $symptom, 'doc_data.widget_data.page2.Personal Information.School Name' => $school ))->get($academic_year);
					return $vision_problem;
					break;

					case "Bitot Night Blindness":
						
					$bitot = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $school)->where(array("doc_data.widget_data.page6.Bitot Night Blindness"=>"Yes"))->get($academic_year);

					return $bitot;
					break;

				//Auditory 

					case "Auditory Screening Right":

					$auditory_right = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $school)->where(array("doc_data.widget_data.page8. Auditory Screening.Right"=>"Fail"))->get($academic_year);
					return $auditory_right;
					break; 

					case "Auditory Screening Left":
					$auditory_left = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $school)->where(array("doc_data.widget_data.page8. Auditory Screening.Left"=>"Fail"))->get($academic_year);
					return $auditory_left;
					break;

					case "Normal": case "Fluency": case "Normal": case "Delay": case "Fluency": case "Misarticulation": case "Tongue Tie": case "Stammering": case "Voice": case "Behaviour Disorder": case "Language Delay": case "Misarticulaion": case "Pyrexia": case "Injuries": case "Myalgia": case "Pharyngitis": case "Stomachache": case "Headache": case "Cold": case "UTI": case "Behaviour Disorder ": case "Behaviour Disorder":
					$speech_screen = $this->mongo_db->where(array("doc_data.widget_data.page8. Auditory Screening.Speech Screening" => $symptom, "doc_data.widget_data.page2.Personal Information.School Name" => $school ))->get($academic_year);
					return $speech_screen;
					break;

					//Dental Problems

					case "Oral Hygiene -Poor":
					$oral_poor = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $school)->where(array("doc_data.widget_data.page9.Dental Check-up.Oral Hygiene"=>"Poor"))->get($academic_year);
					return $oral_poor;
					break;

					case "Carious Teeth":
					$carious_teeth = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $school)->where(array("doc_data.widget_data.page9.Dental Check-up.Carious Teeth"=>"Yes"))->get($academic_year);
					return $carious_teeth;
					break;

					case "Flourosis":
					$flourosis = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $school)->where(array("doc_data.widget_data.page9.Dental Check-up.Flourosis"=>"Yes"))->get($academic_year);
					return $flourosis;
					break;

			   		case "Orthodontic Treatment":
			    	$orho_treatment = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $school)->where(array("doc_data.widget_data.page9.Dental Check-up.Orthodontic Treatment"=>"Yes"))->get($academic_year);
			    	return $orho_treatment;
					break;

			    	case "Indication for extraction":
			    	$ife = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $school)->where(array("doc_data.widget_data.page9.Dental Check-up.Indication for extraction"=>"Yes"))->get($academic_year);
			    	return $ife;
					break;

			     	case "Halitosis":
			      	$halitotis = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $school)->where(array("doc_data.widget_data.page9.Dental Check-up.Halitosis"=>"Yes"))->get($academic_year);
			      	return $halitotis;
					break;

			      case "Flat patches Red":
			       $fpr = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $school)->where(array("doc_data.widget_data.page9.Dental Check-up.Flat patches"=>"Red"))->get($academic_year);
			       return $fpr;
					break;

			       case "Flat patches White":
			       $fpw = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $school)->where(array("doc_data.widget_data.page9.Dental Check-up.Flat patches"=>"White"))->get($academic_year);
			       return $fpw;
					break;

			        case "Ulcer":
			        $ulcer = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $school)->where(array("doc_data.widget_data.page9.Dental Check-up.Ulcer"=>"Yes"))->get($academic_year);
			        return $ulcer;
					break;

					//Refferal Made
					case "Doctor Referral Made":
					$doctor_refer = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $school)->where(array("doc_data.widget_data.page5.Doctor Check Up.Referral Made"=>"Yes"))->get($academic_year);
					return $doctor_refer;
					break;

					case "Vision Referral Made":
					 $vision_refer = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $school)->where(array("doc_data.widget_data.page7.Colour Blindness.Referral Made"=>"Yes"))->get($academic_year);
					 return $vision_refer;
						break;

				 case "Auditory Referral Made":
				 $auditory_refer = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $school)->where(array("doc_data.widget_data.page8.Auditory Screening.Referral Made"=>"Yes"))->get($academic_year);
				 return $auditory_refer;
					break;
				 case "Dental Check-up Referral Made":
				 $dental_refer = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $school)->where(array("doc_data.widget_data.page9.Dental Check-up.Referral Made"=>"Yes"))->get($academic_year);
				 return $dental_refer;
					break;
			default:
				break;
		}
	}

	public function get_hospitalised_count_today_date()
	{
		//$exists_history = array('history.0.time' => array('$regex' => $today_date ));		
		$document['hospitalised'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Status' => "Hospitalized"))->count($this->request_app_col_static_html);

		$document['review'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Status' => "Review"))->count($this->request_app_col_static_html);

		$document['out_patient'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Status' => "Out-Patient"))->count($this->request_app_col_static_html);
			
			return $document;
	
	}

// End First stage analytics generation

	public function get_scabies_schools_health_status_count_model_new($student_type = false)
		{
			$all_schools_name = array();
			$all_schools = array();
			$schools_list = $this->get_all_schools_student_type($student_type);
			$zone1['label'] = "Red";
			$zone1['value'] = 0;
			$zone1['school_name'] =  array();
			$zone1['school_count'] = 0;
			$zone2['label'] = "Green";
			$zone2['value'] = 0;
			$zone2['school_name'] = array();
			$zone2['school_count'] = 0;
			$zone3['label'] = "Yellow";
			$zone3['value'] = 0;
			$zone3['school_name'] =  array();
			$zone3['school_count'] = 0;
			
			$all_scabies_cases = array();
			
			$scabies_cases_details = array();
			
			$scabies_count = 0;
			
			$zone1['criteria'] = [];
			$zone2['criteria'] = [];
			$zone3['criteria'] = [];
			$zone1['current_school_name'] = [];
			$zone2['current_school_name'] = [];
			$zone3['current_school_name'] = [];		

			$all_cases = array();
			foreach ($schools_list as $school) 
			{
				
		$scabies_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Skin' => 'Scabies','doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school['school_name']))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->count('healthcare2016531124515424_static_html');					
					
					$scabies_cases_details['school_name'] = $school;
				    //$scabies_cases_details['scabies_issues_docs'] = $scabies_docs;
					$scabies_cases_details['scabies_issues_count'] = $scabies_count_doc;
					if($scabies_cases_details['scabies_issues_count']> 2 )
					{
						$scabies_weight = 3;
					}
					elseif($scabies_cases_details['scabies_issues_count']>1)
					{
						$scabies_weight = 2;
					}
					else
					{
						$scabies_weight = 1;
					}

				$total_grade =  $scabies_weight;
								//echo print_r($total_grade,true);
				if($scabies_cases_details['scabies_issues_count'] > 2 || $total_grade > 3 )
					{ 
						//echo print_r($school['school_name'],true);					
						//exit();
						array_push($zone1['school_name'],$school['school_name']);
						$test['sn'] = $school;
						array_push($zone1['current_school_name'],$test['sn']['school_name']);
						$zone1_criteria = array($test['sn']['school_name'],"Total Scabies Cases: ".$scabies_cases_details['scabies_issues_count']);
						array_push($zone1['criteria'],$zone1_criteria);
						
						$zone1['school_count']++;					
						$zone1['value']++;
					}
					else if($total_grade > 2 )
					{
						//YELLOW
							array_push($zone3['school_name'],$school['school_name']);
							$test['sn'] = $school;
							array_push($zone3['current_school_name'],$test['sn']['school_name']);
							$zone3['school_count']++;
							$zone3['value']++;
							$zone3_criteria = array($test['sn']['school_name'],"Total Scabies Cases: ".$scabies_cases_details['scabies_issues_count']);
											  array_push($zone3['criteria'],$zone3_criteria);
					}
					else
					{
						//GREEN
							array_push($zone2['school_name'],$school['school_name']);
							$test['sn'] = $school;
							array_push($zone2['current_school_name'],$test['sn']['school_name']);
							$zone2['school_count']++;
							$zone2['value']++;
							$zone2_criteria = array($test['sn']['school_name'],"Total Scabies Cases : ".$scabies_cases_details['scabies_issues_count']);
								array_push($zone2['criteria'],$zone2_criteria);
					}
					
					$scabies_count += $scabies_cases_details['scabies_issues_count'];
					
					array_push($all_scabies_cases, $scabies_cases_details);
				
					}

					array_push($all_cases, $zone1);
					
					array_push($all_cases, $zone2);
					
					array_push($all_cases, $zone3);
					
					array_push($all_cases, $all_scabies_cases);			
					//echo "<pre>";
					//echo print_r($all_cases,true); echo "</pre>";exit();

				return $all_cases;			
			
		}

 public function get_scabies_student_docs_model($labelColor, $schoolName)
			{			
				$all_cases_docs = array();	
	// Scabies cases
	$scabies_docs = $this->mongo_db->select ( array ("doc_data.widget_data") )->where(array("doc_data.widget_data.page1.Problem Info.Chronic.Skin" => "Scabies",
	        "doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$schoolName) )->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->get ( $this->request_app_col_static_html );
	/*echo print_r($scabies_docs, true);
	exit();*/
	$scabies['all_scabies_cases_docs'] = $scabies_docs;
	array_push($all_cases_docs, $scabies);

return $all_cases_docs;

			}

public function get_abnormal_disease_status_count_model_new($student_type = false)
	{
		$all_schools_name = array();
		$all_schools = array();
		$schools_list = $this->get_all_schools_student_type($student_type);
		$zone1['label'] = "Red";
		$zone1['value'] = 0;
		$zone1['school_name'] =  array();
		$zone1['school_count'] = 0;
		$zone2['label'] = "Green";
		$zone2['value'] = 0;
		$zone2['school_name'] = array();
		$zone2['school_count'] = 0;
		$zone3['label'] = "Yellow";
		$zone3['value'] = 0;
		$zone3['school_name'] =  array();
		$zone3['school_count'] = 0;

		$all_abdominal_cases = array();
		$all_vomitings_cases = array();
		$all_diarrhoea_cases = array();
		
		$abdominal_cases_details = array();
		$vomitings_cases_details = array();
		$diarrhoea_cases_details = array();
		
		$abdominal_count = 0;
		$vomitings_count = 0;
		$diarrhoea_count = 0;
		
		$zone1['criteria'] = [];
		$zone2['criteria'] = [];
		$zone3['criteria'] = [];

		$zone1['current_school_name'] = [];
		$zone2['current_school_name'] = [];
		$zone3['current_school_name'] = [];

		$all_cases = array();
		foreach ($schools_list as $school) 
		{
			
			$abdominal_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Normal.Gastro_intestinal' =>'Abdominal Pain','doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school['school_name']))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->count('healthcare2016531124515424_static_html');

			$vomitings_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Normal.Gastro_intestinal' => 'Vomitings','doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school['school_name']))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->count('healthcare2016531124515424_static_html');

			$diarrhoea_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Normal.Gastro_intestinal' => 'Diarrhoea','doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school['school_name']))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->count('healthcare2016531124515424_static_html');


			$abdominal_cases_details['school_name'] = $school['school_name'];
			   // $abdominal_cases_details['asthma_issues_docs'] = $asthma_docs;
				$abdominal_cases_details['abdominal_issues_count'] = $abdominal_count_doc;

				if($abdominal_cases_details['abdominal_issues_count']>5)
				{
					$abdominal_weight = 3;
				}
				elseif($abdominal_cases_details['abdominal_issues_count']>3)
				{
					$abdominal_weight = 2;
				}
				else
				{
					$abdominal_weight = 1;
				}

				$vomitings_cases_details['school_name'] = $school['school_name'];
				//$kidney_cases_details['kidney_issues_docs'] = $kidney_docs;
				$vomitings_cases_details['vomitings_issues_count'] = $vomitings_count_doc;

				if($vomitings_cases_details['vomitings_issues_count']>5)
				{
					$vomitings_weight = 3;
				}
				elseif($vomitings_cases_details['vomitings_issues_count']>3)
				{
					$vomitings_weight = 2;
				}
				else
				{
					$vomitings_weight = 1;
					
				}
			    
				$diarrhoea_cases_details['school_name'] = $school;
			    //$scabies_cases_details['scabies_issues_docs'] = $scabies_docs;
				$diarrhoea_cases_details['diarrhoea_issues_count'] = $diarrhoea_count_doc;
				if($diarrhoea_cases_details['diarrhoea_issues_count']>5 )
				{
					$diarrhoea_weight = 3;
				}
				elseif($diarrhoea_cases_details['diarrhoea_issues_count']>3)
				{
					$diarrhoea_weight = 2;
				}
				else
				{
					$diarrhoea_weight = 1;
					
				}				


			$total_grade = $abdominal_weight + $vomitings_weight + $diarrhoea_weight;
							//echo print_r($total_grade,true);
			if($diarrhoea_cases_details['diarrhoea_issues_count'] > 6 || $total_grade > 15 )
				{ 
					array_push($zone1['school_name'],$school['school_name']);
					$test['sn'] = $school;
					array_push($zone1['current_school_name'],$test['sn']['school_name']);
					$zone1_criteria = array($test['sn']['school_name'],"Total Abdominal Cases: ".$abdominal_cases_details['abdominal_issues_count'],"Total Vomitings: ".$vomitings_cases_details['vomitings_issues_count'],"Total Diarrhoea Cases: ".$diarrhoea_cases_details['diarrhoea_issues_count']);
					array_push($zone1['criteria'],$zone1_criteria);

					//array_push($zone1['criteria'],$zone1_criteria);
				
					$zone1['school_count']++;					
					$zone1['value']++;
				}
				else if($total_grade > 8 )
				{
					//YEL
						array_push($zone3['school_name'],$school['school_name']);
						$test['sn'] = $school;
						array_push($zone3['current_school_name'],$test['sn']['school_name']);
						$zone3['school_count']++;
						$zone3['value']++;
						$zone3_criteria = array($test['sn']['school_name'],"Total abdominal Cases: ".$abdominal_cases_details['abdominal_issues_count'],"Total vomitings: ".$vomitings_cases_details['vomitings_issues_count'],"Total diarrhoea Cases: ".$diarrhoea_cases_details['diarrhoea_issues_count']);
								array_push($zone3['criteria'],$zone3_criteria);
				}
				else
				{
					//GREEN
						array_push($zone2['school_name'],$school['school_name']);
						$test['sn'] = $school;
						array_push($zone2['current_school_name'],$test['sn']['school_name']);
						$zone2['school_count']++;
						$zone2['value']++;
						$zone2_criteria = array($test['sn']['school_name'], "Total abdominal Cases: ".$abdominal_cases_details['abdominal_issues_count'],"Total vomitings ".$vomitings_cases_details['vomitings_issues_count'],"Total diarrhoea Cases : ".$diarrhoea_cases_details['diarrhoea_issues_count']);
							array_push($zone2['criteria'],$zone2_criteria);
				}

				$abdominal_count += $abdominal_cases_details['abdominal_issues_count'];
				$vomitings_count += $vomitings_cases_details['vomitings_issues_count'];
				$diarrhoea_count += $diarrhoea_cases_details['diarrhoea_issues_count'];
			
			

				array_push($all_abdominal_cases, $abdominal_cases_details);
				array_push($all_vomitings_cases, $vomitings_cases_details);
				array_push($all_diarrhoea_cases, $diarrhoea_cases_details);

		}
			
				array_push($all_cases, $zone1);
				
				array_push($all_cases, $zone2);
				
				array_push($all_cases, $zone3);
				
				array_push($all_cases, $all_abdominal_cases);
				array_push($all_cases, $all_vomitings_cases);
				array_push($all_cases, $all_diarrhoea_cases);

				//echo "<pre>";
				//echo print_r($all_cases,true); echo "</pre>";exit();

			return $all_cases;			
		
	}

	public function get_abdominal_diseases_student_docs_model($labelColor, $schoolName)
	{
	
		$all_cases_docs = array();
			
	$abdomina_docs = $this->mongo_db->select (array ("doc_data.widget_data") )->where(array("doc_data.widget_data.page1.Problem Info.Normal.Gastro_intestinal" => "Abdominal Pain","doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$schoolName) )->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->get ( $this->request_app_col_static_html );
			$abdomina['all_abdomina_cases_docs'] = $abdomina_docs;
			$abdomina['all_abdomina_cases_count'] = count($abdomina_docs);
			array_push($all_cases_docs, $abdomina);
			// Kidney cases
	$vomitings_docs = $this->mongo_db->select ( array ("doc_data.widget_data") )-> where( array( "doc_data.widget_data.page1.Problem Info.Normal.Gastro_intestinal" => "Vomitings","doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$schoolName) )->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->get ( $this->request_app_col_static_html );
			$vomitings['all_vomitings_cases_docs'] = $vomitings_docs;
			array_push($all_cases_docs, $vomitings);
			// Scabies cases
	$diarrhoea_docs = $this->mongo_db->select ( array ("doc_data.widget_data") )->where(array("doc_data.widget_data.page1.Problem Info.Normal.Gastro_intestinal" => "Diarrhoea",		"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$schoolName) )->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->get ( $this->request_app_col_static_html );
			$diarrhoea['all_diarrhoea_cases_docs'] = $diarrhoea_docs;
			array_push($all_cases_docs, $diarrhoea);			

		return $all_cases_docs;

	}

	public function get_unknown_bites_status_count_model_new($student_type = false)
	{
		$all_schools_name = array();
		$all_schools = array();
		$schools_list = $this->get_all_schools_student_type($student_type);
		$zone1['label'] = "Red";
		$zone1['value'] = 0;
		$zone1['school_name'] =  array();
		$zone1['school_count'] = 0;
		$zone2['label'] = "Green";
		$zone2['value'] = 0;
		$zone2['school_name'] = array();
		$zone2['school_count'] = 0;
		$zone3['label'] = "Yellow";
		$zone3['value'] = 0;
		$zone3['school_name'] =  array();
		$zone3['school_count'] = 0;

		$all_scorpion_bite_cases = array();
		$all_snake_bite_cases = array();
		$all_honeybee_bite_cases = array();
		
		$scorpion_bite_cases_details = array();
		$snake_bite_cases_details = array();
		$honeybee_bite_cases_details = array();
		
		$scorpion_bite_count = 0;
		$snake_bite_count = 0;
		$honeybee_bite_count = 0;
		
		$zone1['criteria'] = [];
		$zone2['criteria'] = [];
		$zone3['criteria'] = [];

		$zone1['current_school_name'] = [];
		$zone2['current_school_name'] = [];
		$zone3['current_school_name'] = [];

		$all_cases = array();
		foreach ($schools_list as $school) 
		{
			
			$scorpion_bite_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Emergency.Bites' =>'Scorpion','doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school['school_name']))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->count('healthcare2016531124515424_static_html');

			$snake_bite_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Emergency.Bites' => 'Snake','doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school['school_name']))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->count('healthcare2016531124515424_static_html');

			$honeybee_bite_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Emergency.Bites' => 'Honey Bee','doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school['school_name']))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->count('healthcare2016531124515424_static_html');


			$scorpion_bite_cases_details['school_name'] = $school['school_name'];
			   // $scorpion_bite_cases_details['asthma_issues_docs'] = $asthma_docs;
				$scorpion_bite_cases_details['scorpion_bite_issues_count'] = $scorpion_bite_count_doc;

				if($scorpion_bite_cases_details['scorpion_bite_issues_count']>2)
				{
					$scorpion_bite_weight = 5;
				}
				elseif($scorpion_bite_cases_details['scorpion_bite_issues_count']>1)
				{
					$scorpion_bite_weight = 3;
				}
				else
				{
					$scorpion_bite_weight = 0;
				}

			$snake_bite_cases_details['school_name'] = $school['school_name'];
				//$kidney_cases_details['kidney_issues_docs'] = $kidney_docs;
				$snake_bite_cases_details['snake_bite_issues_count'] = $snake_bite_count_doc;

				if($snake_bite_cases_details['snake_bite_issues_count']>2)
				{
					$snake_bite_weight = 4;
				}
				elseif($snake_bite_cases_details['snake_bite_issues_count']>1)
				{
					$snake_bite_weight = 3;
				}
				else
				{
					$snake_bite_weight = 1;					
				}
			    
			$honeybee_bite_cases_details['school_name'] = $school;
			    //$scabies_cases_details['scabies_issues_docs'] = $scabies_docs;
				$honeybee_bite_cases_details['honeybee_bite_issues_count'] = $honeybee_bite_count_doc;
				if($honeybee_bite_cases_details['honeybee_bite_issues_count']> 3 )
				{
					$honeybee_bite_weight = 3;
				}
				elseif($honeybee_bite_cases_details['honeybee_bite_issues_count']> 2 )
				{
					$honeybee_bite_weight = 2;
				}
				else
				{
					$honeybee_bite_weight = 1;
					
				}				


			$total_grade = $scorpion_bite_weight + $snake_bite_weight + $honeybee_bite_weight;
						/*	echo print_r($total_grade,true);
							exit();*/
			if($honeybee_bite_cases_details['honeybee_bite_issues_count'] > 3 || $total_grade > 5 )
				{ 
					array_push($zone1['school_name'],$school['school_name']);
					$test['sn'] = $school;
					array_push($zone1['current_school_name'],$test['sn']['school_name']);
					$zone1_criteria = array($test['sn']['school_name'],"Total Scorpion Bite Cases: ".$scorpion_bite_cases_details['scorpion_bite_issues_count'],"Total Snake Bite: ".$snake_bite_cases_details['snake_bite_issues_count'],"Total Honey Bee Bite Cases: ".$honeybee_bite_cases_details['honeybee_bite_issues_count']);
					array_push($zone1['criteria'],$zone1_criteria);

					//array_push($zone1['criteria'],$zone1_criteria);
				
					$zone1['school_count']++;					
					$zone1['value']++;
				}
				else if($total_grade > 4 )
				{
					//YELLOW
						array_push($zone3['school_name'],$school['school_name']);
						$test['sn'] = $school;
						array_push($zone3['current_school_name'],$test['sn']['school_name']);
						$zone3['school_count']++;
						$zone3['value']++;
						$zone3_criteria = array($test['sn']['school_name'],"Total Scorpion Bite Cases: ".$scorpion_bite_cases_details['scorpion_bite_issues_count'],"Total Snake Bite: ".$snake_bite_cases_details['snake_bite_issues_count'],"Total Honey Bee Bite Cases: ".$honeybee_bite_cases_details['honeybee_bite_issues_count']);
								array_push($zone3['criteria'],$zone3_criteria);
				}
				else
				{
					//GREEN
						array_push($zone2['school_name'],$school['school_name']);
						$test['sn'] = $school;
						array_push($zone2['current_school_name'],$test['sn']['school_name']);
						$zone2['school_count']++;
						$zone2['value']++;
						$zone2_criteria = array($test['sn']['school_name'], "Total Scorpion Bite Cases: ".$scorpion_bite_cases_details['scorpion_bite_issues_count'],"Total Snake Bite ".$snake_bite_cases_details['snake_bite_issues_count'],"Total Honey Bee Bite Cases : ".$honeybee_bite_cases_details['honeybee_bite_issues_count']);
							array_push($zone2['criteria'],$zone2_criteria);
				}

				$scorpion_bite_count += $scorpion_bite_cases_details['scorpion_bite_issues_count'];
				$snake_bite_count += $snake_bite_cases_details['snake_bite_issues_count'];
				$honeybee_bite_count += $honeybee_bite_cases_details['honeybee_bite_issues_count'];			

				array_push($all_scorpion_bite_cases, $scorpion_bite_cases_details);
				array_push($all_snake_bite_cases, $snake_bite_cases_details);
				array_push($all_honeybee_bite_cases, $honeybee_bite_cases_details);

		}
			
				array_push($all_cases, $zone1);
				
				array_push($all_cases, $zone2);
				
				array_push($all_cases, $zone3);
				
				array_push($all_cases, $all_scorpion_bite_cases);
				array_push($all_cases, $all_snake_bite_cases);
				array_push($all_cases, $all_honeybee_bite_cases);

				/*echo "<pre>";
				echo print_r($all_cases,true); echo "</pre>";exit();*/

			return $all_cases;			
		
	}

	public function get_unknown_bite_student_docs_model($labelColor, $schoolName)
	{
	
		$all_cases_docs = array();
			
	$scorpion_bite_docs = $this->mongo_db->select (array ("doc_data.widget_data") )->where(array("doc_data.widget_data.page1.Problem Info.Emergency.Bites" => "Scorpion","doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$schoolName) )->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->get ( $this->request_app_col_static_html );
			$scorpion_bite['all_scorpion_bite_cases_docs'] = $scorpion_bite_docs;
			$scorpion_bite['all_scorpion_bite_cases_count'] = count($scorpion_bite_docs);
			array_push($all_cases_docs, $scorpion_bite);
			// Kidney cases
	$snake_bite_docs = $this->mongo_db->select ( array ("doc_data.widget_data") )-> where( array( "doc_data.widget_data.page1.Problem Info.Emergency.Bites" => "Snake","doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$schoolName) )->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->get ( $this->request_app_col_static_html );
			$snake_bite['all_snake_bite_cases_docs'] = $snake_bite_docs;
			array_push($all_cases_docs, $snake_bite);
			// Scabies cases
	$honeybee_bite_docs = $this->mongo_db->select ( array ("doc_data.widget_data") )->where(array("doc_data.widget_data.page1.Problem Info.Emergency.Bites" => "Honey Bee",		"doc_data.widget_data.page1.Student Info.School Name.field_ref"=>$schoolName) )->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->get ( $this->request_app_col_static_html );
			$honeybee_bite['all_honeybee_bite_cases_docs'] = $honeybee_bite_docs;
			array_push($all_cases_docs, $honeybee_bite);
			

		return $all_cases_docs;

	}

	public function get_schools_health_hb_status_count_model_new($student_type = false)

	{

		$all_schools_name      = array();
		$all_schools           = array();
		$schools_list  		   = $this->get_all_schools_student_type($student_type);
		$zone1['label'] 	   = "Red";
		$zone1['value'] 	   = 0;
		$zone1['school_name']  =  array();
		$zone1['school_count'] = 0;
		$zone2['label'] 	   = "Green";
		$zone2['value']        = 0;
		$zone2['school_name']  = array();
		$zone2['school_count'] = 0;
		$zone3['label']        = "Yellow";
		$zone3['value']        = 0;
		$zone3['school_name']  =  array();
		$zone3['school_count'] = 0;

		$all_severe_hb_cases   = array();
		$all_moderate_hb_cases = array();
		$all_mild_hb_cases     = array();
		
		$severe_hb_cases_details   = array();
		$moderate_hb_cases_details = array();
		$mild_hb_cases_details     = array();
		
		$severe_hb_count   = 0;
		$moderate_hb_count = 0;
		$mild_hb_count 	   = 0;
		
		$zone1['criteria'] = [];
		$zone2['criteria'] = [];
		$zone3['criteria'] = [];

		$zone1['current_school_name'] = [];
		$zone2['current_school_name'] = [];
		$zone3['current_school_name'] = [];

		$all_cases = array();
		foreach ($schools_list as $school) 
		{
			
			$severe_hb_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$lte' => 8.0),'doc_data.widget_data.school_details.School Name' => $school['school_name']))->count($this->hb_app_col);

			$moderate_hb_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$gte' => 8.1, '$lte' => 10.0),'doc_data.widget_data.school_details.School Name' => $school['school_name']))->count($this->hb_app_col);

			$mild_hb_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$gte' => 10.1, '$lte' => 12.0),'doc_data.widget_data.school_details.School Name' => $school['school_name']))->count($this->hb_app_col);


			$severe_hb_cases_details['school_name'] = $school['school_name'];
			   
				$severe_hb_cases_details['severe_hb_issues_count'] = $severe_hb_count_doc;

				if($severe_hb_cases_details['severe_hb_issues_count']> 13)
				{
					$severe_hb_weight = 11;
				}
				elseif($severe_hb_cases_details['severe_hb_issues_count']> 9)
				{
					$severe_hb_weight = 8;
				}
				else
				{
					$severe_hb_weight = 4;
				}

				$moderate_hb_cases_details['school_name'] = $school['school_name'];
				
				$moderate_hb_cases_details['moderate_hb_issues_count'] = $moderate_hb_count_doc;

				if($moderate_hb_cases_details['moderate_hb_issues_count']> 20)
				{
					$moderate_hb_weight = 16;
				}
				elseif($moderate_hb_cases_details['moderate_hb_issues_count']> 15)
				{
					$moderate_hb_weight = 10 ;
				}
				else
				{
					$moderate_hb_weight = 5;					
				}
			    
				$mild_hb_cases_details['school_name'] = $school;
			  
				$mild_hb_cases_details['mild_hb_issues_count'] = $mild_hb_count_doc;
				if($mild_hb_cases_details['mild_hb_issues_count']> 17 )
				{
					$mild_hb_weight = 14;
				}
				elseif($mild_hb_cases_details['mild_hb_issues_count']> 13)
				{
					$mild_hb_weight = 9;
				}
				else
				{
					$mild_hb_weight = 5;
					
				}

			$total_grade = $severe_hb_weight + $moderate_hb_weight + $mild_hb_weight;
							//echo print_r($total_grade,true);
			if($mild_hb_cases_details['mild_hb_issues_count'] > 6 || $total_grade > 25 )
				{ 
					array_push($zone1['school_name'],$school['school_name']);
					$test['sn'] = $school;
					array_push($zone1['current_school_name'],$test['sn']['school_name']);
					$zone1_criteria = array($test['sn']['school_name'],"Total HB Severe Cases: ".$severe_hb_cases_details['severe_hb_issues_count'],"Total HB Moderate Cases: ".$moderate_hb_cases_details['moderate_hb_issues_count'],"Total HB Mild Cases: ".$mild_hb_cases_details['mild_hb_issues_count']);
					array_push($zone1['criteria'],$zone1_criteria);

					//array_push($zone1['criteria'],$zone1_criteria);
				
					$zone1['school_count']++;					
					$zone1['value']++;
				}
				else if($total_grade > 17 )
				{
					//YELLOW
						array_push($zone3['school_name'],$school['school_name']);
						$test['sn'] = $school;
						array_push($zone3['current_school_name'],$test['sn']['school_name']);
						$zone3['school_count']++;
						$zone3['value']++;
						$zone3_criteria = array($test['sn']['school_name'],"Total severe_hb Cases: ".$severe_hb_cases_details['severe_hb_issues_count'],"Total moderate_hb: ".$moderate_hb_cases_details['moderate_hb_issues_count'],"Total mild_hb Cases: ".$mild_hb_cases_details['mild_hb_issues_count']);
								array_push($zone3['criteria'],$zone3_criteria);
				}
				else
				{
					//GREEN
						array_push($zone2['school_name'],$school['school_name']);
						$test['sn'] = $school;
						array_push($zone2['current_school_name'],$test['sn']['school_name']);
						$zone2['school_count']++;
						$zone2['value']++;
						$zone2_criteria = array($test['sn']['school_name'], "Total HB Severe Cases: ".$severe_hb_cases_details['severe_hb_issues_count'],"Total HB Moderate Cases: ".$moderate_hb_cases_details['moderate_hb_issues_count'],"Total HB Mild Cases : ".$mild_hb_cases_details['mild_hb_issues_count']);
							array_push($zone2['criteria'],$zone2_criteria);
				}

				$severe_hb_count += $severe_hb_cases_details['severe_hb_issues_count'];
				$moderate_hb_count += $moderate_hb_cases_details['moderate_hb_issues_count'];
				$mild_hb_count += $mild_hb_cases_details['mild_hb_issues_count'];

				array_push($all_severe_hb_cases, $severe_hb_cases_details);
				array_push($all_moderate_hb_cases, $moderate_hb_cases_details);
				array_push($all_mild_hb_cases, $mild_hb_cases_details);

		}			
				array_push($all_cases, $zone1);				
				array_push($all_cases, $zone2);				
				array_push($all_cases, $zone3);
				
				array_push($all_cases, $all_severe_hb_cases);
				array_push($all_cases, $all_moderate_hb_cases);
				array_push($all_cases, $all_mild_hb_cases);

				//echo "<pre>";
				//echo print_r($all_cases,true); echo "</pre>";exit();

			return $all_cases;			
		
	}

	public function get_hb_status_student_docs_model($labelColor, $schoolName)
	{
	
		$all_cases_docs = array();
			
	$severe_hb_docs = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$lte' => 8.0),"doc_data.widget_data.school_details.School Name"=>$schoolName) )->get ( $this->hb_app_col );
	$severe_hb['all_severe_hb_cases_docs'] = $severe_hb_docs;
	$severe_hb['all_severe_hb_cases_count'] = count($severe_hb_docs);
	array_push($all_cases_docs, $severe_hb);

	// moderate cases
	$moderate_hb_docs = $this->mongo_db-> where( array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$gte' => 8.1, '$lte' => 10.0),"doc_data.widget_data.school_details.School Name"=>$schoolName) )->get ( $this->hb_app_col );
	$moderate_hb['all_moderate_hb_cases_docs'] = $moderate_hb_docs;
	array_push($all_cases_docs, $moderate_hb);

	// mild cases
	$mild_hb_docs = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$gte' => 10.1, '$lt' => 12.0),		"doc_data.widget_data.school_details.School Name"=>$schoolName) )->get ( $this->hb_app_col );
	$mild_hb['all_mild_hb_cases_docs'] = $mild_hb_docs;
	array_push($all_cases_docs, $mild_hb);
	

		return $all_cases_docs;

	}

	public function get_schools_health_bmi_status_count_model_new($student_type = false)

	{

		$all_schools_name      = array();
		$all_schools           = array();
		$schools_list  		   = $this->get_all_schools_student_type($student_type);
		$zone1['label'] 	   = "Red";
		$zone1['value'] 	   = 0;
		$zone1['school_name']  =  array();
		$zone1['school_count'] = 0;
		$zone2['label'] 	   = "Green";
		$zone2['value']        = 0;
		$zone2['school_name']  = array();
		$zone2['school_count'] = 0;
		$zone3['label']        = "Yellow";
		$zone3['value']        = 0;
		$zone3['school_name']  =  array();
		$zone3['school_count'] = 0;

		$all_under_weight_bmi_cases   = array();
		$all_over_weight_bmi_cases = array();
		$all_obese_weight_bmi_cases     = array();
		
		$under_weight_bmi_cases_details   = array();
		$over_weight_bmi_cases_details = array();
		$obese_weight_bmi_cases_details     = array();
		
		$under_weight_bmi_count   = 0;
		$over_weight_bmi_count = 0;
		$obese_weight_bmi_count = 0;
		
		$zone1['criteria'] = [];
		$zone2['criteria'] = [];
		$zone3['criteria'] = [];

		$zone1['current_school_name'] = [];
		$zone2['current_school_name'] = [];
		$zone3['current_school_name'] = [];

		$all_cases = array();
		foreach ($schools_list as $school) 
		{
			
			$under_weight_bmi_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => array('$lte' => 18.50),'doc_data.widget_data.school_details.School Name' => $school['school_name']))->count($this->bmi_app_col);

			$over_weight_bmi_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => array('$gte' => 25.00, '$lte' => 29.99),'doc_data.widget_data.school_details.School Name' => $school['school_name']))->count($this->bmi_app_col);

			$obese_weight_bmi_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => array('$gte' => 30.00),'doc_data.widget_data.school_details.School Name' => $school['school_name']))->count($this->bmi_app_col);


			$under_weight_bmi_cases_details['school_name'] = $school['school_name'];
			   
				$under_weight_bmi_cases_details['under_weight_bmi_issues_count'] = $under_weight_bmi_count_doc;

				if($under_weight_bmi_cases_details['under_weight_bmi_issues_count']> 13)
				{
					$under_weight_bmi_weight = 11;
				}
				elseif($under_weight_bmi_cases_details['under_weight_bmi_issues_count']> 9)
				{
					$under_weight_bmi_weight = 8;
				}
				else
				{
					$under_weight_bmi_weight = 4;
				}

				$over_weight_bmi_cases_details['school_name'] = $school['school_name'];
				
				$over_weight_bmi_cases_details['over_weight_bmi_issues_count'] = $over_weight_bmi_count_doc;

				if($over_weight_bmi_cases_details['over_weight_bmi_issues_count']> 20)
				{
					$over_weight_bmi_weight = 16;
				}
				elseif($over_weight_bmi_cases_details['over_weight_bmi_issues_count']> 15)
				{
					$over_weight_bmi_weight = 10 ;
				}
				else
				{
					$over_weight_bmi_weight = 5;					
				}
			    
				$obese_weight_bmi_cases_details['school_name'] = $school;
			  
				$obese_weight_bmi_cases_details['obese_weight_bmi_issues_count'] = $obese_weight_bmi_count_doc;
				if($obese_weight_bmi_cases_details['obese_weight_bmi_issues_count']> 17 )
				{
					$obese_weight_bmi_weight = 14;
				}
				elseif($obese_weight_bmi_cases_details['obese_weight_bmi_issues_count']> 13)
				{
					$obese_weight_bmi_weight = 9;
				}
				else
				{
					$obese_weight_bmi_weight = 5;
					
				}

			$total_grade = $under_weight_bmi_weight + $over_weight_bmi_weight + $obese_weight_bmi_weight;
							//echo print_r($total_grade,true);
			if($obese_weight_bmi_cases_details['obese_weight_bmi_issues_count'] > 6 || $total_grade > 25 )
				{ 
					array_push($zone1['school_name'],$school['school_name']);
					$test['sn'] = $school;
					array_push($zone1['current_school_name'],$test['sn']['school_name']);
					$zone1_criteria = array($test['sn']['school_name'],"Total Under Weight BMI Cases: ".$under_weight_bmi_cases_details['under_weight_bmi_issues_count'],"Total Over Weight BMI Cases: ".$over_weight_bmi_cases_details['over_weight_bmi_issues_count'],"Total Obese Weight BMI Cases: ".$obese_weight_bmi_cases_details['obese_weight_bmi_issues_count']);
					array_push($zone1['criteria'],$zone1_criteria);

					//array_push($zone1['criteria'],$zone1_criteria);
				
					$zone1['school_count']++;					
					$zone1['value']++;
				}
				else if($total_grade > 17 )
				{
					//YELLOW
						array_push($zone3['school_name'],$school['school_name']);
						$test['sn'] = $school;
						array_push($zone3['current_school_name'],$test['sn']['school_name']);
						$zone3['school_count']++;
						$zone3['value']++;
						$zone3_criteria = array($test['sn']['school_name'],"Total Under Weight BMI Cases: ".$under_weight_bmi_cases_details['under_weight_bmi_issues_count'],"Total Over Weight BMI: ".$over_weight_bmi_cases_details['over_weight_bmi_issues_count'],"Total Obese Weight BMI Cases: ".$obese_weight_bmi_cases_details['obese_weight_bmi_issues_count']);
								array_push($zone3['criteria'],$zone3_criteria);
				}
				else
				{
					//GREEN
						array_push($zone2['school_name'],$school['school_name']);
						$test['sn'] = $school;
						array_push($zone2['current_school_name'],$test['sn']['school_name']);
						$zone2['school_count']++;
						$zone2['value']++;
						$zone2_criteria = array($test['sn']['school_name'], "Total Under Weight BMI Cases: ".$under_weight_bmi_cases_details['under_weight_bmi_issues_count'],"Total Over Weight BMI Cases: ".$over_weight_bmi_cases_details['over_weight_bmi_issues_count'],"Total Obese Weight BMI Cases : ".$obese_weight_bmi_cases_details['obese_weight_bmi_issues_count']);
							array_push($zone2['criteria'],$zone2_criteria);
				}

				$under_weight_bmi_count += $under_weight_bmi_cases_details['under_weight_bmi_issues_count'];
				$over_weight_bmi_count += $over_weight_bmi_cases_details['over_weight_bmi_issues_count'];
				$obese_weight_bmi_count += $obese_weight_bmi_cases_details['obese_weight_bmi_issues_count'];

				array_push($all_under_weight_bmi_cases, $under_weight_bmi_cases_details);
				array_push($all_over_weight_bmi_cases, $over_weight_bmi_cases_details);
				array_push($all_obese_weight_bmi_cases, $obese_weight_bmi_cases_details);

		}			
				array_push($all_cases, $zone1);				
				array_push($all_cases, $zone2);				
				array_push($all_cases, $zone3);
				
				array_push($all_cases, $all_under_weight_bmi_cases);
				array_push($all_cases, $all_over_weight_bmi_cases);
				array_push($all_cases, $all_obese_weight_bmi_cases);

				//echo "<pre>";
				//echo print_r($all_cases,true); echo "</pre>";exit();

			return $all_cases;			
		
	}

			public function get_bmi_status_student_docs_model($labelColor, $schoolName)
	        {
	        
	            $all_cases_docs = array();

	        $under_weight_bmi_docs = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => array('$lte' => 18.50),"doc_data.widget_data.school_details.School Name"=>$schoolName) )->get ( $this->bmi_app_col );
	        $under_weight_bmi['all_under_weight_bmi_cases_docs'] = $under_weight_bmi_docs;
	        $under_weight_bmi['all_under_weight_bmi_cases_count'] = count($under_weight_bmi_docs);
	          /*echo print_r($under_weight_bmi_docs , true);
	          exit();*/

	        array_push($all_cases_docs, $under_weight_bmi);
	        // moderate cases
	        $over_weight_bmi_docs = $this->mongo_db-> where( array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => array('$gte' => 25.00, '$lte' => 29.99),"doc_data.widget_data.school_details.School Name"=>$schoolName) )->get ( $this->bmi_app_col );
	        $over_weight_bmi['all_over_weight_bmi_cases_docs'] = $over_weight_bmi_docs;
	        array_push($all_cases_docs, $over_weight_bmi);
	        // mild cases
	        $obese_weight_bmi_docs = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => array('$gte' => 30.00),"doc_data.widget_data.school_details.School Name"=>$schoolName) )->get ( $this->bmi_app_col );
	        $obese_weight_bmi['all_obese_weight_bmi_cases_docs'] = $obese_weight_bmi_docs;
	        array_push($all_cases_docs, $obese_weight_bmi);	        

	            return $all_cases_docs;

	        }

	function last_three_months_req_monitoring($start_date, $end_date) 
	{
	        $start = strval($start_date);
	        $end = strval($end_date);
	       
		 $request['hospitalised'] = $this->mongo_db->whereGte('history.0.time', $start)->whereLte('history.0.time', $end)->where(array('doc_data.widget_data.page2.Review Info.Status' => "Hospitalized"))->count($this->request_app_col_static_html);
		 
		$request['reiew'] = $this->mongo_db->whereGte('history.0.time', $start)->whereLte('history.0.time', $end)->where(array('doc_data.widget_data.page2.Review Info.Status' => "Review"))->count($this->request_app_col_static_html);

		$request['out'] = $this->mongo_db->whereGte('history.0.time', $start)->whereLte('history.0.time', $end)->where(array('doc_data.widget_data.page2.Review Info.Status' => "Out-Patient"))->count($this->request_app_col_static_html);
	       
	    return $request;

	}

	public function get_admitted_cases_schools_list($start_date, $end_date, $request_type)
	{
		$start = strval($start_date);
	    $end = strval($end_date);
	    $schools = [];
	    switch ($request_type) {
	    	case 'Admitted':
	    		$requests = $this->mongo_db->select(array('doc_data.widget_data.page1'))->whereGte('history.0.time', $start)->whereLte('history.0.time', $end)->where(array('doc_data.widget_data.page2.Review Info.Status' => "Hospitalized"))->get($this->request_app_col_static_html);

	    		//echo print_r($requests, true); exit();
	    		foreach ($requests as $scl) {

	    			$scl_name = $scl['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref'];
	    			
	    			array_push($schools, $scl_name);
	    		}

	    		$final = array_count_values($schools);

	    		return $final;
	    		break;
	    	case 'Review':
	    		$requests = $this->mongo_db->select(array('doc_data.widget_data.page1'))->whereGte('history.0.time', $start)->whereLte('history.0.time', $end)->where(array('doc_data.widget_data.page2.Review Info.Status' => "Review"))->get($this->request_app_col_static_html);

	    		//echo print_r($requests, true); exit();
	    		foreach ($requests as $scl) {

	    			$scl_name = $scl['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref'];
	    			
	    			array_push($schools, $scl_name);
	    		}

	    		$final = array_count_values($schools);

	    		return $final;
	    		break;
	    	case 'Out-Patient':
	    		$requests = $this->mongo_db->select(array('doc_data.widget_data.page1'))->whereGte('history.0.time', $start)->whereLte('history.0.time', $end)->where(array('doc_data.widget_data.page2.Review Info.Status' => "Out-Patient"))->get($this->request_app_col_static_html);

	    		//echo print_r($requests, true); exit();
	    		foreach ($requests as $scl) {

	    			$scl_name = $scl['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref'];
	    			
	    			array_push($schools, $scl_name);
	    		}

	    		$final = array_count_values($schools);

	    		return $final;
	    		break;
	    	
	    	default:
	    		# code...
	    		break;
	    }
	}

	public function get_students_for_admitted($start_date, $end_date, $scl, $request_type)
	{
			$start = strval($start_date);
		    $end = strval($end_date);
		    //$schools = [];
		    switch ($request_type) {
		    	case 'Admitted':
		    		$requests = $this->mongo_db->select(array('doc_data.widget_data.page1'))->whereGte('history.0.time', $start)->whereLte('history.0.time', $end)->where(array('doc_data.widget_data.page2.Review Info.Status' => "Hospitalized", 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->get($this->request_app_col_static_html);

		    		//echo print_r($requests, true); exit();
		    		/*foreach ($requests as $scl) {

		    			$scl_name = $scl['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref'];
		    			
		    			array_push($schools, $scl_name);
		    		}

		    		$final = array_count_values($schools);*/

		    		return $requests;
		    		break;
		    	case 'Review':
		    		$requests = $this->mongo_db->select(array('doc_data.widget_data.page1'))->whereGte('history.0.time', $start)->whereLte('history.0.time', $end)->where(array('doc_data.widget_data.page2.Review Info.Status' => "Review", 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->get($this->request_app_col_static_html);

		    		//echo print_r($requests, true); exit();
		    		/*foreach ($requests as $scl) {

		    			$scl_name = $scl['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref'];
		    			
		    			array_push($schools, $scl_name);
		    		}

		    		$final = array_count_values($schools);*/

		    		return $requests;
		    		break;
		    	case 'Out-Patient':
		    		$requests = $this->mongo_db->select(array('doc_data.widget_data.page1'))->whereGte('history.0.time', $start)->whereLte('history.0.time', $end)->where(array('doc_data.widget_data.page2.Review Info.Status' => "Out-Patient", 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->get($this->request_app_col_static_html);

		    		//echo print_r($requests, true); exit();
		    		/*foreach ($requests as $scl) {

		    			$scl_name = $scl['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref'];
		    			
		    			array_push($schools, $scl_name);
		    		}

		    		$final = array_count_values($schools);*/

		    		return $requests;
		    		break;
		    	
		    	default:
		    		# code...
		    		break;
		    }

	}

	function get_show_admitted_ehr_details_by_status($start_date, $end_date,$request_type) 
	{
	        $start = strval($start_date);
	        $end = strval($end_date);

	    if($request_type == 'Admitted'){
	    	$request = $this->mongo_db->whereGte('history.0.time', $start)->whereLte('history.0.time', $end)->where(array('doc_data.widget_data.page2.Review Info.Status' => "Hospitalized"))->get($this->request_app_col_static_html);
	    	return $request;
	    }elseif ($request_type == 'Review') {
	    	$request = $this->mongo_db->whereGte('history.0.time', $start)->whereLte('history.0.time', $end)->where(array('doc_data.widget_data.page2.Review Info.Status' => "Review"))->get($this->request_app_col_static_html);
	    	return $request;
	    }else{
	    	$request = $this->mongo_db->whereGte('history.0.time', $start)->whereLte('history.0.time', $end)->where(array('doc_data.widget_data.page2.Review Info.Status' => "Out-Patient"))->get($this->request_app_col_static_html);
	    return $request;
	    }

	}

	///Test

/* Cards Data fetching For new dashboard*/

public function get_data_for_cards_with_filters($academic_year, $district_name, $school_name, $gender_type)
{
	if($academic_year == '2015-2016'){
		$span = 'healthcare2016226112942701_screening_final_2015-16';
	}elseif($academic_year == '2016-2017'){
		$span = 'healthcare2016226112942701_screening_final_2016-17';
	}elseif ($academic_year == '2017-2018') {
		$span = 'healthcare2016226112942701_screening_final_2017-18';
	}elseif ($academic_year == '2018-2019') {
		$span = 'healthcare2016226112942701_screening_final_2019';
	}elseif ($academic_year == '2019-2020') {
		$span = 'healthcare2016226112942701';
	}

	if($district_name == 'All' && $school_name =='All')
	{

		if($gender_type == 'All'){
			// For the Total Students
				$data['total_students'] = $this->mongo_db->count($span);

			// For the Total schools
				$this->mongo_db->switchDatabase($this->common_db['common_db']);
				$data['total_schools'] = $this->mongo_db->count('panacea_schools_bkp_copy');
				$this->mongo_db->switchDatabase($this->common_db['dsn']);
			// screened Students:
				$page3andpage9exists = array("doc_data.widget_data.page3.Physical Exam"=> array('$exists' =>true), 
					     "doc_data.widget_data.page9.Dental Check-up"=>array('$exists' =>true));

				$data['screened_students'] = $this->mongo_db->where($page3andpage9exists)->count($span);

				$data['not_screened_students'] = $data['total_students'] - $data['screened_students'];

			// Screened Schools

				$schools = $this->mongo_db->where($page3andpage9exists)->command(array('distinct' => 'healthcare2016226112942701', 'key' =>'doc_data.widget_data.page2.Personal Information.School Name'));
			
				$data['screened_schools'] =count($schools['values']);

			//Not Screened Schools
			$data['not_screened_schools'] = $data['total_schools'] - $data['screened_schools'];


		}else{
			// For the Total Students
			$data['total_students'] = $this->mongo_db->where('doc_data.widget_data.page1.Personal Information.Gender', $gender_type)->count($span);

		// For the Total schools
			$this->mongo_db->switchDatabase($this->common_db['common_db']);
			$data['total_schools'] = $this->mongo_db->count('panacea_schools');
			$this->mongo_db->switchDatabase($this->common_db['dsn']);
		// screened Students:
			$page3andpage9exists = array("doc_data.widget_data.page3.Physical Exam"=> array('$exists' =>true), 
				     "doc_data.widget_data.page9.Dental Check-up"=>array('$exists' =>true));

			$data['screened_students'] = $this->mongo_db->where($page3andpage9exists)->where('doc_data.widget_data.page1.Personal Information.Gender', $gender_type)->count($span);

			$data['not_screened_students'] = $data['total_students'] - $data['screened_students'];

		// Screened Schools

			$schools = $this->mongo_db->where($page3andpage9exists)->command(array('distinct' => 'healthcare2016226112942701', 'key' =>'doc_data.widget_data.page2.Personal Information.School Name'));
		
			$data['screened_schools'] =count($schools['values']);

			$data['not_screened_schools'] = $data['total_schools'] - $data['screened_schools'];
		}
	

	 
	return $data;

	}elseif ($district_name != 'All' && $school_name =='All') {

		if ($gender_type == 'All') {
			
		// For the Total Students
		$data['total_students'] = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.District', $district_name)->count($span);

		// For the Total schools
			$school_count = [];
			$this->mongo_db->switchDatabase($this->common_db['common_db']);
			$school = $this->mongo_db->get('panacea_schools');
			$this->mongo_db->switchDatabase($this->common_db['dsn']);
			
			foreach ($school as $scl) {
				
				$seperating_dist_name = explode(',', $scl['school_name']);
				
				if($seperating_dist_name[1] == $district_name){
					array_push($school_count, $scl['school_name']);

				}

			}

			$data['total_schools'] = count($school_count);

		// screened Students:
			$page3andpage9exists = array("doc_data.widget_data.page3.Physical Exam"=> array('$exists' =>true), 
				     "doc_data.widget_data.page9.Dental Check-up"=>array('$exists' =>true));

			$data['screened_students'] = $this->mongo_db->where($page3andpage9exists)->where('doc_data.widget_data.page2.Personal Information.District', $district_name)->count($span);

			$data['not_screened_students'] = $data['total_students'] - $data['screened_students'];

		// Screened Schools

			$schools = $this->mongo_db->where($page3andpage9exists)->where('doc_data.widget_data.page2.Personal Information.District', $district_name)->command(array('distinct' => 'healthcare2016226112942701', 'key' =>'doc_data.widget_data.page2.Personal Information.School Name'));
		
			$data['screened_schools'] =count($schools['values']);

			$data['not_screened_schools'] = $data['total_schools'] - $data['screened_schools'];

		}else {

		/*// For the Total Students
			$data['total_students'] = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.District', $district_name)->count($span);*/

			// For the Total Students
			$data['total_students'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Gender'=> $gender_type, 'doc_data.widget_data.page2.Personal Information.District', $district_name ))->count($span);

			

		// For the Total schools
			$school_count = [];
			$this->mongo_db->switchDatabase($this->common_db['common_db']);
			$school = $this->mongo_db->get('panacea_schools');
			$this->mongo_db->switchDatabase($this->common_db['dsn']);
			
			foreach ($school as $scl) {
				
				$seperating_dist_name = explode(',', $scl['school_name']);
				
				if($seperating_dist_name[1] == $district_name){
					array_push($school_count, $scl['school_name']);

				}

			}

			$data['total_schools'] = count($school_count);

		// screened Students:
			$page3andpage9exists = array("doc_data.widget_data.page3.Physical Exam"=> array('$exists' =>true), 
				     "doc_data.widget_data.page9.Dental Check-up"=>array('$exists' =>true));

			$data['screened_students'] = $this->mongo_db->where($page3andpage9exists)->where('doc_data.widget_data.page2.Personal Information.District', $district_name)->count($span);

			$data['not_screened_students'] = $data['total_students'] - $data['screened_students'];

		// Screened Schools

			$schools = $this->mongo_db->where($page3andpage9exists)->where('doc_data.widget_data.page2.Personal Information.District', $district_name)->command(array('distinct' => 'healthcare2016226112942701', 'key' =>'doc_data.widget_data.page2.Personal Information.School Name'));
		
			$data['screened_schools'] =count($schools['values']);

			$data['not_screened_schools'] = $data['total_schools'] - $data['screened_schools'];
			}
		
	
		return $data;


	}elseif ($district_name != 'All' && $school_name !='All' && $gender_type == 'All') {

		

		//For Total schools in districts wise
		$school_count = [];
		$this->mongo_db->switchDatabase($this->common_db['common_db']);
		$school = $this->mongo_db->get('panacea_schools');
		$this->mongo_db->switchDatabase($this->common_db['dsn']);
		
		foreach ($school as $scl) {
			
			$seperating_dist_name = explode(',', $scl['school_name']);
			
			if($seperating_dist_name[1] == $district_name){
				array_push($school_count, $scl['school_name']);

			}

		}

		$data['total_schools'] = count($school_count);

		// For the Total Students
		$data['total_students'] = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name',$school_name)->count('healthcare2016226112942701');

		// screened Students:
		$page3andpage9exists = array("doc_data.widget_data.page3.Physical Exam"=> array('$exists' =>true), 
			     "doc_data.widget_data.page9.Dental Check-up"=>array('$exists' =>true));

		$data['screened_students'] = $this->mongo_db->where($page3andpage9exists)->where('doc_data.widget_data.page2.Personal Information.School Name', $school_name)->count($span);
		
		//Not screened students
		$data['not_screened_students'] = $data['total_students'] - $data['screened_students'];

		// Screened Schools

		$schools = $this->mongo_db->where($page3andpage9exists)->where('doc_data.widget_data.page2.Personal Information.District', $district_name)->command(array('distinct' => 'healthcare2016226112942701', 'key' =>'doc_data.widget_data.page2.Personal Information.School Name'));
	
		$data['screened_schools'] =count($schools['values']);

		//Not Screened Schools
		$data['not_screened_schools'] = $data['total_schools'] - $data['screened_schools'];
	
		return $data;
			
		}elseif ($district_name != 'All' && $school_name !='All' && $gender_type != 'All') {

		// For the Total Students

		//$data['total_students'] = $this->mongo_db->where('doc_data.widget_data.page1.Personal Information.Gender',$gender_type)->count('healthcare2016226112942701');

		$school_count = [];
		$this->mongo_db->switchDatabase($this->common_db['common_db']);
		$school = $this->mongo_db->get('panacea_schools');
		$this->mongo_db->switchDatabase($this->common_db['dsn']);
		
		foreach ($school as $scl) {
			
			$seperating_dist_name = explode(',', $scl['school_name']);
			
			if($seperating_dist_name[1] == $district_name){
				array_push($school_count, $scl['school_name']);

			}

		}

		$data['total_schools'] = count($school_count);
		$data['total_students'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Personal Information.Gender'=> $gender_type, 'doc_data.widget_data.page2.Personal Information.School Name' => $school_name ))->count('healthcare2016226112942701');

		//echo print_r($data['total_students'],true); exit();

		// screened Students:
		$page3andpage9exists = array("doc_data.widget_data.page3.Physical Exam"=> array('$exists' =>true), 
			     "doc_data.widget_data.page9.Dental Check-up"=>array('$exists' =>true));

		$data['screened_students'] = $this->mongo_db->where($page3andpage9exists)->where('doc_data.widget_data.page2.Personal Information.School Name', $school_name)->count($span);
		
		//Not screened students
		$data['not_screened_students'] = $data['total_students'] - $data['screened_students'];
        
        return $data;

	}
    

}

/*Daily Requests Bar*/
public function get_daily_request_for_bar($start_date, $end_date, $district_name, $school_name)
{
	
	if($district_name == 'All' && $school_name == 'All'){

		
		if($start_date != $end_date)
		{
			$query['normal'] = $this->mongo_db->whereBetween('history.0.time', $start_date, $end_date)->where('doc_data.widget_data.page2.Review Info.Request Type', 'Normal')->count('healthcare2016531124515424_static_html');

			$query['emergency'] = $this->mongo_db->whereBetween('history.0.time', $start_date, $end_date)->where('doc_data.widget_data.page2.Review Info.Request Type', 'Emergency')->count('healthcare2016531124515424_static_html');

			$query['chronic'] = $this->mongo_db->whereBetween('history.0.time', $start_date, $end_date)->where('doc_data.widget_data.page2.Review Info.Request Type', 'Chronic')->count('healthcare2016531124515424_static_html');

			$exists_doctor = array('history.submitted_by' => array('$regex' => 'panacea.dr'),'history.current_stage' => 'Doctor');

			$docs = $this->mongo_db->select(array('history'))->whereBetween('history.0.time', $start_date, $end_date)->where($exists_doctor)->get($this->request_app_col_static_html);

			$doc_names= [];
			foreach ($docs as $data) {
				$his = end($data['history']);

				if($his['current_stage'] == "Doctor"){
					$docs = $his['submitted_by_name'];
					array_push($doc_names, $docs);
				}
				
			}

			$query['doc_response'] = count($doc_names);
		}else{
			$query['normal'] = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Request Type', 'Normal')->whereLike('history.0.time', $start_date)->count('healthcare2016531124515424_static_html');
			$query['emergency'] = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Request Type', 'Emergency')->whereLike('history.0.time', $start_date)->count('healthcare2016531124515424_static_html');
			$query['chronic'] = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Request Type', 'Chronic')->whereLike('history.0.time', $start_date)->count('healthcare2016531124515424_static_html');

			$exists_doctor = array('history.time'=>array('$regex' => $start_date), 'history.submitted_by' => array('$regex' => 'panacea.dr'),'history.current_stage' => 'Doctor');

			$docs = $this->mongo_db->select(array('history'))->where($exists_doctor)->get($this->request_app_col_static_html);

			$doc_names= [];
			foreach ($docs as $data) {
				$his = end($data['history']);

				if($his['current_stage'] == "Doctor"){
					$docs = $his['submitted_by_name'];
					array_push($doc_names, $docs);
				}
				
			}

			$query['doc_response'] = count($doc_names);
		}
		
		//echo print_r($query['normal'], true); exit();

	}elseif ($district_name != 'All' && $school_name == 'All') {
		$query['normal'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district_name))->whereLike('history.0.time', $today_date)->count('healthcare2016531124515424_static_html');

		$query['emergency'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district_name))->whereLike('history.0.time', $today_date)->count('healthcare2016531124515424_static_html');

		$query['chronic'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district_name))->whereLike('history.0.time', $today_date)->count('healthcare2016531124515424_static_html');

		$exists_doctor = array('history.submitted_by' => array('$regex' => 'panacea.dr'),'history.current_stage' => 'Doctor','history.time'=>array('$regex' => $today_date), 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district_name);
		$query['doc_response'] = $this->mongo_db->select(array('history'))->where($exists_doctor)->count($this->request_app_col_static_html);
	}elseif ($district_name != 'All' && $school_name != 'All') {
		$query['normal'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->whereLike('history.0.time', $today_date)->count('healthcare2016531124515424_static_html');

		$query['emergency'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->whereLike('history.0.time', $today_date)->count('healthcare2016531124515424_static_html');

		$query['chronic'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->whereLike('history.0.time', $today_date)->count('healthcare2016531124515424_static_html');

		$exists_doctor = array('history.submitted_by' => array('$regex' => 'panacea.dr'),'history.current_stage' => 'Doctor','history.time'=>array('$regex' => $today_date), 'doc_data.widget_data.page1.Student Info.School Name.field_ref' =>$school_name);
		$query['doc_response'] = $this->mongo_db->select(array('history'))->where($exists_doctor)->count($this->request_app_col_static_html);
	}
	
	
	return $query;
}

/*Get school Names Based on Filters*/
public function get_all_schools_student_type_with_district($district_name) 
{

	if($district_name == 'All'){
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$query = $this->mongo_db->get ( $this->collections ['panacea_schools'] );
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		}else{
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$query = $this->mongo_db->where(array('school_name' => array('$regex' => $district_name)))->get ( $this->collections ['panacea_schools'] );
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		}
		
		foreach ( $query as $schools => $school ) {
			$dt_name = $this->mongo_db->where ( '_id', new MongoId ( $school ['dt_name'] ) )->get ( 'panacea_district' );
			if (isset ( $school ['dt_name'] )) {
				$query [$schools] ['dt_name'] = $dt_name [0] ['dt_name'];
			} else {
				$query [$schools] ['dt_name'] = "No state selected";
			}
		}
		return $query;

}

/* Daily Sanitation Bar*/
public function get_sanitation_with_filters($date = FALSE, $district_name)
{
	$all_schools_name = array();
	$submitted_school_name = array();
	$schools_list = $this->get_all_schools_student_type_with_district($district_name);

	foreach ($schools_list as $school_data) {
		array_push($all_schools_name, $school_data['school_name']);
	}

	//echo print_r($all_schools_name, true); exit();

	if($district_name == 'All'){
		$query = $this->mongo_db->select ( array (
				"doc_data.widget_data" 
		) )->whereLike ( 'doc_data.widget_data.page4.Declaration Information.Date:',$date )->count ( $this->sanitation_app_col_v2 );

		$animals = $this->mongo_db->whereLike ( 'doc_data.widget_data.page4.Declaration Information.Date:',$date )->where('doc_data.widget_data.daily.Campus.Animals Around Campus', 'Yes')->count($this->sanitation_app_col_v2);

		$not_work_washrooms = $this->mongo_db->whereLike ( 'doc_data.widget_data.page4.Declaration Information.Date:',$date )->where('doc_data.widget_data.daily.Toilets.Any Damages To The Toilets', 'Yes')->count($this->sanitation_app_col_v2);
	}else{
		$query = $this->mongo_db->select ( array (
				"doc_data.widget_data" 
		) )->whereLike ( 'doc_data.widget_data.page4.Declaration Information.Date:',$date )->where('doc_data.widget_data.page4.School Information.District', $district_name)->count ( $this->sanitation_app_col_v2 );

		$animals = $this->mongo_db->whereLike ( 'doc_data.widget_data.page4.Declaration Information.Date:',$date )->where('doc_data.widget_data.daily.Campus.Animals Around Campus', 'Yes')->where('doc_data.widget_data.page4.School Information.District', $district_name)->count($this->sanitation_app_col_v2);

		$not_work_washrooms = $this->mongo_db->whereLike ( 'doc_data.widget_data.page4.Declaration Information.Date:',$date )->where('doc_data.widget_data.daily.Toilets.Any Damages To The Toilets', 'Yes')->where('doc_data.widget_data.page4.School Information.District', $district_name)->count($this->sanitation_app_col_v2);
	}

	

	$schools_data['submitted_count'] = $query;
	$schools_data['not_submitted_count'] = count($all_schools_name) - $query;
	$schools_data['animals'] = $animals;
	$schools_data['not_work_washrooms'] = $not_work_washrooms;
	
	
	return $schools_data;

}

/* Daily attendance bar*/
	public function get_daily_attendance_report_model($today_date, $district, $school_name)
	{
		$array_empty = [];
		//$dist_id = $this->get_all_district ();
		if($district == 'All' && $school_name == 'All'){
			$query = $this->mongo_db->select ( array ("doc_data.widget_data") )->whereLike ('history.last_stage.time', $today_date )->get ( $this->absent_app_col );
		}elseif ($district != 'All' && $school_name == 'All') {
			$query = $this->mongo_db->select ( array ("doc_data.widget_data") )->where('doc_data.widget_data.page1.Attendence Details.District', $district)->whereLike ('history.last_stage.time', $today_date )->get ( $this->absent_app_col );
		}elseif ($district != 'All' && $school_name != 'All') {
			$query = $this->mongo_db->select ( array ("doc_data.widget_data") )->where('doc_data.widget_data.page1.Attendence Details.Select School', $school_name)->whereLike ('history.last_stage.time', $today_date )->get ( $this->absent_app_col );
		}
		
		       
	       $r2h = 0;
	       $sick = 0;
	       $attended = 0;
	       $restroom = 0;
	       $count =0;
	       foreach ( $query as $report )
	       {
	           if (strtolower ( $report ['doc_data']['widget_data']['page1']['Attendence Details']['District'] ))
	           {
	               $count ++;
	               $sick = $sick + intval ( $report['doc_data']['widget_data']['page1']['Attendence Details']['Sick']);
	               $restroom = $restroom + intval ( $report['doc_data']['widget_data']['page2']['Attendence Details']['RestRoom'] );                
	               $r2h = $r2h + intval ( $report['doc_data']['widget_data']['page1']['Attendence Details']['R2H'] );
	               $attended = $attended + intval ( $report['doc_data']['widget_data']['page1']['Attendence Details'] ['Attended'] );
	           }
	        $data["sick"] = $sick;
	        $data['r2h'] = $r2h;
	        $data['restroom'] = $restroom;
	        $data['attended'] = $attended;
       }    
     	
     	$data['label'] = 'Sick';
     	$data['value'] = $sick;
     	if($data['value'] != 0){
     		array_push($array_empty, $data);
     	}
     	$data['label'] = 'R2H';
     	$data['value'] = $r2h;
     	if($data['value'] != 0){
     		array_push($array_empty, $data);
     	}
     	$data['label'] = 'RestRoom';
     	$data['value'] = $restroom;
     	if($data['value'] != 0){
     		array_push($array_empty, $data);
     	}
     	$data['label'] = 'Attendance';
     	$data['value'] = $attended;
     	if($data['value'] != 0){
     	array_push($array_empty, $data);
     	}
     	//echo print_r($data, true); exit();
     	
     	if(!empty($array_empty)){
     		return $array_empty;
     	}else{
     		return 'No Data Found';
     	}
     	
       
	}

	/*Update Request Info*/

	public function get_daily_updated_request_for_bar($start_date, $end_date, $district_name, $school_name)
	{
		
		if($district_name == 'All' && $school_name == 'All'){
			
			if($start_date != $end_date)
			{
				$query['updated_normal'] = $this->mongo_db->where('history.time', array('$gte'=>$start_date), 'history.time', array('$lte'=>$end_date))->where('doc_data.widget_data.page2.Review Info.Request Type', 'Normal')->whereNe("doc_data.widget_data.page2.Review Info.Status" , "Cured")->count('healthcare2016531124515424_static_html');

				$query['updated_emergency'] = $this->mongo_db->where('history.time', array('$gte'=>$start_date), 'history.time', array('$lte'=>$end_date))->where('doc_data.widget_data.page2.Review Info.Request Type', 'Emergency')->whereNe("doc_data.widget_data.page2.Review Info.Status" , "Cured")->count('healthcare2016531124515424_static_html');

				$query['updated_chronic'] = $this->mongo_db->where('history.time', array('$gte'=>$start_date), 'history.time', array('$lte'=>$end_date))->where('doc_data.widget_data.page2.Review Info.Request Type', 'Chronic')->whereNe("doc_data.widget_data.page2.Review Info.Status" , "Cured")->count('healthcare2016531124515424_static_html');

								
			}else{
				$query['updated_normal'] = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Request Type', 'Normal')->whereNe("doc_data.widget_data.page2.Review Info.Status" , "Cured")->whereLike('history.time', $start_date)->count('healthcare2016531124515424_static_html');
				$query['updated_emergency'] = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Request Type', 'Emergency')->whereNe("doc_data.widget_data.page2.Review Info.Status" , "Cured")->whereLike('history.time', $start_date)->count('healthcare2016531124515424_static_html');
				$query['updated_chronic'] = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Request Type', 'Chronic')->whereNe("doc_data.widget_data.page2.Review Info.Status" , "Cured")->whereLike('history.time', $start_date)->count('healthcare2016531124515424_static_html');				

			}
			
		}elseif ($district_name != 'All' && $school_name == 'All') {
			$query['updated_normal'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district_name))->whereNe("doc_data.widget_data.page2.Review Info.Status" , "Cured")->where('history.time', array('$gte'=>$start_date), 'history.time', array('$lte'=>$end_date))->count('healthcare2016531124515424_static_html');

			$query['updated_emergency'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district_name))->whereNe("doc_data.widget_data.page2.Review Info.Status" , "Cured")->where('history.time', array('$gte'=>$start_date), 'history.time', array('$lte'=>$end_date))->count('healthcare2016531124515424_static_html');

			$query['updated_chronic'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district_name))->whereNe("doc_data.widget_data.page2.Review Info.Status" , "Cured")->where('history.time', array('$gte'=>$start_date), 'history.time', array('$lte'=>$end_date))->count('healthcare2016531124515424_static_html');

			
		}elseif ($district_name != 'All' && $school_name != 'All') {
			$query['updated_normal'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->whereNe("doc_data.widget_data.page2.Review Info.Status" , "Cured")->where('history.time', array('$gte'=>$start_date), 'history.time', array('$lte'=>$end_date))->count('healthcare2016531124515424_static_html');

			$query['updated_emergency'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->whereNe("doc_data.widget_data.page2.Review Info.Status" , "Cured")->where('history.time', array('$gte'=>$start_date), 'history.time', array('$lte'=>$end_date))->count('healthcare2016531124515424_static_html');

			$query['updated_chronic'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->whereNe("doc_data.widget_data.page2.Review Info.Status" , "Cured")->where('history.time', array('$gte'=>$start_date), 'history.time', array('$lte'=>$end_date))->count('healthcare2016531124515424_static_html');

			
		}
		
		
		return $query;
	}

	public function get_daily_updated_health_request($start_date,$end_date, $request_type,$school_name,$district) 
	{
		
		if($district == 'All' && $school_name == 'All')
		{
			switch ($request_type) {
				case 'Normal':
					$query = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Request Type', 'Normal')->whereNe("doc_data.widget_data.page2.Review Info.Status" , "Cured")->where('history.time', array('$gte'=>$start_date), 'history.time', array('$lte'=>$end_date))->get('healthcare2016531124515424_static_html');
					return $query;
					break;
				case 'Emergency':
					$query = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Request Type','Emergency')->whereNe("doc_data.widget_data.page2.Review Info.Status" , "Cured")->where('history.time', array('$gte'=>$start_date), 'history.time', array('$lte'=>$end_date))->get('healthcare2016531124515424_static_html');
					return $query;
					break;
				case 'Chronic':
					$query = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Request Type','Chronic')->whereNe("doc_data.widget_data.page2.Review Info.Status" , "Cured")->where('history.time', array('$gte'=>$start_date), 'history.time', array('$lte'=>$end_date))->get('healthcare2016531124515424_static_html');
					return $query;
					break;
				
				default:
					# code...
					break;
			}

		}elseif ($district != 'All' && $school_name == 'All') {
			switch ($request_type) {
				case 'Normal':
					$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereNe("doc_data.widget_data.page2.Review Info.Status" , "Cured")->where('history.time', array('$gte'=>$start_date), 'history.time', array('$lte'=>$end_date))->get('healthcare2016531124515424_static_html');
					return $query;
					break;
				case 'Emergency':
					$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereNe("doc_data.widget_data.page2.Review Info.Status" , "Cured")->where('history.time', array('$gte'=>$start_date), 'history.time', array('$lte'=>$end_date))->get('healthcare2016531124515424_static_html');
					return $query;
					break;
				case 'Chronic':
					$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereNe("doc_data.widget_data.page2.Review Info.Status" , "Cured")->where('history.time', array('$gte'=>$start_date), 'history.time', array('$lte'=>$end_date))->get('healthcare2016531124515424_static_html');
					return $query;
					break;
				
				default:
					# code...
					break;
			}
		}elseif ($district != 'All' && $school_name != 'All') {
			switch ($request_type) {
				case 'Normal':
					$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->whereNe("doc_data.widget_data.page2.Review Info.Status" , "Cured")->where('history.time', array('$gte'=>$start_date), 'history.time', array('$lte'=>$end_date))->get('healthcare2016531124515424_static_html');
					return $query;
					break;
				case 'Emergency':
					$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->whereNe("doc_data.widget_data.page2.Review Info.Status" , "Cured")->where('history.time', array('$gte'=>$start_date), 'history.time', array('$lte'=>$end_date))->get('healthcare2016531124515424_static_html');
					return $query;
					break;
				case 'Chronic':
					$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->whereNe("doc_data.widget_data.page2.Review Info.Status" , "Cured")->where('history.time', array('$gte'=>$start_date), 'history.time', array('$lte'=>$end_date))->get('healthcare2016531124515424_static_html');
					return $query;
					break;
				
				default:
					# code...
					break;
			}
		}

	}

/*Hospitalised Pie */
	public function get_hospitalized_data_count_model($start,$end)
{  

	$query['normal_hyderabad'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal' , 'doc_data.widget_data.page2.Review Info.Status' => 'Hospitalized' , 'doc_data.widget_data.page2.Hospital Info.District Name' => 'HYDERABAD'))->whereBetween('history.time', $start, $end)->count('healthcare2016531124515424_static_html');

		$query['emergency_hyderabad'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency', 'doc_data.widget_data.page2.Review Info.Status' => 'Hospitalized' , 'doc_data.widget_data.page2.Hospital Info.District Name' => 'HYDERABAD'))->whereBetween('history.time', $start, $end)->count('healthcare2016531124515424_static_html');

   		$query['chronic_hyderabad'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic' , 'doc_data.widget_data.page2.Review Info.Status' => 'Hospitalized' , 'doc_data.widget_data.page2.Hospital Info.District Name' => 'HYDERABAD'))->whereBetween('history.time', $start, $end)->count('healthcare2016531124515424_static_html');

		$query['normal_other_districts'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal', 'doc_data.widget_data.page2.Review Info.Status' => 'Hospitalized' ))->whereNe('doc_data.widget_data.page2.Hospital Info.District Name' , 'HYDERABAD')->whereBetween('history.time', $start, $end)->count('healthcare2016531124515424_static_html');

		$query['emergency_other_districts'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency' ,'doc_data.widget_data.page2.Review Info.Status' => 'Hospitalized' ))->whereNe('doc_data.widget_data.page2.Hospital Info.District Name' , 'HYDERABAD')->whereBetween('history.time', $start, $end)->count('healthcare2016531124515424_static_html');

		$query['chronic_other_districts'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic' ,'doc_data.widget_data.page2.Review Info.Status' => 'Hospitalized' ))->whereNe('doc_data.widget_data.page2.Hospital Info.District Name' , 'HYDERABAD')->whereBetween('history.time', $start, $end)->count('healthcare2016531124515424_static_html');

	return $query;
}

/*Today glance for new dashboard*/
public function get_quick_glance_label_counts_model($today_date)
{
	 
	$data['fo_out_patient_count'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.Out Patient.hospialt_name' => array('$ne' => ''),'history.last_stage.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->count('field_officer_report');	 

	$data['fo_emergency_count'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.Emergency or Admitted.hospialt_name' => array('$ne' => ''),'history.last_stage.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->count('field_officer_report');

	$data['fo_review_cases_count'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.Review Cases.hospialt_name' => array('$ne' => ''),'history.last_stage.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->count('field_officer_report');

	$data['aneamia_cases_count'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Blood' =>  'Anemia','history.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->count('healthcare2016531124515424_static_html');

	$data['doctor_visiting_count']   = $this->mongo_db->select(array("doc_data.widget_data.school_details.School Name"))->where(array('history.last_stage.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->get('doctor_visiting_reports');

	$all_schools = [];

	foreach ($data['doctor_visiting_count'] as $school) {
			
				$school_name  = $school['doc_data']['widget_data']['school_details']['School Name'];

				//echo print_r($school_name, true); exit();
				
				if(in_array($school_name, $all_schools)){

				}else{

					array_push($all_schools, $school_name);
				}
		}
		
		$data['count'] = count($all_schools);

	$data['surgery_needed_counts'] = $this->mongo_db->select(array())->where(array('doc_data.widget_data.page2.Review Info.Status' => 'Surgery-Needed','history.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->count('healthcare2016531124515424_static_html');
	//echo print_r($data['surgery_needed_counts'], true); exit;

	return $data;	

}

/* Emergency STudents carousal for new dashboard*/
public function get_data_for_emergency_carousel($date)
{
	$students = [];
	
	$query = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Request Type','Emergency')->whereLike('history.0.time',$date )->get('healthcare2016531124515424_static_html');

	foreach ($query as $p_data) {
		$ss = $p_data['doc_data']['widget_data']['page1']['Student Info']['Unique ID'];
		$data['uniqid'] = $ss;
		$data['name'] = $p_data['doc_data']['widget_data']['page1']['Student Info']['Name']['field_ref'];
		
		$data['discription'] = $p_data['doc_data']['widget_data']['page2']['Problem Info']['Description'];
		
		$get_pic = $this->mongo_db->select(array('doc_data.widget_data.page1.Personal Information.Photo'))->where('doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $ss)->get('healthcare2016226112942701');
		foreach ($get_pic as $pic) {
			$pic_check = $pic['doc_data']['widget_data']['page1']['Personal Information']['Photo'];
			if(isset($pic_check['file_path']) && !empty($pic_check['file_path'])){
				$data['pics'] = $pic_check['file_path'];
				array_push($students, $data);
			}else{
				array_push($students, $data);
			}
		}
	}
		
	return $students;
}

//Followupdate alert

public function get_today_followup_dates_alert($date)
{
	$follow = $this->mongo_db->select(array('regular_follow_up'))->where(array('regular_follow_up.Follow_Up'=>array('$exists'=>true)))->get($this->request_app_col_static_html);

	$count = 0;

	foreach($follow as $fol){
		
		$end_data = end($fol['regular_follow_up']['Follow_Up']);
		
		$date = $end_data['next_scheduled_date'];

		$today = date('Y-m-d');

		if($today == $date){
			$count++;
		}
	}

	return $count;

}

/*HB overall bar for new dashboard*/
public function get_hb_overall_data_count_model($start,$end)
{  

	//$today_date = substr($today_date,0,-3);
			
	$query['very_severe'] = $this->mongo_db->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereLte('doc_data.widget_data.page1.Student Details.HB_latest.hb',6)->count('himglobin_report_col');

	$query['severe'] = $this->mongo_db->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb', 6.1,8)->count('himglobin_report_col');

   	$query['moderate'] = $this->mongo_db->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',8.1,10)->count('himglobin_report_col');

   	$query['mild'] = $this->mongo_db->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',10.1,11.9)->count('himglobin_report_col');

   	$query['normal'] = $this->mongo_db->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',12,18)->count('himglobin_report_col');   	

			

		return $query;

	}

	/*HB Overall student data*/
public function get_hb_overall_data_table_model($start,$end, $hb_type)
	{  
		$all_schools = [];
		$school_name = [];
       
			
	if($hb_type == 'VERY SEVERE') {
		

        $query = $this->mongo_db->select(array('doc_data.widget_data.school_details.School Name'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereLte('doc_data.widget_data.page1.Student Details.HB_latest.hb',6)->get('himglobin_report_col');
       		

        foreach ($query as $school) {
           $school_name  = $school['doc_data']['widget_data']['school_details']['School Name'];
           array_push($all_schools, $school_name);
        }

        $data = array_count_values($all_schools);
        

	}elseif ($hb_type == 'SEVERE') {

			
        $query = $this->mongo_db->select(array('doc_data.widget_data.school_details.School Name'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb', 6.1,8)->get('himglobin_report_col');        			

            foreach ($query as $school) {
           $school_name  = $school['doc_data']['widget_data']['school_details']['School Name'];
           array_push($all_schools, $school_name);
        		}

        $data = array_count_values($all_schools);

	}elseif ($hb_type == 'MODERATE') {
			

        $query = $this->mongo_db->select(array('doc_data.widget_data.school_details.School Name'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',8.1,10)->get('himglobin_report_col');
        		
               foreach ($query as $school) {
           $school_name  = $school['doc_data']['widget_data']['school_details']['School Name'];
           array_push($all_schools, $school_name);
        }

        $data = array_count_values($all_schools);

			}elseif ($hb_type == 'MILD') {
				
        $query = $this->mongo_db->select(array('doc_data.widget_data.school_details.School Name'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',10.1,11.9)->get('himglobin_report_col');        			

                foreach ($query as $school) {
           $school_name  = $school['doc_data']['widget_data']['school_details']['School Name'];
           array_push($all_schools, $school_name);
        		}

        $data = array_count_values($all_schools);

			}elseif ($hb_type == 'NORMAL') {
				
        $query = $this->mongo_db->select(array('doc_data.widget_data.school_details.School Name'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',12,18)->get('himglobin_report_col');        			

                foreach ($query as $school) {
           $school_name  = $school['doc_data']['widget_data']['school_details']['School Name'];
           array_push($all_schools, $school_name);
        		}

        $data = array_count_values($all_schools);

			}

		return $data;

	}

	public function get_hb_overall_students_data_table_model($start_hb,$end_hb, $hb_type, $school_name)
	    {  			            
	            
	     if($hb_type == 'VERY SEVERE') {       

        $query = $this->mongo_db->where(array('doc_data.widget_data.school_details.School Name' => $school_name))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start_hb, $end_hb)->whereLte('doc_data.widget_data.page1.Student Details.HB_latest.hb',6)->get('himglobin_report_col');                      

    }elseif ($hb_type == 'SEVERE') {           

        $query = $this->mongo_db->where(array('doc_data.widget_data.school_details.School Name' => $school_name))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start_hb, $end_hb)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',  6.1,8)->get('himglobin_report_col');                   

    }elseif ($hb_type == 'MODERATE') {           

        $query = $this->mongo_db->where(array('doc_data.widget_data.school_details.School Name' => $school_name))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start_hb, $end_hb)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb', 8.1,10)->get('himglobin_report_col');                   

    }elseif ($hb_type == 'MILD') {              

        $query = $this->mongo_db->where(array('doc_data.widget_data.school_details.School Name' => $school_name ))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start_hb, $end_hb)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',10.1,11.9)->get('himglobin_report_col');                  

            }elseif ($hb_type == 'NORMAL') {               

        $query = $this->mongo_db->where(array('doc_data.widget_data.school_details.School Name' => $school_name))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start_hb, $end_hb)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',12,18)->get('himglobin_report_col');                    

            }

        return $query;

    }


/*HB bar for new dashboard gender wise*/
public function get_hb_gender_wise_data_count_model($start,$end)
{  

	//$today_date = substr($today_date,0,-3);
			
	$query['severe_male'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereLte('doc_data.widget_data.page1.Student Details.HB_latest.hb',8)->count('himglobin_report_col');

	$query['moderate_male'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb', 8,10)->count('himglobin_report_col');

   	$query['mild_male'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',10.1,12)->count('himglobin_report_col');

   	$query['normal_male'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',12,18)->count('himglobin_report_col');

	$query['severe_female'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereLte('doc_data.widget_data.page1.Student Details.HB_latest.hb',8)->count('himglobin_report_col');

	$query['moderate_female'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb', 8,10)->count('himglobin_report_col');

	$query['mild_female'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',10.1,12)->count('himglobin_report_col');

	$query['normal_female'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',12,18)->count('himglobin_report_col');		

		return $query;

	}
/*BMI bar for new dahsboard */
public function get_bmi_gender_wise_data_count_model($start,$end)
{  
		
	$query['under_weight_male'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male'))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start, $end)->whereLte('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',18.50)->count('healthcare2017617145744625');

	$query['over_weight_male'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male'))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 25,29.99)->count('healthcare2017617145744625');

   	$query['obese_male'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male'))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start, $end)->whereGte('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',30.00)->count('healthcare2017617145744625');

   $query['normal_weight_male'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male'))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',18.50,24.99)->count('healthcare2017617145744625');

	$query['under_weight_female'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female'))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start, $end)->whereLte('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 18.50)->count('healthcare2017617145744625');

	$query['over_weight_female'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female'))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 25,29.99)->count('healthcare2017617145744625');

	$query['obese_female'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female'))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start, $end)->whereGte('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',30.00)->count('healthcare2017617145744625');

	$query['normal_weight_female'] = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female'))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi',18.50,24.99)->count('healthcare2017617145744625');
	
	return $query;
}

	public function get_bmi_gender_wise_students_data_table_model($start_bmi,$end_bmi, $bmi_type, $bmi_gender, $school_name)
		{  	
		
		if($bmi_type == 'UNDER') {
	  
			if($bmi_gender == 'Male'){

	   			$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male' ,'doc_data.widget_data.school_details.School Name' => $school_name))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start_bmi, $end_bmi)->whereLte('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 18.50)->get('healthcare2017617145744625');

	        			}else{

	        $query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female' ,'doc_data.widget_data.school_details.School Name' => $school_name ))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start_bmi, $end_bmi)->whereLte('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 18.50)->get('healthcare2017617145744625');
	                }
	               

		}elseif ($bmi_type == 'OVER') {

				if($bmi_gender == 'Male'){

	        $query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male' ,'doc_data.widget_data.school_details.School Name' => $school_name))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start_bmi, $end_bmi)->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 25,29.99)->get('healthcare2017617145744625');

	        			}else{
	        	
	        $query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female','doc_data.widget_data.school_details.School Name' => $school_name ))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start_bmi, $end_bmi)->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 25,29.99)->get('healthcare2017617145744625');
	                }

	              

		}elseif ($bmi_type == 'OBESE') {

					if($bmi_gender == 'Male'){

	        $query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male' ,'doc_data.widget_data.school_details.School Name' => $school_name))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start_bmi, $end_bmi)->whereGte('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 30.00)->get('healthcare2017617145744625');

	        			}else{
	        	
	        $query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female','doc_data.widget_data.school_details.School Name' => $school_name ))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start_bmi, $end_bmi)->whereGte('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 30.00)->get('healthcare2017617145744625');
	              }


				}elseif ($bmi_type == 'NORMAL') {

					if($bmi_gender == 'Male'){

	        $query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male' ,'doc_data.widget_data.school_details.School Name' => $school_name))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start_bmi, $end_bmi)->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 18.50,24.99)->get('healthcare2017617145744625');

	        			}else{
	        	
	        $query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female','doc_data.widget_data.school_details.School Name' => $school_name ))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start_bmi, $end_bmi)->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 18.50,24.99)->get('healthcare2017617145744625');
	              }
	              	         
	          }

			return $query;

		}

/*Db Creation*/

public function refresh_for_create_db_school_zone_status($selected_opt, $district, $scl_zone, $type)
{
	if($selected_opt == 'Scabies'){
		$data = $this->get_school_status_based_on_scabies($district, $type, $scl_zone);


		$doc_data['widget_data']['academic year'] = '2019-2020';
		$doc_data['widget_data']['problem'] = $selected_opt;
		$doc_data['widget_data']['date'] = date('Y-m-d');
		$doc_data['widget_data']['counts'] = $data;
		
		$pass = array('doc_data'=>$doc_data);

		$insert = $this->mongo_db->insert('school_health_status_counts', $pass);

	}else if($selected_opt == 'Abnormalities'){
		$data = $this->get_school_status_based_on_abnormal($district, $type, $scl_zone);


		$doc_data['widget_data']['academic year'] = '2019-2020';
		$doc_data['widget_data']['problem'] = $selected_opt;
		$doc_data['widget_data']['date'] = date('Y-m-d');
		$doc_data['widget_data']['counts'] = $data;
		
		$pass = array('doc_data'=>$doc_data);

		$insert = $this->mongo_db->insert('school_health_status_counts', $pass);


	}else if($selected_opt == 'Bites'){
		$data = $this->get_school_status_based_on_bites($district, $type, $scl_zone);

		$doc_data['widget_data']['academic year'] = '2019-2020';
		$doc_data['widget_data']['problem'] = $selected_opt;
		$doc_data['widget_data']['date'] = date('Y-m-d');
		$doc_data['widget_data']['counts'] = $data;
		$pass = array('doc_data'=>$doc_data);

		$insert = $this->mongo_db->insert('school_health_status_counts', $pass);

	}else if($selected_opt == 'HB'){
		$data = $this->get_school_status_based_on_hb($district, $type, $scl_zone);

		$doc_data['widget_data']['academic year'] = '2019-2020';
		$doc_data['widget_data']['problem'] = $selected_opt;
		$doc_data['widget_data']['date'] = date('Y-m-d');
		$doc_data['widget_data']['counts'] = $data;
		
		$pass = array('doc_data'=>$doc_data);

		$insert = $this->mongo_db->insert('school_health_status_counts', $pass);

	} elseif($selected_opt == 'BMI'){
		$data = $this->get_school_status_based_on_bmi($district, $type, $scl_zone);


		$doc_data['widget_data']['academic year'] = '2019-2020';
		$doc_data['widget_data']['problem'] = $selected_opt;
		$doc_data['widget_data']['date'] = date('Y-m-d');
		$doc_data['widget_data']['counts'] = $data;

		$pass = array('doc_data'=>$doc_data);

		$insert = $this->mongo_db->insert('school_health_status_counts', $pass);

	}


	return $insert;
}

public function get_schools_satus_for_dashboard_for_all($selected_opt)
{
	$query = $this->mongo_db->limit(1)->select(array('doc_data.widget_data.counts'))->where('doc_data.widget_data.problem', $selected_opt)->orderBy(array('doc_data.widget_data.date'=> -1))->get('school_health_status_counts');

	return $query;
}

/*School health status based on Problems*/
public function get_schools_satus_for_dashboard($selected_opt, $district, $scl_zone, $type)
{
	if($selected_opt == 'Scabies'){
		$data = $this->get_school_status_based_on_scabies($district, $type, $scl_zone);
	}else if($selected_opt == 'Abnormalities'){
		$data = $this->get_school_status_based_on_abnormal($district, $type, $scl_zone);
	}else if($selected_opt == 'Bites'){
		$data = $this->get_school_status_based_on_bites($district, $type, $scl_zone);
	}else if($selected_opt == 'HB'){
		$data = $this->get_school_status_based_on_hb($district, $type, $scl_zone);
	} elseif($selected_opt == 'BMI'){
		$data = $this->get_school_status_based_on_bmi($district, $type, $scl_zone);
	}


	return $data;
}

/*public function save_for_school_counts_db($scab_all)
{
	$scabies_all = array(
				"doc_data.Scabies"=> array("All" => $scab_all);
			);
	$scabies_dist = array(
		"doc_data.Scabies"=> array("All" => $scab_all);
	);

}
*/
public function get_school_status_based_on_scabies($district, $type, $scl_zone= FALSE)
{
	//$total_count = [];
	$red = [];
	$orange = [];
	$green = [];

	$all_schools_name = array();
	$schools_list = $this->get_all_schools_student_type_with_district($district);
	foreach ($schools_list as $school_data) {
		array_push($all_schools_name, $school_data['school_name']);
	}

	
	foreach ($all_schools_name as $school) {
		$scabies_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Skin' => 'Scabies','doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->count('healthcare2016531124515424_static_html');


		if($type == 'for_count'){
			if($scabies_count_doc > 5){
				$zone = $school;
				//$zon['count'] = $scabies_count_doc;
				array_push($red, $zone);
			}elseif (($scabies_count_doc >2) && ($scabies_count_doc <5)) {
				$zone = $school;
				//$zone['count'] = $scabies_count_doc;
				array_push($orange, $zone);
			}else{
				$zone = $school;
				//$zone['count'] = $scabies_count_doc;
				array_push($green, $zone);
			}

		}else{

			if($scabies_count_doc > 5){
				$zone['scl'] = $school;
				$zone['count'] = $scabies_count_doc;
				//$zon['count'] = $scabies_count_doc;
				array_push($red, $zone);
			}elseif (($scabies_count_doc >2) && ($scabies_count_doc <5)) {
				$zone['scl'] = $school;
				$zone['count'] = $scabies_count_doc;
				//$zone['count'] = $scabies_count_doc;
				array_push($orange, $zone);
			}else{
				$zone['scl'] = $school;
				$zone['count'] = $scabies_count_doc;
				//$zone['count'] = $scabies_count_doc;
				array_push($green, $zone);
			}

		}
		
	}

	if($type == 'for_count'){
		$final['red'] = sizeof($red);
		$final['orange'] = sizeof($orange);
		$final['green'] = sizeof($green);

		/*$scab_all['red'] = sizeof($red);
		$scab_all['orange'] = sizeof($orange);
		$scab_all['green'] = sizeof($green);

		save_for_school_counts_db($scab_all);*/
	}else{
		if($scl_zone == 'Red Zone'){
			$final = $red;
		}elseif ($scl_zone == 'Orange Zone') {
			$final = $orange;
		}elseif ($scl_zone == 'Green Zone') {
			$final = $green;
		}
		
		
	}
	

	//array_push($total_count, $final);

	return $final;
}

public function get_school_status_based_on_abnormal($district, $type, $scl_zone= FALSE)
{
	$red = [];
	$orange = [];
	$green = [];

	$all_schools_name = array();
	$schools_list = $this->get_all_schools_student_type_with_district($district);
	foreach ($schools_list as $school_data) {
		array_push($all_schools_name, $school_data['school_name']);
	}

	foreach ($all_schools_name as $school) {
		
		$abdominal_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Normal.Gastro_intestinal' =>'Abdominal Pain','doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->count('healthcare2016531124515424_static_html');

		$vomitings_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Normal.Gastro_intestinal' => 'Vomitings','doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->count('healthcare2016531124515424_static_html');
		
		$diarrhoea_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Normal.Gastro_intestinal' => 'Diarrhoea','doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->count('healthcare2016531124515424_static_html');
		
		$total = $abdominal_count_doc+$vomitings_count_doc+$diarrhoea_count_doc;

		
		if($type == 'for_count'){

			if($total > 6){
				$zone = $school;
				//$zon['count'] = $scabies_count_doc;
				array_push($red, $zone);
			}elseif (($total >2) && ($total <5)) {
				$zone = $school;
				//$zone['count'] = $scabies_count_doc;
				array_push($orange, $zone);
			}else{
				$zone = $school;
				//$zone['count'] = $scabies_count_doc;
				array_push($green, $zone);
			}

		}else{

			if($total > 6){
				$zone['scl'] = $school;
				$zone['count'] = $total;
				//$zon['count'] = $scabies_count_doc;
				array_push($red, $zone);
			}elseif (($total >2) && ($total <5)) {
				$zone['scl'] = $school;
				$zone['count'] = $total;
				//$zone['count'] = $scabies_count_doc;
				array_push($orange, $zone);
			}else{
				$zone['scl'] = $school;
				$zone['count'] = $total;
				//$zone['count'] = $scabies_count_doc;
				array_push($green, $zone);
			}

		}

		
	}

	if($type == 'for_count'){
		$final['red'] = sizeof($red);
		$final['orange'] = sizeof($orange);
		$final['green'] = sizeof($green);

	}else{
		if($scl_zone == 'Red Zone'){
			$final = $red;
		}elseif ($scl_zone == 'Orange Zone') {
			$final = $orange;
		}elseif ($scl_zone == 'Green Zone') {
			$final = $green;
		}
		
		
	}
	
	return $final;

}

public function get_school_status_based_on_bites($district, $type, $scl_zone= FALSE)
{
	$red = [];
	$orange = [];
	$green = [];

	$all_schools_name = array();
	$schools_list = $this->get_all_schools_student_type_with_district($district);
	foreach ($schools_list as $school_data) {
		array_push($all_schools_name, $school_data['school_name']);
	}
	foreach ($all_schools_name as $school) {
		$scorpion_bite_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Emergency.Bites' =>'Scorpion','doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->count('healthcare2016531124515424_static_html');

		$snake_bite_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Emergency.Bites' => 'Snake','doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->count('healthcare2016531124515424_static_html');

		$honeybee_bite_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Emergency.Bites' => 'Honey Bee','doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->count('healthcare2016531124515424_static_html');

		$total = $scorpion_bite_count_doc+$snake_bite_count_doc+$honeybee_bite_count_doc;

		

		if($type == 'for_count'){

			if($total > 6){
						$zone = $school;
						//$zon['count'] = $scabies_count_doc;
						array_push($red, $zone);
					}elseif (($total >2) && ($total <6)) {
						$zone = $school;
						//$zone['count'] = $scabies_count_doc;
						array_push($orange, $zone);
					}else{
						$zone = $school;
						//$zone['count'] = $scabies_count_doc;
						array_push($green, $zone);
					}

		}else{

			if($total > 6){
				$zone['scl'] = $school;
				$zone['count'] = $total;
				//$zon['count'] = $scabies_count_doc;
				array_push($red, $zone);
			}elseif (($total >2) && ($total <6)) {
				$zone['scl'] = $school;
				$zone['count'] = $total;
				//$zone['count'] = $scabies_count_doc;
				array_push($orange, $zone);
			}else{
				$zone['scl'] = $school;
				$zone['count'] = $total;
				//$zone['count'] = $scabies_count_doc;
				array_push($green, $zone);
			}


		}


	}

	if($type == 'for_count'){
		$final['red'] = sizeof($red);
		$final['orange'] = sizeof($orange);
		$final['green'] = sizeof($green);

	}else{
		if($scl_zone == 'Red Zone'){
			$final = $red;
		}elseif ($scl_zone == 'Orange Zone') {
			$final = $orange;
		}elseif ($scl_zone == 'Green Zone') {
			$final = $green;
		}
		
		
	}

	return $final;

}

public function get_school_status_based_on_hb($district, $type, $scl_zone= FALSE)
{
	$red = [];
	$orange = [];
	$green = [];

	$all_schools_name = array();
	$schools_list = $this->get_all_schools_student_type_with_district($district);
	foreach ($schools_list as $school_data) {
		array_push($all_schools_name, $school_data['school_name']);
	}
	foreach ($all_schools_name as $school) {

		$severe_hb_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$lte' => 8.0),'doc_data.widget_data.school_details.School Name' => $school))->count($this->hb_app_col);
		
		$moderate_hb_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$gte' => 8.1, '$lte' => 10.0),'doc_data.widget_data.school_details.School Name' => $school))->count($this->hb_app_col);


		$mild_hb_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.HB_latest.hb' => array('$gte' => 10.1, '$lte' => 12.0),'doc_data.widget_data.school_details.School Name' => $school))->count($this->hb_app_col);


		$total = $severe_hb_count_doc+$moderate_hb_count_doc+$mild_hb_count_doc;

		$anemics = $severe_hb_count_doc+$moderate_hb_count_doc;


		if($type == 'for_count'){

			if($severe_hb_count_doc > 6 || $anemics > 10){
				$zone = $school;
				//$zon['count'] = $scabies_count_doc;
				array_push($red, $zone);
			}elseif ($total >25) {
				$zone = $school;
				//$zone['count'] = $scabies_count_doc;
				array_push($orange, $zone);
			}else{
				$zone = $school;
				//$zone['count'] = $scabies_count_doc;
				array_push($green, $zone);
			}

		}else{

			if($severe_hb_count_doc > 6 || $anemics > 10){
				$zone['scl'] = $school;
				$zone['count'] = $total;
				//$zon['count'] = $scabies_count_doc;
				array_push($red, $zone);
			}elseif ($total >25) {
				$zone['scl'] = $school;
				$zone['count'] = $total;
				//$zone['count'] = $scabies_count_doc;
				array_push($orange, $zone);
			}else{
				$zone['scl'] = $school;
				$zone['count'] = $total;
				//$zone['count'] = $scabies_count_doc;
				array_push($green, $zone);
			}

		}

	}

	if($type == 'for_count'){
		$final['red'] = sizeof($red);
		$final['orange'] = sizeof($orange);
		$final['green'] = sizeof($green);

	}else{
		if($scl_zone == 'Red Zone'){
			$final = $red;
		}elseif ($scl_zone == 'Orange Zone') {
			$final = $orange;
		}elseif ($scl_zone == 'Green Zone') {
			$final = $green;
		}
		
		
	}

	return $final;

}

public function get_school_status_based_on_bmi($district, $type, $scl_zone= FALSE)
{
	$red = [];
	$orange = [];
	$green = [];

	$all_schools_name = array();
	$schools_list = $this->get_all_schools_student_type_with_district($district);
	foreach ($schools_list as $school_data) {
		array_push($all_schools_name, $school_data['school_name']);
	}
	foreach ($all_schools_name as $school) {

		$under_weight_bmi_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => array('$lte' => 18.50),'doc_data.widget_data.school_details.School Name' => $school))->count($this->bmi_app_col);

		$over_weight_bmi_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => array('$gte' => 25.00, '$lte' => 29.99),'doc_data.widget_data.school_details.School Name' => $school))->count($this->bmi_app_col);

		$obese_weight_bmi_count_doc = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.BMI_latest.bmi' => array('$gte' => 30.00),'doc_data.widget_data.school_details.School Name' => $school))->count($this->bmi_app_col);

		$total = $under_weight_bmi_count_doc+$over_weight_bmi_count_doc+$obese_weight_bmi_count_doc;

		$sever = $under_weight_bmi_count_doc+$obese_weight_bmi_count_doc;

		
		if($type == 'for_count'){

			if($under_weight_bmi_count_doc > 6 || $sever > 17){
				$zone = $school;
				//$zon['count'] = $scabies_count_doc;
				array_push($red, $zone);
			}elseif ($total >25) {
				$zone = $school;
				//$zone['count'] = $scabies_count_doc;
				array_push($orange, $zone);
			}else{
				$zone = $school;
				//$zone['count'] = $scabies_count_doc;
				array_push($green, $zone);
			}

		}else{

			if($under_weight_bmi_count_doc > 6 || $sever > 17){
				$zone['scl'] = $school;
				$zone['count'] = $total;
				//$zon['count'] = $scabies_count_doc;
				array_push($red, $zone);
			}elseif ($total >25) {
				$zone['scl'] = $school;
				$zone['count'] = $total;
				//$zone['count'] = $scabies_count_doc;
				array_push($orange, $zone);
			}else{
				$zone['scl'] = $school;
				$zone['count'] = $total;
				//$zone['count'] = $scabies_count_doc;
				array_push($green, $zone);
			}

		}
	}

	if($type == 'for_count'){
		$final['red'] = sizeof($red);
		$final['orange'] = sizeof($orange);
		$final['green'] = sizeof($green);

	}else{
		if($scl_zone == 'Red Zone'){
			$final = $red;
		}elseif ($scl_zone == 'Orange Zone') {
			$final = $orange;
		}elseif ($scl_zone == 'Green Zone') {
			$final = $green;
		}
		
		
	}

	return $final;

}
/*End school health status */

/*Hospital type data*/
public function get_hospital_type_of_bar_count_model($start,$end)
{
    $query['government'] = $this->mongo_db->where('doc_data.widget_data.page2.Hospital Info.Hospital Type', 'Government')->whereBetween('history.time', $start, $end)->count('healthcare2016531124515424_static_html');

    $query['private'] = $this->mongo_db->where('doc_data.widget_data.page2.Hospital Info.Hospital Type','Private')->whereBetween('history.time', $start, $end)->count('healthcare2016531124515424_static_html');

    $query['discharge'] = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Status','Discharged')->whereBetween('history.time', $start, $end)->count('healthcare2016531124515424_static_html');

    $query['cured'] = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.time', $start, $end)->count('healthcare2016531124515424_static_html');
     
    
    return $query;
}
		/*Chronic Pie Start*/
		/*Author === "Yoga narasimha"*/
public function get_chronic_counts_requests_pie_model()
    {        

        $requests_chronic_cases = [];

    //$req_cases = ["Epilepsy", "Asthma", "TB", "CHD", "Nephritic syndrome", "HIV", "Sickle Cell Anaemia","Anemia","Cancers","Renal Stones","Covid-19"];
            

            $not_equal_to = array ("doc_data.widget_data.page2.Review Info.Status" => array ('$ne' => "Cured"));

            $nor = $this->mongo_db->where($not_equal_to)->whereIn('doc_data.widget_data.page1.Problem Info.Chronic.Central_nervous_system', array("Epilepsy"))->count('healthcare2016531124515424_static_html');
            if($nor != 0)
            {
                $req['label'] = "Epilepsy";
                $req['value'] = $nor;
                array_push($requests_chronic_cases, $req);
            }

             $nor = $this->mongo_db->where($not_equal_to)->whereIn('doc_data.widget_data.page1.Problem Info.Chronic.Respiratory_system', array("Asthma"))->count('healthcare2016531124515424_static_html');
            if($nor != 0)
            {
                $req['label'] = "Asthma";
                $req['value'] = $nor;
                array_push($requests_chronic_cases, $req);
            }

            $nor = $this->mongo_db->where($not_equal_to)->whereIn('doc_data.widget_data.page1.Problem Info.Emergency.Disease', array("Covid-19"))->count('healthcare2016531124515424_static_html');
            if($nor != 0)
            {
                $req['label'] = "Covid-19";
                $req['value'] = $nor;
                array_push($requests_chronic_cases, $req);
            }


            $nor = $this->mongo_db->where($not_equal_to)->whereIn('doc_data.widget_data.page1.Problem Info.Chronic.Others', array("TB"))->count('healthcare2016531124515424_static_html');

      if($nor != 0)
        {
            $req['label'] = "TB";
            $req['value'] = $nor;
            array_push($requests_chronic_cases, $req);
        }


     $nor = $this->mongo_db->where($not_equal_to)->whereIn('doc_data.widget_data.page1.Problem Info.Chronic.Cardio_vascular_system', array("CHD"))->count('healthcare2016531124515424_static_html');
     
      if($nor != 0)
        {
            $req['label'] = "CHD";
            $req['value'] = $nor;
            array_push($requests_chronic_cases, $req);
        }

       $nor = $this->mongo_db->where($not_equal_to)->whereIn('doc_data.widget_data.page1.Problem Info.Chronic.Kidney', array("Nephritic syndrome"))->count('healthcare2016531124515424_static_html');
     
      if($nor != 0)
        {
            $req['label'] = "Nephritic syndrome";
            $req['value'] = $nor;
            array_push($requests_chronic_cases, $req);
        }

         $nor = $this->mongo_db->where($not_equal_to)->whereIn('doc_data.widget_data.page1.Problem Info.Chronic.Others', array("HIV"))->count('healthcare2016531124515424_static_html');

      if($nor != 0)
        {
            $req['label'] = "HIV";
            $req['value'] = $nor;
            array_push($requests_chronic_cases, $req);
        }


     $nor = $this->mongo_db->where($not_equal_to)->whereIn('doc_data.widget_data.page1.Problem Info.Chronic.Blood', array("Sickle Cell Anemia"))->count('healthcare2016531124515424_static_html');
     
      if($nor != 0)
        {
            $req['label'] = "Sickle Cell Anemia";
            $req['value'] = $nor;
            array_push($requests_chronic_cases, $req);
        }

       $nor = $this->mongo_db->where($not_equal_to)->whereIn('doc_data.widget_data.page1.Problem Info.Chronic.Blood', array("Anemia"))->count('healthcare2016531124515424_static_html');
     
      if($nor != 0)
        {
            $req['label'] = "Anemia";
            $req['value'] = $nor;
            array_push($requests_chronic_cases, $req);
        }

     $nor = $this->mongo_db->where($not_equal_to)->whereIn('doc_data.widget_data.page1.Problem Info.Chronic.Skin', array("Cancers"))->count('healthcare2016531124515424_static_html');

      if($nor != 0)
        {
            $req['label'] = "Cancers";
            $req['value'] = $nor;
            array_push($requests_chronic_cases, $req);
        }		

      $nor = $this->mongo_db->where($not_equal_to)->whereIn('doc_data.widget_data.page1.Problem Info.Chronic.Endo', array("Hypothyroidism"))->count('healthcare2016531124515424_static_html');

      if($nor != 0)      	
        {
            $req['label'] = "Hypothyroidism";
            $req['value'] = $nor;
            array_push($requests_chronic_cases, $req);
        }
    
        return $requests_chronic_cases;
    }

   /*Chronic Pie End*/

    /*Chronic Students List Start*/
public function get_chronic_students_from_pie_model($symptom)
{			

		$not_equal_to = array ("doc_data.widget_data.page2.Review Info.Status" => array ('$ne' => "Cured"));

	switch ($symptom) {

 		case 'Epilepsy':

		$chronic_query = $this->mongo_db->where($not_equal_to)->where("doc_data.widget_data.page1.Problem Info.Chronic.Central_nervous_system" , $symptom)->get("healthcare2016531124515424_static_html");

  		return $chronic_query;
         break;

		case 'Asthma':

		$chronic_query = $this->mongo_db->where($not_equal_to)->where("doc_data.widget_data.page1.Problem Info.Chronic.Respiratory_system" , $symptom)->get("healthcare2016531124515424_static_html");

		  return $chronic_query;
		         break;
		         
		case 'HIV':

		$chronic_query = $this->mongo_db->where($not_equal_to)->where("doc_data.widget_data.page1.Problem Info.Chronic.Others" , $symptom)->get("healthcare2016531124515424_static_html");

		  return $chronic_query;
		         break;

		case 'TB':

		$chronic_query = $this->mongo_db->where($not_equal_to)->where("doc_data.widget_data.page1.Problem Info.Chronic.Others" , $symptom)->get("healthcare2016531124515424_static_html");

		  return $chronic_query;
		         break;

		case 'Anemia':

		$chronic_query = $this->mongo_db->where($not_equal_to)->where("doc_data.widget_data.page1.Problem Info.Chronic.Blood" , $symptom)->get("healthcare2016531124515424_static_html");

		  return $chronic_query;
		         break;

		case 'Sickle Cell Anemia':

		$chronic_query = $this->mongo_db->where($not_equal_to)->where("doc_data.widget_data.page1.Problem Info.Chronic.Blood" , $symptom)->get("healthcare2016531124515424_static_html");

		  return $chronic_query;
		         break;

		case 'Cancers':

		$chronic_query = $this->mongo_db->where($not_equal_to)->where("doc_data.widget_data.page1.Problem Info.Chronic.Skin" , $symptom)->get("healthcare2016531124515424_static_html");

		  return $chronic_query;
		         break;

		case 'CHD':

		$chronic_query = $this->mongo_db->where($not_equal_to)->where("doc_data.widget_data.page1.Problem Info.Chronic.Cardio_vascular_system" , $symptom)->get("healthcare2016531124515424_static_html");

		  return $chronic_query;
		         break;

		case 'Nephrotic Syndrome':

		$chronic_query = $this->mongo_db->where($not_equal_to)->where("doc_data.widget_data.page1.Problem Info.Chronic.Kidney" , $symptom)->get("healthcare2016531124515424_static_html");

		  return $chronic_query;
		         break;

		case 'Covid-19':

		$chronic_query = $this->mongo_db->where($not_equal_to)->where("doc_data.widget_data.page1.Problem Info.Emergency.Disease" , $symptom)->get("healthcare2016531124515424_static_html");

		  return $chronic_query;
		         break;

		case 'Hypothyroidism':

		$chronic_query = $this->mongo_db->where($not_equal_to)->where("doc_data.widget_data.page1.Problem Info.Chronic.Endo" , $symptom)->get("healthcare2016531124515424_static_html");

		  return $chronic_query;
		         break;


		}
	
}


    /*Chronic Students List End*/

/*Total COunts Requests Pie*/
public function get_total_counts_requests_pie($academic_year, $district_name, $school_name, $gender_type)
{

	if($academic_year == '2015-2016'){
		$start_date = '2015-05-20';
		$end_date = '2016-05-20';
	}elseif($academic_year == '2016-2017'){
		$start_date = '2016-05-21';
		$end_date = '2017-05-20';
	}elseif ($academic_year == '2017-2018') {
		$start_date = '2017-05-21';
		$end_date = '2018-05-20';
	}elseif ($academic_year == '2018-2019') {
		$start_date = '2018-05-21';
		$end_date = '2019-05-20';
	}elseif ($academic_year == '2019-2020') {
		$start_date = '2019-05-21';
		$end_date = '2020-05-20';
	}

	if($district_name == 'All' && $school_name == 'All'){
		$query['normal'] = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Request Type', 'Normal')->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->count('healthcare2016531124515424_static_html');

		$query['emergency'] = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Request Type','Emergency')->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->count('healthcare2016531124515424_static_html');

		$query['chronic'] = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Request Type','Chronic')->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->count('healthcare2016531124515424_static_html');
		$query['cured'] = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->count('healthcare2016531124515424_static_html');

	}else if ($district_name !== 'All' && $school_name == 'All'){
		$query['normal'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal' , 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district_name))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->count('healthcare2016531124515424_static_html');

		$query['emergency'] =  $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency' , 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district_name))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->count('healthcare2016531124515424_static_html');

		$query['chronic'] =  $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic' , 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district_name))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->count('healthcare2016531124515424_static_html');

		$query['cured'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Status' => 'Cured' , 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district_name))->whereBetween('history.0.time', $start_date, $end_date)->count('healthcare2016531124515424_static_html');


	}else if($district_name != 'All' && $school_name != 'All'){
		$query['normal'] = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Request Type', 'Normal')->where('doc_data.widget_data.page1.Student Info.School Name.field_ref' ,$school_name)->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->count('healthcare2016531124515424_static_html');

		$query['emergency'] = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Request Type','Emergency')->where('doc_data.widget_data.page1.Student Info.School Name.field_ref' ,$school_name)->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->count('healthcare2016531124515424_static_html');

		$query['chronic'] = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Request Type','Chronic')->where('doc_data.widget_data.page1.Student Info.School Name.field_ref' ,$school_name)->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->count('healthcare2016531124515424_static_html');

		$query['cured'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Status' => 'Cured' , 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->whereBetween('history.0.time', $start_date, $end_date)->count('healthcare2016531124515424_static_html');

	}

 
  return $query;

}

/*Toget daily Health Requests Table*/
public function to_daily_health_request($date, $request_type,  $school_name, $district) 
{
	if($district == 'All' && $school_name == 'All')
	{
		switch ($request_type) {
			case 'Normal':
				$query = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Request Type', 'Normal')->whereLike('history.0.time', $date)->get('healthcare2016531124515424_static_html');
				return $query;
				break;
			case 'Emergency':
				$query = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Request Type','Emergency')->whereLike('history.0.time', $date)->get('healthcare2016531124515424_static_html');
				return $query;
				break;
			case 'Chronic':
				$query = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Request Type','Chronic')->whereLike('history.0.time', $date)->get('healthcare2016531124515424_static_html');
				return $query;
				break;
			
			default:
				# code...
				break;
		}

	}elseif ($district != 'All' && $school_name == 'All') {
		switch ($request_type) {
			case 'Normal':
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereLike('history.0.time', $date)->get('healthcare2016531124515424_static_html');
				return $query;
				break;
			case 'Emergency':
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereLike('history.0.time', $date)->get('healthcare2016531124515424_static_html');
				return $query;
				break;
			case 'Chronic':
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic', 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district))->whereLike('history.0.time', $date)->get('healthcare2016531124515424_static_html');
				return $query;
				break;
			
			default:
				# code...
				break;
		}
	}elseif ($district != 'All' && $school_name != 'All') {
		switch ($request_type) {
			case 'Normal':
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->whereLike('history.0.time', $date)->get('healthcare2016531124515424_static_html');
				return $query;
				break;
			case 'Emergency':
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->whereLike('history.0.time', $date)->get('healthcare2016531124515424_static_html');
				return $query;
				break;
			case 'Chronic':
				$query = $this->mongo_db->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic', 'doc_data.widget_data.page1.Student Info.School Name.field_ref' => $school_name))->whereLike('history.0.time', $date)->get('healthcare2016531124515424_static_html');
				return $query;
				break;
			
			default:
				# code...
				break;
		}
	}

}

public function get_doc_res_students_daily_req($date, $doc_name)
{
	$doc_res = [];
	$exists_doctor = array('history.submitted_by' => array('$regex' => 'panacea.dr'),'history.current_stage' => 'Doctor','history.time'=>array('$regex' => $date));
	$docs = $this->mongo_db->select(array('history', 'doc_data.widget_data'))->where($exists_doctor)->get($this->request_app_col_static_html);

	foreach ($docs as $data) {
		$his = end($data['history']);

		if($his['current_stage'] == "Doctor"){
			if($his['submitted_by_name']== $doc_name){
				array_push($doc_res, $data);
			}
			
			
		}
		
	}


	return $doc_res;

}

public function get_daily_doc_response_with_name($date, $request_type,  $school_name, $district)
{
	$doc_names = [];
	if($district == 'All' && $school_name == 'All'){

		$exists_doctor = array('history.submitted_by' => array('$regex' => 'panacea.dr'),'history.current_stage' => 'Doctor','history.time'=>array('$regex' => $date));
		$docs = $this->mongo_db->select(array('history'))->where($exists_doctor)->get($this->request_app_col_static_html);

		foreach ($docs as $data) {
			$his = end($data['history']);

			if($his['current_stage'] == "Doctor"){
				$docs = $his['submitted_by_name'];
				array_push($doc_names, $docs);
			}
			
		}


		$final = array_count_values($doc_names);

	
		return $final;


	}elseif ($district != 'All' && $school_name == 'All') {

		$exists_doctor = array('history.submitted_by' => array('$regex' => 'panacea.dr'),'history.current_stage' => 'Doctor','history.time'=>array('$regex' => $today_date), 'doc_data.widget_data.page1.Student Info.District.field_ref' => $district_name);
		$docs = $this->mongo_db->select(array('history'))->where($exists_doctor)->count($this->request_app_col_static_html);
		
		foreach ($docs as $data) {
			$his = end($data['history']);
			if($his['current_stage'] == "Doctor"){
				$docs = $his['submitted_by_name'];
				array_push($doc_names, $docs);
			}
		}


		$final = array_count_values($doc_names);

		
		return $final;
	}elseif ($district != 'All' && $school_name != 'All') {
		$exists_doctor = array('history.submitted_by' => array('$regex' => 'panacea.dr'),'history.current_stage' => 'Doctor','history.time'=>array('$regex' => $today_date), 'doc_data.widget_data.page1.Student Info.School Name.field_ref' =>$school_name);
		$docs = $this->mongo_db->select(array('history'))->where($exists_doctor)->count($this->request_app_col_static_html);

		foreach ($docs as $data) {
			$his = end($data['history']);
			if($his['current_stage'] == "Doctor"){
				$docs = $his['submitted_by_name'];
				array_push($doc_names, $docs);
			}
		}


		$final = array_count_values($doc_names);

		
		return $final;
	}
}

/*District wise hospitalised stundents*/
public function get_hospitalized_data_table_model($start,$end, $hospital_district, $request_type) {

	if($request_type == 'Normal'){

        	 if($hospital_district == 'HYDERABAD'){

        $query = $this->mongo_db->select(array('doc_data.widget_data', 'history.time'))->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal' , 'doc_data.widget_data.page2.Review Info.Status' => 'Hospitalized' , 'doc_data.widget_data.page2.Hospital Info.District Name' => 'HYDERABAD'))->whereBetween('history.time', $start,$end)->get('healthcare2016531124515424_static_html');
        	 }
        	else{
        $query = $this->mongo_db->select(array('doc_data.widget_data', 'history.time'))->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Normal', 'doc_data.widget_data.page2.Review Info.Status' => 'Hospitalized' ))->whereNe('doc_data.widget_data.page2.Hospital Info.District Name' , 'HYDERABAD')->whereBetween('history.time', $start,$end)->get('healthcare2016531124515424_static_html');
                }

        }elseif ($request_type == 'Emergency') {
 			
            if($hospital_district == 'HYDERABAD'){

        $query = $this->mongo_db->select(array('doc_data.widget_data', 'history.time'))->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency' , 'doc_data.widget_data.page2.Review Info.Status' => 'Hospitalized' , 'doc_data.widget_data.page2.Hospital Info.District Name' => 'HYDERABAD'))->whereBetween('history.time', $start,$end)->get('healthcare2016531124515424_static_html');
        	 }       	        	

        	else{
        $query = $this->mongo_db->select(array('doc_data.widget_data', 'history.time'))->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Emergency', 'doc_data.widget_data.page2.Review Info.Status' => 'Hospitalized' ))->whereNe('doc_data.widget_data.page2.Hospital Info.District Name' , 'HYDERABAD')->whereBetween('history.time', $start,$end)->get('healthcare2016531124515424_static_html');
                }

        }elseif ($request_type == 'Chronic'){        

          if($hospital_district == 'HYDERABAD'){

        $query = $this->mongo_db->select(array('doc_data.widget_data', 'history.time'))->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic' , 'doc_data.widget_data.page2.Review Info.Status' => 'Hospitalized' , 'doc_data.widget_data.page2.Hospital Info.District Name' => 'HYDERABAD'))->whereBetween('history.time', $start,$end)->get('healthcare2016531124515424_static_html');
        	 }
        	else{
        $query = $this->mongo_db->select(array('doc_data.widget_data', 'history.time'))->where(array('doc_data.widget_data.page2.Review Info.Request Type' => 'Chronic', 'doc_data.widget_data.page2.Review Info.Status' => 'Hospitalized' ))->whereNe('doc_data.widget_data.page2.Hospital Info.District Name' , 'HYDERABAD')->whereBetween('history.time', $start,$end)->get('healthcare2016531124515424_static_html');
                }
        }
       
        return $query;

    }

/*Hospital type students data*/
public function get_hospital_type_data_table_model($start,$end, $hospital_type)
{

    if($hospital_type == 'Government') {

      $query = $this->mongo_db->where('doc_data.widget_data.page2.Hospital Info.Hospital Type', 'Government')->whereBetween('history.time', $start, $end)->get('healthcare2016531124515424_static_html');

    }elseif ($hospital_type == 'Private') {

        $query = $this->mongo_db->where('doc_data.widget_data.page2.Hospital Info.Hospital Type','Private')->whereBetween('history.time', $start, $end)->get('healthcare2016531124515424_static_html');

    }elseif ($hospital_type == 'Discharged') {

        $query = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Status','Discharged')->whereBetween('history.time', $start, $end)->get('healthcare2016531124515424_static_html');
      
    }elseif ($hospital_type == 'Cured') {

        $query = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.time', $start, $end)->get('healthcare2016531124515424_static_html');
    }

      return $query;
}

/*HB Gender wise student data*/
public function get_hb_gender_wise_data_table_model($start,$end, $hb_type, $hb_gender)
	{  
		$all_schools = [];
		$school_name = [];
       
	//$date = substr($date,0,-3);
			
	if($hb_type == 'SEVERE') {

		if($hb_gender == 'Male'){

        $query = $this->mongo_db->select(array('doc_data.widget_data.school_details.School Name'))->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereLte('doc_data.widget_data.page1.Student Details.HB_latest.hb',8)->get('himglobin_report_col');

        			}else{

        $query = $this->mongo_db->select(array('doc_data.widget_data.school_details.School Name'))->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereLte('doc_data.widget_data.page1.Student Details.HB_latest.hb',8)->get('himglobin_report_col');
                }		

        foreach ($query as $school) {
           $school_name  = $school['doc_data']['widget_data']['school_details']['School Name'];
           array_push($all_schools, $school_name);
        }

        $data = array_count_values($all_schools);
        

	}elseif ($hb_type == 'MODERATE') {

			if($hb_gender == 'Male'){

        $query = $this->mongo_db->select(array('doc_data.widget_data.school_details.School Name'))->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb', 8,10)->get('himglobin_report_col');

        			}else{
        	
        $query = $this->mongo_db->select(array('doc_data.widget_data.school_details.School Name'))->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb', 8,10)->get('himglobin_report_col');
                }

            foreach ($query as $school) {
           $school_name  = $school['doc_data']['widget_data']['school_details']['School Name'];
           array_push($all_schools, $school_name);
        		}

        $data = array_count_values($all_schools);

	}elseif ($hb_type == 'MILD') {

				if($hb_gender == 'Male'){

        $query = $this->mongo_db->select(array('doc_data.widget_data.school_details.School Name'))->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',10.1,12)->get('himglobin_report_col');

        			}else{
        	
        $query = $this->mongo_db->select(array('doc_data.widget_data.school_details.School Name'))->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',10.1,12)->get('himglobin_report_col');
              }
               foreach ($query as $school) {
           $school_name  = $school['doc_data']['widget_data']['school_details']['School Name'];
           array_push($all_schools, $school_name);
        }

        $data = array_count_values($all_schools);

			}elseif ($hb_type == 'NORMAL') {

				if($hb_gender == 'Male'){

        $query = $this->mongo_db->select(array('doc_data.widget_data.school_details.School Name'))->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',12,18)->get('himglobin_report_col');

        			}else{
        	
        $query = $this->mongo_db->select(array('doc_data.widget_data.school_details.School Name'))->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female'))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',12,18)->get('himglobin_report_col');
              }

                foreach ($query as $school) {
           $school_name  = $school['doc_data']['widget_data']['school_details']['School Name'];
           array_push($all_schools, $school_name);
        }

        $data = array_count_values($all_schools);

			}

		return $data;

	}

		 public function get_hb_gender_wise_students_data_table_model($start_hb,$end_hb, $hb_type, $hb_gender, $school_name)
	    {  		

	            //$date_hb = substr($date_hb,0,-3);
	            
	     if($hb_type == 'SEVERE') {
  
        if($hb_gender == 'Male'){

        $query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male','doc_data.widget_data.school_details.School Name' => $school_name))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start_hb, $end_hb)->whereLte('doc_data.widget_data.page1.Student Details.HB_latest.hb',8)->get('himglobin_report_col');

                    }else{

        $query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female','doc_data.widget_data.school_details.School Name' => $school_name))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start_hb, $end_hb)->whereLte('doc_data.widget_data.page1.Student Details.HB_latest.hb',8)->get('himglobin_report_col');
                }            

    }elseif ($hb_type == 'MODERATE') {

            if($hb_gender == 'Male'){

        $query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male','doc_data.widget_data.school_details.School Name' => $school_name))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start_hb, $end_hb)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb', 8,10)->get('himglobin_report_col');

                    }else{
            
        $query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female','doc_data.widget_data.school_details.School Name' => $school_name))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start_hb, $end_hb)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb', 8,10)->get('himglobin_report_col');
                }

    }elseif ($hb_type == 'MILD') {

                if($hb_gender == 'Male'){

        $query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male','doc_data.widget_data.school_details.School Name' => $school_name ))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start_hb, $end_hb)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',10.1,12)->get('himglobin_report_col');

                    }else{
            
        $query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female' ,'doc_data.widget_data.school_details.School Name' => $school_name))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start_hb, $end_hb)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',10.1,12)->get('himglobin_report_col');
              }

            }elseif ($hb_type == 'NORMAL') {

                if($hb_gender == 'Male'){

        $query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male' ,'doc_data.widget_data.school_details.School Name' => $school_name))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start_hb, $end_hb)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',12,18)->get('himglobin_report_col');

                    }else{
            
        $query = $this->mongo_db->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female' ,'doc_data.widget_data.school_details.School Name' => $school_name))->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start_hb, $end_hb)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.hb',12,18)->get('himglobin_report_col');
              }

            }

        return $query;

    }

/*BMI STudent data table new dashboard*/
public function get_bmi_gender_wise_data_table_model($start, $end, $bmi_type, $bmi_gender)
	{  	
			$all_schools = [];
			$school_name = [];
					
	if($bmi_type == 'UNDER') {
  
		if($bmi_gender == 'Male'){

        $query = $this->mongo_db->select(array('doc_data.widget_data.school_details.School Name'))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start, $end)->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male'))->whereLte('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 18.50)->get('healthcare2017617145744625');

        			}else{

        $query = $this->mongo_db->select(array('doc_data.widget_data.school_details.School Name'))->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female'))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start, $end)->whereLte('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 18.50)->get('healthcare2017617145744625');
                }
                foreach ($query as $school) {
                   $school_name  = $school['doc_data']['widget_data']['school_details']['School Name'];
                   array_push($all_schools, $school_name);
                }
                $data = array_count_values($all_schools); 
               
	}elseif ($bmi_type == 'OVER') {

			if($bmi_gender == 'Male'){

        $query = $this->mongo_db->select(array('doc_data.widget_data.school_details.School Name'))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start, $end)->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male'))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 25,29.99)->get('healthcare2017617145744625');

        			}else{
        	
        $query = $this->mongo_db->select(array('doc_data.widget_data.school_details.School Name'))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start, $end)->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female'))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 25,29.99)->get('healthcare2017617145744625');
                }

                foreach ($query as $school) {
                   $school_name  = $school['doc_data']['widget_data']['school_details']['School Name'];
                   array_push($all_schools, $school_name);
                }

                $data = array_count_values($all_schools);

	}elseif ($bmi_type == 'OBESE') {

				if($bmi_gender == 'Male'){

        $query = $this->mongo_db->select(array('doc_data.widget_data.school_details.School Name'))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start, $end)->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male'))->whereGte('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 30.00)->get('healthcare2017617145744625');

        			}else{
        	
        $query = $this->mongo_db->select(array('doc_data.widget_data.school_details.School Name'))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start, $end)->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female'))->whereGte('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 30.00)->get('healthcare2017617145744625');
              }

              foreach ($query as $school) {
                 $school_name  = $school['doc_data']['widget_data']['school_details']['School Name'];
                 array_push($all_schools, $school_name);
              }

              $data = array_count_values($all_schools);          
           

			}elseif ($bmi_type == 'NORMAL') {

				if($bmi_gender == 'Male'){

     $query = $this->mongo_db->select(array('doc_data.widget_data.school_details.School Name'))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start, $end)->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Male'))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 18.50,24.99)->get('healthcare2017617145744625');

        			}else{
        	
    $query = $this->mongo_db->select(array('doc_data.widget_data.school_details.School Name'))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start, $end)->where(array('doc_data.widget_data.page1.Student Details.Gender' => 'Female'))->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.bmi', 18.50,24.99)->get('healthcare2017617145744625');
              }

              foreach ($query as $school) {
                 $school_name  = $school['doc_data']['widget_data']['school_details']['School Name'];
                 array_push($all_schools, $school_name);
              }

              $data = array_count_values($all_schools);

			}

		return $data;

	}

/*Sanitation Data */
public function get_schools_list_based_on_sanitation_type($date, $sanitaion_type)
{
	$final_array = [];

	if($sanitaion_type == 'Not Submitted'){
		$query = $this->get_sanitation_report_pie_schools_data($date);

		$schools = $query['not_submitted']['school'];

		return $schools;
		
	}elseif ($sanitaion_type == 'Submitted') {
		$query = $this->get_sanitation_report_pie_schools_data($date);
		$schools = $query['submitted']['school'];
		
		foreach ($schools as $school) {
			
			$campus = $this->mongo_db->whereLike ( 'doc_data.widget_data.page4.Declaration Information.Date:',$date )->where('doc_data.widget_data.page4.School Information.School Name', $school)->get($this->sanitation_app_col_v2);
		
		if(isset($campus[0]['doc_data']['widget_data']['daily']['Campus'])){
			
				$cleaning_campus = $campus[0]['doc_data']['widget_data']['daily']['Campus'];
				$cleaning_toitel = $campus[0]['doc_data']['widget_data']['daily']['Toilets'];
				$cleaning_kitchen = $campus[0]['doc_data']['widget_data']['daily']['Kitchen'];
		}
			

			$data['School_Name'] = $school;
			$data['Campus'] = $cleaning_campus;
			$data['Toilets'] = $cleaning_toitel;
			$data['Kitchen'] = $cleaning_kitchen;

			array_push($final_array, $data);
			
		}

		return $final_array;
	}elseif ($sanitaion_type == 'Animals') {

		$query = $this->mongo_db->select(array('doc_data.widget_data.page4.School Information.School Name'))->whereLike('doc_data.widget_data.page4.Declaration Information.Date:', $date)->where('doc_data.widget_data.daily.Campus.Animals Around Campus', 'Yes')->get($this->sanitation_app_col_v2);

		foreach ($query as $data) {
			$scl_name = $data['doc_data']['widget_data']['page4']['School Information']['School Name'];
			array_push($final_array, $scl_name);
		}

		return $final_array;

	}elseif ($sanitaion_type == 'Washrooms Required') {
		$query = $this->mongo_db->select(array('doc_data.widget_data.page4.School Information.School Name'))->whereLike('doc_data.widget_data.page4.Declaration Information.Date:', $date)->where('doc_data.widget_data.daily.Toilets.Any Damages To The Toilets', 'Yes')->get($this->sanitation_app_col_v2);

		foreach ($query as $data) {
			$scl_name = $data['doc_data']['widget_data']['page4']['School Information']['School Name'];
			array_push($final_array, $scl_name);
		}

		return $final_array;
	}

	
}

public function show_sanitation_submitted_pics($school, $date)
{
	$query = $this->mongo_db->where(array('doc_data.widget_data.page4.School Information.School Name'=>$school, 'doc_data.widget_data.page4.Declaration Information.Date:'=>$date))->get($this->sanitation_app_col_v2);

	return $query;
}

/*Sanitation Sewahe not working*/
public function get_not_working_sanitation_schools_data($start_date, $end_date, $request)
{
	$dist_array = [];
	$scl_array = [];
	$schools_final =[];

	
	if($request == 'Animals'){
		
		$query = $this->mongo_db->select(array('doc_data.widget_data.page4.School Information.School Name'))->whereBetween('doc_data.widget_data.page4.Declaration Information.Date:', $start_date, $end_date)->where('doc_data.widget_data.daily.Campus.Animals Around Campus', 'Yes')->get($this->sanitation_app_col_v2);

		foreach ($query as $data) {
			$scl_name = $data['doc_data']['widget_data']['page4']['School Information']['School Name'];
			array_push($scl_array, $scl_name);
		}

		$return_val = array_count_values($scl_array);
		
	}elseif ($request == 'Rarely') {
		$prev_date = strtotime($start_date);
		$recent_date = strtotime($end_date);
		$datediff = $recent_date - $prev_date;
		$total_days = round($datediff / (60*60*24));

		$scls = [];
		
		$query = $this->mongo_db->select(array('doc_data.widget_data.page4.School Information.School Name'))->whereBetween('doc_data.widget_data.page4.Declaration Information.Date:', $start_date, $end_date)->get($this->sanitation_app_col_v2);

		foreach ($query as $data) {
			$scl_name = $data['doc_data']['widget_data']['page4']['School Information']['School Name'];
			array_push($scls, $scl_name);
		}

		$val = array_count_values($scls);
		
		foreach ($val as $key => $value) {
			
			$less = $total_days/2;
			if($value < $less){
				$datas['school'] = $key;
				$datas['count']	= $value;
				array_push($schools_final, $datas);
			}
			
		}

		
	}

	if($request == 'Animals'){
		return $return_val;
	}else{
		return $schools_final;
	}


}

/*Attendace data schoolwise new dashboard*/
public function get_attendance_data_for_bar_schools($date, $attendance_type, $district, $school)
{
	$school_name_with_count = [];
	if($district == 'All' && $school == 'All')
	{
		switch ($attendance_type) {
			case 'R2H':
				$query = $this->mongo_db->select('doc_data.widget_data.page1.Attendence Details.Select School')->whereLike('history.last_stage.time', $date)->where(array('doc_data.widget_data.page1.Attendence Details.R2H' => array('$ne' => '0')))->get('healthcare201651317373988');
				foreach ($query as $data) {
					$saas['label'] = $data['doc_data']['widget_data']['page1']['Attendence Details']['Select School'];
					$saas['value'] = $data['doc_data']['widget_data']['page1']['Attendence Details']['R2H'];
					
					if($saas['value'] != '00' || $saas['value'] != '0'){
						array_push($school_name_with_count, $saas);          		
					}
				
				}

				return $school_name_with_count;
				break;
			case 'Sick':
				$query = $this->mongo_db->select('doc_data.widget_data.page1.Attendence Details.Select School')->whereLike('history.last_stage.time', $date)->where(array('doc_data.widget_data.page1.Attendence Details.Sick' => array('$ne' => '0')))->get('healthcare201651317373988');

	          	foreach ($query as $data) {
	          		$saas['label'] = $data['doc_data']['widget_data']['page1']['Attendence Details']['Select School'];
	          		$saas['value'] = $data['doc_data']['widget_data']['page1']['Attendence Details']['Sick'];
	          		if($saas['value'] != '00' || $saas['value'] != '0'){
						array_push($school_name_with_count, $saas);       		
					}
	          		
	          	}
				return $school_name_with_count;
				break;
			case 'RestRoom':
				$query = $this->mongo_db->select('doc_data.widget_data.page1.Attendence Details.Select School')->whereLike('history.last_stage.time', $date)->where(array('doc_data.widget_data.page2.Attendence Details.RestRoom' => array('$ne' => '0')))->get('healthcare201651317373988');

	          	foreach ($query as $data) {
	          		$saas['label'] = $data['doc_data']['widget_data']['page1']['Attendence Details']['Select School'];
	          		$saas['value'] = $data['doc_data']['widget_data']['page2']['Attendence Details']['RestRoom'];
	          		if($saas['value'] != '00' || $saas['value'] != '0'){
						array_push($school_name_with_count, $saas);     		
					}
	          		
	          	}
				return $school_name_with_count;
				break;
			case 'Attendance':		
				$query = $this->mongo_db->select('doc_data.widget_data.page1.Attendence Details.Select School')->whereLike('history.last_stage.time', $date)->where(array('doc_data.widget_data.page1.Attendence Details.Attended' => array('$ne' => '0')))->get('healthcare201651317373988');

	          	foreach ($query as $data) {
	          		$saas['label'] = $data['doc_data']['widget_data']['page1']['Attendence Details']['Select School'];
	          		$saas['value'] = $data['doc_data']['widget_data']['page1']['Attendence Details']['Attended'];
	          		if($saas['value'] != '00' || $saas['value'] != '0'){
						array_push($school_name_with_count, $saas);     		
					}
	          		
	          	}
				return $school_name_with_count;
				break;
			
			default:
				# code...
				break;
		}

	}elseif ($district != 'All' && $school == 'All') {
		switch ($attendance_type) {
			case 'R2H':
				$query = $this->mongo_db->select('doc_data.widget_data.page1.Attendence Details.Select School')->whereLike('history.last_stage.time', $date)->where(array('doc_data.widget_data.page1.Attendence Details.R2H' => array('$ne' => '0'), 'doc_data.widget_data.page1.Attendence Details.District' => $district ))->get('healthcare201651317373988');
				foreach ($query as $data) {
					$saas['label'] = $data['doc_data']['widget_data']['page1']['Attendence Details']['Select School'];
					$saas['value'] = $data['doc_data']['widget_data']['page1']['Attendence Details']['R2H'];
					
					array_push($school_name_with_count, $saas);          		
				
				}

				return $school_name_with_count;
				break;
			case 'Sick':
				$query = $this->mongo_db->select('doc_data.widget_data.page1.Attendence Details.Select School')->whereLike('history.last_stage.time', $date)->where(array('doc_data.widget_data.page1.Attendence Details.Sick' => array('$ne' => '0'), 'doc_data.widget_data.page1.Attendence Details.District' => $district))->get('healthcare201651317373988');

	          	foreach ($query as $data) {
	          		$saas['label'] = $data['doc_data']['widget_data']['page1']['Attendence Details']['Select School'];
	          		$saas['value'] = $data['doc_data']['widget_data']['page1']['Attendence Details']['Sick'];
	          		
	          		array_push($school_name_with_count, $saas);
	          	}
				return $school_name_with_count;
				break;
			case 'RestRoom':
				$query = $this->mongo_db->select('doc_data.widget_data.page1.Attendence Details.Select School')->whereLike('history.last_stage.time', $date)->where(array('doc_data.widget_data.page2.Attendence Details.RestRoom' => array('$ne' => '0'), 'doc_data.widget_data.page1.Attendence Details.District' => $district))->get('healthcare201651317373988');

	          	foreach ($query as $data) {
	          		$saas['label'] = $data['doc_data']['widget_data']['page1']['Attendence Details']['Select School'];
	          		$saas['value'] = $data['doc_data']['widget_data']['page2']['Attendence Details']['RestRoom'];
	          		
	          		array_push($school_name_with_count, $saas);
	          	}
				return $school_name_with_count;
				break;
			case 'Atteanded':
				$query = $this->mongo_db->select('doc_data.widget_data.page1.Attendence Details.Select School')->whereLike('history.last_stage.time', $date)->where(array('doc_data.widget_data.page1.Attendence Details.Attended' => array('$ne' => '0'), 'doc_data.widget_data.page1.Attendence Details.District' => $district))->get('healthcare201651317373988');

	          	foreach ($query as $data) {
	          		$saas['label'] = $data['doc_data']['widget_data']['page1']['Attendence Details']['Select School'];
	          		$saas['value'] = $data['doc_data']['widget_data']['page1']['Attendence Details']['Attended'];
	          		
	          		array_push($school_name_with_count, $saas);
	          	}
				return $school_name_with_count;
				break;
			
			default:
				# code...
				break;
		}
	}elseif ($district != 'All' && $school != 'All') {
		switch ($attendance_type) {
			case 'R2H':
				$query = $this->mongo_db->select('doc_data.widget_data.page1.Attendence Details.Select School')->whereLike('history.last_stage.time', $date)->where(array('doc_data.widget_data.page1.Attendence Details.R2H' => array('$ne' => '0'), 'doc_data.widget_data.page1.Attendence Details.Select School' => $school ))->get('healthcare201651317373988');
				foreach ($query as $data) {
					$saas['label'] = $data['doc_data']['widget_data']['page1']['Attendence Details']['Select School'];
					$saas['value'] = $data['doc_data']['widget_data']['page1']['Attendence Details']['R2H'];
					
					array_push($school_name_with_count, $saas);          		
				
				}

				return $school_name_with_count;
				break;
			case 'Sick':
				$query = $this->mongo_db->select('doc_data.widget_data.page1.Attendence Details.Select School')->whereLike('history.last_stage.time', $date)->where(array('doc_data.widget_data.page1.Attendence Details.Sick' => array('$ne' => '0'), 'doc_data.widget_data.page1.Attendence Details.Select School' => $school))->get('healthcare201651317373988');

	          	foreach ($query as $data) {
	          		$saas['label'] = $data['doc_data']['widget_data']['page1']['Attendence Details']['Select School'];
	          		$saas['value'] = $data['doc_data']['widget_data']['page1']['Attendence Details']['Sick'];
	          		
	          		array_push($school_name_with_count, $saas);
	          	}
				return $school_name_with_count;
				break;
			case 'RestRoom':
				$query = $this->mongo_db->select('doc_data.widget_data.page1.Attendence Details.Select School')->whereLike('history.last_stage.time', $date)->where(array('doc_data.widget_data.page2.Attendence Details.RestRoom' => array('$ne' => '0'), 'doc_data.widget_data.page1.Attendence Details.Select School' => $school))->get('healthcare201651317373988');

	          	foreach ($query as $data) {
	          		$saas['label'] = $data['doc_data']['widget_data']['page1']['Attendence Details']['Select School'];
	          		$saas['value'] = $data['doc_data']['widget_data']['page2']['Attendence Details']['RestRoom'];
	          		
	          		array_push($school_name_with_count, $saas);
	          	}
				return $school_name_with_count;
				break;
			case 'Atteanded':
				$query = $this->mongo_db->select('doc_data.widget_data.page1.Attendence Details.Select School')->whereLike('history.last_stage.time', $date)->where(array('doc_data.widget_data.page1.Attendence Details.Attended' => array('$ne' => '0'), 'doc_data.widget_data.page1.Attendence Details.Select School' => $school))->get('healthcare201651317373988');

	          	foreach ($query as $data) {
	          		$saas['label'] = $data['doc_data']['widget_data']['page1']['Attendence Details']['Select School'];
	          		$saas['value'] = $data['doc_data']['widget_data']['page1']['Attendence Details']['Attended'];
	          		
	          		array_push($school_name_with_count, $saas);
	          	}
				return $school_name_with_count;
				break;
			
			default:
				# code...
				break;
		}
	}

}

/*ATtendance students data*/
public function get_attendance_data_for_bar_students($symptom, $school, $date)

{
	$school_name_with_count = [];
    $students_personal_info =[];

    if ($symptom == 'R2H') {              
              $query = $this->mongo_db->select('doc_data.widget_data.page1.Attendence Details.R2H')->whereLike('history.last_stage.time', $date)->where(array('doc_data.widget_data.page1.Attendence Details.R2H' => array('$ne' => '0'), 'doc_data.widget_data.page1.Attendence Details.Select School' => $school))->get('healthcare201651317373988');

        foreach ($query as $data) {
         $ss = $data['doc_data']['widget_data']['page1']['Attendence Details']['R2H UID'];
         $dd = explode(',',  $ss);

         foreach ($dd as $key => $value) {
          $personal_query = $this->mongo_db->where('doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $value)->get('tswreis_screening_report_col_2020-2021');          
       array_push( $students_personal_info, $personal_query);
         }
        }

    }elseif($symptom == 'Sick')  {              
              $query = $this->mongo_db->select('doc_data.widget_data.page1.Attendence Details.Sick')->whereLike('history.last_stage.time', $date)->where(array('doc_data.widget_data.page1.Attendence Details.Sick' => array('$ne' => '0'), 'doc_data.widget_data.page1.Attendence Details.Select School' => $school))->get('healthcare201651317373988');

        foreach ($query as $data) {
              $ss = $data['doc_data']['widget_data']['page1']['Attendence Details']['Sick UID'];
              $dd = explode(',',  $ss);

       foreach ($dd as $key => $value) {
            $personal_query = $this->mongo_db->where('doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $value)->get('tswreis_screening_report_col_2020-2021');          
       array_push( $students_personal_info, $personal_query);
         }
        }

    }elseif ($symptom == 'RestRoom') {              
              $query = $this->mongo_db->select('doc_data.widget_data.page2.Attendence Details.RestRoom')->whereLike('history.last_stage.time', $date)->where(array('doc_data.widget_data.page2.Attendence Details.RestRoom' => array('$ne' => '0'), 'doc_data.widget_data.page1.Attendence Details.Select School' => $school))->get('healthcare201651317373988');

        foreach ($query as $data) {
              $ss = $data['doc_data']['widget_data']['page2']['Attendence Details']['RestRoom UID'];
              $dd = explode(',',  $ss);

       foreach ($dd as $key => $value) {
            $personal_query = $this->mongo_db->where('doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $value)->get('tswreis_screening_report_col_2020-2021');          
       array_push( $students_personal_info, $personal_query);
         }
        }

    }elseif ($symptom == 'Attendance')
    {              
              $query = $this->mongo_db->select('doc_data.widget_data.page1.Attendence Details.Attended')->whereLike('history.last_stage.time', $date)->where(array('doc_data.widget_data.page1.Attendence Details.Attended' => array('$ne' => '0'), 'doc_data.widget_data.page1.Attendence Details.Select School' => $school))->get('healthcare201651317373988');

        foreach ($query as $data) {
              $ss = $data['doc_data']['widget_data']['page2']['Attendence Details']['Absent UID'];
              $dd = explode(',',  $ss);

       foreach ($dd as $key => $value) {
            $personal_query = $this->mongo_db->where('doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $value)->get('tswreis_screening_report_col_2020-2021');          
       array_push( $students_personal_info, $personal_query);
         }
        }
    }


    return $students_personal_info;	
}

/*Day to day glance field officers*/
public function get_day_to_day_glance_students_model($today_date,$status)
{
	switch ($status) {
		case 'F-O Out Patient':
			$query = $this->mongo_db->select(array())->where(array('doc_data.widget_data.Out Patient.hospialt_name' => array('$ne' => ''),'history.last_stage.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->get('field_officer_report');

			$all_schools = [];
			$return_data = [];
			foreach ($query as $school) {
					$school_name  = $school['history']['last_stage']['submitted_by'];
					array_push($all_schools, $school_name);
				}
				
				$data = array_count_values($all_schools);

				foreach ($data as $key => $value) {
					$email = str_replace('#', '@', $key);
					$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
					$query = $this->mongo_db->select(array('username', 'email'))->where(array('email' => array('$regex' => $email)))->get('panacea_cc');
					$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
					
					$name['label'] = $query[0]['username'];
					$name['email'] = $query[0]['email'];
					$name['value'] = $value;

					array_push($return_data, $name);

				}

			return $return_data;
			break;
		case 'F-O Out Patient':
			$query = $this->mongo_db->select(array())->where(array('doc_data.widget_data.Emergency or Admitted.hospialt_name' => array('$ne' => ''),'history.last_stage.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->get('field_officer_report');
			$all_schools = [];
			$return_data = [];
			foreach ($query as $school) {
					
						$school_name  = $school['history']['last_stage']['submitted_by'];
						array_push($all_schools, $school_name);
						
				}
				
				$data = array_count_values($all_schools);
				foreach ($data as $key => $value) {
					$email = str_replace('#', '@', $key);
					$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
					$query = $this->mongo_db->select(array('username', 'email'))->where(array('email' => array('$regex' => $email)))->get('panacea_cc');
					$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
					
					$name['label'] = $query[0]['username'];
					$name['email'] = $query[0]['email'];
					$name['value'] = $value;

					array_push($return_data, $name);

				}

			return $return_data;
			
			break;
		case 'F-O Out Patient':
			$query = $this->mongo_db->select(array())->where(array('doc_data.widget_data.Review Cases.hospialt_name' => array('$ne' => ''),'history.last_stage.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->get('field_officer_report');
			$all_schools = [];
			$return_data = [];
			foreach ($query as $school) {
					
						$school_name  = $school['history']['last_stage']['submitted_by'];
						array_push($all_schools, $school_name);
						
				}
				
			$data = array_count_values($all_schools);
			foreach ($data as $key => $value) {
				$email = str_replace('#', '@', $key);
				$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
				$query = $this->mongo_db->select(array('username', 'email'))->where(array('email' => array('$regex' => $email)))->get('panacea_cc');
				$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
				
				$name['label'] = $query[0]['username'];
				$name['email'] = $query[0]['email'];
				$name['value'] = $value;

				array_push($return_data, $name);

			}

			return $return_data;
			break;
		case 'Doctor Visit Schools':
			$query = $this->mongo_db->select(array("doc_data.widget_data.school_details.School Name"))->where(array('history.last_stage.time' => ($today_date) ? array('$regex' => $today_date) : array('$exists' => TRUE)))->get('doctor_visiting_reports');
			$all_schools = [];
			$return_data = [];
			foreach ($query as $school) {
					
						$school_name  = $school['doc_data']['widget_data']['school_details']['School Name'];
						array_push($all_schools, $school_name);
						
				}
				
			$data = array_count_values($all_schools);
			foreach ($data as $key => $value) {
					$email = str_replace('#', '@', $key);
					$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
					$query = $this->mongo_db->select(array('username', 'email'))->where(array('email' => array('$regex' => $email)))->get('panacea_cc');
					$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
					
					$name['label'] = $query[0]['username'];
					$name['email'] = $query[0]['email'];
					$name['value'] = $value;

					array_push($return_data, $name);

				}

			return $return_data;
			break;
		
		default:
			# code...
			break;
	}
}

/*Fetching Field officer Names*/

public function get_field_officer_name()
{
	$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
	$query = $this->mongo_db->select(array('username', 'email'))->where(array('email' => array('$regex' => "tswreis.cc")))->get('panacea_cc');
	$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
	
	return $query;
}

public function get_doctor_names()
{
	$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
	$query = $this->mongo_db->select(array('username', 'email'))->where(array('email' => array('$regex' => "panacea.dr")))->get('panacea_doctors');
	$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
	
	return $query;
}
/* Get FO Data for today */
public function get_field_officer_wise_submitted_docs($date, $status)
{
	if($status == "FO Emergency Cases")
	{

    $data = $this->mongo_db->select(array())->where(array('doc_data.widget_data.Emergency or Admitted.hospialt_name' => array('$ne' => ''),'history.last_stage.time' => ($date) ? array('$regex' => $date) : array('$exists' => TRUE)))->get('field_officer_report');

   
	}
	elseif ($status == "FO Out Patient") {
		$data = $this->mongo_db->select(array())->where(array('doc_data.widget_data.Out Patient.hospialt_name' => array('$ne' => ''),'history.last_stage.time' => ($date) ? array('$regex' => $date) : array('$exists' => TRUE)))->get('field_officer_report'); 
	}
	else {
		 $data = $this->mongo_db->select(array())->where(array('doc_data.widget_data.Review Cases.hospialt_name' => array('$ne' => ''),'history.last_stage.time' => ($date) ? array('$regex' => $date) : array('$exists' => TRUE)))->get('field_officer_report');
	}

	return $data;
	
}

/*Get FO submitted students list*/
public function get_fo_records_based_on_span($start, $end, $fo_mail)
{
	$email = str_replace('@', '#', $fo_mail);
	$query = $this->mongo_db->select(array('doc_data.widget_data', 'history'))->whereBetween('history.last_stage.time', $start, $end)->where('history.last_stage.submitted_by', $email)->get('field_officer_report');

	return $query;

}

public function get_dr_submitted_records_based_on_span_model($start, $end, $dr_mail)		
	{			 
		$query = $this->mongo_db->whereGte('history.time', $start)->whereLte('history.time', $end)->where(array('history.current_stage' => "Doctor", 'history.submitted_by'=>$dr_mail))->get($this->request_app_col_static_html);
	   
	    return $query;

	}

public function total_requests_pie_with_filters($req_type, $dist, $scl, $academic)
{
	if($academic == '2015-2016'){
		$start_date = '2015-05-20';
		$end_date = '2016-05-20';
	}elseif($academic == '2016-2017'){
		$start_date = '2016-05-21';
		$end_date = '2017-05-20';
	}elseif ($academic == '2017-2018') {
		$start_date = '2017-05-21';
		$end_date = '2018-05-20';
	}elseif ($academic == '2018-2019') {
		$start_date = '2018-05-21';
		$end_date = '2019-05-20';
	}elseif ($academic == '2019-2020') {
		$start_date = '2019-05-21';
		$end_date = '2020-05-20';
	}

	$subtype = [];
	//$main_subtype = [];
	$problems = [];
	//$sub_cont = [];
	if($dist == 'All' && $scl == 'All_dist'){
		switch ($req_type) {
			case 'Emergency':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Emergency'))->where('doc_data.widget_data.page2.Review Info.Request Type','Emergency')->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
				foreach ($emer as $em) {
					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];

					foreach ($data1 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data2 as $key => $value) {
						array_push($subtype, $value);
					}
				}

				$final = array_count_values($subtype);

				foreach ($final as $key => $value) {
					$out['label'] = $key;
					$out['value'] = $value;
					array_push($problems, $out);
				}

				return $problems;

				break;

			case 'Chronic':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Chronic'))->where('doc_data.widget_data.page2.Review Info.Request Type','Chronic')->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
				$empty = [];
				foreach ($emer as $em) {

					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
					array_push($empty, $data1);
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
					array_push($empty, $data2);
					$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
					array_push($empty, $data3);
					$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
					array_push($empty, $data4);
					$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
					array_push($empty, $data5);
					$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
					array_push($empty, $data6);
					$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
					array_push($empty, $data7);
					$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
					array_push($empty, $data8);
					$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
					array_push($empty, $data9);
					$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
					array_push($empty, $data10);
					$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
					array_push($empty, $data11);
					$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
					array_push($empty, $data12);
					$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
					array_push($empty, $data13);

					foreach ($data1 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data2 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data3 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data4 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data5 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data6 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data7 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data8 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data9 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data10 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data11 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data12 as $key => $value) {
						array_push($subtype, $value);
					}
					/*if(isset($data12) && !empty($data12)){
						foreach ($data12 as $key => $value) {
						array_push($subtype, $value);
					}
					}*/
					
					foreach ($data13 as $key => $value) {
						array_push($subtype, $value);
					}
				
				}

				$final = array_count_values($subtype);

				foreach ($final as $key => $value) {
					$out['label'] = $key;
					$out['value'] = $value;
					array_push($problems, $out);
				}

				return $problems;
				break;

			case 'Normal':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Normal'))->where('doc_data.widget_data.page2.Review Info.Request Type','Normal')->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
				$empty = [];
				foreach ($emer as $em) {

					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
					array_push($empty, $data1);
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
					array_push($empty, $data2);
					$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
					array_push($empty, $data3);
					$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
					array_push($empty, $data4);
					$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
					array_push($empty, $data5);
					$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
					array_push($empty, $data6);
					$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
					array_push($empty, $data7);
					$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
					array_push($empty, $data8);
					$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
					array_push($empty, $data9);
					$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
					array_push($empty, $data10);
					$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
					array_push($empty, $data11);
					$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
					array_push($empty, $data12);
					$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
					array_push($empty, $data13);

					foreach ($data1 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data2 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data3 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data4 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data5 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data6 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data7 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data8 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data9 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data10 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data11 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data12 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data13 as $key => $value) {
						array_push($subtype, $value);
					}				
				}

				$final = array_count_values($subtype);

				foreach ($final as $key => $value) {
					$out['label'] = $key;
					$out['value'] = $value;
					array_push($problems, $out);
				}

				return $problems;

				break;

			case 'Cured':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Emergency', 'doc_data.widget_data.page1.Problem Info.Chronic', 'doc_data.widget_data.page1.Problem Info.Normal'))->where('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');

				$empty = [];

				foreach ($emer as $key => $em) {
					$data14 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
					$data15 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];

					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
					array_push($empty, $data1);
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
					array_push($empty, $data2);
					$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
					array_push($empty, $data3);
					$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
					array_push($empty, $data4);
					$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
					array_push($empty, $data5);
					$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
					array_push($empty, $data6);
					$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
					array_push($empty, $data7);
					$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
					array_push($empty, $data8);
					$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
					array_push($empty, $data9);
					$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
					array_push($empty, $data10);
					$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
					array_push($empty, $data11);
					$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
					array_push($empty, $data12);
					$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
					array_push($empty, $data13);

					$data16 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
					array_push($empty, $data1);
					$data17 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
					array_push($empty, $data2);
					$data18 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
					array_push($empty, $data3);
					$data19 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
					array_push($empty, $data4);
					$data20 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
					array_push($empty, $data5);
					$data21 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
					array_push($empty, $data6);
					$data22 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
					array_push($empty, $data7);
					$data23 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
					array_push($empty, $data8);
					$data24 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
					array_push($empty, $data9);
					$data25 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
					array_push($empty, $data10);
					$data26 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
					array_push($empty, $data11);
					$data27 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
					array_push($empty, $data12);
					$data28 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
					array_push($empty, $data13);

					foreach ($data14 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data15 as $key => $value) {
						array_push($subtype, $value);
					}


					foreach ($data1 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data2 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data3 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data4 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data5 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data6 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data7 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data8 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data9 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data10 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data11 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data12 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data13 as $key => $value) {
						array_push($subtype, $value);
					}

					foreach ($data16 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data17 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data18 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data19 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data20 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data21 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data22 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data23 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data24 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data25 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data26 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data27 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data28 as $key => $value) {
						array_push($subtype, $value);
					}
				}

				$final = array_count_values($subtype);

				foreach ($final as $key => $value) {
					$out['label'] = $key;
					$out['value'] = $value;
					array_push($problems, $out);
				}

				return $problems;


				break;
			
			default:
				# code...
				break;
		}
	}elseif ($dist != 'All' && $scl == 'All_dist' || $dist != 'All' && $scl == 'All') {
		switch ($req_type) {
			case 'Emergency':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Emergency'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Emergency', 'doc_data.widget_data.page1.Student Info.District.field_ref'=> $dist))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
				foreach ($emer as $em) {
					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];

					foreach ($data1 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data2 as $key => $value) {
						array_push($subtype, $value);
					}
				}

				$final = array_count_values($subtype);

				foreach ($final as $key => $value) {
					$out['label'] = $key;
					$out['value'] = $value;
					array_push($problems, $out);
				}

				return $problems;

				break;

			case 'Chronic':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Chronic'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Chronic', 'doc_data.widget_data.page1.Student Info.District.field_ref'=> $dist))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
				$empty = [];
				foreach ($emer as $em) {

					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
					array_push($empty, $data1);
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
					array_push($empty, $data2);
					$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
					array_push($empty, $data3);
					$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
					array_push($empty, $data4);
					$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
					array_push($empty, $data5);
					$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
					array_push($empty, $data6);
					$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
					array_push($empty, $data7);
					$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
					array_push($empty, $data8);
					$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
					array_push($empty, $data9);
					$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
					array_push($empty, $data10);
					$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
					array_push($empty, $data11);
					$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
					array_push($empty, $data12);
					$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
					array_push($empty, $data13);

					foreach ($data1 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data2 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data3 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data4 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data5 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data6 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data7 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data8 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data9 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data10 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data11 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data12 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data13 as $key => $value) {
						array_push($subtype, $value);
					}
				
				}

				$final = array_count_values($subtype);

				foreach ($final as $key => $value) {
					$out['label'] = $key;
					$out['value'] = $value;
					array_push($problems, $out);
				}

				return $problems;
				break;

			case 'Normal':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Normal'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Normal', 'doc_data.widget_data.page1.Student Info.District.field_ref'=> $dist))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
				$empty = [];
				foreach ($emer as $em) {

					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
					array_push($empty, $data1);
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
					array_push($empty, $data2);
					$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
					array_push($empty, $data3);
					$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
					array_push($empty, $data4);
					$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
					array_push($empty, $data5);
					$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
					array_push($empty, $data6);
					$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
					array_push($empty, $data7);
					$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
					array_push($empty, $data8);
					$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
					array_push($empty, $data9);
					$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
					array_push($empty, $data10);
					$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
					array_push($empty, $data11);
					$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
					array_push($empty, $data12);
					$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
					array_push($empty, $data13);

					foreach ($data1 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data2 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data3 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data4 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data5 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data6 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data7 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data8 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data9 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data10 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data11 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data12 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data13 as $key => $value) {
						array_push($subtype, $value);
					}				
				}

				$final = array_count_values($subtype);

				foreach ($final as $key => $value) {
					$out['label'] = $key;
					$out['value'] = $value;
					array_push($problems, $out);
				}

				return $problems;

				break;

			case 'Cured':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Emergency', 'doc_data.widget_data.page1.Problem Info.Chronic', 'doc_data.widget_data.page1.Problem Info.Normal'))->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured', 'doc_data.widget_data.page1.Student Info.District.field_ref'=> $dist))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');

				$empty = [];

				foreach ($emer as $key => $em) {
					$data14 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
					$data15 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];

					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
					array_push($empty, $data1);
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
					array_push($empty, $data2);
					$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
					array_push($empty, $data3);
					$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
					array_push($empty, $data4);
					$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
					array_push($empty, $data5);
					$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
					array_push($empty, $data6);
					$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
					array_push($empty, $data7);
					$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
					array_push($empty, $data8);
					$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
					array_push($empty, $data9);
					$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
					array_push($empty, $data10);
					$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
					array_push($empty, $data11);
					$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
					array_push($empty, $data12);
					$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
					array_push($empty, $data13);

					$data16 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
					array_push($empty, $data1);
					$data17 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
					array_push($empty, $data2);
					$data18 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
					array_push($empty, $data3);
					$data19 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
					array_push($empty, $data4);
					$data20 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
					array_push($empty, $data5);
					$data21 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
					array_push($empty, $data6);
					$data22 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
					array_push($empty, $data7);
					$data23 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
					array_push($empty, $data8);
					$data24 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
					array_push($empty, $data9);
					$data25 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
					array_push($empty, $data10);
					$data26 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
					array_push($empty, $data11);
					$data27 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
					array_push($empty, $data12);
					$data28 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
					array_push($empty, $data13);

					foreach ($data14 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data15 as $key => $value) {
						array_push($subtype, $value);
					}


					foreach ($data1 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data2 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data3 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data4 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data5 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data6 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data7 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data8 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data9 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data10 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data11 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data12 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data13 as $key => $value) {
						array_push($subtype, $value);
					}

					foreach ($data16 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data17 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data18 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data19 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data20 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data21 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data22 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data23 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data24 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data25 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data26 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data27 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data28 as $key => $value) {
						array_push($subtype, $value);
					}
				}

				$final = array_count_values($subtype);

				foreach ($final as $key => $value) {
					$out['label'] = $key;
					$out['value'] = $value;
					array_push($problems, $out);
				}

				return $problems;


				break;
			
			default:
				# code...
				break;
		}
	}elseif ($dist != 'All' && $scl != 'All_dist' || $dist != 'All' && $scl != 'All') {
		switch ($req_type) {
			case 'Emergency':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Emergency'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Emergency', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
				foreach ($emer as $em) {
					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];

					foreach ($data1 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data2 as $key => $value) {
						array_push($subtype, $value);
					}
				}

				$final = array_count_values($subtype);

				foreach ($final as $key => $value) {
					$out['label'] = $key;
					$out['value'] = $value;
					array_push($problems, $out);
				}

				return $problems;

				break;

			case 'Chronic':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Chronic'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Chronic', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
				$empty = [];
				foreach ($emer as $em) {

					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
					array_push($empty, $data1);
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
					array_push($empty, $data2);
					$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
					array_push($empty, $data3);
					$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
					array_push($empty, $data4);
					$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
					array_push($empty, $data5);
					$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
					array_push($empty, $data6);
					$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
					array_push($empty, $data7);
					$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
					array_push($empty, $data8);
					$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
					array_push($empty, $data9);
					$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
					array_push($empty, $data10);
					$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
					array_push($empty, $data11);
					$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
					array_push($empty, $data12);
					$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
					array_push($empty, $data13);

					foreach ($data1 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data2 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data3 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data4 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data5 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data6 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data7 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data8 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data9 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data10 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data11 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data12 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data13 as $key => $value) {
						array_push($subtype, $value);
					}
				
				}

				$final = array_count_values($subtype);

				foreach ($final as $key => $value) {
					$out['label'] = $key;
					$out['value'] = $value;
					array_push($problems, $out);
				}

				return $problems;
				break;

			case 'Normal':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Normal'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Normal', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
				$empty = [];
				foreach ($emer as $em) {

					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
					array_push($empty, $data1);
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
					array_push($empty, $data2);
					$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
					array_push($empty, $data3);
					$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
					array_push($empty, $data4);
					$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
					array_push($empty, $data5);
					$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
					array_push($empty, $data6);
					$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
					array_push($empty, $data7);
					$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
					array_push($empty, $data8);
					$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
					array_push($empty, $data9);
					$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
					array_push($empty, $data10);
					$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
					array_push($empty, $data11);
					$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
					array_push($empty, $data12);
					$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
					array_push($empty, $data13);

					foreach ($data1 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data2 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data3 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data4 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data5 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data6 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data7 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data8 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data9 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data10 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data11 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data12 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data13 as $key => $value) {
						array_push($subtype, $value);
					}				
				}

				$final = array_count_values($subtype);

				foreach ($final as $key => $value) {
					$out['label'] = $key;
					$out['value'] = $value;
					array_push($problems, $out);
				}

				return $problems;

				break;

			case 'Cured':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1.Problem Info.Emergency', 'doc_data.widget_data.page1.Problem Info.Chronic', 'doc_data.widget_data.page1.Problem Info.Normal'))->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');

				$empty = [];

				foreach ($emer as $key => $em) {
					$data14 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
					$data15 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];

					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
					array_push($empty, $data1);
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
					array_push($empty, $data2);
					$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
					array_push($empty, $data3);
					$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
					array_push($empty, $data4);
					$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
					array_push($empty, $data5);
					$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
					array_push($empty, $data6);
					$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
					array_push($empty, $data7);
					$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
					array_push($empty, $data8);
					$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
					array_push($empty, $data9);
					$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
					array_push($empty, $data10);
					$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
					array_push($empty, $data11);
					$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
					array_push($empty, $data12);
					$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
					array_push($empty, $data13);

					$data16 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
					array_push($empty, $data1);
					$data17 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
					array_push($empty, $data2);
					$data18 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
					array_push($empty, $data3);
					$data19 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
					array_push($empty, $data4);
					$data20 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
					array_push($empty, $data5);
					$data21 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
					array_push($empty, $data6);
					$data22 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
					array_push($empty, $data7);
					$data23 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
					array_push($empty, $data8);
					$data24 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
					array_push($empty, $data9);
					$data25 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
					array_push($empty, $data10);
					$data26 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
					array_push($empty, $data11);
					$data27 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
					array_push($empty, $data12);
					$data28 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
					array_push($empty, $data13);

					foreach ($data14 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data15 as $key => $value) {
						array_push($subtype, $value);
					}


					foreach ($data1 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data2 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data3 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data4 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data5 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data6 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data7 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data8 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data9 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data10 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data11 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data12 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data13 as $key => $value) {
						array_push($subtype, $value);
					}

					foreach ($data16 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data17 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data18 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data19 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data20 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data21 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data22 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data23 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data24 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data25 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data26 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data27 as $key => $value) {
						array_push($subtype, $value);
					}
					foreach ($data28 as $key => $value) {
						array_push($subtype, $value);
					}
				}

				$final = array_count_values($subtype);

				foreach ($final as $key => $value) {
					$out['label'] = $key;
					$out['value'] = $value;
					array_push($problems, $out);
				}

				return $problems;


				break;
			
			default:
				# code...
				break;
		}
	}

}

public function get_schools_by_symptom_for_requests($symptom, $academic, $dist, $scl, $request_type)
{

	if($academic == '2015-2016'){
		$start_date = '2015-05-20';
		$end_date = '2016-05-20';
	}elseif($academic == '2016-2017'){
		$start_date = '2016-05-21';
		$end_date = '2017-05-20';
	}elseif ($academic == '2017-2018') {
		$start_date = '2017-05-21';
		$end_date = '2018-05-20';
	}elseif ($academic == '2018-2019') {
		$start_date = '2018-05-21';
		$end_date = '2019-05-20';
	}elseif ($academic == '2019-2020') {
		$start_date = '2019-05-21';
		$end_date = '2020-05-20';
	}

	$schools =[];

	if($dist == 'All' && $scl == 'All_dist' || $dist == 'All' && $scl == 'All')
	{
		
		switch ($request_type) {
			case 'Emergency':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where('doc_data.widget_data.page2.Review Info.Request Type','Emergency')->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
						foreach ($emer as $em) {
							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
							$check1 = in_array($symptom, $data1);
							
							if(!empty($check1))
							{
								array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

							}
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];
							$check2 = in_array($symptom, $data2);
							if(!empty($check2))
							{
								array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

							}

						}

						

						$final = array_count_values($schools);

						//echo print_r($final, true); exit();

				return $final;
				break;

			
			case 'Chronic':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where('doc_data.widget_data.page2.Review Info.Request Type','Chronic')->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
				$empty = [];
				foreach ($emer as $em) {

					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
					$check1 = in_array($symptom, $data1);
							
					if(!empty($check1))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
					$check2 = in_array($symptom, $data2);
												
					if(!empty($check2))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
					$check3 = in_array($symptom, $data3);
												
					if(!empty($check3))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
					$check4 = in_array($symptom, $data4);
												
					if(!empty($check4))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
					$check5 = in_array($symptom, $data5);
												
					if(!empty($check5))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
					$check6 = in_array($symptom, $data6);
												
					if(!empty($check6))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
					$check7 = in_array($symptom, $data7);
												
					if(!empty($check7))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
					$check8 = in_array($symptom, $data8);
												
					if(!empty($check8))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
					$check9 = in_array($symptom, $data9);
												
					if(!empty($check9))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
					$check10 = in_array($symptom, $data10);
												
					if(!empty($check10))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
					$check11 = in_array($symptom, $data11);
												
					if(!empty($check11))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
					$check12 = in_array($symptom, $data12);
												
					if(!empty($check12))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
					$check13 = in_array($symptom, $data13);
												
					if(!empty($check13))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
				}

				
				$final = array_count_values($schools);

				return $final;
				break;

			case 'Normal':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where('doc_data.widget_data.page2.Review Info.Request Type','Normal')->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
				$empty = [];
				foreach ($emer as $em) {

					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
					$check1 = in_array($symptom, $data1);
							
					if(!empty($check1))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
					$check2 = in_array($symptom, $data2);
							
					if(!empty($check2))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
					$check3 = in_array($symptom, $data3);
							
					if(!empty($check3))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
					$check4 = in_array($symptom, $data4);
							
					if(!empty($check4))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
					$check5 = in_array($symptom, $data5);
							
					if(!empty($check5))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
					$check6 = in_array($symptom, $data6);
							
					if(!empty($check6))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
					$check7 = in_array($symptom, $data7);
							
					if(!empty($check7))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
					$check8 = in_array($symptom, $data8);
							
					if(!empty($check8))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
					$check9 = in_array($symptom, $data9);
							
					if(!empty($check9))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
					$check10 = in_array($symptom, $data10);
							
					if(!empty($check10))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
					$check11 = in_array($symptom, $data11);
							
					if(!empty($check11))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
					$check12 = in_array($symptom, $data12);
							
					if(!empty($check12))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
					$check13 = in_array($symptom, $data13);
							
					if(!empty($check13))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
				}


				$final = array_count_values($schools);

				return $final;

				break;

			case 'Cured':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');

				$empty = [];

				foreach ($emer as $key => $em) {
					$data14 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
					$check14 = in_array($symptom, $data14);
							
					if(!empty($check14))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data15 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];
					$check15 = in_array($symptom, $data15);
							
					if(!empty($check15))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}

					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
					$check1 = in_array($symptom, $data1);
							
					if(!empty($check1))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
					$check2 = in_array($symptom, $data2);
							
					if(!empty($check2))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
					$check3 = in_array($symptom, $data3);
							
					if(!empty($check3))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
					$check4 = in_array($symptom, $data4);
							
					if(!empty($check4))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
					$check5 = in_array($symptom, $data5);
							
					if(!empty($check5))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
					$check6 = in_array($symptom, $data6);
							
					if(!empty($check6))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
					$check7 = in_array($symptom, $data7);
							
					if(!empty($check7))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
					$check8 = in_array($symptom, $data8);
							
					if(!empty($check8))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
					$check9 = in_array($symptom, $data9);
							
					if(!empty($check9))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
					$check10 = in_array($symptom, $data10);
							
					if(!empty($check10))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					};
					$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
					$check11 = in_array($symptom, $data11);
							
					if(!empty($check11))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					};
					$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
					$check12 = in_array($symptom, $data12);
							
					if(!empty($check12))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					};
					$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
					$check13 = in_array($symptom, $data13);
							
					if(!empty($check13))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					};

					$data16 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
					$check16 = in_array($symptom, $data16);
							
					if(!empty($check16))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					};
					$data17 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
					$check17 = in_array($symptom, $data17);
							
					if(!empty($check17))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					};
					$data18 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
					$check18 = in_array($symptom, $data18);
							
					if(!empty($check18))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					};
					$data19 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
					$check19 = in_array($symptom, $data19);
							
					if(!empty($check19))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data20 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
					$check20 = in_array($symptom, $data20);
							
					if(!empty($check20))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data21 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
					$check21 = in_array($symptom, $data21);
							
					if(!empty($check21))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data22 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
					$check22 = in_array($symptom, $data22);
							
					if(!empty($check22))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data23 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
					$check23 = in_array($symptom, $data23);
							
					if(!empty($check23))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data24 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
					$check24 = in_array($symptom, $data24);
							
					if(!empty($check24))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data25 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
					$check25 = in_array($symptom, $data25);
							
					if(!empty($check25))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data26 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
					$check26 = in_array($symptom, $data26);
							
					if(!empty($check26))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data27 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
					$check27 = in_array($symptom, $data27);
							
					if(!empty($check27))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data28 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
					$check28 = in_array($symptom, $data28);
							
					if(!empty($check28))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}

				}
				
				$final = array_count_values($schools);

				return $final;

				break;
			
			default:
				# code...
				break;
		}

		
	}elseif ($dist != 'All' && $scl == 'All_dist' || $dist != 'All' && $scl == 'All') {
		
	
		switch ($request_type) {
			case 'Emergency':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Emergency', 'doc_data.widget_data.page1.Student Info.District.field_ref'=> $dist))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
						foreach ($emer as $em) {
							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
							$check1 = in_array($symptom, $data1);
							
							if(!empty($check1))
							{
								array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

							}
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];
							$check2 = in_array($symptom, $data2);
							if(!empty($check2))
							{
								array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

							}

						}

						

						$final = array_count_values($schools);

						//echo print_r($final, true); exit();

				return $final;
				break;

			
			case 'Chronic':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Chronic', 'doc_data.widget_data.page1.Student Info.District.field_ref'=> $dist))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
				$empty = [];
				foreach ($emer as $em) {

					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
					$check1 = in_array($symptom, $data1);
							
					if(!empty($check1))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
					$check2 = in_array($symptom, $data2);
												
					if(!empty($check2))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
					$check3 = in_array($symptom, $data3);
												
					if(!empty($check3))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
					$check4 = in_array($symptom, $data4);
												
					if(!empty($check4))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
					$check5 = in_array($symptom, $data5);
												
					if(!empty($check5))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
					$check6 = in_array($symptom, $data6);
												
					if(!empty($check6))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
					$check7 = in_array($symptom, $data7);
												
					if(!empty($check7))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
					$check8 = in_array($symptom, $data8);
												
					if(!empty($check8))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
					$check9 = in_array($symptom, $data9);
												
					if(!empty($check9))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
					$check10 = in_array($symptom, $data10);
												
					if(!empty($check10))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
					$check11 = in_array($symptom, $data11);
												
					if(!empty($check11))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
					$check12 = in_array($symptom, $data12);
												
					if(!empty($check12))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
					$check13 = in_array($symptom, $data13);
												
					if(!empty($check13))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
				}

				
				$final = array_count_values($schools);

				return $final;
				break;

			case 'Normal':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Normal', 'doc_data.widget_data.page1.Student Info.District.field_ref'=> $dist))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
				$empty = [];
				foreach ($emer as $em) {

					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
					$check1 = in_array($symptom, $data1);
							
					if(!empty($check1))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
					$check2 = in_array($symptom, $data2);
							
					if(!empty($check2))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
					$check3 = in_array($symptom, $data3);
							
					if(!empty($check3))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
					$check4 = in_array($symptom, $data4);
							
					if(!empty($check4))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
					$check5 = in_array($symptom, $data5);
							
					if(!empty($check5))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
					$check6 = in_array($symptom, $data6);
							
					if(!empty($check6))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
					$check7 = in_array($symptom, $data7);
							
					if(!empty($check7))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
					$check8 = in_array($symptom, $data8);
							
					if(!empty($check8))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
					$check9 = in_array($symptom, $data9);
							
					if(!empty($check9))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
					$check10 = in_array($symptom, $data10);
							
					if(!empty($check10))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
					$check11 = in_array($symptom, $data11);
							
					if(!empty($check11))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
					$check12 = in_array($symptom, $data12);
							
					if(!empty($check12))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
					$check13 = in_array($symptom, $data13);
							
					if(!empty($check13))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
				}


				$final = array_count_values($schools);

				return $final;

				break;

			case 'Cured':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured', 'doc_data.widget_data.page1.Student Info.District.field_ref'=> $dist))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');

				

				$empty = [];

				foreach ($emer as $key => $em) {
					$data14 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
					$check14 = in_array($symptom, $data14);
							
					if(!empty($check14))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data15 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];
					$check15 = in_array($symptom, $data15);
							
					if(!empty($check15))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}

					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
					$check1 = in_array($symptom, $data1);
							
					if(!empty($check1))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
					$check2 = in_array($symptom, $data2);
							
					if(!empty($check2))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
					$check3 = in_array($symptom, $data3);
							
					if(!empty($check3))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
					$check4 = in_array($symptom, $data4);
							
					if(!empty($check4))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
					$check5 = in_array($symptom, $data5);
							
					if(!empty($check5))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
					$check6 = in_array($symptom, $data6);
							
					if(!empty($check6))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
					$check7 = in_array($symptom, $data7);
							
					if(!empty($check7))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
					$check8 = in_array($symptom, $data8);
							
					if(!empty($check8))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
					$check9 = in_array($symptom, $data9);
							
					if(!empty($check9))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
					$check10 = in_array($symptom, $data10);
							
					if(!empty($check10))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					};
					$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
					$check11 = in_array($symptom, $data11);
							
					if(!empty($check11))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					};
					$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
					$check12 = in_array($symptom, $data12);
							
					if(!empty($check12))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					};
					$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
					$check13 = in_array($symptom, $data13);
							
					if(!empty($check13))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					};

					$data16 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
					$check16 = in_array($symptom, $data16);
							
					if(!empty($check16))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					};
					$data17 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
					$check17 = in_array($symptom, $data17);
							
					if(!empty($check17))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					};
					$data18 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
					$check18 = in_array($symptom, $data18);
							
					if(!empty($check18))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					};
					$data19 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
					$check19 = in_array($symptom, $data19);
							
					if(!empty($check19))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data20 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
					$check20 = in_array($symptom, $data20);
							
					if(!empty($check20))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data21 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
					$check21 = in_array($symptom, $data21);
							
					if(!empty($check21))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data22 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
					$check22 = in_array($symptom, $data22);
							
					if(!empty($check22))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data23 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
					$check23 = in_array($symptom, $data23);
							
					if(!empty($check23))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data24 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
					$check24 = in_array($symptom, $data24);
							
					if(!empty($check24))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data25 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
					$check25 = in_array($symptom, $data25);
							
					if(!empty($check25))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data26 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
					$check26 = in_array($symptom, $data26);
							
					if(!empty($check26))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data27 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
					$check27 = in_array($symptom, $data27);
							
					if(!empty($check27))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data28 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
					$check28 = in_array($symptom, $data28);
							
					if(!empty($check28))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}

				}
				
				$final = array_count_values($schools);

				return $final;

				break;
			
			default:
				# code...
				break;
		}

		
	}elseif ($dist != 'All' && $scl != 'All_dist' || $dist != 'All' && $scl != 'All') {
		

		switch ($request_type) {
			case 'Emergency':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Emergency', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
						foreach ($emer as $em) {
							$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
							$check1 = in_array($symptom, $data1);
							
							if(!empty($check1))
							{
								array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

							}
							$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];
							$check2 = in_array($symptom, $data2);
							if(!empty($check2))
							{
								array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

							}

						}

						

						$final = array_count_values($schools);

						//echo print_r($final, true); exit();

				return $final;
				break;

			
			case 'Chronic':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Chronic', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
				$empty = [];
				foreach ($emer as $em) {

					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
					$check1 = in_array($symptom, $data1);
							
					if(!empty($check1))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
					$check2 = in_array($symptom, $data2);
												
					if(!empty($check2))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
					$check3 = in_array($symptom, $data3);
												
					if(!empty($check3))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
					$check4 = in_array($symptom, $data4);
												
					if(!empty($check4))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
					$check5 = in_array($symptom, $data5);
												
					if(!empty($check5))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
					$check6 = in_array($symptom, $data6);
												
					if(!empty($check6))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
					$check7 = in_array($symptom, $data7);
												
					if(!empty($check7))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
					$check8 = in_array($symptom, $data8);
												
					if(!empty($check8))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
					$check9 = in_array($symptom, $data9);
												
					if(!empty($check9))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
					$check10 = in_array($symptom, $data10);
												
					if(!empty($check10))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
					$check11 = in_array($symptom, $data11);
												
					if(!empty($check11))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
					$check12 = in_array($symptom, $data12);
												
					if(!empty($check12))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
					$check13 = in_array($symptom, $data13);
												
					if(!empty($check13))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
				}

				
				$final = array_count_values($schools);

				return $final;
				break;

			case 'Normal':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Normal', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');


				$empty = [];
				foreach ($emer as $em) {

					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
					$check1 = in_array($symptom, $data1);
							
					if(!empty($check1))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
					$check2 = in_array($symptom, $data2);
							
					if(!empty($check2))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
					$check3 = in_array($symptom, $data3);
							
					if(!empty($check3))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
					$check4 = in_array($symptom, $data4);
							
					if(!empty($check4))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
					$check5 = in_array($symptom, $data5);
							
					if(!empty($check5))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
					$check6 = in_array($symptom, $data6);
							
					if(!empty($check6))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
					$check7 = in_array($symptom, $data7);
							
					if(!empty($check7))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
					$check8 = in_array($symptom, $data8);
							
					if(!empty($check8))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
					$check9 = in_array($symptom, $data9);
							
					if(!empty($check9))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
					$check10 = in_array($symptom, $data10);
							
					if(!empty($check10))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
					$check11 = in_array($symptom, $data11);
							
					if(!empty($check11))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
					$check12 = in_array($symptom, $data12);
							
					if(!empty($check12))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
					$check13 = in_array($symptom, $data13);
							
					if(!empty($check13))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
				}


				$final = array_count_values($schools);

				return $final;

				break;

			case 'Cured':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');

				$empty = [];

				foreach ($emer as $key => $em) {
					$data14 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
					$check14 = in_array($symptom, $data14);
							
					if(!empty($check14))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data15 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];
					$check15 = in_array($symptom, $data15);
							
					if(!empty($check15))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}

					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
					$check1 = in_array($symptom, $data1);
							
					if(!empty($check1))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
					$check2 = in_array($symptom, $data2);
							
					if(!empty($check2))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
					$check3 = in_array($symptom, $data3);
							
					if(!empty($check3))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
					$check4 = in_array($symptom, $data4);
							
					if(!empty($check4))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
					$check5 = in_array($symptom, $data5);
							
					if(!empty($check5))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
					$check6 = in_array($symptom, $data6);
							
					if(!empty($check6))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
					$check7 = in_array($symptom, $data7);
							
					if(!empty($check7))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
					$check8 = in_array($symptom, $data8);
							
					if(!empty($check8))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
					$check9 = in_array($symptom, $data9);
							
					if(!empty($check9))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
					$check10 = in_array($symptom, $data10);
							
					if(!empty($check10))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					};
					$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
					$check11 = in_array($symptom, $data11);
							
					if(!empty($check11))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					};
					$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
					$check12 = in_array($symptom, $data12);
							
					if(!empty($check12))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					};
					$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
					$check13 = in_array($symptom, $data13);
							
					if(!empty($check13))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					};

					$data16 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
					$check16 = in_array($symptom, $data16);
							
					if(!empty($check16))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					};
					$data17 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
					$check17 = in_array($symptom, $data17);
							
					if(!empty($check17))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					};
					$data18 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
					$check18 = in_array($symptom, $data18);
							
					if(!empty($check18))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					};
					$data19 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
					$check19 = in_array($symptom, $data19);
							
					if(!empty($check19))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data20 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
					$check20 = in_array($symptom, $data20);
							
					if(!empty($check20))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data21 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
					$check21 = in_array($symptom, $data21);
							
					if(!empty($check21))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data22 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
					$check22 = in_array($symptom, $data22);
							
					if(!empty($check22))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data23 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
					$check23 = in_array($symptom, $data23);
							
					if(!empty($check23))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data24 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
					$check24 = in_array($symptom, $data24);
							
					if(!empty($check24))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data25 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
					$check25 = in_array($symptom, $data25);
							
					if(!empty($check25))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data26 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
					$check26 = in_array($symptom, $data26);
							
					if(!empty($check26))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data27 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
					$check27 = in_array($symptom, $data27);
							
					if(!empty($check27))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}
					$data28 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
					$check28 = in_array($symptom, $data28);
							
					if(!empty($check28))
					{
						array_push($schools, $em['doc_data']['widget_data']['page1']['Student Info']['School Name']['field_ref']);

					}

				}
				
				$final = array_count_values($schools);

				return $final;

				break;
			
			default:
				# code...
				break;
		}

		
	}
}

public function get_students_by_requests_symptom($symptom, $academic, $dist, $scl, $request_type)
{
	if($academic == '2015-2016'){
		$start_date = '2015-05-20';
		$end_date = '2016-05-20';
	}elseif($academic == '2016-2017'){
		$start_date = '2016-05-21';
		$end_date = '2017-05-20';
	}elseif ($academic == '2017-2018') {
		$start_date = '2017-05-21';
		$end_date = '2018-05-20';
	}elseif ($academic == '2018-2019') {
		$start_date = '2018-05-21';
		$end_date = '2019-05-20';
	}elseif ($academic == '2019-2020') {
		$start_date = '2019-05-21';
		$end_date = '2020-05-20';
	}

	$schools = [];

		switch ($request_type) {
			case 'Emergency':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Emergency', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');


					foreach ($emer as $em) {
						$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
						$check1 = in_array($symptom, $data1);
						
						if(!empty($check1))
						{
							array_push($schools, $em);

						}
						$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];
						$check2 = in_array($symptom, $data2);
						if(!empty($check2))
						{
							array_push($schools, $em);

						}

					}


				
				return $schools;
				break;

			case 'Chronic':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Chronic', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');
				$empty = [];
				foreach ($emer as $em) {

					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
					$check1 = in_array($symptom, $data1);
							
					if(!empty($check1))
					{
						array_push($schools, $em);

					}
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
					$check2 = in_array($symptom, $data2);
												
					if(!empty($check2))
					{
						array_push($schools, $em);

					}
					$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
					$check3 = in_array($symptom, $data3);
												
					if(!empty($check3))
					{
						array_push($schools, $em);

					}
					$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
					$check4 = in_array($symptom, $data4);
												
					if(!empty($check4))
					{
						array_push($schools, $em);

					}
					$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
					$check5 = in_array($symptom, $data5);
												
					if(!empty($check5))
					{
						array_push($schools, $em);

					}
					$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
					$check6 = in_array($symptom, $data6);
												
					if(!empty($check6))
					{
						array_push($schools, $em);

					}
					$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
					$check7 = in_array($symptom, $data7);
												
					if(!empty($check7))
					{
						array_push($schools, $em);

					}
					$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
					$check8 = in_array($symptom, $data8);
												
					if(!empty($check8))
					{
						array_push($schools, $em);

					}
					$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
					$check9 = in_array($symptom, $data9);
												
					if(!empty($check9))
					{
						array_push($schools, $em);

					}
					$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
					$check10 = in_array($symptom, $data10);
												
					if(!empty($check10))
					{
						array_push($schools, $em);

					}
					$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
					$check11 = in_array($symptom, $data11);
												
					if(!empty($check11))
					{
						array_push($schools, $em);

					}
					$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
					$check12 = in_array($symptom, $data12);
												
					if(!empty($check12))
					{
						array_push($schools, $em);

					}
					$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
					$check13 = in_array($symptom, $data13);
												
					if(!empty($check13))
					{
						array_push($schools, $em);

					}
				}

				
				return $schools;
				break;

			case 'Normal':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Request Type'=> 'Normal', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');


				$empty = [];
				foreach ($emer as $em) {

					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
					$check1 = in_array($symptom, $data1);
							
					if(!empty($check1))
					{
						array_push($schools, $em);

					}
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
					$check2 = in_array($symptom, $data2);
							
					if(!empty($check2))
					{
						array_push($schools, $em);

					}
					$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
					$check3 = in_array($symptom, $data3);
							
					if(!empty($check3))
					{
						array_push($schools, $em);

					}
					$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
					$check4 = in_array($symptom, $data4);
							
					if(!empty($check4))
					{
						array_push($schools, $em);

					}
					$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
					$check5 = in_array($symptom, $data5);
							
					if(!empty($check5))
					{
						array_push($schools, $em);

					}
					$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
					$check6 = in_array($symptom, $data6);
							
					if(!empty($check6))
					{
						array_push($schools, $em);

					}
					$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
					$check7 = in_array($symptom, $data7);
							
					if(!empty($check7))
					{
						array_push($schools, $em);

					}
					$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
					$check8 = in_array($symptom, $data8);
							
					if(!empty($check8))
					{
						array_push($schools, $em);

					}
					$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
					$check9 = in_array($symptom, $data9);
							
					if(!empty($check9))
					{
						array_push($schools, $em);

					}
					$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
					$check10 = in_array($symptom, $data10);
							
					if(!empty($check10))
					{
						array_push($schools, $em);

					}
					$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
					$check11 = in_array($symptom, $data11);
							
					if(!empty($check11))
					{
						array_push($schools, $em);

					}
					$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
					$check12 = in_array($symptom, $data12);
							
					if(!empty($check12))
					{
						array_push($schools, $em);

					}
					$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
					$check13 = in_array($symptom, $data13);
							
					if(!empty($check13))
					{
						array_push($schools, $em);

					}
				}


				return $schools;
				break;

			case 'Cured':
				$emer = $this->mongo_db->select(array('doc_data.widget_data.page1'))->where(array('doc_data.widget_data.page2.Review Info.Status'=> 'Cured', 'doc_data.widget_data.page1.Student Info.School Name.field_ref'=> $scl))->whereBetween('history.0.time', $start_date, $end_date)->get('healthcare2016531124515424_static_html');

				$empty = [];

				foreach ($emer as $key => $em) {
					$data14 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Disease'];
					$check14 = in_array($symptom, $data14);
							
					if(!empty($check14))
					{
						array_push($schools, $em);

					}
					$data15 = $em['doc_data']['widget_data']['page1']['Problem Info']['Emergency']['Bites'];
					$check15 = in_array($symptom, $data15);
							
					if(!empty($check15))
					{
						array_push($schools, $em);

					}

					$data1 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Eyes'];
					$check1 = in_array($symptom, $data1);
							
					if(!empty($check1))
					{
						array_push($schools, $em);

					}
					$data2 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Ent'];
					$check2 = in_array($symptom, $data2);
							
					if(!empty($check2))
					{
						array_push($schools, $em);

					}
					$data3 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Central_nervous_system'];
					$check3 = in_array($symptom, $data3);
							
					if(!empty($check3))
					{
						array_push($schools, $em);

					}
					$data4 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Respiratory_system'];
					$check4 = in_array($symptom, $data4);
							
					if(!empty($check4))
					{
						array_push($schools, $em);

					}
					$data5 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Cardio_vascular_system'];
					$check5 = in_array($symptom, $data5);
							
					if(!empty($check5))
					{
						array_push($schools, $em);

					}
					$data6 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Gastro_intestinal'];
					$check6 = in_array($symptom, $data6);
							
					if(!empty($check6))
					{
						array_push($schools, $em);

					}
					$data7 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Blood'];
					$check7 = in_array($symptom, $data7);
							
					if(!empty($check7))
					{
						array_push($schools, $em);

					}
					$data8 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Kidney'];
					$check8 = in_array($symptom, $data8);
							
					if(!empty($check8))
					{
						array_push($schools, $em);

					}
					$data9 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['VandM'];
					$check9 = in_array($symptom, $data9);
							
					if(!empty($check9))
					{
						array_push($schools, $em);

					}
					$data10 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Bones'];
					$check10 = in_array($symptom, $data10);
							
					if(!empty($check10))
					{
						array_push($schools, $em);

					};
					$data11 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Skin'];
					$check11 = in_array($symptom, $data11);
							
					if(!empty($check11))
					{
						array_push($schools, $em);

					};
					$data12 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Endo'];
					$check12 = in_array($symptom, $data12);
							
					if(!empty($check12))
					{
						array_push($schools, $em);

					};
					$data13 = $em['doc_data']['widget_data']['page1']['Problem Info']['Chronic']['Others'];
					$check13 = in_array($symptom, $data13);
							
					if(!empty($check13))
					{
						array_push($schools, $em);

					};

					$data16 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['General'];
					$check16 = in_array($symptom, $data16);
							
					if(!empty($check16))
					{
						array_push($schools, $em);

					};
					$data17 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Head'];
					$check17 = in_array($symptom, $data17);
							
					if(!empty($check17))
					{
						array_push($schools, $em);

					};
					$data18 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Eyes'];
					$check18 = in_array($symptom, $data18);
							
					if(!empty($check18))
					{
						array_push($schools, $em);

					};
					$data19 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Ent'];
					$check19 = in_array($symptom, $data19);
							
					if(!empty($check19))
					{
						array_push($schools, $em);

					}
					$data20 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Respiratory_system'];
					$check20 = in_array($symptom, $data20);
							
					if(!empty($check20))
					{
						array_push($schools, $em);

					}
					$data21 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Cardio_vascular_system'];
					$check21 = in_array($symptom, $data21);
							
					if(!empty($check21))
					{
						array_push($schools, $em);

					}
					$data22 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gastro_intestinal'];
					$check22 = in_array($symptom, $data22);
							
					if(!empty($check22))
					{
						array_push($schools, $em);

					}
					$data23 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Genito_urinary'];
					$check23 = in_array($symptom, $data23);
							
					if(!empty($check23))
					{
						array_push($schools, $em);

					}
					$data24 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Gynaecology'];
					$check24 = in_array($symptom, $data24);
							
					if(!empty($check24))
					{
						array_push($schools, $em);

					}
					$data25 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Endo_crinology'];
					$check25 = in_array($symptom, $data25);
							
					if(!empty($check25))
					{
						array_push($schools, $em);

					}
					$data26 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Musculo_skeletal_syatem'];
					$check26 = in_array($symptom, $data26);
							
					if(!empty($check26))
					{
						array_push($schools, $em);

					}
					$data27 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Central_nervous_system'];
					$check27 = in_array($symptom, $data27);
							
					if(!empty($check27))
					{
						array_push($schools, $em);

					}
					$data28 = $em['doc_data']['widget_data']['page1']['Problem Info']['Normal']['Psychiartic'];
					$check28 = in_array($symptom, $data28);
							
					if(!empty($check28))
					{
						array_push($schools, $em);

					}

				}
				
				return $schools;
				break;
			
			default:
				# code...
				break;
		}
		

	
}

public function getschoolsInformation_model()
{

	$final = [];

  	$this->mongo_db->switchDatabase ($this->common_db ['common_db']);

  	$district = $this->mongo_db->command(array('distinct' => 'panacea_schools_list' , 'key' => "district_name"));	
  	  	
    array_multisort($district['values'] );

  	foreach ($district['values'] as $key => $value)
  	{
  	
  		 $boy = $this->mongo_db->where('district_name', $value)->where(array('school_name' => array('$regex' => "B.,")))->count( 'panacea_schools_list');

  		 $girl = $this->mongo_db->where('district_name', $value)->where(array('school_name' => array('$regex' => "G.,")))->count( 'panacea_schools_list');	  		

  		 $data['dist'] = $value; 				
  		 $data['boy_scl'] = $boy;
  		 $data['grl_scl'] = $girl;
  		 array_push($final, $data);	  		
  	}
     return $final;

}

	public function get_hs_anemia_submitted_docs_students_model($date)
	{

	$query = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Blood' => 'Anemia'))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->whereLike('history.time', $date)->get('healthcare2016531124515424_static_html');
	return $query;

	}

	public function get_hs_surgery_submitted_docs_students_model($date,$status)
	{

	$query = $this->mongo_db->where('doc_data.widget_data.page2.Review Info.Status', $status)->whereLike('history.time', $date)->get('healthcare2016531124515424_static_html');
	return $query;

	}

	public function get_daily_doctor_visit_schools_list_model($date)
	{

	$query = $this->mongo_db->select(array("doc_data.widget_data.school_details.School Name"))->where(array('history.last_stage.time' => ($date) ? array('$regex' => $date) : array('$exists' => TRUE)))->get('doctor_visiting_reports');
	$all_schools = [];
	foreach ($query as $school) {

	$school_name  = $school['doc_data']['widget_data']['school_details']['School Name'];
	array_push($all_schools, $school_name);

	}

	$data = array_count_values($all_schools);

	return $data;

	}

	 public function get_dr_visit_schools_based_on_span_model($start, $end)
     {						
     	
     $query = $this->mongo_db->select(array("doc_data.widget_data.school_details.School Name"))->whereBetween('history.last_stage.time' , $start, $end)->get('doctor_visiting_reports');    

     				$all_schools = [];
     				foreach ($query as $school) {
     						
     				$school_name  = $school['doc_data']['widget_data']['school_details']['School Name'];
     				array_push($all_schools, $school_name);     							
     					}  
     					$data = array_count_values(array_filter($all_schools));  
     				    					
    				return $data;

     }

	 public function get_time_span_visiting_student_list_model($school_name,$start_date,$end_date)
	 {
	 	$query = $this->mongo_db->where(array("doc_data.widget_data.school_details.School Name" => $school_name))->whereBetween('history.last_stage.time' , $start_date,$end_date)->get('doctor_visiting_reports');  

	 	return $query;
	 }

	public function get_daily_doctor_visit_student_list_model($date, $status, $school_name)
	{

    $query = $this->mongo_db->where(array("doc_data.widget_data.school_details.School Name" => $school_name))->where(array('history.last_stage.time' => ($date) ? array('$regex' => $date) : array('$exists' => TRUE)))->get('doctor_visiting_reports');  

    return $query;

   }

   public function get_phone_numbers($dist, $scls)
	{
		$hs_no = [];
		$principal = [];
		$scl_array = [];

		$scl = (int)$scls;

		if($dist == 'All' && $scl == 'All'){
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$hs_number = $this->mongo_db->get ( $this->collections ['panacea_health_supervisors']);

			$prince_no = $this->mongo_db->get ( $this->collections ['panacea_schools']);
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

			foreach ($hs_number as $hs) {
			$no = $hs['hs_mob'];
			array_push($hs_no, $no);
			}

			foreach ($prince_no as $prince) {
			$nos = $prince['school_mob'];
			array_push($principal, $nos);
			$get_scl = $prince['school_name'];
			array_push($scl_array, $get_scl);
			}

		}elseif ($dist != 'All' && $scl == 'All') {
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$prince_no = $this->mongo_db->where('dt_name', $dist)->get ( $this->collections ['panacea_schools']);
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

			foreach ($prince_no as $prince) {
				$nos = $prince['school_mob'];
				array_push($principal, $nos);

				$get_scl = $prince['school_name'];
				array_push($scl_array, $get_scl);

				$get_with_scl = $prince['school_code'];

				$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
				$hs_number = $this->mongo_db->where('school_code', $get_with_scl)->get ( $this->collections ['panacea_health_supervisors']);
				$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
				$no = $hs_number['hs_mob'];
				array_push($hs_no, $no);
			}

		}elseif ($dist != 'All' && $scl != 'All') {
			$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
			$hs_number = $this->mongo_db->where('school_code', $scl)->get ( $this->collections ['panacea_health_supervisors']);

			$prince_no = $this->mongo_db->where('school_code', $scl)->get ( $this->collections ['panacea_schools']);
			$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

			foreach ($hs_number as $hs) {
			$no = $hs['hs_mob'];
			array_push($hs_no, $no);
			}

			foreach ($prince_no as $prince) {
			$nos = $prince['school_mob'];
			array_push($principal, $nos);
			$get_scl = $prince['school_name'];
			array_push($scl_array, $get_scl);
			}
		}

		$data['hs_nos']= $hs_no;
		$data['prince_nos'] = $principal;
		$data['schools'] = $scl_array;

		return $data;
	}

	public function save_sent_messages($doc_data, $history)
	{
		$form_data = array ();
		$form_data ['doc_data'] = $doc_data;
		$form_data ['history'] = $history;
		$query= $this->mongo_db->insert('panacea_sent_messages', $form_data);

		return $query;
	}

	public function messages_list_data($start_date, $end_date, $sent_type)
	{


		if($sent_type == 'All'){
			
			$query = $this->mongo_db->whereBetween('doc_data.widget_data.page1.date', $start_date, $end_date)->get('panacea_sent_messages');
			
		}else{
			$query = $this->mongo_db->where('doc_data.widget_data.page1.sent_to', $sent_type)->whereBetween('doc_data.widget_data.page1.date', $start_date, $end_date)->get('panacea_sent_messages');
		}

		return $query;
		
	}

	public function get_messages_to_show_schools($msg_id)
	{
		$query = $this->mongo_db->where('_id', new MongoId($msg_id))->get('panacea_sent_messages');

		return $query;
	}

	public function get_parents_data_to_fill($district, $school, $start, $end)
	{

		if($district == 'All' && $school == 'All'){
			$query = $this->mongo_db->whereBetween('doc_data.Date', $start, $end)->get('panacea_parents_otp_registration');
		}elseif ($district != 'All' && $school == 'All') {
			$query = $this->mongo_db->where('doc_data.District', $district)->whereBetween('doc_data.Date', $start, $end)->get('panacea_parents_otp_registration');
		}elseif ($district != 'All' && $school != 'All') {
			$query = $this->mongo_db->where('doc_data.School', $school)->whereBetween('doc_data.Date', $start, $end)->get('panacea_parents_otp_registration');
		}
		
		return $query;
	}

	public function get_excel_for_students_reports_model($district, $scl,$collection_year)
    {           
        $query = $this->mongo_db->select('dt_name')->where ( '_id', new MongoId ( "$district" ) )->get ( 'panacea_district' );
        if(!empty($query[0]['dt_name']))
        {
            $query = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=>$query[0]['dt_name'] , 'doc_data.widget_data.page2.Personal Information.School Name'=> $scl))->get($collection_year);
            return $query;  
        }
    }
	

	public function get_excel_for_registered_parents_data($district, $scl, $start, $end)
	{

		if($district == 'All' && $scl == 'All'){
			$query = $this->mongo_db->whereBetween('doc_data.Date', $start, $end)->get('panacea_parents_otp_registration');
		}elseif ($district != 'All' && $scl == 'All') {
			$query = $this->mongo_db->where('doc_data.District', $district)->whereBetween('doc_data.Date', $start, $end)->get('panacea_parents_otp_registration');
		}elseif ($district != 'All' && $scl != 'All') {
			$query = $this->mongo_db->where('doc_data.School', $scl)->whereBetween('doc_data.Date', $start, $end)->get('panacea_parents_otp_registration');
		}
		
		return $query;
	}

	// Requests notes excel//
	
	public function get_excel_for_request_notes_data($start, $end)
	{		
		/*$query = $this->mongo_db->whereBetween('datetime', $start, $end)->get('panacea_ehr_notes');	*/	

		$query = $this->mongo_db->select(array("uid","note","datetime","Name","Class","School_Name"))->where('datetime', array('$gte'=>$start), 'datetime', array('$lte'=>$end))->get('panacea_ehr_notes');

		return $query;
	}

	// Anemia Requests Excel//
	public function get_excel_for_anemia_request_model($start, $end)
    {

    $query = $this->mongo_db->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Blood' => 'Anemia'))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->whereBetween('history.time', $start, $end)->get('healthcare2016531124515424_static_html');
    //echo print_r($query,true);exit();
    return $query;

    }

	public function change_status_to_remove_from_list($id)
	{
		$set_to = array('doc_data.Status' => 0);
		$query = $this->mongo_db->where('_id', new MongoId($id))->set($set_to)->update('panacea_parents_otp_registration');

		
		if($query)
		{
		   return "UPDATE_SUCCESS";
		}
		else
		{
	       return "UPDATE_FAIL";
		}
	}

	public function get_excel_for_phone_nos($district, $scl)
	{
		if($district == 'All' && $scl == 'All'){

			$query = $this->mongo_db->orderBy ( array ('doc_data.widget_data.page2.Personal Information.Class' => 1) )->select(array('doc_data.widget_data.page1', 'doc_data.widget_data.page2'))->get('healthcare2016226112942701');

		}elseif ($district != 'All' && $scl == 'All') {
			$query = $this->mongo_db->orderBy ( array ('doc_data.widget_data.page2.Personal Information.Class' => 1) )->select(array('doc_data.widget_data.page1', 'doc_data.widget_data.page2'))->where('doc_data.widget_data.page2.Personal Information.District', $district)->get('healthcare2016226112942701');
		}elseif ($district != 'All' && $scl != 'All') {
			$query = $this->mongo_db->orderBy ( array ('doc_data.widget_data.page2.Personal Information.Class' => 1) )->select(array('doc_data.widget_data.page1', 'doc_data.widget_data.page2'))->where('doc_data.widget_data.page2.Personal Information.School Name', $scl)->get('healthcare2016226112942701');
		}

		return $query;
	}

	public function get_anemia_records_based_on_span_model($start, $end)
   	{    

  	$query = $this->mongo_db->select(array('doc_data.widget_data', 'history'))->whereBetween('history.time', $start, $end)->where(array('doc_data.widget_data.page1.Problem Info.Chronic.Blood' => 'Anemia'))->whereNe(array('doc_data.widget_data.page2.Review Info.Status' => "Cured"))->get('healthcare2016531124515424_static_html');

    return $query;

    }

    public function get_surgery_records_based_on_span_model($start, $end)
    {    
   
   	$query = $this->mongo_db->select(array('doc_data.widget_data', 'history'))->whereBetween('history.0.time', $start, $end)->where(array('doc_data.widget_data.page2.Review Info.Status' => 'Surgery-Needed'))->get('healthcare2016531124515424_static_html');  

    return $query;
    
    }

    public function get_parents_health_submitted_docs_data($start, $end, $district, $school)
    {
    	if($district == 'All' && $school == 'All'){
    		$query = $this->mongo_db->select(array('doc_data.widget_data.page1', 'doc_data.widget_data.page2.Family Health Info.Family Counts.Total Family No'))->whereBetween('doc_data.widget_data.page1.Personal Information.Date of Submission', $start, $end)->get('panacea_family_health_2020-2021');
    	}elseif ($district != 'All' && $school == 'All') {
    		$query = $this->mongo_db->select(array('doc_data.widget_data.page1', 'doc_data.widget_data.page2.Family Health Info.Family Counts.Total Family No'))->where('doc_data.widget_data.page1.District', $district)->whereBetween('doc_data.widget_data.page1.Personal Information.Date of Submission', $start, $end)->get('panacea_family_health_2020-2021');
    	}elseif ($district != 'All' && $school != 'All') {
    		$query = $this->mongo_db->select(array('doc_data.widget_data.page1', 'doc_data.widget_data.page2.Family Health Info.Family Counts.Total Family No'))->where('doc_data.widget_data.page1.School Name', $school)->whereBetween('doc_data.widget_data.page1.Personal Information.Date of Submission', $start, $end)->get('panacea_family_health_2020-2021');
    	}

    	return $query;
    }

    public function get_family_health_details($unique_id)
    {
    	$query = $this->mongo_db->whereLike('doc_data.widget_data.page1.Personal Information.Hospital Unique ID', $unique_id)->get('panacea_family_health_2020-2021');

    	return $query;
    }

    public function doctor_analysis_for_student_family($current, $parent, $doc_advice, $unique, $date, $doctor_data, $stud_status)
    {
    	 $datewise_update = array("Date"=>$date,"Current Condition"=>$current,"Parent Condition"=>$parent, "Doc Report" =>$doc_advice, "Student Status"=>$stud_status, "Doctor Details"=>$doctor_data);
	  
		   $query = array("doc_data.widget_data.page1.Personal Information.Hospital Unique ID"=>$unique);

		  
		   $update = array('$push'=>array("doctors_medical_reports.reports"=>$datewise_update));

		  
		   $response = $this->mongo_db->command(array( 
			'findAndModify' => $this->screening_app_col,
			'query'         => $query,
			'update'        => $update,
			'upsert'        => true
			));
 			

			if($response['ok'])
			{
			   return "UPDATE_SUCCESS";
			}
			else
			{
		       return "UPDATE_FAIL";
			}
    }

    public function requests_notes_model($today_date)
    {
    	$date = substr($today_date,0,-3); 
    	
	    $notes_query = $this->mongo_db->select('uid', 'datetime','note')->where(array('datetime' => array('$regex' => $date)))->get('panacea_ehr_notes');
    	
	    return $notes_query;
    }

     public function regular_followup_requests_model($today_date)
    {
    	$date = substr($today_date,0,-3); 
    	
    	 $exists_followup = array ("regular_follow_up.Follow_Up" => array ('$exists' => true),
            "regular_follow_up.Follow_Up.created_time" => array('$regex' => $date));
        	
	    $followup_query = $this->mongo_db->select('doc_data.widget_data.page1','regular_follow_up')->where($exists_followup)->get('healthcare2016531124515424_static_html');

	    return $followup_query;
    }

    public function get_regular_followup_requests_based_on_time_span_model($start, $end)
    {       	
   
    $followup_query = $this->mongo_db->select(array("doc_data.widget_data.page1","Follow_Up","regular_follow_up.Follow_Up"))->where('regular_follow_up.Follow_Up.created_time', array('$gte'=>$start), 'regular_follow_up.Follow_Up.created_time', array('$lte'=>$end))->get('healthcare2016531124515424_static_html');


    return $followup_query;

    }

// For secretary dashboard

     public function get_predictive_counts_zone_wise($academic_year, $district, $school_name)
    {


    	if($academic_year == '2015-2016'){
    		$span = 'healthcare2016226112942701_screening_final_2015-16';
    	}elseif($academic_year == '2016-2017'){
    		$span = 'healthcare2016226112942701_screening_final_2016-17';
    	}elseif ($academic_year == '2017-2018') {
    		$span = 'healthcare2016226112942701_screening_final_2017-18';
    	}elseif ($academic_year == '2018-2019') {
    		$span = 'healthcare2016226112942701_screening_final_2019';
    	}elseif ($academic_year == '2019-2020') {
    		$span = 'healthcare2016226112942701';
    	}

    	$final['red'] = 0;
		$final['orange'] = 0;
		$final['green'] = 0;

    	if($district == 'All' && $school_name == 'All'){
    		$query = $this->mongo_db->where(array('doctors_medical_reports'=>array('$exists'=>true)))->get($span);
    		//echo print_r(count($query), true);
    		foreach ($query as $last) {

    			foreach ($last['doctors_medical_reports'] as $repo) {
    				$data = end($repo);
    				$color = $data['Student Status'];
    				//echo print_r($color, true);
    				if($color == 'Green Zone'){
    					$final['green']++;
    				}elseif ($color == 'Orange Zone') {
    					$final['orange']++;
    				}elseif ($color == 'Red Zone') {
    					$final['green']++;
    				}
    			}

    			
    		}
    		
    	
    	}elseif ($district != 'All' && $school_name != 'All') {

    		$query = $this->mongo_db->where(array('doctors_medical_reports'=>array('$exists'=>true), 'doc_data.widget_data.page2.Personal Information.District'=>$district))->get($span);
    		//echo print_r(count($query), true);
    		foreach ($query as $last) {

    			foreach ($last['doctors_medical_reports'] as $repo) {
    				$data = end($repo);
    				$color = $data['Student Status'];
    				//echo print_r($color, true);
    				if($color == 'Green Zone'){
    					$final['green']++;
    				}elseif ($color == 'Orange Zone') {
    					$final['orange']++;
    				}elseif ($color == 'Red Zone') {
    					$final['green']++;
    				}
    			}

    			
    		}

    	}elseif ($district != 'All' && $school_name != 'All') {

    		$query = $this->mongo_db->where(array('doctors_medical_reports'=>array('$exists'=>true), 'doc_data.widget_data.page2.Personal Information.School Name'=>$school_name))->get($span);
    		//echo print_r(count($query), true);
    		foreach ($query as $last) {

    			foreach ($last['doctors_medical_reports'] as $repo) {
    				$data = end($repo);
    				$color = $data['Student Status'];
    				//echo print_r($color, true);
    				if($color == 'Green Zone'){
    					$final['green']++;
    				}elseif ($color == 'Orange Zone') {
    					$final['orange']++;
    				}elseif ($color == 'Red Zone') {
    					$final['green']++;
    				}
    			}

    			
    		}

    	}

    	return $final;

    }

    public function school_wise_predictive_zones($academic_year, $district, $school_name, $zone)
    {
    	if($academic_year == '2015-2016'){
    		$span = 'healthcare2016226112942701_screening_final_2015-16';
    	}elseif($academic_year == '2016-2017'){
    		$span = 'healthcare2016226112942701_screening_final_2016-17';
    	}elseif ($academic_year == '2017-2018') {
    		$span = 'healthcare2016226112942701_screening_final_2017-18';
    	}elseif ($academic_year == '2018-2019') {
    		$span = 'healthcare2016226112942701_screening_final_2019';
    	}elseif ($academic_year == '2019-2020') {
    		$span = 'healthcare2016226112942701';
    	}

    	//$zone_count = 0;
    	$final = [];
		//$final['orange'] = 0;
		//$final['green'] = 0;

    	if($district == 'All' && $school_name == 'All'){
    		$query = $this->mongo_db->where(array('doctors_medical_reports'=>array('$exists'=>true)))->get($span);
    		//echo print_r(count($query), true);
    		foreach ($query as $last) {

    			foreach ($last['doctors_medical_reports'] as $repo) {
    				$data = end($repo);
    				$color = $data['Student Status'];
    				//echo print_r($color, true);
    				if($color == $zone){
    					$scl_data = $last['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

    					array_push($final, $scl_data);

    				}
    			}

    			
    		}
    		
    	
    	}elseif ($district != 'All' && $school_name != 'All') {

    		$query = $this->mongo_db->where(array('doctors_medical_reports'=>array('$exists'=>true), 'doc_data.widget_data.page2.Personal Information.District'=>$district))->get($span);
    		//echo print_r(count($query), true);
    		foreach ($query as $last) {

    			foreach ($last['doctors_medical_reports'] as $repo) {
    				$data = end($repo);
    				$color = $data['Student Status'];
    				//echo print_r($color, true);
    				if($color == $zone){
    					$scl_data = $last['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

    					array_push($final, $scl_data);

    				}
    			}

    			
    		}

    	}elseif ($district != 'All' && $school_name != 'All') {

    		$query = $this->mongo_db->where(array('doctors_medical_reports'=>array('$exists'=>true), 'doc_data.widget_data.page2.Personal Information.School Name'=>$school_name))->get($span);
    		//echo print_r(count($query), true);
    		foreach ($query as $last) {

    			foreach ($last['doctors_medical_reports'] as $repo) {
    				$data = end($repo);
    				$color = $data['Student Status'];
    				//echo print_r($color, true);
    				if($color == $zone){
    					$scl_data = $last['doc_data']['widget_data']['page2']['Personal Information']['School Name'];

    					array_push($final, $scl_data);

    				}
    			}

    			
    		}

    	}

    	$result = array_count_values($final);

    	return $result;

    }

    public function get_predictive_students_selected_school($school, $academic, $zone)
    {
    	if($academic == '2015-2016'){
    		$span = 'healthcare2016226112942701_screening_final_2015-16';
    	}elseif($academic == '2016-2017'){
    		$span = 'healthcare2016226112942701_screening_final_2016-17';
    	}elseif ($academic == '2017-2018') {
    		$span = 'healthcare2016226112942701_screening_final_2017-18';
    	}elseif ($academic == '2018-2019') {
    		$span = 'healthcare2016226112942701_screening_final_2019';
    	}elseif ($academic == '2019-2020') {
    		$span = 'healthcare2016226112942701';
    	}

    	$final = [];

    	$query = $this->mongo_db->where(array('doctors_medical_reports'=>array('$exists'=>true), 'doc_data.widget_data.page2.Personal Information.School Name'=>$school))->get($span);
    		//echo print_r(count($query), true);
    		foreach ($query as $last) {

    			foreach ($last['doctors_medical_reports'] as $repo) {
    				$data = end($repo);
    				$color = $data['Student Status'];
    				//echo print_r($color, true);
    				if($color == $zone){

    					array_push($final, $last);

    				}
    			}

    			
    		}

    	return $final;

    }
  //close students  

    // Requqests Excel

    /*Author yoga*/

    public function get_excel_for_requests_span($district, $scl, $start_date, $end_date)
    {
    	$start = strval($start_date);
    	$end = strval($end_date);

    	if ($district == 'All' && $scl == 'All') {

    		$request['Normal'] = $this->mongo_db->whereGte('history.time', $start)->whereLte('history.time', $end)->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal"))->get($this->request_app_col_static_html);

    		$request['Emergency'] = $this->mongo_db->whereGte('history.time', $start)->whereLte('history.time', $end)->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Emergency"))->get($this->request_app_col_static_html);

    		$request['Chronic'] = $this->mongo_db->whereGte('history.time', $start)->whereLte('history.time', $end)->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic"))->get($this->request_app_col_static_html);
    		
    	}elseif ($district != 'All' && $scl == 'All') {

    		$request['Normal'] = $this->mongo_db->whereGte('history.time', $start)->whereLte('history.time', $end)->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal", "doc_data.widget_data.page1.District.field_ref"=>$district))->get($this->request_app_col_static_html);

    		$request['Emergency'] = $this->mongo_db->whereGte('history.time', $start)->whereLte('history.time', $end)->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Emergency", "doc_data.widget_data.page1.District.field_ref"=>$district))->get($this->request_app_col_static_html);

    		$request['Chronic'] = $this->mongo_db->whereGte('history.time', $start)->whereLte('history.time', $end)->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic", "doc_data.widget_data.page1.District.field_ref"=>$district))->get($this->request_app_col_static_html);

    	}elseif ($district != 'All' && $scl != 'All') {

    		$request['Normal'] = $this->mongo_db->whereGte('history.time', $start)->whereLte('history.time', $end)->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Normal", "doc_data.widget_data.page1.School Name.field_ref"=>$scl))->get($this->request_app_col_static_html);

    		$request['Emergency'] = $this->mongo_db->whereGte('history.time', $start)->whereLte('history.time', $end)->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Emergency", "doc_data.widget_data.page1.School Name.field_ref"=>$scl))->get($this->request_app_col_static_html);

    		$request['Chronic'] = $this->mongo_db->whereGte('history.time', $start)->whereLte('history.time', $end)->where(array('doc_data.widget_data.page2.Review Info.Request Type' => "Chronic", "doc_data.widget_data.page1.School Name.field_ref"=>$scl))->get($this->request_app_col_static_html);
    	}

    	return $request;

    }

    public function get_excel_for_attendance_span($dist, $scl, $start_date, $end_date)
    {
    	$start = strval($start_date);
    	$end = strval($end_date);

    	if ($dist == 'All' && $scl =='All') {
    		
    		$request = $this->mongo_db->whereGte('history.last_stage.time', $start)->whereLte('history.last_stage.time', $end)->orderBy(array('history.last_stage.time' => 1))->get($this->absent_app_col);


    	}elseif ($dist != 'All' && $scl =='All') {
    		
    		$request = $this->mongo_db->whereGte('history.last_stage.time', $start)->whereLte('history.last_stage.time', $end)->where('doc_data.widget_data.page1.Attendence Details.District', $dist)->orderBy(array('history.last_stage.time' => 1))->get($this->absent_app_col);

    	}elseif ($dist != 'All' && $scl !='All') {
    		
    		$request = $this->mongo_db->whereGte('history.last_stage.time', $start)->whereLte('history.last_stage.time', $end)->where('doc_data.widget_data.page1.Attendence Details.Select School', $scl)->orderBy(array('history.last_stage.time' => 1))->get($this->absent_app_col);

    	}

    	return $request;

    }

    public function get_excel_for_sanitation_span($dist, $scl, $start_date, $end_date)
    {
    	//$start = strval($start_date);
    	//$end = strval($end_date);

    	if($dist == 'All' && $scl =='All'){

    		//$request = $this->mongo_db->whereGte(array('history.last_stage.time'=>array('$regex'=>$start) ))->whereLte(array('history.last_stage.time'=>array('$regex'=>$end) ))->orderBy(array('history.last_stage.time' => 1))->get($this->sanitation_app_col_v2);
    		$request = [];
    		$query = $this->mongo_db->whereBetween('doc_data.widget_data.page4.Declaration Information.Date:', $start_date, $end_date)->orderBy(array('history.last_stage.time' => 1))->get($this->sanitation_app_col_v2);
    		if(isset($query) && !empty($query)){
    			foreach ($query as $data) {
    				//echo print_r($data, true);
    				$send = $data['doc_data']['widget_data']['daily']['Campus']['Cleanliness Of Campus'];
    				if(isset($send) && !empty($send)){
    					array_push($request, $data);
    				}
    			}
    		}

    	}elseif ($dist != 'All' && $scl =='All') {

    		$request = $this->mongo_db->whereGte('history.last_stage.time', $start)->whereLte('history.last_stage.time', $end)->where('doc_data.widget_data.page4.School Information.District', $dist)->orderBy(array('history.last_stage.time' => 1))->get($this->sanitation_app_col_v2);

    	}elseif ($dist != 'All' && $scl !='All') {
    		
    		$request = $this->mongo_db->whereGte('history.last_stage.time', $start)->whereLte('history.last_stage.time', $end)->where('doc_data.widget_data.page4.School Information.School Name', $scl)->orderBy(array('history.last_stage.time' => 1))->get($this->sanitation_app_col_v2);

    	}

    	return $request;

    }


    public function get_excel_for_hb_span($dist, $scl, $start, $end)
    {
    	ini_set('memory_limit', '2G');

    	if($dist == 'All' && $scl == 'All'){
    		$query = $this->mongo_db->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->get($this->hb_app_col);

    	} elseif ($dist != 'All' && $scl == 'All') {
    		
    		$query = $this->mongo_db->where('doc_data.widget_data.school_details.District', $dist)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->get($this->hb_app_col);

    	}elseif ($dist != 'All' && $scl != 'All') {
    		$query = $this->mongo_db->where('doc_data.widget_data.school_details.School Name', $scl)->whereBetween('doc_data.widget_data.page1.Student Details.HB_latest.month', $start, $end)->get($this->hb_app_col);
    	}

    	return $query;

    }
    public function get_excel_for_bmi_span($dist, $scl, $start, $end)
    {
    	ini_set('memory_limit', '2G');

    	if($dist == 'All' && $scl == 'All'){
    		
    		$query = $this->mongo_db->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start, $end)->get($this->bmi_app_col);

    	} elseif ($dist != 'All' && $scl == 'All') {
    		
    		$query = $this->mongo_db->where('doc_data.widget_data.school_details.District', $dist)->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start, $end)->get($this->bmi_app_col);

    	}elseif ($dist != 'All' && $scl != 'All') {

    		$query = $this->mongo_db->where('doc_data.widget_data.school_details.School Name', $scl)->whereBetween('doc_data.widget_data.page1.Student Details.BMI_latest.month', $start, $end)->get($this->bmi_app_col);
    	}

    	return $query;

    }

    public function get_excel_for_screening_overall($dist, $scl, $academic)
    {
    	ini_set('memory_limit', '10G');

    	if($academic == '2015-2016'){
    		$span = 'healthcare2016226112942701_screening_final_2015-16';
    	}elseif($academic == '2016-2017'){
    		$span = 'healthcare2016226112942701_screening_final_2016-17';
    	}elseif ($academic == '2017-2018') {
    		$span = 'healthcare2016226112942701_screening_final_2017-18';
    	}elseif ($academic == '2018-2019') {
    		$span = 'healthcare2016226112942701_screening_final_2019';
    	}elseif ($academic == '2019-2020') {
    		$span = 'healthcare2016226112942701';
    	}

    	$page3andpage9exists = array("doc_data.widget_data.page3.Physical Exam"=> array('$exists' =>true), 
			     "doc_data.widget_data.page9.Dental Check-up"=>array('$exists' =>true));

    	if ($dist == 'All' && $scl == 'All') {
    		$query = $this->mongo_db->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1))->where($page3andpage9exists)->get($span);
    	}elseif ($dist != 'All' && $scl == 'All') {

    		$query = $this->mongo_db->orderBy(array('doc_data.widget_data.page1.Personal Information.Hospital Unique ID' => 1))->where($page3andpage9exists)->where(array('doc_data.widget_data.page2.Personal Information.District' => $dist ))->get($span);

    	}elseif ($dist != 'All' && $scl != 'All') {

    		$query = $this->mongo_db->orderBy(array('doc_data.widget_data.page1.Personal Information.Student Health ID'=> 1))->where($page3andpage9exists)->where(array('doc_data.widget_data.page2.Personal Information.School Name' => $scl))->get($span);
			
    	}

    	return $query;
    }


// Done Screening excel

     // Regular follwoups

     public function get_regular_followup_cases_from_requests()
    {
        
        $query=$this->mongo_db->where(array('regular_follow_up.Active_status'=> 1))->get($this->request_app_col_static_html);

        return $query;
    }
    public function get_regular_followup_closed_cases()
    {
        $query = $this->mongo_db->where('regular_follow_up.Active_status', 0)->get($this->request_app_col_static_html);
        
        return $query;
    }

    public function get_request_notes_based_on_time_span_model($start, $end)
    {       	
   
    $query = $this->mongo_db->select(array("uid","note","datetime","Name","Class","School_Name"))->where('datetime', array('$gte'=>$start), 'datetime', array('$lte'=>$end))->get('panacea_ehr_notes');


    return $query;

    }

    public function get_excel_for_dr_responded_reports_model($dr_login,$start, $end)		
	{			 
       
  $query = $this->mongo_db->whereBetween('history.time', $start, $end)->where(array('history.current_stage' => "Doctor", 'history.submitted_by'=> $dr_login))->get($this->request_app_col_static_html);

	    return $query;

	}

	public function post_quotation_form_model($post)
    {
        if(isset($post) && !empty($post))
        {
            $data = array(
                
                'News_Feed' => $post['news_feed'],
                'Created_on' => Date("Y-m-d H:i:s")
            );

            $query = $this->mongo_db->insert('health_quotation_notes', $data);
            
            //$this->mongo_db->set(array('News_Feed' => true))->update('health_quotation_notes');
            return $query;
        }
 
    }

    public function datewise_quotation_notes_list_model($start, $end)
    {
     
     $get_details = $this->mongo_db->where('Created_on', array('$gte'=>$start), 'Created_on', array('$lte'=>$end))->select('News_Feed')->get('health_quotation_notes');   

     return $get_details;

    }

    public function get_excel_for_quotation_notes_model($start, $end)
    {          	
    	
        $query = $this->mongo_db->whereBetween('Created_on', $start, $end)->get('health_quotation_notes');    

        return $query;
    }

    public function panacea_rhso_reports_model($today_date)
    {    	
    	$date = substr($today_date,0,-3);
    	
    $query = $this->mongo_db->select(array("School Name","Campus.Description","Toilets.Description","Kitchen.Description","Dormitory.Description","history"))->where(array('history.created_time' => array('$regex' => $date)))->get('tswreis_rhso_sanitation_data');

    	return $query;
    }
     public function get_rhso_records_based_on_span_model($start, $end, $rhso_name)
    {  
    	//$email = str_replace('@', '#', $rhso_name);
    	$query = $this->mongo_db->select(array("School Name","Campus.Description","Toilets.Description","Kitchen.Description","Dormitory.Description","history"))->where('history.email', $rhso_name)->whereBetween('history.created_time' , $start,$end)->get('tswreis_rhso_sanitation_data');

    	return $query;
    }


    public function get_rhso_names()
{
    $this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
    $query = $this->mongo_db->select(array('Rhso_name', 'Email'))->where(array('Email' => array('$regex' => "rhso")))->get('panacea_mgmt_rhso_names');
    $this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
    
    return $query;
}

 public function get_rhso_hospital_records_based_on_span($start, $end, $rhso_name)		
    {			     
    	$email = str_replace('@', '#', $rhso_name);

    	//$query = $this->mongo_db->whereGte('history.last_stage.time', $start)->whereLte('history.last_stage.time', $end)->where(array('history.last_stage.submitted_by'=>$email))->get("field_officer_report");
    	$query = $this->mongo_db->where('history.last_stage.time', array('$gte'=>$start), 'history.last_stage.time', array('$lte'=>$end))->where(array('history.last_stage.submitted_by'=>$email))->get("field_officer_report");
    	
    	    return $query;

    }

  public function panacea_dr_not_responded_docs_model($passing_date)
   {

      $get_details = $this->mongo_db->whereLike('history.time', $passing_date)->whereNe(array('history.current_stage' => 'Doctor' , 'doc_data.widget_data.page2.Review Info.Status' => 'Cured'))->get('healthcare2016531124515424_static_html');

      return $get_details;
   }

   public function get_doctor_not_responded_span_model($start, $end)
    {  
    	
    	$query = $this->mongo_db->whereBetween('history.time' , $start,$end)->whereNe(array('history.current_stage' => 'Doctor' , 'doc_data.widget_data.page2.Review Info.Status' => 'Cured'))->get('healthcare2016531124515424_static_html');

    	return $query;
    }

    public function get_excel_doctor_not_responded_req_notes_model($start_date, $end_date)
	{

	$get_details = $this->mongo_db->whereBetween('history.time' , $start_date,$end_date)->whereNe(array('history.current_stage' => 'Doctor' , 'doc_data.widget_data.page2.Review Info.Status' => 'Cured'))->get('healthcare2016531124515424_static_html');

 	return $get_details;
	}


	public function get_covid_cases_students_model($start, $end)
    {
    
     $get_details = $this->mongo_db->select('doc_data.widget_data')->where('history.time', array('$gte'=>$start), 'history.time', array('$lte'=>$end))->where('doc_data.widget_data.page1.Problem Info.Emergency.Disease', 'Covid-19')->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->get('healthcare2016531124515424_static_html');
     
     return $get_details;

    }
    public function panacea_covid_cases_model($passing_date)
    {

    	$get_details = $this->mongo_db->select('doc_data.widget_data')->whereLike('history.time', $passing_date)->where('doc_data.widget_data.page1.Problem Info.Emergency.Disease', 'Covid-19')->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->get('healthcare2016531124515424_static_html');

        return $get_details;
    }
    public function get_excel_covidcases_model($start_date, $end_date)
    {
    	$get_details = $this->mongo_db->select('doc_data.widget_data')->where('history.time', array('$gte'=>$start_date), 'history.time', array('$lte'=>$end_date))->where('doc_data.widget_data.page1.Problem Info.Emergency.Disease', 'Covid-19')->whereNe('doc_data.widget_data.page2.Review Info.Status','Cured')->get('healthcare2016531124515424_static_html');
     
     return $get_details;
    }

    public function get_covid_cured_cases_students_model($start, $end)
    {
    
     $get_details = $this->mongo_db->select('doc_data.widget_data')->where('history.time', array('$gte'=>$start), 'history.time', array('$lte'=>$end))->where(array("doc_data.widget_data.page1.Problem Info.Emergency.Disease" => "Covid-19","doc_data.widget_data.page2.Review Info.Status" => "Cured"))->get('healthcare2016531124515424_static_html');
     
     return $get_details;

    }
    public function panacea_covid_cured_cases_model($passing_date)
    {

    	$get_details = $this->mongo_db->select('doc_data.widget_data')->whereLike('history.time', $passing_date)->where(array("doc_data.widget_data.page1.Problem Info.Emergency.Disease" => "Covid-19","doc_data.widget_data.page2.Review Info.Status" => "Cured"))->get('healthcare2016531124515424_static_html');

        return $get_details;
    }

    public function get_excel_covid_cured_cases_model($start_date, $end_date)
    {
    	$get_details = $this->mongo_db->select('doc_data.widget_data')->where('history.time', array('$gte'=>$start_date), 'history.time', array('$lte'=>$end_date))->where(array("doc_data.widget_data.page1.Problem Info.Emergency.Disease" => "Covid-19","doc_data.widget_data.page2.Review Info.Status" => "Cured"))->get('healthcare2016531124515424_static_html');
     
     return $get_details;
    }

    public function get_deadth_cases_students_model($start, $end)
    {
    
     $get_details = $this->mongo_db->select('doc_data.widget_data')->where('history.time', array('$gte'=>$start), 'history.time', array('$lte'=>$end))->where('doc_data.widget_data.page2.Review Info.Status','Expired')->get('healthcare2016531124515424_static_html');
     
     return $get_details;

    }

     public function panacea_deadth_cases_model($passing_date)
    {

    	$get_details = $this->mongo_db->select('doc_data.widget_data')->whereLike('history.time', $passing_date)->where('doc_data.widget_data.page2.Review Info.Status','Expired')->get('healthcare2016531124515424_static_html');

        return $get_details;
    }

    public function get_excel_deathcases_model($start_date, $end_date)
    {
    	$get_details = $this->mongo_db->select('doc_data.widget_data')->where('history.time', array('$gte'=>$start_date), 'history.time', array('$lte'=>$end_date))->where('doc_data.widget_data.page2.Review Info.Status','Expired')->get('healthcare2016531124515424_static_html');
     
     return $get_details;
    }

    public function panacea_rhso_hospital_reports_model($today_date)
    {    	
    	$date = substr($today_date,0,-3);
    	
        $query = $this->mongo_db->select(array('doc_data.widget_data','doc_attachments', 'history'))->where(array('history.last_stage.time' => array('$regex' => $date)))->get('field_officer_report');

        //echo print_r($query, true); exit;

    	return $query;
    }
    public function create_rhso_name_model($post)
{
	$this->load->config ( 'ion_auth', TRUE );
		
		$email = strtolower ( $post ['email'] );
		$password = $post ['password'];
		
		// Check if email already exists
		if ($this->user_exists ( $email )) {
			$this->set_error ( 'account_creation_duplicate_email' );
			return FALSE;
		}
		
		// IP address
		$ip_address = $this->_prepare_ip ( $this->input->ip_address () );
		$salt = $this->store_salt ? $this->salt () : FALSE;
		$password = $this->hash_password ( $password, $salt );

	if(isset($post) && !empty($post))
        {
            $data = array(
                
                'Rhso_name' => $post['rhso_name'],
                'Qualification' => $post['qualification'],
                'Specification' => $post['specification'],
                'Mobile_Number' => $post['mob_number'],
                'Email' => $post['email'],
                'Password' => $post['password'],
                'District' => strtoupper ($post['district']),
                'Created_on' => Date("Y-m-d H:i:s")
            );
        }
        $this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		$query = $this->mongo_db->insert ( 'panacea_mgmt_rhso_names', $data );
		$this->mongo_db->set(array('Rhso_Names' => true))->update('panacea_mgmt_rhso_names');
            
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );
		// Return new document _id or FALSE on failure
		return isset ( $query ) ? $query : FALSE;
	}

	public function panacea_mgmt_rhso_model($id = false)
	{
		$this->mongo_db->switchDatabase ( $this->common_db ['common_db'] );
		
		$get_details = $this->mongo_db->get('panacea_mgmt_rhso_names');

		return $get_details;
		$this->mongo_db->switchDatabase ( $this->common_db ['dsn'] );

	}

	/*Upgrade Classes*/
		public function migrate_student_personal_info($school_name) {

			$get_screening_academic_years = 'tswreis_screening_report_col_2020-2021';
			//$get_screening_passed_out_academic_years = $this->get_screening_passed_out_academic_years();
			$get_screening_passed_out_academic_years = 'screening_report_col_2020-2021_passed_out';

			$others_in_class = array("Others", "TC Issued", "", "lang absent", "Lang absent", "Death.", "8l9",  "2001", "DOUBLE ENTRY", "DOUBLE EMTRY", false, "2019 10th passed out", "A ", "other", "CIVILS", "vocational ", "vocational", "5.Long absent", "Extra", "Othert", "7     double", "7   double ", "7    double", "7   double", "10th  completed", "7    Double ", "7   Present  8th ", "7      double", "7     TC", "8@ EXTRA", "Others7", "2018 passed out", "i", "2nd time", "8Tcissued.", "8 long absent", "Degree 3rd TC", "`", "8 issued tc", "8went to fineart schl", "8 issuedtc", "went to fine arts school", "9 issuedtc", "9. issued tc", "9issued tc", "9 issued tc", "7     extra", "7  double", "7   extra", "8    double", "ADILABAD", "t", "DOUBLE", "1st VOCATIONAL", "5   TC", "7TC", "T C", "Finance officer", "Dy. Secretary (Acad·I)", "Dy. Secretary (Acad·II)", "D.E.E", "Deputy  Secretary", "S.O.DAR", "JL Telugu/Mana Tv Co-ord", "P.D/Sports Officer", "Asst. Secretary (Audit)", " Assistant Secretary", "Superintendent", "Sr.Asst", "JACT", "Rec.Asst", "Driver", "Office Subordinate", "System Administrator/DPO", "DPO", "DEO/Photographer", "DEO  ", "DPO/Peshi ", "Principal", "Librarian", "OSD-RDC", "Content Manager", "Chief Technicnology officer", "Chief Security  Officer", "Legal Advisor", "SVO", "CAMO", "A.O", "Consultant (Acad)", "Research Fellow", "Alumini coordinator", "Programmer", "DEO", "OS", "DRIVER", "Degree 2nd TC", "9  TC ISSUED", "Death", "12    TC", "12   TC", "2008", "TC TAKEN", "Dy. Secretary (Tech)", "extra id", "duplicate id",  "6       TC", "6     TC", "9 TC issued", "tccccc", "8    TC", "6    TC", "T.C.", "6TC", "9 TC", "9TC", "6 long absent", "Tc.Issued", "Double.Added.", "double adding", "NA", "tc issued", "others", "TC.issued.", "extra number", "extra ID", "FALSE", "A", "B", "TC ISSUED", "CGT", "c", "Double.added.", "Double entry", "11    TC", "11   long    Absent", "11   TC", "5 TC issued", "absent", "Long absent", "Tc ", "Tv", "T c", "5    Tc ", "Degree 1st TC", "5 repeated");

			$query = $this->mongo_db->select(array('doc_data.widget_data.page1', 'doc_data.widget_data.page2', 'doc_properties'))->where('doc_data.widget_data.page2.Personal Information.School Name', $school_name)->get($this->screening_app_col);

			$is_exists = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $school_name)->get($get_screening_academic_years);
			if($is_exists)
			{
				return true;
			}
			else
			{
				$time = date('Y-m-d H:i:s');
				$class_count = 1;
				/*$others_in_class = ["Others", "TC Issued", "", "lang absent", "Lang absent", "Death.", "8l9",  "2001", "DOUBLE ENTRY", "DOUBLE EMTRY", false, "2019 10th passed out", "A ", "other", "CIVILS", "vocational ", "vocational", "5.Long absent", "Extra", "Othert", "7     double", "7   double ", "7    double", "7   double", "10th  completed", "7    Double ", "7   Present  8th ", "7      double", "7     TC", "8@ EXTRA", "Others7", "2018 passed out", "i", "2nd time", "8Tcissued.", "8 long absent", "Degree 3rd TC", "`", "8 issued tc", "8went to fineart schl", "8 issuedtc", "went to fine arts school", "9 issuedtc", "9. issued tc", "9issued tc", "9 issued tc", "7     extra", "7  double", "7   extra", "8    double", "ADILABAD", "t", "DOUBLE", "1st VOCATIONAL", "5   TC", "7TC", "T C", "Finance officer", "Dy. Secretary (Acad·I)", "Dy. Secretary (Acad·II)", "D.E.E", "Deputy  Secretary", "S.O.DAR", "JL Telugu/Mana Tv Co-ord", "P.D/Sports Officer", "Asst. Secretary (Audit)", " Assistant Secretary", "Superintendent", "Sr.Asst", "JACT", "Rec.Asst", "Driver", "Office Subordinate", "System Administrator/DPO", "DPO", "DEO/Photographer", "DEO  ", "DPO/Peshi ", "Principal", "Librarian", "OSD-RDC", "Content Manager", "Chief Technicnology officer", "Chief Security  Officer", "Legal Advisor", "SVO", "CAMO", "A.O", "Consultant (Acad)", "Research Fellow", "Alumini coordinator", "Programmer", "DEO", "OS", "DRIVER", "Degree 2nd TC", "9  TC ISSUED", "Death", "12    TC", "12   TC", "2008", "TC TAKEN", "Dy. Secretary (Tech)", "extra id", "duplicate id",  "6       TC", "6     TC", "9 TC issued", "tccccc", "8    TC", "6    TC", "T.C.", "6TC", "9 TC", "9TC", "6 long absent", "Tc.Issued", "Double.Added.", "double adding", "NA", "tc issued", "others", "TC.issued.", "extra number", "extra ID", "FALSE", "A", "B", "TC ISSUED", "CGT", "c", "Double.added.", "Double entry", "11    TC", "11   long    Absent", "11   TC", "5 TC issued", "absent", "Long absent", "Tc ", "Tv", "T c", "5    Tc ", "Degree 1st TC", "5 repeated"];*/

				foreach($query as $school)
				{
					$document_id = get_unique_id();
					$prev_document_id = $school["doc_properties"]["doc_id"];
					$class = $school['doc_data']["widget_data"]["page2"]["Personal Information"]["Class"];
					if((intval($class) == 10)){
					   $class_passed_out = "2019-20"." 10th passed out";
				   }else if((intval($class) == 12)){
					   $class_passed_out = "2019-20"." 12th passed out";
				   } else if(($class == "Degree 3rd")){
					   $class_passed_out = "2019-20"." Degree 3rd passed out";
				   } else if(isset($class) && !empty($class) && ($class == "Degree 1st" || $class == "Degree 2nd")){
					   			if($class == "Degree 1st"){
					   				$class = "Degree 2st";
					   			}else if($class == "Degree 2nd"){
					   				$class = "Degree 3rd";
					   			}

					   }
				   else{
					   if(isset($class) && !empty($class) && ($class != "") && ($class != " ") && (intval($class) <= 11)){
						   $class++;
					   }
				   }
				  $class = (string) $class;
				 
					if($school["doc_data"]["widget_data"]["page2"]["Personal Information"]["Class"] != "10" && $school["doc_data"]["widget_data"]["page2"]["Personal Information"]["Class"] != "12" && $school["doc_data"]["widget_data"]["page2"]["Personal Information"]["Class"] != "Degree 3rd" && (!in_array($school["doc_data"]["widget_data"]["page2"]["Personal Information"]["Class"], $others_in_class)))
					{
						if(isset($school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Gender"]) && !empty($school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Gender"])){
							$gender = $school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Gender"];
						}else{
							$gender = "";
						}

						if(isset($school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Age"]) && !empty($school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Age"])){
							$age_no = $school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Age"];
							$age = $age++;
						}else{
							$age = "";
						}

						$doc_data = '{"doc_data" : { "widget_data" : { "page1" : { "Personal Information" : { "Hospital Unique ID" : "'.$school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Hospital Unique ID"].'", "Name" : "'.$school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Name"].'" , "Photo" : "", "Date of Birth" : "'.$school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Date of Birth"].'", "Mobile": {"country_code" : "91", "mob_num" : "'.$school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Mobile"]["mob_num"].'" },"Gender" : "'.$gender.'", "Age":"'.$age.'" } }, "page2" : { "Personal Information": {"AD No": "'.$school["doc_data"]["widget_data"]["page2"]["Personal Information"]["AD No"].'", "Class": "'.$class.'", "Section": "'.$school["doc_data"]["widget_data"]["page2"]["Personal Information"]["Section"].'", "District": "'.$school["doc_data"]["widget_data"]["page2"]["Personal Information"]["District"].'", "School Name": "'.$school["doc_data"]["widget_data"]["page2"]["Personal Information"]["School Name"].'", "Father Name": "'.$school["doc_data"]["widget_data"]["page2"]["Personal Information"]["Father Name"].'", "Date of Exam": "'.$school["doc_data"]["widget_data"]["page2"]["Personal Information"]["Date of Exam"].'" } }, "page3":[], "page4":[], "page5":[], "page6":[], "page7":[], "page8":[], "page9":[] }}, "doc_properties" : { "doc_id" : "'.$document_id.'", "previous_doc_id" : "'.$prev_document_id.'", "status" : 1, "_version" : 1, "doc_owner" : "PANACEA", "unique_id" : "", "doc_flow" : "new"}, "history" : {"last_stage" : { "current_stage" : "stage1", "approval" : "true", "submitted_by" : "panacea.user@gmail.com", "time" : "'.$time.'" } }}';
				
						$doc_data_array =json_decode($doc_data,true);
						if(isset($doc_data_array) && !empty($doc_data_array)){
							$this->mongo_db->insert ( $get_screening_academic_years, $doc_data_array );
						}
					}
					elseif($school["doc_data"]["widget_data"]["page2"]["Personal Information"]["Class"] == "10" || $school["doc_data"]["widget_data"]["page2"]["Personal Information"]["Class"] == "12" || $school["doc_data"]["widget_data"]["page2"]["Personal Information"]["Class"] == "Degree 3rd")
					{
						if(isset($school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Gender"]) && !empty($school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Gender"])){
							$gender = $school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Gender"];
						}else{
							$gender = "";
						}

						if(isset($school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Age"]) && !empty($school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Age"])){
							$age_no = $school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Age"];
							$age = $age++;
						}else{
							$age = "";
						}

						$doc_data_passed = '{"doc_data" : { "widget_data" : { "page1" : { "Personal Information" : { "Hospital Unique ID" : "'.$school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Hospital Unique ID"].'", "Name" : "'.$school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Name"].'" , "Photo" : "", "Date of Birth" : "'.$school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Date of Birth"].'","Mobile": {"country_code" : "91", "mob_num" : "'.$school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Mobile"]["mob_num"].'" },"Gender" : "'.$gender.'", "Age":"'.$age.'" } }, "page2" : { "Personal Information": {"AD No": "'.$school["doc_data"]["widget_data"]["page2"]["Personal Information"]["AD No"].'", "Class": "'.$class_passed_out.'", "Section": "'.$school["doc_data"]["widget_data"]["page2"]["Personal Information"]["Section"].'", "District": "'.$school["doc_data"]["widget_data"]["page2"]["Personal Information"]["District"].'", "School Name": "'.$school["doc_data"]["widget_data"]["page2"]["Personal Information"]["School Name"].'", "Father Name": "'.$school["doc_data"]["widget_data"]["page2"]["Personal Information"]["Father Name"].'", "Date of Exam": "'.$school["doc_data"]["widget_data"]["page2"]["Personal Information"]["Date of Exam"].'" } }, "page3":[], "page4":[], "page5":[], "page6":[], "page7":[], "page8":[], "page9":[] }}, "doc_properties" : { "doc_id" : "'.$document_id.'", "previous_doc_id" : "'.$prev_document_id.'", "status" : 1, "_version" : 1, "doc_owner" : "PANACEA", "unique_id" : "", "doc_flow" : "new"}, "history" : {"last_stage" : { "current_stage" : "stage1", "approval" : "true", "submitted_by" : "panacea.user@gmail.com", "time" : "'.$time.'" } }}';

						$doc_data_array_passed =json_decode($doc_data_passed,true);
						if(isset($doc_data_array_passed) && !empty($doc_data_array_passed)){
							$this->mongo_db->insert ( $get_screening_passed_out_academic_years, $doc_data_array_passed );
						}
						
					}elseif(in_array($school["doc_data"]["widget_data"]["page2"]["Personal Information"]["Class"], $others_in_class)){

						if(isset($school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Gender"]) && !empty($school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Gender"])){
							$gender = $school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Gender"];
						}else{
							$gender = "";
						}

						if(isset($school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Age"]) && !empty($school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Age"])){
							$age_no = $school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Age"];
							$age = $age++;
						}else{
							$age = "";
						}

						$doc_data_other_cls = '{"doc_data" : { "widget_data" : { "page1" : { "Personal Information" : { "Hospital Unique ID" : "'.$school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Hospital Unique ID"].'", "Name" : "'.$school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Name"].'" , "Photo" : "", "Date of Birth" : "'.$school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Date of Birth"].'", "Mobile": {"country_code" : "91", "mob_num" : "'.$school["doc_data"]["widget_data"]["page1"]["Personal Information"]["Mobile"]["mob_num"].'" },"Gender" : "'.$gender.'", "Age":"'.$age.'" } }, "page2" : { "Personal Information": {"AD No": "'.$school["doc_data"]["widget_data"]["page2"]["Personal Information"]["AD No"].'", "Class": "'.$school["doc_data"]["widget_data"]["page2"]["Personal Information"]["Class"].'","Section": "'.$school["doc_data"]["widget_data"]["page2"]["Personal Information"]["Section"].'", "District": "'.$school["doc_data"]["widget_data"]["page2"]["Personal Information"]["District"].'", "School Name": "'.$school["doc_data"]["widget_data"]["page2"]["Personal Information"]["School Name"].'", "Father Name": "'.$school["doc_data"]["widget_data"]["page2"]["Personal Information"]["Father Name"].'", "Date of Exam": "'.$school["doc_data"]["widget_data"]["page2"]["Personal Information"]["Date of Exam"].'" } }, "page3":[], "page4":[], "page5":[], "page6":[], "page7":[], "page8":[], "page9":[] }}, "doc_properties" : { "doc_id" : "'.$document_id.'", "previous_doc_id" : "'.$prev_document_id.'", "status" : 1, "_version" : 1, "doc_owner" : "PANACEA", "unique_id" : "", "doc_flow" : "new"}, "history" : {"last_stage" : { "current_stage" : "stage1", "approval" : "true", "submitted_by" : "panacea.user@gmail.com", "time" : "'.$time.'" } }}';

						$doc_data_array_others =json_decode($doc_data_other_cls,true);

						if(isset($doc_data_array_others) && !empty($doc_data_array_others)){
							$this->mongo_db->insert ( "other_classes_screening_data_2019-2020", $doc_data_array_others );
						}
						
						
					}
						// Updating School Status if all documents are successfully migrated from previous academic year data to current  academic year 
						// $query ==> previous year data
						// $is_exists ==> current year data
					/*	echo '<pre>';
						echo print_r(count($query),true)."<br>";
						echo print_r($class_count++,true)."<br>";
						echo '</pre>';*/
						$iterate_data = $class_count++;
						if(count($query) == $iterate_data)
						{
							$year_1 = Date('Y');
	        				$year_2 = $year_1 + 1;
	        				$academic_years = $year_1.'-'.$year_2;

							$school_status = array(
								"school_name" => $school_name,
								"District_name"	=> $school["doc_data"]["widget_data"]["page2"]["Personal Information"]["District"],
								"migration_status" => "success",
								"migrated_date"    => date('Y-m-d')
							);
							$qry = $this->mongo_db->insert ( "panacea_screening_report_migration_status_".$academic_years, $school_status );
						}
				}
			}
		}

	/*End Upgrade classes*/

	/*Classes Updation acknowledgement*/
		public function get_classes_update_students_count_both_yrs()
		{
			$final_data = [];
			$get_transefered_scls = $this->mongo_db->command(array('distinct'=>'tswreis_screening_report_col_2020-2021', 'key'=>'doc_data.widget_data.page2.Personal Information.School Name'));
			$schools = $get_transefered_scls['values'];

			foreach ($schools as $key => $value) {
				$prev_col = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $value)->count($this->screening_app_col);

				$current_col = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=> $value, 'doc_properties.previous_doc_id'=>array('$exists'=> true)))->count('tswreis_screening_report_col_2020-2021');

				$passed_out_col = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $value)->count('screening_report_col_2020-2021_passed_out');

				$other_cls = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $value)->count('other_classes_screening_data_2019-2020');

				$newly_joined = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name'=> $value, 'doc_properties.previous_doc_id'=>array('$exists'=> false)))->count('tswreis_screening_report_col_2020-2021');

				if(isset($current_col) && !empty($current_col)){
					$data['school'] = $value;
					$data['prev_yr_count'] = $prev_col;
					$data['current_yr_count'] = $current_col;
					$data['passed_out_count'] = $passed_out_col;
					$data['other_cls_count'] = $other_cls;
					$data['newly_joined_count'] = $newly_joined;

					if(isset($data['school']) && !empty($data['school'])){
						array_push($final_data, $data);
					}
				}
				

			}
		
			return $final_data;
		}
	/*End Classes Updation acknowledgement*/

	/*
		Rhso submitted hopistal data showing in admin dashboard
	 */

	public function get_email_with_dist_name($dist)
	{
		if(!empty($dist))
		{
			$this->mongo_db->switchDatabase($this->common_db['common_db']);

			$query = $this->mongo_db->select(array("email"))->where("dt_name", $dist)->get("rhso_users");

			$this->mongo_db->switchDatabase($this->common_db['dsn']);

			if(!empty($query))
			{
				$email = $query[0]['email'];
			
				return $email;
			}else{
				
				return "Email ID Not Found";
			}
			
		}
		else
		{
			return "District Name Not Available";
		}
	}
	public function get_rhso_hospital_foolowup_data_with_span($start_date, $end_date, $district)
	{
		if(!empty($start_date) && !empty($end_date))
		{
			if($district == "All")
			{
				$emergency_query = $this->mongo_db->where(array("history.last_stage.submitted_by" => array('$regex' => "rhso"), "doc_data.widget_data.type_of_request" => "Emergency or Admitted"))->whereBetween("history.last_stage.time", $start_date, $end_date)->count("field_officer_report");

				$out_query = $this->mongo_db->where(array("history.last_stage.submitted_by" => array('$regex' => "rhso"), "doc_data.widget_data.type_of_request" => "Out Patients"))->whereBetween("history.last_stage.time", $start_date, $end_date)->count("field_officer_report");

				$review_query = $this->mongo_db->where(array("history.last_stage.submitted_by" => array('$regex' => "rhso"), "doc_data.widget_data.type_of_request" => "Review Cases"))->whereBetween("history.last_stage.time", $start_date, $end_date)->count("field_officer_report");

				$data['Emergency_or_Admitted'] = $emergency_query;
				$data['Out_Patients'] = $out_query;
				$data['Review_Cases'] = $review_query;
				return $data;
			}
			else
			{
				$emergency_query = $this->mongo_db->where(array("doc_data.widget_data.type_of_request" => "Emergency or Admitted"))->whereBetween("history.last_stage.time", $start_date, $end_date)->whereLike("history.last_stage.submitted_by", $district)->count("field_officer_report");

				$out_query = $this->mongo_db->where(array("doc_data.widget_data.type_of_request" => "Out Patients"))->whereBetween("history.last_stage.time", $start_date, $end_date)->whereLike("history.last_stage.submitted_by", $district)->count("field_officer_report");

				$review_query = $this->mongo_db->where(array("doc_data.widget_data.type_of_request" => "Review Cases"))->whereBetween("history.last_stage.time", $start_date, $end_date)->whereLike("history.last_stage.submitted_by", $district)->count("field_officer_report");

				$data['Emergency_or_Admitted'] = $emergency_query;
				$data['Out_Patients'] = $out_query;
				$data['Review_Cases'] = $review_query;
				return $data;
			}
			
		}	
		else
		{
			return "You have given empty dates";
		}
	}

	/* Get RHSO Sanitation Data*/

	public function get_rhso_sanitation_data_with_span($start_date, $end_date, $district)
	{
		if(!empty($start_date) && !empty($end_date))
		{
			if($district == "All")
			{
				$data['red'] = $this->mongo_db->where('history.status', "Red")->whereBetween('Date', $start_date, $end_date)->count('tswreis_rhso_sanitation_data');
				$data['orange'] = $this->mongo_db->where('history.status', "Orange")->whereBetween('Date', $start_date, $end_date)->count('tswreis_rhso_sanitation_data');
				$data['green'] = $this->mongo_db->where('history.status', "Green")->whereBetween('Date', $start_date, $end_date)->count('tswreis_rhso_sanitation_data');
				$data['empty'] = $this->mongo_db->where('history.status', "")->whereBetween('Date', $start_date, $end_date)->count('tswreis_rhso_sanitation_data');

				return $data;
			}
			else
			{
				$data['red'] = $this->mongo_db->where(array('District'=> $district, 'history.status'=> "Red"))->whereBetween('Date', $start_date, $end_date)->count('tswreis_rhso_sanitation_data');
				$data['orange'] = $this->mongo_db->where(array('District'=> $district, 'history.status'=> "Orange"))->whereBetween('Date', $start_date, $end_date)->count('tswreis_rhso_sanitation_data');
				$data['green'] = $this->mongo_db->where(array('District'=> $district, 'history.status'=> "Green"))->whereBetween('Date', $start_date, $end_date)->count('tswreis_rhso_sanitation_data');
				$data['empty'] = $this->mongo_db->where(array('District'=> $district, 'history.status'=> ""))->whereBetween('Date', $start_date, $end_date)->count('tswreis_rhso_sanitation_data');

				return $data;
			}
		}
		else
		{
			return "You have given empty dates";
		}
	}

	/*
		end
	*/

	public function get_rhso_data_based_on_selected($start_date,$end_date,$district, $select_type, $from)
	{
		if(isset($from) && $from == "school_visit")
		{
			if($district == "All"){
				$query = $this->mongo_db->where('history.status', $select_type)->whereBetween('Date', $start_date, $end_date)->get('tswreis_rhso_sanitation_data');
			}else{
				$query = $this->mongo_db->where(array('District'=> $district, 'history.status'=> $select_type))->whereBetween('Date', $start_date, $end_date)->get('tswreis_rhso_sanitation_data');
			}
		}
		else
		{
			if($district == "All"){

				$query = $this->mongo_db->where(array("history.last_stage.submitted_by" => array('$regex' => "rhso"), "doc_data.widget_data.type_of_request" => $select_type))->whereBetween("history.last_stage.time", $start_date, $end_date)->get("field_officer_report");
			}else{
				$query = $this->mongo_db->where(array("doc_data.widget_data.type_of_request" => $select_type))->whereBetween("history.last_stage.time", $start_date, $end_date)->whereLike("history.last_stage.submitted_by", $district)->get("field_officer_report");
			}
		}

		return $query;
	}	
	


	public function get_students_data_genderwise($district_name, $school_name)
    {
    	if($district_name == 'All' && $school_name =='All')
		{	
			//Total schools		
			$this->mongo_db->switchDatabase($this->common_db['common_db']);
			$data['total_schools'] = $this->mongo_db->count('panacea_schools_bkp_copy');

			//Female Schools
			$data['female_schools'] = $this->mongo_db->where(array('school_name'=> array('$regex' => '(G).,', '$options' => 'i')))->count('panacea_schools_bkp_copy');

			//Male Schools
			$data['male_schools'] = $this->mongo_db->where(array('school_name'=> array('$regex' => '(B).,', '$options' => 'i')))->count('panacea_schools_bkp_copy');

			$data['degree_col'] = $this->mongo_db->where(array('school_name'=> array('$regex' => 'TSWRDCW ', '$options' => 'i')))->count('panacea_schools_bkp_copy');

			$this->mongo_db->switchDatabase($this->common_db['dsn']);

			//Coeducation Schools
			$data['coedu_schools'] = "1";

			// For the Total Students
			$data['total_students'] = $this->mongo_db->count($this->screening_app_col_sw_2020_2021);

			//For Total Male Students
			$data['total_male_students'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name' => array('$regex' => '(B).,', '$options' => 'i')))->count($this->screening_app_col_sw_2020_2021);

			//For Total Female Students
			$data['total_female_students'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name' => array('$regex' => '(G).,', '$options' => 'i')))->count($this->screening_app_col_sw_2020_2021);

    	}elseif($district_name != 'All' && $school_name =='All')
    	{
    		//Total schools		
    		$this->mongo_db->switchDatabase($this->common_db['common_db']);
    		$data['total_schools'] = $this->mongo_db->where('dt_name', $district_name)->count('panacea_schools_bkp_copy');

    		//Female Schools
    		$data['female_schools'] = $this->mongo_db->where(array('dt_name'=> $district_name, 'school_name'=> array('$regex' => '(G).,', '$options' => 'i')))->count('panacea_schools_bkp_copy');

    		//Male Schools
    		$data['male_schools'] = $this->mongo_db->where(array('dt_name'=> $district_name, 'school_name'=> array('$regex' => '(B).,', '$options' => 'i')))->count('panacea_schools_bkp_copy');

    		//Degree Schools
    		$data['degree_col'] = $this->mongo_db->where(array('dt_name'=> $district_name, 'school_name'=> array('$regex' => 'TSWRDCW ', '$options' => 'i')))->count('panacea_schools_bkp_copy');


    		$this->mongo_db->switchDatabase($this->common_db['dsn']);

    		

    		$district = $this->mongo_db->select(array('dt_name'))->where ( '_id', new MongoId ( $district_name ) )->get ( 'panacea_district' );

    		// For the Total Students
    		$data['total_students'] = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.District', $district[0]['dt_name'])->count($this->screening_app_col_sw_2020_2021);

    		//For Total Male Students
    		$data['total_male_students'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=> $district[0]['dt_name'], 'doc_data.widget_data.page2.Personal Information.School Name' => array('$regex' => '(B).,', '$options' => 'i')))->count($this->screening_app_col_sw_2020_2021);

    		//For Total Female Students
    		$data['total_female_students'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.District'=> $district[0]['dt_name'], 'doc_data.widget_data.page2.Personal Information.School Name' => array('$regex' => '(G).,', '$options' => 'i')))->count($this->screening_app_col_sw_2020_2021);

    	}elseif($district_name != 'All' && $school_name !='All')
    	{
    		
    		// For the Total Students
    		$data['total_students'] = $this->mongo_db->where('doc_data.widget_data.page2.Personal Information.School Name', $school_name)->count($this->screening_app_col_sw_2020_2021);

    		

    		if(preg_match("/(G).,/i", $school_name))
    		{
    			//For Total Female Students
    			$data['total_female_students'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name' => $school_name))->count($this->screening_app_col_sw_2020_2021);
    			$data['total_male_students'] = 0;
    		}
    		else
    		{
    			//For Total Male Students
    			$data['total_male_students'] = $this->mongo_db->where(array('doc_data.widget_data.page2.Personal Information.School Name' => $school_name))->count($this->screening_app_col_sw_2020_2021);

    			$data['total_female_students'] =0;
    		}

    		
    	}

    	return $data;
    }

/* Get Classes wise Male and Female Students */

	public function	get_classes_wise_male_female_data($district_name, $school_name)
	{
		
		$school_class = [];

		if($district_name == "All" && $school_name == "All")
		{
			$classes = $this->mongo_db->command(array('distinct' => $this->screening_app_col_sw_2020_2021, 'key' => "doc_data.widget_data.page2.Personal Information.Class"));

		 	foreach ($classes['values'] as $value) {

				$females_count = $this->mongo_db->command(array('distinct' => $this->screening_app_col_sw_2020_2021 ,'key' => "doc_data.widget_data.page1.Personal Information.Hospital Unique ID",'query'=>array('doc_data.widget_data.page2.Personal Information.Class'=>$value, 'doc_data.widget_data.page2.Personal Information.School Name' => array('$regex' => '(G).,', '$options' => 'i'))));
		    	$males_count = $this->mongo_db->command(array('distinct' => $this->screening_app_col_sw_2020_2021 ,'key' => "doc_data.widget_data.page1.Personal Information.Hospital Unique ID",'query'=>array('doc_data.widget_data.page2.Personal Information.Class'=>$value, 'doc_data.widget_data.page2.Personal Information.School Name' => array('$regex' => '(B).,', '$options' => 'i'))));

		    	$gender['female'] = count($females_count['values']);
		    	$gender['male'] = count($males_count['values']);
		    	$gender['total_students'] = count($males_count['values']) + count($females_count['values']);

				$data['class'] =  $value." Class";
				$data['count'] =  $gender;

				array_push($school_class, $data);

			}
		}
		elseif ($district_name != "All" && $school_name == "All") {

			$district = $this->mongo_db->select(array('dt_name'))->where ( '_id', new MongoId ( $district_name ) )->get ( 'panacea_district' );

			
			$classes = $this->mongo_db->command(array('distinct' => $this->screening_app_col_sw_2020_2021, 'key' => "doc_data.widget_data.page2.Personal Information.Class", 'query'=>array('doc_data.widget_data.page2.Personal Information.District' => $district[0]['dt_name'])));

			foreach ($classes['values'] as $value) {

				$females_count = $this->mongo_db->command(array('distinct' => $this->screening_app_col_sw_2020_2021 ,'key' => "doc_data.widget_data.page1.Personal Information.Hospital Unique ID",'query'=>array('doc_data.widget_data.page2.Personal Information.Class'=>$value, 'doc_data.widget_data.page2.Personal Information.District' => $district[0]['dt_name'], 'doc_data.widget_data.page2.Personal Information.School Name' => array('$regex' => '(G).,', '$options' => 'i'))));
		    	$males_count = $this->mongo_db->command(array('distinct' => $this->screening_app_col_sw_2020_2021 ,'key' => "doc_data.widget_data.page1.Personal Information.Hospital Unique ID",'query'=>array('doc_data.widget_data.page2.Personal Information.Class'=>$value, 'doc_data.widget_data.page2.Personal Information.District' => $district[0]['dt_name'], 'doc_data.widget_data.page2.Personal Information.School Name' => array('$regex' => '(B).,', '$options' => 'i'))));

		    	$gender['female'] = count($females_count['values']);
		    	$gender['male'] = count($males_count['values']);
		    	$gender['total_students'] = count($males_count['values']) + count($females_count['values']);

				$data['class'] =  $value." Class";
				$data['count'] =  $gender;

				array_push($school_class, $data);

			}
		}
		elseif ($district_name != "All" && $school_name != "All") {
			$classes = $this->mongo_db->command(array('distinct' => $this->screening_app_col_sw_2020_2021, 'key' => "doc_data.widget_data.page2.Personal Information.Class", 'query'=>array('doc_data.widget_data.page2.Personal Information.School Name' => $school_name)));

			foreach ($classes['values'] as $value) {

				$counts = $this->mongo_db->command(array('distinct' => $this->screening_app_col_sw_2020_2021 ,'key' => "doc_data.widget_data.page1.Personal Information.Hospital Unique ID",'query'=>array('doc_data.widget_data.page2.Personal Information.Class'=>$value, 'doc_data.widget_data.page2.Personal Information.School Name' => $school_name)));
		    	//$males_count = $this->mongo_db->command(array('distinct' => $this->screening_app_col_sw_2020_2021 ,'key' => "doc_data.widget_data.page1.Personal Information.Hospital Unique ID",'query'=>array('doc_data.widget_data.page2.Personal Information.Class'=>$value, 'doc_data.widget_data.page2.Personal Information.School Name' => $school_name)));

		    	if(preg_match("/(G).,/i", $school_name))
		    	{
    		    	$gender['female'] = count($counts['values']);
    		    	$gender['male'] = 0;
    		    	$gender['total_students'] = $gender['female'] + $gender['male'];

    				$data['class'] =  $value." Class";
    				$data['count'] =  $gender;
		    	}
		    	else
		    	{
			    	$gender['female'] = 0;
			    	$gender['male'] = count($counts['values']);
			    	$gender['total_students'] = $gender['female'] + $gender['male'];

					$data['class'] =  $value." Class";
					$data['count'] =  $gender;
		    	}

				array_push($school_class, $data);

			}
		}

		return $school_class;
	}

	/*Maximum raised requests counts*/
	
	function maximum_raised_requests_script_model($start_date, $end_date, $request_count) 
    {
        $unique_id_array = array();
        $array_morethan_three = array();
        $result_data = array();
        $date = new DateTime ( $start_date );
        $start_date = $date->format ( 'Y-m-d' );
        $date_end = new DateTime ( $end_date );
        $end_date = $date_end->format ( 'Y-m-d' );

      
        $dates ['start_date'] = $start_date;
        $dates ['end_date'] = $end_date;

     
     $last_three_months = $this->mongo_db->select('doc_data.widget_data.page1.Student Info.Unique ID')->whereBetween('history.0.time', $dates ['start_date'], $dates ['end_date'] )->get($this->request_app_col_static_html);
       
        

        foreach ($last_three_months as $data) {
            $unique_id = $data['doc_data']['widget_data']['page1']['Student Info']['Unique ID'];

            array_push($unique_id_array, $unique_id);

        }


        $vals = array_count_values(array_filter($unique_id_array));

            
            foreach ($vals as $key => $value) {
            if($value >= $request_count)
            {
                $morethan_three_ids = $key;


                array_push( $array_morethan_three, $morethan_three_ids);

            }

            }

            foreach ($array_morethan_three as $unique_id) {
                
           
                $query = $this->mongo_db->select(array('doc_data.widget_data'))->where('doc_data.widget_data.page1.Student Info.Unique ID', $unique_id)->get($this->request_app_col_static_html);

                array_push($result_data, $query[0]);
            }
            
            return $result_data;

    }

    public function import_tswreis_sports_students($doc_data, $history)
    {
    		$form_data = array ();
    		
			$form_data ['doc_data'] = $doc_data;
			
			$form_data ['history'] = $history;			
			
			$query = $this->mongo_db->insert ( "tswreis_sports_students_data", $form_data );

			return $query;
    }

    public function get_achievements_participation_wise()
    {
    	$returnData = [];

    	$query['international'] = $this->mongo_db->select(array('doc_data'))->where(array("doc_data.level of participation" => "International" ))->count("tswreis_sports_students_data");

    	$data['name'] = "International";
    	$data['y'] = $query['international'];
    	array_push($returnData, $data);

    	$query['national'] = $this->mongo_db->select(array('doc_data'))->where(array("doc_data.level of participation" => "National"))->count("tswreis_sports_students_data");

    	$data['name'] = "National";
    	$data['y'] = $query['national'];
    	array_push($returnData, $data);

    	$query['state'] = $this->mongo_db->select(array('doc_data'))->where(array("doc_data.level of participation" => "State"))->count("tswreis_sports_students_data");

    	$data['name'] = "State";
    	$data['y'] = $query['state'];
    	array_push($returnData, $data);
    	

    	return $returnData;
    }

    public function get_registered_students_data()
    {
    	$sports = [];
    	$datasss = [];
    	$query = $this->mongo_db->select(array('doc_data.event'))->get("tswreis_sports_students_data");


    	foreach ($query as $data) {
    		$event = $data['doc_data']['event'];

    		array_push($sports, $event);	
    	}

    	$returns = array_count_values($sports);

    	
    	foreach ($returns as $key => $value) {

    		$datas['name'] = $key;
    		$datas['y'] = $value;
    		$datas['drilldown'] = $key;

    		array_push($datasss, $datas);
    	}

    	
    	return $datasss;

    }


/*Total Year wise Achievements data*/
/*Author : Yoga narasimha*/

public function get_yearwise_achievements_pie_model($academic_year)

{

	$query['International']  = $this->mongo_db->where(array('doc_data.level of participation' => 'International' ,
			"doc_data.year of participation" => $academic_year))->count('tswreis_sports_students_data');

	$query['National']  = $this->mongo_db->where(array('doc_data.level of participation' => 'National' ,
			"doc_data.year of participation" => $academic_year))->count('tswreis_sports_students_data');

	$query['State']  = $this->mongo_db->where(array('doc_data.level of participation' => 'State' ,
			"doc_data.year of participation" => $academic_year))->count('tswreis_sports_students_data');

	return$query;

}


public function total_achievements_pie_with_filters_model($req_type, $medal, $academic)
{


	$subtype = [];
	$problems = [];

	if($medal == 'All' ){
		switch ($req_type) {
			case 'International':
				$inter = $this->mongo_db->where('doc_data.level of participation','International')->where('doc_data.year of participation', $academic)->get('tswreis_sports_students_data');

				foreach ($inter as $int) {		
					$data1 = $int['doc_data']['event'];	
					array_push($subtype, $data1);
				}

				$final = array_count_values($subtype);				

				foreach ($final as $key => $value) {
					$out['label'] = $key;
					$out['value'] = $value;
					array_push($problems, $out);
				}

				return $problems;

				break;

			case 'National':
				$nati = $this->mongo_db->where('doc_data.level of participation','National')->where('doc_data.year of participation', $academic)->get('tswreis_sports_students_data');

				foreach ($nati as $nat) {		
					$data1 = $nat['doc_data']['event'];
					array_push($subtype, $data1);					
					
				}

				$final = array_count_values($subtype);	

				foreach ($final as $key => $value) {
					$out['label'] = $key;
					$out['value'] = $value;
					array_push($problems, $out);
				}

				return $problems;
				break;

			case 'State':
				$state = $this->mongo_db->where('doc_data.level of participation','State')->where('doc_data.year of participation', $academic)->get('tswreis_sports_students_data');

				foreach ($state as $sta) {		
					$data1 = $sta['doc_data']['event'];
					array_push($subtype, $data1);
					
				}

				$final = array_count_values($subtype);

				foreach ($final as $key => $value) {
					$out['label'] = $key;
					$out['value'] = $value;
					array_push($problems, $out);
				}

				return $problems;

				break;					
			
			default:
				# code...
				break;
		}

		
}elseif($medal != 'All' ){
switch ($req_type) {
			case 'International':
				$inter = $this->mongo_db->where(array('doc_data.level of participation' => 'International' ,'doc_data.medal' => $medal ))->where('doc_data.year of participation', $academic)->get('tswreis_sports_students_data');

				foreach ($inter as $int) {		
					$data1 = $int['doc_data']['event'];	
					array_push($subtype, $data1);
					
				}

				$final = array_count_values($subtype);				

				foreach ($final as $key => $value) {
					$out['label'] = $key;
					$out['value'] = $value;
					array_push($problems, $out);
				}

				return $problems;

				break;

			case 'National':
				$nati = $this->mongo_db->where(array('doc_data.level of participation' => 'National','doc_data.medal' => $medal ))->where('doc_data.year of participation', $academic)->get('tswreis_sports_students_data');

				foreach ($nati as $nat) {		
					$data1 = $nat['doc_data']['event'];
					array_push($subtype, $data1);
				}

				$final = array_count_values($subtype);	

				foreach ($final as $key => $value) {
					$out['label'] = $key;
					$out['value'] = $value;
					array_push($problems, $out);
				}

				return $problems;
				break;

			case 'State':
				$state = $this->mongo_db->where(array('doc_data.level of participation' =>'State' ,'doc_data.medal' => $medal ))->where('doc_data.year of participation', $academic)->get('tswreis_sports_students_data');

				foreach ($state as $sta) {		
					$data1 = $sta['doc_data']['event'];
					array_push($subtype, $data1);
					}

				$final = array_count_values($subtype);

				foreach ($final as $key => $value) {
					$out['label'] = $key;
					$out['value'] = $value;
					array_push($problems, $out);
				}

				return $problems;

				break;					
			
			default:
				# code...
				break;
		}
}


}


	public function get_sport_type_data_clicking_modal($event_name)
    {

    	$data = $this->mongo_db->where('doc_data.event' , $event_name)->get('tswreis_sports_students_data');

    	return $data;

    }




   public function get_sports_data_based_on_span_modal($select_level,$select_medal)

   {

   			if($select_level == 'All' && $select_medal == 'All'){

				$data = $this->mongo_db->get('tswreis_sports_students_data');
			

			}elseif($select_medal == "All" && $select_level != "All"){


				$data = $this->mongo_db->where('doc_data.level of participation', $select_level)->get('tswreis_sports_students_data');			
			

			}elseif($select_medal != "All" && $select_level == "All"){


				$data = $this->mongo_db->where('doc_data.medal', $select_medal)->get('tswreis_sports_students_data');			
			

			}elseif($select_level != "All" && $select_medal != "All"){

				$data = $this->mongo_db->where(array('doc_data.medal' => $select_medal, "doc_data.level of participation" => $select_level))->get('tswreis_sports_students_data');

			}

				return $data; 

	}


	public function get_achievements_wise_data($medal_type, $achievement_type)
    {
    	$data = $this->mongo_db->select(array('doc_data'))->where(array('doc_data.medal' => $medal_type, 'doc_data.level of participation' => $achievement_type))->get('tswreis_sports_students_data');
    	return $data;

    }

    public function drilldown_selected_to_medals($data)
    {
    	$returnData = [];
    	$counts = [];
    	$final_array = [];
    	
    	if($data == "International"){

    		$query = $this->mongo_db->select(array('doc_data.medal'))->where('doc_data.level of participation', $data)->get("tswreis_sports_students_data");

    		
    		foreach ($query as $data) {

    			array_push($counts, $data['doc_data']['medal']);
    		}

    		$medals = array_count_values($counts);

    		foreach ($medals as $key=>$value) {
    			
    			$datas['name'] = $key;
    			$datas['y'] = $value;

    			array_push($final_array, $datas);
    		}
    		
    		return $final_array;


    	}elseif ($data == "National") {
    		
    		$query = $this->mongo_db->select(array('doc_data.medal'))->where('doc_data.level of participation', $data)->get("tswreis_sports_students_data");

    		foreach ($query as $data) {

    			array_push($counts, $data['doc_data']['medal']);
    		}

    		$medals = array_count_values($counts);

    		foreach ($medals as $key=>$value) {
    			
    			$datas['name'] = $key;
    			$datas['y'] = $value;

    			array_push($final_array, $datas);
    		}
    		
    		return $final_array;


    	}elseif ($data == "State") {

    		$query = $this->mongo_db->select(array('doc_data.medal'))->where('doc_data.level of participation', $data)->get("tswreis_sports_students_data");

    		foreach ($query as $data) {

    			array_push($counts, $data['doc_data']['medal']);
    		}

    		$medals = array_count_values($counts);

    		foreach ($medals as $key=>$value) {
    			
    			$datas['name'] = $key;
    			$datas['y'] = $value;

    			array_push($final_array, $datas);
    		}
    		
    		return $final_array;
    		

    	}

    	return $returnData;
    }



    //**********************************************************************************//

}
